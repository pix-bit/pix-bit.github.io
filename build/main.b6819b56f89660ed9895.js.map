{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/three/build/three.module.js","webpack:///./src/entry.js","webpack:///./node_modules/three-addons/build/three-addons.min.js","webpack:///./src/objects/Scene.js","webpack:///./src/objects/Lights.js","webpack:///./src/objects/Car.js","webpack:///./src/objects/Earth.js","webpack:///./src/objects/Garage.js","webpack:///./src/objects/Lightbulb.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","EventDispatcher","__webpack_exports__","LensFlare","undefined","Number","EPSILON","Math","pow","isInteger","isFinite","floor","sign","x","Function","this","toString","match","assign","target","TypeError","output","index","arguments","length","source","nextKey","addEventListener","type","listener","_listeners","listeners","indexOf","push","hasEventListener","removeEventListener","listenerArray","splice","dispatchEvent","event","array","slice","REVISION","MOUSE","LEFT","MIDDLE","RIGHT","CullFaceNone","CullFaceBack","CullFaceFront","CullFaceFrontBack","FrontFaceDirectionCW","FrontFaceDirectionCCW","BasicShadowMap","PCFShadowMap","PCFSoftShadowMap","FrontSide","BackSide","DoubleSide","FlatShading","SmoothShading","NoColors","FaceColors","VertexColors","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedInt248Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","LoopOnce","LoopRepeat","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroCurvatureEnding","ZeroSlopeEnding","WrapAroundEnding","TrianglesDrawMode","TriangleStripDrawMode","TriangleFanDrawMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","_Math","DEG2RAD","PI","RAD2DEG","generateUUID","lut","toUpperCase","d0","random","d1","d2","d3","clamp","min","max","euclideanModulo","mapLinear","a1","a2","b1","b2","lerp","y","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","ceil","log","LN2","floorPowerOfTwo","Vector2","Matrix4","elements","console","error","Quaternion","z","w","_x","_y","_z","_w","Vector3","Matrix3","defineProperties","width","set","height","isVector2","setScalar","scalar","setX","setY","setComponent","Error","getComponent","clone","constructor","copy","v","add","warn","addVectors","addScalar","a","b","addScaledVector","sub","subVectors","subScalar","multiply","multiplyScalar","divide","divideScalar","applyMatrix3","e","clampScalar","minVal","maxVal","clampLength","round","roundToZero","negate","dot","lengthSq","sqrt","manhattanLength","abs","normalize","angle","atan2","distanceTo","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","alpha","lerpVectors","v1","v2","equals","fromArray","offset","toArray","fromBufferAttribute","attribute","getX","getY","rotateAround","center","cos","sin","isMatrix4","n11","n12","n13","n14","n21","n22","n23","n24","n31","n32","n33","n34","n41","n42","n43","n44","te","identity","me","copyPosition","extractBasis","xAxis","yAxis","zAxis","setFromMatrixColumn","makeBasis","extractRotation","scaleX","scaleY","scaleZ","makeRotationFromEuler","euler","isEuler","f","order","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","q","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","lookAt","eye","up","crossVectors","multiplyMatrices","premultiply","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","applyToBufferAttribute","count","getZ","applyMatrix4","setXYZ","determinant","transpose","tmp","setPosition","getInverse","throwOnDegenerate","t11","t12","t13","t14","det","msg","detInv","scale","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","theta","makeRotationY","makeRotationZ","makeRotationAxis","axis","tx","ty","makeScale","makeShear","compose","position","quaternion","decompose","vector","matrix","sx","sy","sz","invSX","invSY","invSZ","setFromRotationMatrix","makePerspective","left","right","top","bottom","near","far","makeOrthographic","h","slerp","qa","qb","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","len","tDir","onChangeCallback","setFromEuler","update","c1","c2","c3","s1","s2","s3","setFromAxisAngle","halfAngle","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","setFromUnitVectors","vFrom","vTo","inverse","conjugate","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","onChange","callback","isVector3","setZ","multiplyVectors","applyEuler","applyQuaternion","applyAxisAngle","qx","qy","qz","qw","ix","iy","iz","iw","project","camera","projectionMatrix","matrixWorld","unproject","transformDirection","cross","ax","ay","az","bx","by","bz","projectOnVector","projectOnPlane","planeNormal","reflect","normal","angleTo","acos","dz","setFromSpherical","sinPhiRadius","phi","radius","setFromCylindrical","setFromMatrixPosition","setFromMatrixScale","isMatrix3","setFromMatrix4","g","getNormalMatrix","matrix4","transposeIntoArray","setUvTransform","rotation","cx","cy","rotate","translate","textureId","Texture","image","mapping","wrapS","wrapT","magFilter","minFilter","format","anisotropy","encoding","uuid","DEFAULT_IMAGE","mipmaps","DEFAULT_MAPPING","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","version","onUpdate","Vector4","WebGLRenderTarget","options","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","WebGLRenderTargetCube","activeCubeFace","activeMipMapLevel","DataTexture","data","Box3","Infinity","Sphere","Plane","constant","Frustum","p0","p1","p2","p3","p4","p5","planes","isTexture","toJSON","meta","isRootObject","textures","metadata","generator","wrap","images","url","canvas","HTMLCanvasElement","document","createElementNS","context","getContext","ImageData","putImageData","drawImage","toDataURL","getDataURL","dispose","transformUv","uv","isVector4","setW","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","getW","isWebGLRenderTarget","setSize","isWebGLRenderTargetCube","isDataTexture","isBox3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","setFromPoints","points","makeEmpty","il","expandByPoint","setFromCenterAndSize","size","halfSize","setFromObject","expandByObject","box","isEmpty","getCenter","getSize","point","expandByVector","expandByScalar","scope","traverse","node","geometry","isGeometry","vertices","isBufferGeometry","attributes","updateMatrixWorld","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","closestPoint","sphere","clampPoint","intersectsPlane","plane","intersectsTriangle","v0","f0","f1","f2","testAxis","extents","triangleNormal","satForAxes","axes","j","triangle","distanceToPoint","getBoundingSphere","intersect","union","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","line","direction","delta","denominator","start","intersectsLine","startSign","endSign","end","coplanarPoint","m1","optionalNormalMatrix","normalMatrix","referencePoint","frustum","setFromMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsObject","boundingSphere","computeBoundingSphere","intersectsSprite","sprite","negRadius","ShaderChunk","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","lights_pars_maps","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","UniformsUtils","merge","uniforms","merged","u","uniforms_src","uniforms_dst","parameter_src","isColor","Array","isArray","ColorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","Color","setRGB","setHex","setStyle","hex","setHSL","hue2rgb","style","handleAlpha","string","parseFloat","exec","color","components","parseInt","charAt","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","getHex","getHexString","getHSL","hue","saturation","lightness","getStyle","offsetHSL","hsl","addColors","color1","color2","UniformsLib","diffuse","opacity","map","uvTransform","alphaMap","specularmap","specularMap","envmap","envMap","flipEnvMap","reflectivity","refractionRatio","maxMipLevel","aomap","aoMap","aoMapIntensity","lightmap","lightMap","lightMapIntensity","emissivemap","emissiveMap","bumpmap","bumpMap","bumpScale","normalmap","normalMap","normalScale","displacementmap","displacementMap","displacementScale","displacementBias","roughnessmap","roughnessMap","metalnessmap","metalnessMap","gradientmap","gradientMap","fog","fogDensity","fogNear","fogFar","fogColor","lights","ambientLightColor","directionalLights","properties","shadow","shadowBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","distance","coneCos","penumbraCos","decay","spotShadowMap","spotShadowMatrix","pointLights","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","ShaderLib","basic","vertexShader","fragmentShader","lambert","emissive","phong","specular","shininess","standard","roughness","metalness","envMapIntensity","dashed","dashSize","totalSize","depth","cube","tCube","tFlip","equirect","tEquirect","distanceRGBA","referencePosition","nearDistance","farDistance","WebGLAttributes","gl","buffers","WeakMap","isInterleavedBufferAttribute","remove","deleteBuffer","buffer","delete","bufferType","usage","dynamic","DYNAMIC_DRAW","STATIC_DRAW","createBuffer","bindBuffer","bufferData","onUploadCallback","FLOAT","Float32Array","Float64Array","Uint16Array","UNSIGNED_SHORT","Int16Array","SHORT","Uint32Array","UNSIGNED_INT","Int32Array","INT","Int8Array","BYTE","Uint8Array","UNSIGNED_BYTE","bytesPerElement","BYTES_PER_ELEMENT","updateRange","bufferSubData","subarray","updateBuffer","Euler","_order","DefaultOrder","Layers","mask","physical","clearCoat","clearCoatRoughness","RotationOrders","asin","setFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","channel","enable","toggle","disable","test","layers","object3DId","Object3D","parent","children","DefaultUp","modelViewMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","userData","Camera","matrixWorldInverse","OrthographicCamera","zoom","view","updateProjectionMatrix","Face3","materialIndex","vertexNormals","vertexColors","isObject3D","onBeforeRender","onAfterRender","applyMatrix","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","q1","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","translateX","translateY","translateZ","localToWorld","worldToLocal","isCamera","getObjectById","id","getObjectByProperty","getObjectByName","getWorldPosition","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverseVisible","traverseAncestors","updateMatrix","force","geometries","materials","shapes","serialize","library","element","JSON","stringify","parameters","shape","material","uuids","extractFromCache","cache","values","recursive","parse","child","isOrthographicCamera","setViewOffset","fullWidth","fullHeight","enabled","offsetX","offsetY","clearViewOffset","zoomW","zoomH","scaleW","scaleH","geometryId","Geometry","colors","faces","faceVertexUvs","morphTargets","morphNormals","skinWeights","skinIndices","lineDistances","boundingBox","elementsNeedUpdate","verticesNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","groupsNeedUpdate","BufferAttribute","itemSize","normalized","Int8BufferAttribute","Uint8BufferAttribute","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Uint16BufferAttribute","Int32BufferAttribute","Uint32BufferAttribute","Float32BufferAttribute","Float64BufferAttribute","DirectGeometry","normals","uvs","uvs2","groups","arrayMax","face","jl","computeBoundingBox","obj","fromBufferGeometry","indices","positions","uv2","tempNormals","tempUVs","tempUVs2","addFace","group","computeFaceNormals","cb","ab","fl","vA","vB","vC","computeVertexNormals","areaWeighted","vl","computeFlatVertexNormals","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","dstNormalsFace","dstNormalsVertex","faceNormal","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","uvs1","colors1","colors2","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","uvCopy","mergeMesh","mesh","isMesh","mergeVertices","verticesMap","unique","changes","precision","faceIndicesToRemove","idx","diff","sortFacesByMaterialIndex","_id","sort","newUvs1","newUvs2","vertex","normalsHash","colorsHash","uvsHash","hasFaceVertexUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","setBit","getUvIndex","getNormalIndex","getColorIndex","hash","k","kl","uvsCopy","morphTarget","morphNormal","srcVertexNormal","destVertexNormal","isBufferAttribute","setArray","setDynamic","copyAt","index1","index2","copyArray","copyColorsArray","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXY","setXYZW","onUpload","computeGroups","fromGeometry","morphTargetsPosition","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","bufferGeometryId","BufferGeometry","morphAttributes","drawRange","BoxGeometry","widthSegments","heightSegments","depthSegments","BoxBufferGeometry","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","addGroup","setIndex","addAttribute","PlaneGeometry","PlaneBufferGeometry","width_half","height_half","segment_width","segment_height","getIndex","getAttribute","removeAttribute","clearGroups","setDrawRange","needsUpdate","isPoints","isLine","updateFromObject","direct","__directGeometry","lineDistance","fromDirectGeometry","isNaN","pA","pB","pC","normalizeNormals","attributeArray1","attribute2","attributeArray2","toNonIndexed","geometry2","array2","morphAttribute","materialId","Material","blending","side","flatShading","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","premultipliedAlpha","overdraw","MeshBasicMaterial","combine","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","setValues","ShaderMaterial","defines","linewidth","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","Ray","origin","Line3","Triangle","Mesh","drawMode","updateMorphTargets","absNumericalSort","CubeTexture","isMaterial","onBeforeCompile","newValue","currentValue","isRoot","emissiveIntensity","sizeAttenuation","gapSize","srcPlanes","dstPlanes","isMeshBasicMaterial","isShaderMaterial","ray","at","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","segCenter","segDir","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","edge1","edge2","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","distanceSq","closestPointToPointParameter","startP","startEnd","clampToLine","startEnd2","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","setFromPointsAndIndices","i0","i1","i2","getArea","getMidpoint","getPlane","edgeList","projectedPoint","minDistance","setDrawMode","morphTargetInfluences","morphTargetDictionary","ml","keys","String","inverseMatrix","tempA","tempB","tempC","uvA","uvB","uvC","barycoord","intersectionPoint","intersectionPointWorld","uvIntersection","uv1","uv3","checkIntersection","raycaster","checkBufferGeometryIntersection","intersection","faceIndex","intersects","fvA","fvB","fvC","isMultiMaterial","faceMaterial","morphInfluences","tl","influence","targets","uvs_f","isCubeTexture","emptyTexture","emptyCubeTexture","UniformContainer","seq","arrayCacheF32","arrayCacheI32","mat4array","mat3array","flatten","nBlocks","blockSize","firstElem","allocTexUnits","renderer","allocTextureUnit","setValue1f","uniform1f","addr","setValue1i","uniform1i","setValue2fv","uniform2fv","uniform2f","setValue3fv","uniform3f","uniform3fv","setValue4fv","uniform4fv","uniform4f","setValue2fm","uniformMatrix2fv","setValue3fm","uniformMatrix3fv","setValue4fm","uniformMatrix4fv","setValueT1","unit","setTexture2D","setValueT6","setTextureCube","setValue2iv","uniform2iv","setValue3iv","uniform3iv","setValue4iv","uniform4iv","setValue1fv","uniform1fv","setValue1iv","uniform1iv","setValueV2a","setValueV3a","setValueV4a","setValueM2a","setValueM3a","setValueM4a","setValueT1a","units","setValueT6a","SingleUniform","activeInfo","setValue","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","RePathPart","addUniform","container","uniformObject","parseUniform","path","pathLength","lastIndex","matchEnd","idIsIndex","subscript","next","WebGLUniforms","program","getProgramParameter","ACTIVE_UNIFORMS","info","getActiveUniform","getUniformLocation","WebGLShader","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","VERTEX_SHADER","lines","split","join","addLineNumbers","setOptional","upload","seqWithValue","programIdCount","getEncodingComponents","getTexelDecodingFunction","functionName","filterEmptyLine","replaceLightNums","replace","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","parseIncludes","include","unrollLoops","snippet","unroll","WebGLProgram","code","shadowMapTypeDefine","shadowMapType","envMapTypeDefine","envMapModeDefine","envMapBlendingDefine","prefixVertex","prefixFragment","gammaFactorDefine","customExtensions","rendererExtensions","envMapCubeUV","logarithmicDepthBuffer","filter","generateExtensions","customDefines","chunks","generateDefines","createProgram","isRawShaderMaterial","supportsVertexTextures","maxBones","useFog","fogExp","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","toneMapping","toneMappingName","getToneMappingFunction","outputEncoding","mapEncoding","envMapEncoding","emissiveMapEncoding","getTexelEncodingFunction","depthPacking","vertexGlsl","fragmentGlsl","glVertexShader","glFragmentShader","FRAGMENT_SHADER","attachShader","bindAttribLocation","linkProgram","cachedUniforms","cachedAttributes","programLog","getProgramInfoLog","trim","vertexLog","fragmentLog","runnable","haveDiagnostics","LINK_STATUS","getError","VALIDATE_STATUS","diagnostics","prefix","deleteShader","getUniforms","getAttributes","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","fetchAttributeLocations","destroy","deleteProgram","usedTimes","WebGLPrograms","capabilities","programs","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","parameterNames","getTextureEncodingFromMap","gammaOverrideLinear","getParameters","shadows","nClipPlanes","nClipIntersection","shaderID","isSkinnedMesh","bones","skeleton","floatVertexTextures","nVertexUniforms","maxVertexUniforms","nVertexMatrices","allocateBones","getMaxPrecision","currentRenderTarget","getRenderTarget","vertexTextures","gammaOutput","gammaInput","envMapMode","isFogExp2","maxMorphTargets","maxMorphNormals","directional","spot","rectArea","hemi","shadowMap","getProgramCode","acquireProgram","pl","programInfo","releaseProgram","pop","painterSortStable","reversePainterSortStable","WebGLRenderLists","lists","scene","list","renderItems","renderItemsIndex","opaque","init","renderItem","WebGLLights","light","halfWidth","halfHeight","state","ambient","vector3","matrix42","setup","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","viewMatrix","intensity","isAmbientLight","isDirectionalLight","bias","mapSize","isSpotLight","penumbra","isRectAreaLight","isPointLight","isHemisphereLight","WebGLRenderStates","renderStates","renderState","lightsArray","shadowsArray","spritesArray","setupLights","pushLight","pushShadow","shadowLight","pushSprite","WebGLShadowMap","_renderer","_objects","maxTextureSize","_frustum","_projScreenMatrix","_shadowMapSize","_maxShadowMapSize","_lookTarget","_lightPositionWorld","_MorphingFlag","_SkinningFlag","_NumberOfMaterialVariants","_depthMaterials","_distanceMaterials","_materialCache","0","1","2","cubeDirections","cubeUps","cube2DViewPorts","useMorphing","useSkinning","depthMaterial","distanceMaterial","getDepthMaterial","lightPositionWorld","result","materialVariants","customMaterial","customDepthMaterial","customDistanceMaterial","variantIndex","localClippingEnabled","keyA","keyB","materialsForVariant","cachedMaterial","isMeshDistanceMaterial","renderObject","shadowCamera","groupMaterial","renderBufferDirect","autoUpdate","render","faceCount","_gl","_state","BLEND","setClear","setTest","setScissorTest","vpWidth","vpHeight","pars","isSpotLightShadow","shadowMatrix","setRenderTarget","clear","vpDimensions","CanvasTexture","WebGLSpriteRenderer","vertexBuffer","elementBuffer","spritePosition","spriteRotation","spriteScale","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","uvOffset","uvScale","fogType","fogDepth","fillStyle","fillRect","sprites","useProgram","initAttributes","enableAttribute","disableUnusedAttributes","CULL_FACE","vertexAttribPointer","activeTexture","TEXTURE0","oldFogType","sceneFogType","isFog","density","setBlending","setMask","drawElements","TRIANGLES","reset","WebGLTextures","utils","_canvas","_isWebGL2","WebGL2RenderingContext","_videoTextures","clampToMaxSize","maxSize","textureNeedsGenerateMipmaps","generateMipmap","__maxMipLevel","log2","filterFallback","NEAREST","LINEAR","onTextureDispose","textureProperties","__image__webglTextureCube","deleteTexture","__webglInit","__webglTexture","deallocateTexture","isVideoTexture","memory","onRenderTargetDispose","renderTarget","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","deallocateRenderTarget","slot","frame","updateVideoTexture","__version","complete","createTexture","bindTexture","TEXTURE_2D","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","textureNeedsPowerOfTwo","HTMLImageElement","ImageBitmap","makePowerOfTwo","isPowerOfTwoImage","glFormat","convert","glType","setTextureParameters","mipmap","isDepthTexture","internalFormat","DEPTH_COMPONENT","DEPTH_COMPONENT32F","DEPTH_COMPONENT16","DEPTH_STENCIL","texImage2D","isCompressedTexture","getCompressedTextureFormats","compressedTexImage2D","uploadTexture","textureType","extension","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","CLAMP_TO_EDGE","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","getMaxAnisotropy","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","RGBA4","setupDepthRenderbuffer","isCube","webglDepthTexture","setupDepthTexture","createRenderbuffer","TEXTURE_CUBE_MAP","isCompressed","cubeImage","maxCubemapSize","TEXTURE_CUBE_MAP_POSITIVE_X","setTextureCubeDynamic","setupRenderTarget","isTargetPowerOfTwo","createFramebuffer","COLOR_ATTACHMENT0","updateRenderTargetMipmap","webglTexture","WebGLUtils","REPEAT","MIRRORED_REPEAT","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT_OES","ALPHA","RGB","RGBA","LUMINANCE","LUMINANCE_ALPHA","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","ZERO","ONE","SRC_COLOR","ONE_MINUS_SRC_COLOR","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","DST_ALPHA","ONE_MINUS_DST_ALPHA","DST_COLOR","ONE_MINUS_DST_COLOR","SRC_ALPHA_SATURATE","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","MIN_EXT","MAX_EXT","UNSIGNED_INT_24_8_WEBGL","PerspectiveCamera","fov","aspect","focus","filmGauge","filmOffset","ArrayCamera","cameras","WebVRManager","device","frameData","poseTarget","standingMatrix","standingMatrixInverse","window","VRFrameData","tempQuaternion","tempPosition","cameraL","bounds","cameraR","currentSize","currentPixelRatio","cameraVR","onVRDisplayPresentChange","isPresenting","eyeParameters","getEyeParameters","renderWidth","renderHeight","getPixelRatio","setDrawingBufferSize","userHeight","getDevice","setDevice","setPoseTarget","getCamera","depthNear","depthFar","getFrameData","stageParameters","sittingToStandingTransform","pose","poseObject","orientation","leftViewMatrix","rightViewMatrix","leftProjectionMatrix","rightProjectionMatrix","getLayers","layer","leftBounds","rightBounds","getStandingMatrix","submitFrame","WebGLRenderer","_context","_alpha","_depth","_stencil","stencil","_antialias","antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","currentRenderList","currentRenderState","domElement","autoClear","autoClearColor","autoClearDepth","autoClearStencil","sortObjects","toneMappingExposure","toneMappingWhitePoint","objects","programCache","renderLists","background","morphtargets","bufferRenderer","indexedBufferRenderer","spriteRenderer","_this","_isContextLost","_currentRenderTarget","_currentFramebuffer","_currentMaterialId","_currentGeometryProgram","_currentCamera","_currentArrayCamera","_currentViewport","_currentScissor","_currentScissorTest","_usedTextureUnits","_width","_height","_pixelRatio","_viewport","_scissor","_scissorTest","_clipping","globalState","numGlobalPlanes","renderingShadows","viewNormalMatrix","uniform","resetGlobalState","numPlanes","numIntersection","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","i4","enableLocalClipping","beginShadows","endShadows","setState","fromCache","nGlobal","lGlobal","clippingState","_clippingEnabled","_localClippingEnabled","_vector3","getTargetPixelRatio","contextAttributes","onContextLost","onContextRestore","getShaderPrecisionFormat","rangeMin","rangeMax","message","initGLContext","getExtension","maxAnisotropy","HIGH_FLOAT","MEDIUM_FLOAT","maxPrecision","maxTextures","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_SIZE","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_ATTRIBS","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","floatFragmentTextures","MAX_TEXTURE_MAX_ANISOTROPY_EXT","colorBuffer","locked","currentColorMask","currentColorClear","colorMask","setLocked","lock","clearColor","currentDepthMask","currentDepthFunc","currentDepthClear","DEPTH_TEST","depthMask","setFunc","NEVER","ALWAYS","LESS","LEQUAL","EQUAL","GEQUAL","GREATER","NOTEQUAL","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","STENCIL_TEST","stencilMask","stencilFunc","stencilRef","setOp","stencilFail","stencilZFail","stencilZPass","stencilOp","clearStencil","maxVertexAttributes","newAttributes","enabledAttributes","attributeDivisors","compressedTextureFormats","currentProgram","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","MAX_COMBINED_TEXTURE_IMAGE_UNITS","lineWidthAvailable","glVersion","VERSION","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","emptyTextures","blendEquationSeparate","blendFuncSeparate","blendFunc","setFlipSided","frontFace","CW","CCW","setCullFace","cullFace","BACK","FRONT","FRONT_AND_BACK","setPolygonOffset","factor","POLYGON_OFFSET_FILL","webglSlot","enableVertexAttribArray","vertexAttribDivisorANGLE","enableAttributeAndDivisor","meshPerAttribute","disableVertexAttribArray","formats","COMPRESSED_TEXTURE_FORMATS","setMaterial","frontFaceCW","setLineWidth","lineWidth","SCISSOR_TEST","webglType","boundTexture","apply","calls","triangles","autoReset","instanceCount","TRIANGLE_STRIP","TRIANGLE_FAN","LINES","LINE_STRIP","LINE_LOOP","POINTS","wireframeAttributes","onGeometryDispose","buffergeometry","_bufferGeometry","geometryAttributes","getWireframeAttribute","geometryIndex","updateList","influencesList","objectInfluences","influences","planeCamera","planeMesh","boxMesh","clearAlpha","getClearColor","setClearColor","getClearAlpha","setClearAlpha","renderList","forceClear","setMode","drawArrays","renderInstances","drawArraysInstancedANGLE","maxInstancedCount","drawElementsInstancedANGLE","vr","preventDefault","onMaterialDispose","releaseMaterialProgramReference","deallocateMaterial","getContextAttributes","forceContextLoss","loseContext","forceContextRestore","restoreContext","setPixelRatio","updateStyle","setViewport","getDrawingBufferSize","pixelRatio","getCurrentViewport","setScissor","boolean","bits","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clearTarget","stopAnimation","renderBufferImmediate","hasPositions","hasNormals","hasUvs","hasColors","programAttributes","positionArray","isMeshPhongMaterial","isMeshStandardMaterial","isMeshNormalMaterial","normalArray","nx","ny","nz","uvArray","colorArray","setProgram","geometryProgram","updateBuffers","rangeFactor","startIndex","isInstancedBufferGeometry","materialDefaultAttributeValues","programAttribute","geometryAttribute","stride","isInstancedInterleavedBuffer","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","isLineSegments","isLineLoop","compile","isLight","initMaterial","isAnimating","onAnimationFrame","requestAnimationLoopFrame","requestAnimationFrame","animationLoop","time","renderObjects","overrideMaterial","isArrayCamera","camera2","isImmediateRenderObject","renderObjectImmediate","materialProperties","programChange","lightsHash","numSupportedMorphTargets","numSupportedMorphNormals","progUniforms","uniformsList","useCache","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","isMeshLambertMaterial","boneTexture","boneMatrices","boneTextureSize","markUniformsLightsNeedsUpdate","refreshUniformsFog","refreshUniformsCommon","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsPhong","refreshUniformsToon","isMeshPhysicalMaterial","refreshUniformsStandard","refreshUniformsPhysical","isMeshDepthMaterial","refreshUniformsDepth","refreshUniformsDistance","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isShadowMaterial","ltc_1","LTC_1","ltc_2","LTC_2","uvScaleMap","animate","projectObject","isSprite","opaqueObjects","transparentObjects","textureUnit","warned","setTexture","readRenderTargetPixels","restore","textureFormat","IMPLEMENTATION_COLOR_READ_FORMAT","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","copyFramebufferToTexture","level","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","pixels","texSubImage2D","FogExp2","Fog","Scene","SpriteMaterial","Sprite","LOD","levels","Skeleton","boneInverses","calculateInverses","Bone","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","initBones","normalizeSkinWeights","linecap","linejoin","Line","LineSegments","LineLoop","Points","Group","VideoTexture","video","CompressedTexture","DepthTexture","WireframeGeometry","ol","edge","edges","ParametricGeometry","func","slices","stacks","ParametricBufferGeometry","pu","pv","sliceCount","PolyhedronGeometry","detail","PolyhedronBufferGeometry","uvBuffer","subdivideFace","cols","aj","bj","rows","pushVertex","getVertexByIndex","correctUV","azimuth","inclination","subdivide","appplyRadius","centroid","azi","correctUVs","correctSeam","generateUVs","TetrahedronGeometry","TetrahedronBufferGeometry","OctahedronGeometry","OctahedronBufferGeometry","IcosahedronGeometry","IcosahedronBufferGeometry","DodecahedronGeometry","DodecahedronBufferGeometry","TubeGeometry","tubularSegments","radialSegments","closed","taper","bufferGeometry","TubeBufferGeometry","tangents","binormals","frames","computeFrenetFrames","P","generateSegment","getPointAt","N","B","generateIndices","generateBufferData","TorusKnotGeometry","tube","heightScale","TorusKnotBufferGeometry","P1","P2","T","calculatePositionOnCurve","cu","su","quOverP","cs","TorusGeometry","arc","TorusBufferGeometry","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","skew","isSpriteMaterial","intersectPoint","worldPosition","worldScale","guessSizeSq","addLevel","getObjectForDistance","matrixPosition","bone","isBone","offsetMatrix","identityMatrix","getBoneByName","gbone","pos","rotq","scl","sw","vec","skinWeight","computeLineDistances","positionAttribute","THREE","linePrecision","precisionSq","vStart","vEnd","interSegment","interRay","step","nbVertices","threshold","params","localThreshold","localThresholdSq","testPoint","rayPointDistanceSq","distanceToRay","isGroup","readyState","HAVE_CURRENT_DATA","Earcut","holeIndices","dim","invSize","hasHoles","outerLen","outerNode","linkedList","queue","steiner","getLeftmost","compareX","eliminateHole","filterPoints","eliminateHoles","earcutLinked","clockwise","last","sum","signedArea","insertNode","removeNode","again","area","prev","ear","pass","zOrder","prevZ","nextZ","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","stop","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","minTX","minTY","maxTX","maxTY","locallyInside","isValidDiagonal","splitPolygon","hole","hx","hy","mx","my","tanMin","findHoleBridge","leftmost","px","py","intersectsPolygon","inside","middleInside","q2","Node","an","bp","ShapeUtils","contour","isClockWise","pts","triangulateShape","holes","removeDupEndPts","addContour","holeIndex","forEach","ExtrudeGeometry","ExtrudeBufferGeometry","addShapeList","TextGeometry","text","TextBufferGeometry","font","isFont","generateShapes","curveSegments","amount","bevelThickness","bevelSize","bevelEnabled","SphereGeometry","phiStart","phiLength","thetaStart","thetaLength","SphereBufferGeometry","thetaEnd","grid","verticesRow","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","RingBufferGeometry","segment","radiusStep","thetaSegmentLevel","LatheGeometry","segments","LatheBufferGeometry","base","inverseSegments","n1","n2","ShapeGeometry","ShapeBufferGeometry","addShape","shapeHole","indexOffset","extractPoints","shapeVertices","shapeHoles","reverse","concat","EdgesGeometry","thresholdAngle","thresholdDot","sourceVertices","face1","face2","CylinderGeometry","radiusTop","radiusBottom","openEnded","CylinderBufferGeometry","indexArray","generateCap","centerIndexStart","centerIndexEnd","cosTheta","sinTheta","slope","indexRow","generateTorso","ConeGeometry","ConeBufferGeometry","CircleGeometry","CircleBufferGeometry","getArrays","verticesArray","uvAttribute","IndexAttribute","sl","arrays","extrudePts","splineTube","binormal","position2","ahole","hl","indicesArray","placeholder","bevelSegments","steps","extrudePath","extrudeByPath","uvgen","UVGenerator","WorldUVGenerator","getSpacedPoints","shapePoints","scalePt2","pt","bs","vert","vlen","flen","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","sf","v_trans_lensq","direction_eq","contourMovements","oneHoleMovements","holesMovements","verticesMovements","sidewalls","layeroffset","slen1","slen2","f4","f3","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","buildLidFaces","buildSideFaces","indexA","indexB","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","Geometries","freeze","RawShaderMaterial","STANDARD","PHYSICAL","TOON","Materials","Cache","files","file","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","transform","DefaultLoadingManager","loading","FileLoader","manager","CompressedTextureLoader","_parser","DataTextureLoader","ImageLoader","CubeTextureLoader","TextureLoader","Curve","arcLengthDivisions","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","ArcCurve","aRadius","CubicPoly","c0","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","t2","calc","load","cached","setTimeout","dataUriRegexResult","mimeType","isBase64","decodeURIComponent","atob","response","responseType","toLowerCase","charCodeAt","Blob","parser","DOMParser","parseFromString","request","XMLHttpRequest","header","open","callbacks","status","withCredentials","overrideMimeType","requestHeader","setRequestHeader","send","setPath","setResponseType","setWithCredentials","setMimeType","loader","loadTexture","texDatas","loaded","mipmapCount","isCubemap","texData","crossOrigin","substr","src","setCrossOrigin","urls","isJPEG","search","getPoint","optionalTarget","getUtoTmapping","getPoints","divisions","getLength","lengths","getLengths","cacheArcLengths","current","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","getTangent","pt1","getTangentAt","mat","MAX_VALUE","tz","fromJSON","json","isEllipseCurve","twoPi","deltaAngle","samePoints","isArcCurve","pz","CatmullRomCurve3","curveType","CatmullRom","QuadraticBezier","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","CubicBezierCurve","v3","CubicBezierCurve3","LineCurve","LineCurve3","QuadraticBezierCurve","QuadraticBezierCurve3","SplineCurve","isCatmullRomCurve3","intPoint","weight","isCubicBezierCurve","isCubicBezierCurve3","isLineCurve","isLineCurve3","isQuadraticBezierCurve","isQuadraticBezierCurve3","isSplineCurve","Curves","CurvePath","curves","autoClose","Path","currentPoint","Shape","Light","HemisphereLight","LightShadow","SpotLightShadow","SpotLight","power","PointLight","DirectionalLightShadow","DirectionalLight","AmbientLight","RectAreaLight","StringKeyframeTrack","times","interpolation","KeyframeTrack","BooleanKeyframeTrack","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","valueSize","QuaternionLinearInterpolant","QuaternionKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","segmentLength","lens","cacheLengths","sums","resolution","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","absarc","absellipse","ellipse","firstPoint","lastPoint","getPointsHoles","holesPts","ValueTypeName","ValueBufferType","DefaultInterpolation","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","evaluate","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","settings","DefaultSettings_","getSettings_","copySampleValue_","getValueSize","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","AnimationUtils","arraySlice","from","to","isTypedArray","convertArray","forceClone","ArrayBuffer","isView","DataView","getKeyframeOrder","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","TimeBufferType","setInterpolation","validate","optimize","VectorKeyframeTrack","AnimationClip","duration","tracks","resetDuration","MaterialLoader","BufferGeometryLoader","trackType","_getTrackTypeForValueTypeName","track","getInterpolation","typeName","InterpolantFactoryMethodDiscrete","factoryMethod","createInterpolant","shift","timeOffset","timeScale","startTime","endTime","nKeys","valid","prevTime","currTime","smoothInterpolation","writeIndex","keep","offsetP","offsetN","readOffset","writeOffset","jsonTracks","frameTime","fps","clip","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","parts","animationMorphTargets","clips","parseAnimation","animation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","setTextures","getTexture","shading","typedArray","TYPED_ARRAYS","drawcalls","offsets","Loader","Handlers","handlers","regex","onLoadStart","onLoadProgress","onLoadComplete","initMaterials","texturePath","createMaterial","BlendingMode","textureLoader","materialLoader","fullPath","mapDiffuseRepeat","mapDiffuseOffset","mapDiffuseWrap","mapDiffuseAnisotropy","mapEmissiveRepeat","mapEmissiveOffset","mapEmissiveWrap","mapEmissiveAnisotropy","mapLightRepeat","mapLightOffset","mapLightWrap","mapLightAnisotropy","mapAORepeat","mapAOOffset","mapAOWrap","mapAOAnisotropy","mapBumpRepeat","mapBumpOffset","mapBumpWrap","mapBumpAnisotropy","mapNormalRepeat","mapNormalOffset","mapNormalWrap","mapNormalAnisotropy","mapSpecularRepeat","mapSpecularOffset","mapSpecularWrap","mapSpecularAnisotropy","mapMetalnessRepeat","mapMetalnessOffset","mapMetalnessWrap","mapMetalnessAnisotropy","mapRoughnessRepeat","mapRoughnessOffset","mapRoughnessWrap","mapRoughnessAnisotropy","mapAlphaRepeat","mapAlphaOffset","mapAlphaWrap","mapAlphaAnisotropy","LoaderUtils","decodeText","TextDecoder","decode","fromCharCode","escape","extractUrlBase","JSONLoader","ObjectLoader","setTexturePath","isBitSet","fi","zLength","colorIndex","normalIndex","uvIndex","isQuad","hasMaterial","faceA","faceB","uvLayer","nUvLayers","parseModel","influencesPerVertex","parseSkin","dstVertices","srcVertices","morphColors","parseMorphing","outputAnimations","morphAnimationClips","parseAnimations","substring","lastIndexOf","parseShape","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","geometryLoader","bufferGeometryLoader","details","geometryShapes","loadImage","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","ImageBitmapLoader","createImageBitmap","fetch","ShapePath","subPaths","currentPath","Font","createPath","char","glyph","glyphs","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","ha","FontLoader","setOptions","then","res","blob","imageBitmap","catch","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","tmpHoles","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sIdx","sLen","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","paths","chars","line_height","yMax","yMin","underlineThickness","ret","createPaths","AudioContext","webkitAudioContext","setContext","AudioLoader","StereoCamera","eyeSep","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","AudioListener","gain","createGain","connect","destination","Audio","getInput","autoplay","loop","playbackRate","isPlaying","hasPlaybackControl","sourceType","filters","PositionalAudio","panner","createPanner","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getOutput","PropertyMixer","binding","mixFunction","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","useCount","referenceCount","decodeAudioData","audioBuffer","instance","eyeRight","eyeLeft","xmin","xmax","eyeSepOnProjection","ymax","removeFilter","disconnect","getFilter","setFilter","getMasterVolume","setMasterVolume","positionX","setValueAtTime","currentTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","setNodeSource","audioNode","setBuffer","play","createBufferSource","onended","onEnded","pause","getFilters","setFilters","setPlaybackRate","getPlaybackRate","getLoop","setLoop","getVolume","setVolume","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","getFrequencyData","getByteFrequencyData","getAverageFrequency","accumulate","accuIndex","currentWeight","mix","originalValueOffset","saveOriginalState","getValue","restoreOriginalState","lineGeometry","coneGeometry","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","rootNode","findNode","nodeName","AnimationObjectGroup","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","AnimationAction","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","interpolant","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","AnimationMixer","root","_root","_initMemoryManager","_accuIndex","Uniform","InstancedBufferGeometry","InterleavedBufferAttribute","interleavedBuffer","InterleavedBuffer","InstancedInterleavedBuffer","InstancedBufferAttribute","Raycaster","PointCloud","ascSort","intersectObject","Clock","autoStart","oldTime","elapsedTime","running","Spherical","Cylindrical","Box2","ImmediateRenderObject","VertexNormalsHelper","nNormals","objGeometry","SpotLightHelper","cone","SkeletonHelper","getBoneList","boneList","PointLightHelper","sphereSize","RectAreaLightHelper","HemisphereLightHelper","GridHelper","PolarGridHelper","radials","circles","FaceNormalsHelper","DirectionalLightHelper","lightPlane","targetLine","CameraHelper","pointMap","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","BoxHelper","Box3Helper","PlaneHelper","ArrowHelper","headLength","headWidth","setDirection","AxesHelper","Face4","firstValidIndex","bindings","unbind","isAnimationObjectGroup","sanitizeNodeName","reservedRe","RegExp","wordChar","wordCharOrDot","directoryRe","nodeRe","objectRe","propertyRe","trackRe","supportedObjectNames","matches","results","objectName","objectIndex","propertyIndex","lastDot","searchNodeSubtree","childNode","subTreeNode","_getValue_unavailable","_setValue_unavailable","BindingType","Direct","EntireArray","ArrayElement","HasFromToArray","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","GetterByBindingType","resolvedProperty","SetterByBindingTypeAndVersioning","targetObject","dest","targetArray","sourceArray","nodeProperty","versioning","bindingType","_getValue_unbound","_setValue_unbound","nObjects","nCachedObjects","indicesByUUID","parsedPaths","nBindings","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","action","halt","startTimeScale","endTimeScale","now","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_update","deltaTime","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","interpolantValue","loopCount","_setEndings","handle_stop","pingPong","loopDelta","pending","atStart","atEnd","weightNow","weightThen","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","remove_empty_map","_","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","isInterleavedBuffer","setFromCamera","coords","intersectObjects","performance","Date","getElapsedTime","getDelta","newTime","other","makeSafe","vec3","objPos","objNorm","coneLength","coneWidth","boneMatrix","matrixWorldInv","setPoint","setColor","LineStrip","LinePieces","MeshFaceMaterial","MultiMaterial","Particle","ParticleSystem","PointCloudMaterial","ParticleBasicMaterial","ParticleSystemMaterial","Vertex","DynamicBufferAttribute","Int8Attribute","Uint8Attribute","Uint8ClampedAttribute","Int16Attribute","Uint16Attribute","Int32Attribute","Uint32Attribute","Float32Attribute","Float64Attribute","ClosedSplineCurve3","SplineCurve3","Spline","AxisHelper","BoundingBoxHelper","EdgesHelper","WireframeHelper","XHRLoader","BinaryTextureLoader","construct","createPointsGeometry","createGeometry","createSpacedPointsGeometry","fromPoints","initFromArray","getControlPointsArray","reparametrizeByArcLength","setColors","isIntersectionBox","isIntersectionSphere","random16","nearestPowerOfTwo","nextPowerOfTwo","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBuffer","applyToVector3Array","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","computeTangents","getChildByName","renderDepth","getWorldRotation","eulerOrder","useQuaternion","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","copyIndicesArray","addIndex","addDrawCall","clearDrawCalls","computeOffsets","wrapAround","wrapRGB","metal","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","shadowMapCullFace","renderReverseSided","renderSingleSided","standing","getData","updateCubeMap","GeometryUtils","geometry1","ImageUtils","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","Projector","projectVector","unprojectVector","pickingRay","CanvasRenderer","SceneUtils","createMultiMaterialObject","detach","attach","_three","_threeAddons","innerHeight","innerWidth","seedScene","SeedScene","devicePixelRatio","composer","EffectComposer","addPass","RenderPass","bleachPass","ShaderPass","BleachBypassShader","renderToScreen","blurPass","VerticalBlurShader","onAnimationFrameHandler","timeStamp","playing","checkForLose","lose","loseBlock","display","speed","checkForWin","winBlock","windowResizeHandler","_window2","body","margin","overflow","appendChild","overlayCss","createElement","innerText","cssText","configurable","default","Bs","zs","La","Ua","Oa","Ja","Na","Cs","Ra","Ws","M","E","S","Xs","A","L","C","R","D","U","I","O","F","qs","G","H","V","Ys","Fo","Ro","Uo","Ko","Qo","jo","sa","W","da","X","Y","Z","J","Ts","K","ks","Po","ee","re","oe","_a","le","ue","Ks","he","Qs","pe","fe","ve","ge","ye","ec","xe","$s","_e","Zs","Js","we","Me","Ee","Te","Ae","Le","Ce","Re","Pe","De","Ue","Ie","Oe","Fe","Se","ze","Ne","Be","Ge","He","tc","je","ke","Ve","We","Rs","Ds","Us","Is","Os","Ps","Xe","Qe","$e","et","tt","Gs","rt","it","Lo","Co","ba","Sa","Ta","wa","Ma","Ea","pa","fa","Ze","Je","ma","va","ga","ya","xa","Ye","qe","Ke","rc","nt","Do","st","lt","ut","ht","ic","ft","Ns","mt","vt","Fs","gt","yt","_t","LOG2E","Pa","Da","ja","Va","$a","Ba","Ha","es","Za","wt","Mt","Et","St","Aa","Ca","Ia","ka","Wa","Xa","Fa","za","Ga","Ya","Ka","Qa","Vo","ko","qo","Yo","Zo","Jo","$o","ea","ta","ra","ia","ts","rs","is","os","as","ss","ls","us","hs","ds","ps","fs","ms","vs","gs","ys","xs","_s","ws","Ms","Wo","Xo","No","Ho","zo","Bo","Go","So","To","Ao","Q","$","ie","na","oa","aa","ca","la","ua","ne","se","Hs","Vs","Mo","As","Ls","Tt","At","Lt","Ct","Rt","Pt","Dt","Ut","It","Ot","Nt","Ft","zt","Bt","Gt","Ht","jt","Vt","kt","Wt","Xt","qt","Yt","Zt","Jt","Kt","Qt","$t","er","tr","rr","ir","nr","or","ar","sr","cr","lr","ur","Fr","Ir","Lr","Or","hr","Ar","dr","Mr","wr","br","fr","pr","mr","Sr","Cr","Pr","Tr","Ur","yr","xr","_r","Er","Rr","Dr","Nr","zr","Br","Gr","Hr","oc","jr","Vr","kr","Wr","Xr","qr","Yr","Zr","Jr","Kr","Qr","$r","ei","ti","ri","ii","ni","oi","ai","si","ci","li","ui","hi","di","pi","mi","vi","uc","gi","xi","bi","wi","Mi","Ei","Si","Ti","Ai","Pi","Li","Ci","Ri","Ni","Di","Ui","Ii","Oi","Fi","zi","Bi","Gi","Hi","ji","Vi","ki","Wi","Xi","qi","Yi","Zi","Ji","Ki","Qi","$i","en","tn","rn","nn","fn","on","sn","cn","ln","un","hn","dn","pn","gc","mn","vn","gn","yn","xn","_n","wn","Mn","En","Tn","Ln","Rn","Pn","Ec","Dn","Un","In","On","Nn","Fn","Bn","Ss","Es","Gn","Hn","jn","Vn","kn","Wn","Xn","Yn","Zn","Kn","$n","eo","ro","no","io","Oo","oo","ao","so","co","lo","uo","po","Io","fo","mo","vo","go","Tc","Ac","yo","bo","wo","Eo","js","nc","triangulate","gr","sc","cc","lc","hc","dc","pc","fc","mc","vc","yc","xc","_c","wc","Sn","Mc","setTargetAtTime","Sc","AdaptiveToneMappingPass","needsInit","adaptive","luminanceRT","previousLuminanceRT","currentLuminanceRT","CopyShader","copyUniforms","_46","materialCopy","_35","_9","LuminosityShader","materialLuminance","adaptLuminanceShader","MIP_LEVEL_1X1","toFixed","lastLum","currentLum","tau","materialAdaptiveLum","ToneMapShader","materialToneMap","needsSwap","_14","_31","quad","_3","_17","tDiffuse","_22","_53","ADAPTED_LUMINANCE","luminanceMap","_4","setAdaptive","setAdaptionRate","setMaxLuminance","maxLuminance","setAverageLuminance","averageLuminance","setMiddleGrey","middleGrey","BasicShader","BlendShader","tDiffuse1","tDiffuse2","mixRatio","BloomPass","renderTargetX","renderTargetY","ConvolutionShader","convolutionUniforms","uImageIncrement","blurX","cKernel","buildKernel","materialConvolution","KERNEL_SIZE_FLOAT","KERNEL_SIZE_INT","blurY","_48","BokehPass","aperture","maxblur","renderTargetColor","renderTargetDepth","materialDepth","_5","BokehShader","tDepth","materialBokeh","scene2","quad2","tColor","textureWidth","textureHeight","focalDepth","fstop","showFocus","manualdof","vignetting","depthblur","fringe","znear","zfar","noise","pentagon","shaderFocus","focusCoords","BrightnessContrastShader","brightness","contrast","ColorCorrectionShader","powRGB","_49","mulRGB","addRGB","ColorifyShader","exp","DDSLoader","_25","_20","_21","_24","_19","DOFMipMapShader","DigitalGlitch","tDisp","byp","seed","seed_x","seed_y","distortion_x","distortion_y","col_s","DotScreenPass","DotScreenShader","tSize","EdgeShader","EdgeShader2","renderTarget1","renderTarget2","writeBuffer","readBuffer","passes","copyPass","swapBuffers","insertPass","MaskPass","ClearMaskPass","FXAAShader","_41","FilmPass","FilmShader","grayscale","nIntensity","sIntensity","sCount","FocusShader","screenWidth","screenHeight","sampleDistance","waveFactor","FresnelShader","mRefractionRatio","mFresnelBias","mFresnelPower","mFresnelScale","GammaCorrectionShader","_33","GlitchPass","generateHeightmap","goWild","curF","generateTrigger","randX","_2","HorizontalBlurShader","HorizontalTiltShiftShader","HueSaturationShader","KaleidoShader","sides","MTLLoader","_54","setBaseUrl","baseUrl","setMaterialOptions","materialOptions","MaterialCreator","setManager","setMaterials","materialsInfo","materialsArray","nameLookup","_27","normalizeRGB","ignoreZeroRGBs","preload","getAsArray","createMaterial_","_7","_42","MarchingCubes","enableUvs","enableColors","isolation","size2","size3","halfsize","yd","zd","field","normal_cache","vlist","nlist","maxCount","VIntX","VIntY","VIntZ","compNorm","polygonize","edgeTable","triTable","posnormtriv","begin","addBall","addPlaneX","addPlaneY","addPlaneZ","generateGeometry","REPLACE","KEEP","MirrorShader","NormalMapShader","heightMap","OBJLoader","_12","_6","timeEnd","_34","ocean_sim_vertex","varying","vUV","ocean_subtransform","u_input","u_transformSize","u_subtransformSize","ocean_initial_spectrum","u_wind","u_resolution","u_size","ocean_phase","u_phases","u_deltaTime","ocean_spectrum","u_choppiness","u_initialSpectrum","ocean_normals","u_displacementMap","ocean_main","u_normalMap","u_geometrySize","u_projectionMatrix","u_viewMatrix","u_cameraPosition","u_skyColor","u_oceanColor","u_sunDirection","u_exposure","vPos","OrbitControls","zoomSpeed","_16","minZoom","maxZoom","enableZoom","button","mouseButtons","ORBIT","enableRotate","clientX","clientY","ROTATE","ZOOM","DOLLY","PAN","enablePan","NONE","clientWidth","rotateSpeed","clientHeight","stopPropagation","wheelDelta","enableKeys","keyCode","UP","keyPanSpeed","BOTTOM","touches","pageX","pageY","TOUCH_ROTATE","TOUCH_DOLLY","TOUCH_PAN","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","autoRotate","autoRotateSpeed","target0","position0","zoom0","getPolarAngle","getAzimuthalAngle","_18","_39","noZoom","noRotate","noPan","noKeys","staticMoving","dynamicDampingFactor","ParallaxShader","modes","none","steep","occlusion","relief","parallaxScale","parallaxMinLayers","parallaxMaxLayers","RGBShiftShader","oldClearColor","oldClearAlpha","SSAOShader","cameraNear","cameraFar","onlyAO","aoClamp","lumInfluence","SVGLoader","documentElement","SavePass","textureID","renderTargetParameters","SepiaShader","ShaderToon","toon1","uDirLightPos","uDirLightColor","uAmbientLightColor","uBaseColor","toon2","uLineColor1","uLineColor2","uLineColor3","uLineColor4","hatching","dotted","TechnicolorShader","TexturePass","TriangleBlurShader","UnpackDepthRGBAShader","VerticalTiltShiftShader","VignetteShader","darkness","SobelOperatorShader","_classCallCheck","_possibleConstructorReturn","__proto__","getPrototypeOf","listenKeys","car","Car","earth","Earth","garage","Garage","lightbulb","Lightbulb","BasicLights","carBox","rightWallBox","rightWall","innerBox","hemiLight","wheelRadius","tilt","maxTilt","basisGeo","basisMat","basis","headGeo","head","headlamps","leftHeadlampGeo","leftHeadlampMat","leftHeadlamp","rightHeadlamp","wheels","wheel","tireGeo","tireMat","tire","diskGeo","diskMat","disk","frWheel","flWheel","brWheel","blWheel","_this2","_window","grassGeo","grassMat","grass","primingGeo","primingMat","priming","pillarGeo","pillarMat","pillar","backWallGeo","backWall","rightWallGeo","frontWallMat","frontWall","roofGeo","roofMat","roof","LightBulb","bulbGeo","bulbMat","bulb","wireGeo","wireMat","wire"],"mappings":"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","file":"main.b6819b56f89660ed9895.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","// Polyfills\n\nif ( Number.EPSILON === undefined ) {\n\n\tNumber.EPSILON = Math.pow( 2, - 52 );\n\n}\n\nif ( Number.isInteger === undefined ) {\n\n\t// Missing in IE\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n\n\tNumber.isInteger = function ( value ) {\n\n\t\treturn typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;\n\n\t};\n\n}\n\n//\n\nif ( Math.sign === undefined ) {\n\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n\tMath.sign = function ( x ) {\n\n\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n\t};\n\n}\n\nif ( 'name' in Function.prototype === false ) {\n\n\t// Missing in IE\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n\tObject.defineProperty( Function.prototype, 'name', {\n\n\t\tget: function () {\n\n\t\t\treturn this.toString().match( /^\\s*function\\s*([^\\(\\s]*)/ )[ 1 ];\n\n\t\t}\n\n\t} );\n\n}\n\nif ( Object.assign === undefined ) {\n\n\t// Missing in IE\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n\t( function () {\n\n\t\tObject.assign = function ( target ) {\n\n\t\t\tif ( target === undefined || target === null ) {\n\n\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\n\t\t\t}\n\n\t\t\tvar output = Object( target );\n\n\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\n\t\t\t\tvar source = arguments[ index ];\n\n\t\t\t\tif ( source !== undefined && source !== null ) {\n\n\t\t\t\t\tfor ( var nextKey in source ) {\n\n\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\n\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t};\n\n\t} )();\n\n}\n\n/**\n * https://github.com/mrdoob/eventdispatcher.js/\n */\n\nfunction EventDispatcher() {}\n\nObject.assign( EventDispatcher.prototype, {\n\n\taddEventListener: function ( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) this._listeners = {};\n\n\t\tvar listeners = this._listeners;\n\n\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\tlisteners[ type ] = [];\n\n\t\t}\n\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\tlisteners[ type ].push( listener );\n\n\t\t}\n\n\t},\n\n\thasEventListener: function ( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return false;\n\n\t\tvar listeners = this._listeners;\n\n\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n\n\t},\n\n\tremoveEventListener: function ( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tvar listeners = this._listeners;\n\t\tvar listenerArray = listeners[ type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tvar index = listenerArray.indexOf( listener );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tdispatchEvent: function ( event ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tvar listeners = this._listeners;\n\t\tvar listenerArray = listeners[ event.type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tevent.target = this;\n\n\t\t\tvar array = listenerArray.slice( 0 );\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n} );\n\nvar REVISION = '91';\nvar MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\nvar CullFaceNone = 0;\nvar CullFaceBack = 1;\nvar CullFaceFront = 2;\nvar CullFaceFrontBack = 3;\nvar FrontFaceDirectionCW = 0;\nvar FrontFaceDirectionCCW = 1;\nvar BasicShadowMap = 0;\nvar PCFShadowMap = 1;\nvar PCFSoftShadowMap = 2;\nvar FrontSide = 0;\nvar BackSide = 1;\nvar DoubleSide = 2;\nvar FlatShading = 1;\nvar SmoothShading = 2;\nvar NoColors = 0;\nvar FaceColors = 1;\nvar VertexColors = 2;\nvar NoBlending = 0;\nvar NormalBlending = 1;\nvar AdditiveBlending = 2;\nvar SubtractiveBlending = 3;\nvar MultiplyBlending = 4;\nvar CustomBlending = 5;\nvar AddEquation = 100;\nvar SubtractEquation = 101;\nvar ReverseSubtractEquation = 102;\nvar MinEquation = 103;\nvar MaxEquation = 104;\nvar ZeroFactor = 200;\nvar OneFactor = 201;\nvar SrcColorFactor = 202;\nvar OneMinusSrcColorFactor = 203;\nvar SrcAlphaFactor = 204;\nvar OneMinusSrcAlphaFactor = 205;\nvar DstAlphaFactor = 206;\nvar OneMinusDstAlphaFactor = 207;\nvar DstColorFactor = 208;\nvar OneMinusDstColorFactor = 209;\nvar SrcAlphaSaturateFactor = 210;\nvar NeverDepth = 0;\nvar AlwaysDepth = 1;\nvar LessDepth = 2;\nvar LessEqualDepth = 3;\nvar EqualDepth = 4;\nvar GreaterEqualDepth = 5;\nvar GreaterDepth = 6;\nvar NotEqualDepth = 7;\nvar MultiplyOperation = 0;\nvar MixOperation = 1;\nvar AddOperation = 2;\nvar NoToneMapping = 0;\nvar LinearToneMapping = 1;\nvar ReinhardToneMapping = 2;\nvar Uncharted2ToneMapping = 3;\nvar CineonToneMapping = 4;\nvar UVMapping = 300;\nvar CubeReflectionMapping = 301;\nvar CubeRefractionMapping = 302;\nvar EquirectangularReflectionMapping = 303;\nvar EquirectangularRefractionMapping = 304;\nvar SphericalReflectionMapping = 305;\nvar CubeUVReflectionMapping = 306;\nvar CubeUVRefractionMapping = 307;\nvar RepeatWrapping = 1000;\nvar ClampToEdgeWrapping = 1001;\nvar MirroredRepeatWrapping = 1002;\nvar NearestFilter = 1003;\nvar NearestMipMapNearestFilter = 1004;\nvar NearestMipMapLinearFilter = 1005;\nvar LinearFilter = 1006;\nvar LinearMipMapNearestFilter = 1007;\nvar LinearMipMapLinearFilter = 1008;\nvar UnsignedByteType = 1009;\nvar ByteType = 1010;\nvar ShortType = 1011;\nvar UnsignedShortType = 1012;\nvar IntType = 1013;\nvar UnsignedIntType = 1014;\nvar FloatType = 1015;\nvar HalfFloatType = 1016;\nvar UnsignedShort4444Type = 1017;\nvar UnsignedShort5551Type = 1018;\nvar UnsignedShort565Type = 1019;\nvar UnsignedInt248Type = 1020;\nvar AlphaFormat = 1021;\nvar RGBFormat = 1022;\nvar RGBAFormat = 1023;\nvar LuminanceFormat = 1024;\nvar LuminanceAlphaFormat = 1025;\nvar RGBEFormat = RGBAFormat;\nvar DepthFormat = 1026;\nvar DepthStencilFormat = 1027;\nvar RGB_S3TC_DXT1_Format = 33776;\nvar RGBA_S3TC_DXT1_Format = 33777;\nvar RGBA_S3TC_DXT3_Format = 33778;\nvar RGBA_S3TC_DXT5_Format = 33779;\nvar RGB_PVRTC_4BPPV1_Format = 35840;\nvar RGB_PVRTC_2BPPV1_Format = 35841;\nvar RGBA_PVRTC_4BPPV1_Format = 35842;\nvar RGBA_PVRTC_2BPPV1_Format = 35843;\nvar RGB_ETC1_Format = 36196;\nvar RGBA_ASTC_4x4_Format = 37808;\nvar RGBA_ASTC_5x4_Format = 37809;\nvar RGBA_ASTC_5x5_Format = 37810;\nvar RGBA_ASTC_6x5_Format = 37811;\nvar RGBA_ASTC_6x6_Format = 37812;\nvar RGBA_ASTC_8x5_Format = 37813;\nvar RGBA_ASTC_8x6_Format = 37814;\nvar RGBA_ASTC_8x8_Format = 37815;\nvar RGBA_ASTC_10x5_Format = 37816;\nvar RGBA_ASTC_10x6_Format = 37817;\nvar RGBA_ASTC_10x8_Format = 37818;\nvar RGBA_ASTC_10x10_Format = 37819;\nvar RGBA_ASTC_12x10_Format = 37820;\nvar RGBA_ASTC_12x12_Format = 37821;\nvar LoopOnce = 2200;\nvar LoopRepeat = 2201;\nvar LoopPingPong = 2202;\nvar InterpolateDiscrete = 2300;\nvar InterpolateLinear = 2301;\nvar InterpolateSmooth = 2302;\nvar ZeroCurvatureEnding = 2400;\nvar ZeroSlopeEnding = 2401;\nvar WrapAroundEnding = 2402;\nvar TrianglesDrawMode = 0;\nvar TriangleStripDrawMode = 1;\nvar TriangleFanDrawMode = 2;\nvar LinearEncoding = 3000;\nvar sRGBEncoding = 3001;\nvar GammaEncoding = 3007;\nvar RGBEEncoding = 3002;\nvar LogLuvEncoding = 3003;\nvar RGBM7Encoding = 3004;\nvar RGBM16Encoding = 3005;\nvar RGBDEncoding = 3006;\nvar BasicDepthPacking = 3200;\nvar RGBADepthPacking = 3201;\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar _Math = {\n\n\tDEG2RAD: Math.PI / 180,\n\tRAD2DEG: 180 / Math.PI,\n\n\tgenerateUUID: ( function () {\n\n\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n\t\tvar lut = [];\n\n\t\tfor ( var i = 0; i < 256; i ++ ) {\n\n\t\t\tlut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 ).toUpperCase();\n\n\t\t}\n\n\t\treturn function generateUUID() {\n\n\t\t\tvar d0 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d1 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d2 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d3 = Math.random() * 0xffffffff | 0;\n\t\t\treturn lut[ d0 & 0xff ] + lut[ d0 >> 8 & 0xff ] + lut[ d0 >> 16 & 0xff ] + lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t\tlut[ d1 & 0xff ] + lut[ d1 >> 8 & 0xff ] + '-' + lut[ d1 >> 16 & 0x0f | 0x40 ] + lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t\tlut[ d2 & 0x3f | 0x80 ] + lut[ d2 >> 8 & 0xff ] + '-' + lut[ d2 >> 16 & 0xff ] + lut[ d2 >> 24 & 0xff ] +\n\t\t\t\tlut[ d3 & 0xff ] + lut[ d3 >> 8 & 0xff ] + lut[ d3 >> 16 & 0xff ] + lut[ d3 >> 24 & 0xff ];\n\n\t\t};\n\n\t} )(),\n\n\tclamp: function ( value, min, max ) {\n\n\t\treturn Math.max( min, Math.min( max, value ) );\n\n\t},\n\n\t// compute euclidian modulo of m % n\n\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\teuclideanModulo: function ( n, m ) {\n\n\t\treturn ( ( n % m ) + m ) % m;\n\n\t},\n\n\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n\tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n\t},\n\n\t// https://en.wikipedia.org/wiki/Linear_interpolation\n\n\tlerp: function ( x, y, t ) {\n\n\t\treturn ( 1 - t ) * x + t * y;\n\n\t},\n\n\t// http://en.wikipedia.org/wiki/Smoothstep\n\n\tsmoothstep: function ( x, min, max ) {\n\n\t\tif ( x <= min ) return 0;\n\t\tif ( x >= max ) return 1;\n\n\t\tx = ( x - min ) / ( max - min );\n\n\t\treturn x * x * ( 3 - 2 * x );\n\n\t},\n\n\tsmootherstep: function ( x, min, max ) {\n\n\t\tif ( x <= min ) return 0;\n\t\tif ( x >= max ) return 1;\n\n\t\tx = ( x - min ) / ( max - min );\n\n\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n\t},\n\n\t// Random integer from <low, high> interval\n\n\trandInt: function ( low, high ) {\n\n\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n\t},\n\n\t// Random float from <low, high> interval\n\n\trandFloat: function ( low, high ) {\n\n\t\treturn low + Math.random() * ( high - low );\n\n\t},\n\n\t// Random float from <-range/2, range/2> interval\n\n\trandFloatSpread: function ( range ) {\n\n\t\treturn range * ( 0.5 - Math.random() );\n\n\t},\n\n\tdegToRad: function ( degrees ) {\n\n\t\treturn degrees * _Math.DEG2RAD;\n\n\t},\n\n\tradToDeg: function ( radians ) {\n\n\t\treturn radians * _Math.RAD2DEG;\n\n\t},\n\n\tisPowerOfTwo: function ( value ) {\n\n\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t},\n\n\tceilPowerOfTwo: function ( value ) {\n\n\t\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n\t},\n\n\tfloorPowerOfTwo: function ( value ) {\n\n\t\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n\t}\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author philogb / http://blog.thejit.org/\n * @author egraether / http://egraether.com/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\n\nfunction Vector2( x, y ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\n}\n\nObject.defineProperties( Vector2.prototype, {\n\n\t\"width\": {\n\n\t\tget: function () {\n\n\t\t\treturn this.x;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis.x = value;\n\n\t\t}\n\n\t},\n\n\t\"height\": {\n\n\t\tget: function () {\n\n\t\t\treturn this.y;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis.y = value;\n\n\t\t}\n\n\t}\n\n} );\n\nObject.assign( Vector2.prototype, {\n\n\tisVector2: true,\n\n\tset: function ( x, y ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.x, this.y );\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\n\t\treturn this;\n\n\t},\n\n\taddScaledVector: function ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\n\t\treturn this;\n\n\t},\n\n\tsubScalar: function ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\n\t\treturn this;\n\n\t},\n\n\tdivide: function ( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t},\n\n\tapplyMatrix3: function ( m ) {\n\n\t\tvar x = this.x, y = this.y;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n\n\t\treturn this;\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampScalar: function () {\n\n\t\tvar min = new Vector2();\n\t\tvar max = new Vector2();\n\n\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\tmin.set( minVal, minVal );\n\t\t\tmax.set( maxVal, maxVal );\n\n\t\t\treturn this.clamp( min, max );\n\n\t\t};\n\n\t}(),\n\n\tclampLength: function ( min, max ) {\n\n\t\tvar length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t},\n\n\tfloor: function () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\n\t\treturn this;\n\n\t},\n\n\tceil: function () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\n\t\treturn this;\n\n\t},\n\n\tround: function () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\n\t\treturn this;\n\n\t},\n\n\troundToZero: function () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t},\n\n\tmanhattanLength: function () {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t},\n\n\tangle: function () {\n\n\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\tvar angle = Math.atan2( this.y, this.x );\n\n\t\tif ( angle < 0 ) angle += 2 * Math.PI;\n\n\t\treturn angle;\n\n\t},\n\n\tdistanceTo: function ( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t},\n\n\tdistanceToSquared: function ( v ) {\n\n\t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t\treturn dx * dx + dy * dy;\n\n\t},\n\n\tmanhattanDistanceTo: function ( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t},\n\n\tsetLength: function ( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\n\t\treturn array;\n\n\t},\n\n\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\tif ( offset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\n\n\t\t}\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\n\t\treturn this;\n\n\t},\n\n\trotateAround: function ( center, angle ) {\n\n\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\tvar x = this.x - center.x;\n\t\tvar y = this.y - center.y;\n\n\t\tthis.x = x * c - y * s + center.x;\n\t\tthis.y = x * s + y * c + center.y;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author philogb / http://blog.thejit.org/\n * @author jordi_ros / http://plattsoft.com\n * @author D1plo1d / http://github.com/D1plo1d\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author timknip / http://www.floorplanner.com/\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction Matrix4() {\n\n\tthis.elements = [\n\n\t\t1, 0, 0, 0,\n\t\t0, 1, 0, 0,\n\t\t0, 0, 1, 0,\n\t\t0, 0, 0, 1\n\n\t];\n\n\tif ( arguments.length > 0 ) {\n\n\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t}\n\n}\n\nObject.assign( Matrix4.prototype, {\n\n\tisMatrix4: true,\n\n\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\treturn this;\n\n\t},\n\n\tidentity: function () {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new Matrix4().fromArray( this.elements );\n\n\t},\n\n\tcopy: function ( m ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\treturn this;\n\n\t},\n\n\tcopyPosition: function ( m ) {\n\n\t\tvar te = this.elements, me = m.elements;\n\n\t\tte[ 12 ] = me[ 12 ];\n\t\tte[ 13 ] = me[ 13 ];\n\t\tte[ 14 ] = me[ 14 ];\n\n\t\treturn this;\n\n\t},\n\n\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\treturn this;\n\n\t},\n\n\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\tthis.set(\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t0, 0, 0, 1\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\textractRotation: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function extractRotation( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\n\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\n\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tmakeRotationFromEuler: function ( euler ) {\n\n\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\tvar te = this.elements;\n\n\t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - c * f;\n\t\t\tte[ 8 ] = d;\n\n\t\t\tte[ 1 ] = af + be * d;\n\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\tte[ 9 ] = - b * c;\n\n\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\tte[ 6 ] = be + af * d;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce + df * b;\n\t\t\tte[ 4 ] = de * b - cf;\n\t\t\tte[ 8 ] = a * d;\n\n\t\t\tte[ 1 ] = a * f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b;\n\n\t\t\tte[ 2 ] = cf * b - de;\n\t\t\tte[ 6 ] = df + ce * b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce - df * b;\n\t\t\tte[ 4 ] = - a * f;\n\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\tte[ 1 ] = cf + de * b;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\tte[ 2 ] = - a * d;\n\t\t\tte[ 6 ] = b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = be * d - af;\n\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\tte[ 1 ] = c * f;\n\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\tte[ 2 ] = - d;\n\t\t\tte[ 6 ] = b * c;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\tte[ 1 ] = f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b * e;\n\n\t\t\tte[ 2 ] = - d * e;\n\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - f;\n\t\t\tte[ 8 ] = d * e;\n\n\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\tte[ 6 ] = b * e;\n\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t}\n\n\t\t// last column\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// bottom row\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationFromQuaternion: function ( q ) {\n\n\t\tvar te = this.elements;\n\n\t\tvar x = q._x, y = q._y, z = q._z, w = q._w;\n\t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\n\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\tte[ 0 ] = 1 - ( yy + zz );\n\t\tte[ 4 ] = xy - wz;\n\t\tte[ 8 ] = xz + wy;\n\n\t\tte[ 1 ] = xy + wz;\n\t\tte[ 5 ] = 1 - ( xx + zz );\n\t\tte[ 9 ] = yz - wx;\n\n\t\tte[ 2 ] = xz - wy;\n\t\tte[ 6 ] = yz + wx;\n\t\tte[ 10 ] = 1 - ( xx + yy );\n\n\t\t// last column\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// bottom row\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tlookAt: function () {\n\n\t\tvar x = new Vector3();\n\t\tvar y = new Vector3();\n\t\tvar z = new Vector3();\n\n\t\treturn function lookAt( eye, target, up ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tz.subVectors( eye, target );\n\n\t\t\tif ( z.lengthSq() === 0 ) {\n\n\t\t\t\t// eye and target are in the same position\n\n\t\t\t\tz.z = 1;\n\n\t\t\t}\n\n\t\t\tz.normalize();\n\t\t\tx.crossVectors( up, z );\n\n\t\t\tif ( x.lengthSq() === 0 ) {\n\n\t\t\t\t// up and z are parallel\n\n\t\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t\tz.x += 0.0001;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tz.z += 0.0001;\n\n\t\t\t\t}\n\n\t\t\t\tz.normalize();\n\t\t\t\tx.crossVectors( up, z );\n\n\t\t\t}\n\n\t\t\tx.normalize();\n\t\t\ty.crossVectors( z, x );\n\n\t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\n\t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\n\t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tmultiply: function ( m, n ) {\n\n\t\tif ( n !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t}\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t},\n\n\tpremultiply: function ( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t},\n\n\tmultiplyMatrices: function ( a, b ) {\n\n\t\tvar ae = a.elements;\n\t\tvar be = b.elements;\n\t\tvar te = this.elements;\n\n\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\treturn this;\n\n\t},\n\n\tapplyToBufferAttribute: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function applyToBufferAttribute( attribute ) {\n\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\tv1.x = attribute.getX( i );\n\t\t\t\tv1.y = attribute.getY( i );\n\t\t\t\tv1.z = attribute.getZ( i );\n\n\t\t\t\tv1.applyMatrix4( this );\n\n\t\t\t\tattribute.setXYZ( i, v1.x, v1.y, v1.z );\n\n\t\t\t}\n\n\t\t\treturn attribute;\n\n\t\t};\n\n\t}(),\n\n\tdeterminant: function () {\n\n\t\tvar te = this.elements;\n\n\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t//TODO: make this more efficient\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\treturn (\n\t\t\tn41 * (\n\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t - n13 * n24 * n32\n\t\t\t\t - n14 * n22 * n33\n\t\t\t\t + n12 * n24 * n33\n\t\t\t\t + n13 * n22 * n34\n\t\t\t\t - n12 * n23 * n34\n\t\t\t) +\n\t\t\tn42 * (\n\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t - n11 * n24 * n33\n\t\t\t\t + n14 * n21 * n33\n\t\t\t\t - n13 * n21 * n34\n\t\t\t\t + n13 * n24 * n31\n\t\t\t\t - n14 * n23 * n31\n\t\t\t) +\n\t\t\tn43 * (\n\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t - n11 * n22 * n34\n\t\t\t\t - n14 * n21 * n32\n\t\t\t\t + n12 * n21 * n34\n\t\t\t\t + n14 * n22 * n31\n\t\t\t\t - n12 * n24 * n31\n\t\t\t) +\n\t\t\tn44 * (\n\t\t\t\t- n13 * n22 * n31\n\t\t\t\t - n11 * n23 * n32\n\t\t\t\t + n11 * n22 * n33\n\t\t\t\t + n13 * n21 * n32\n\t\t\t\t - n12 * n21 * n33\n\t\t\t\t + n12 * n23 * n31\n\t\t\t)\n\n\t\t);\n\n\t},\n\n\ttranspose: function () {\n\n\t\tvar te = this.elements;\n\t\tvar tmp;\n\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\treturn this;\n\n\t},\n\n\tsetPosition: function ( v ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 12 ] = v.x;\n\t\tte[ 13 ] = v.y;\n\t\tte[ 14 ] = v.z;\n\n\t\treturn this;\n\n\t},\n\n\tgetInverse: function ( m, throwOnDegenerate ) {\n\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\tvar te = this.elements,\n\t\t\tme = m.elements,\n\n\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\n\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\tif ( det === 0 ) {\n\n\t\t\tvar msg = \"THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0\";\n\n\t\t\tif ( throwOnDegenerate === true ) {\n\n\t\t\t\tthrow new Error( msg );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( msg );\n\n\t\t\t}\n\n\t\t\treturn this.identity();\n\n\t\t}\n\n\t\tvar detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\tte[ 4 ] = t12 * detInv;\n\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\tte[ 8 ] = t13 * detInv;\n\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\tte[ 12 ] = t14 * detInv;\n\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\treturn this;\n\n\t},\n\n\tscale: function ( v ) {\n\n\t\tvar te = this.elements;\n\t\tvar x = v.x, y = v.y, z = v.z;\n\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\treturn this;\n\n\t},\n\n\tgetMaxScaleOnAxis: function () {\n\n\t\tvar te = this.elements;\n\n\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t},\n\n\tmakeTranslation: function ( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, x,\n\t\t\t0, 1, 0, y,\n\t\t\t0, 0, 1, z,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationX: function ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, c, - s, 0,\n\t\t\t0, s, c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationY: function ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t c, 0, s, 0,\n\t\t\t 0, 1, 0, 0,\n\t\t\t- s, 0, c, 0,\n\t\t\t 0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationZ: function ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\tc, - s, 0, 0,\n\t\t\ts, c, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationAxis: function ( axis, angle ) {\n\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\tvar c = Math.cos( angle );\n\t\tvar s = Math.sin( angle );\n\t\tvar t = 1 - c;\n\t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t\tvar tx = t * x, ty = t * y;\n\n\t\tthis.set(\n\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\t return this;\n\n\t},\n\n\tmakeScale: function ( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\tx, 0, 0, 0,\n\t\t\t0, y, 0, 0,\n\t\t\t0, 0, z, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeShear: function ( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\t1, y, z, 0,\n\t\t\tx, 1, z, 0,\n\t\t\tx, y, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tcompose: function ( position, quaternion, scale ) {\n\n\t\tthis.makeRotationFromQuaternion( quaternion );\n\t\tthis.scale( scale );\n\t\tthis.setPosition( position );\n\n\t\treturn this;\n\n\t},\n\n\tdecompose: function () {\n\n\t\tvar vector = new Vector3();\n\t\tvar matrix = new Matrix4();\n\n\t\treturn function decompose( position, quaternion, scale ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t\t// if determine is negative, we need to invert one scale\n\t\t\tvar det = this.determinant();\n\t\t\tif ( det < 0 ) sx = - sx;\n\n\t\t\tposition.x = te[ 12 ];\n\t\t\tposition.y = te[ 13 ];\n\t\t\tposition.z = te[ 14 ];\n\n\t\t\t// scale the rotation part\n\t\t\tmatrix.copy( this );\n\n\t\t\tvar invSX = 1 / sx;\n\t\t\tvar invSY = 1 / sy;\n\t\t\tvar invSZ = 1 / sz;\n\n\t\t\tmatrix.elements[ 0 ] *= invSX;\n\t\t\tmatrix.elements[ 1 ] *= invSX;\n\t\t\tmatrix.elements[ 2 ] *= invSX;\n\n\t\t\tmatrix.elements[ 4 ] *= invSY;\n\t\t\tmatrix.elements[ 5 ] *= invSY;\n\t\t\tmatrix.elements[ 6 ] *= invSY;\n\n\t\t\tmatrix.elements[ 8 ] *= invSZ;\n\t\t\tmatrix.elements[ 9 ] *= invSZ;\n\t\t\tmatrix.elements[ 10 ] *= invSZ;\n\n\t\t\tquaternion.setFromRotationMatrix( matrix );\n\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tmakePerspective: function ( left, right, top, bottom, near, far ) {\n\n\t\tif ( far === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\n\n\t\t}\n\n\t\tvar te = this.elements;\n\t\tvar x = 2 * near / ( right - left );\n\t\tvar y = 2 * near / ( top - bottom );\n\n\t\tvar a = ( right + left ) / ( right - left );\n\t\tvar b = ( top + bottom ) / ( top - bottom );\n\t\tvar c = - ( far + near ) / ( far - near );\n\t\tvar d = - 2 * far * near / ( far - near );\n\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\treturn this;\n\n\t},\n\n\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n\t\tvar te = this.elements;\n\t\tvar w = 1.0 / ( right - left );\n\t\tvar h = 1.0 / ( top - bottom );\n\t\tvar p = 1.0 / ( far - near );\n\n\t\tvar x = ( right + left ) * w;\n\t\tvar y = ( top + bottom ) * h;\n\t\tvar z = ( far + near ) * p;\n\n\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( matrix ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = matrix.elements;\n\n\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tvar te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\treturn array;\n\n\t}\n\n} );\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n */\n\nfunction Quaternion( x, y, z, w ) {\n\n\tthis._x = x || 0;\n\tthis._y = y || 0;\n\tthis._z = z || 0;\n\tthis._w = ( w !== undefined ) ? w : 1;\n\n}\n\nObject.assign( Quaternion, {\n\n\tslerp: function ( qa, qb, qm, t ) {\n\n\t\treturn qm.copy( qa ).slerp( qb, t );\n\n\t},\n\n\tslerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\tw0 = src0[ srcOffset0 + 3 ],\n\n\t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\tvar s = 1 - t,\n\n\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t}\n\n\t\t\tvar tDir = t * dir;\n\n\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t// Normalize in case we just did a lerp:\n\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\tx0 *= f;\n\t\t\t\ty0 *= f;\n\t\t\t\tz0 *= f;\n\t\t\t\tw0 *= f;\n\n\t\t\t}\n\n\t\t}\n\n\t\tdst[ dstOffset ] = x0;\n\t\tdst[ dstOffset + 1 ] = y0;\n\t\tdst[ dstOffset + 2 ] = z0;\n\t\tdst[ dstOffset + 3 ] = w0;\n\n\t}\n\n} );\n\nObject.defineProperties( Quaternion.prototype, {\n\n\tx: {\n\n\t\tget: function () {\n\n\t\t\treturn this._x;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._x = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t}\n\n\t},\n\n\ty: {\n\n\t\tget: function () {\n\n\t\t\treturn this._y;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._y = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t}\n\n\t},\n\n\tz: {\n\n\t\tget: function () {\n\n\t\t\treturn this._z;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._z = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t}\n\n\t},\n\n\tw: {\n\n\t\tget: function () {\n\n\t\t\treturn this._w;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._w = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t}\n\n\t}\n\n} );\n\nObject.assign( Quaternion.prototype, {\n\n\tset: function ( x, y, z, w ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t},\n\n\tcopy: function ( quaternion ) {\n\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromEuler: function ( euler, update ) {\n\n\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\tvar x = euler._x, y = euler._y, z = euler._z, order = euler.order;\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t//\tcontent/SpinCalc.m\n\n\t\tvar cos = Math.cos;\n\t\tvar sin = Math.sin;\n\n\t\tvar c1 = cos( x / 2 );\n\t\tvar c2 = cos( y / 2 );\n\t\tvar c3 = cos( z / 2 );\n\n\t\tvar s1 = sin( x / 2 );\n\t\tvar s2 = sin( y / 2 );\n\t\tvar s3 = sin( z / 2 );\n\n\t\tif ( order === 'XYZ' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t} else if ( order === 'YZX' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'XZY' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t}\n\n\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromAxisAngle: function ( axis, angle ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t// assumes axis is normalized\n\n\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\tthis._x = axis.x * s;\n\t\tthis._y = axis.y * s;\n\t\tthis._z = axis.z * s;\n\t\tthis._w = Math.cos( halfAngle );\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromRotationMatrix: function ( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar te = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\ttrace = m11 + m22 + m33,\n\t\t\ts;\n\n\t\tif ( trace > 0 ) {\n\n\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\tthis._w = 0.25 / s;\n\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\tthis._x = 0.25 * s;\n\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t} else if ( m22 > m33 ) {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\tthis._y = 0.25 * s;\n\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t} else {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\tthis._z = 0.25 * s;\n\n\t\t}\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromUnitVectors: function () {\n\n\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\tvar v1 = new Vector3();\n\t\tvar r;\n\n\t\tvar EPS = 0.000001;\n\n\t\treturn function setFromUnitVectors( vFrom, vTo ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n\t\t\tr = vFrom.dot( vTo ) + 1;\n\n\t\t\tif ( r < EPS ) {\n\n\t\t\t\tr = 0;\n\n\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tv1.crossVectors( vFrom, vTo );\n\n\t\t\t}\n\n\t\t\tthis._x = v1.x;\n\t\t\tthis._y = v1.y;\n\t\t\tthis._z = v1.z;\n\t\t\tthis._w = r;\n\n\t\t\treturn this.normalize();\n\n\t\t};\n\n\t}(),\n\n\tinverse: function () {\n\n\t\t// quaternion is assumed to have unit length\n\n\t\treturn this.conjugate();\n\n\t},\n\n\tconjugate: function () {\n\n\t\tthis._x *= - 1;\n\t\tthis._y *= - 1;\n\t\tthis._z *= - 1;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t},\n\n\tnormalize: function () {\n\n\t\tvar l = this.length();\n\n\t\tif ( l === 0 ) {\n\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\n\t\t} else {\n\n\t\t\tl = 1 / l;\n\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\n\t\t}\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( q, p ) {\n\n\t\tif ( p !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t}\n\n\t\treturn this.multiplyQuaternions( this, q );\n\n\t},\n\n\tpremultiply: function ( q ) {\n\n\t\treturn this.multiplyQuaternions( q, this );\n\n\t},\n\n\tmultiplyQuaternions: function ( a, b ) {\n\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tslerp: function ( qb, t ) {\n\n\t\tif ( t === 0 ) return this;\n\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\tthis._w = - qb._w;\n\t\t\tthis._x = - qb._x;\n\t\t\tthis._y = - qb._y;\n\t\t\tthis._z = - qb._z;\n\n\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t} else {\n\n\t\t\tthis.copy( qb );\n\n\t\t}\n\n\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\tthis._w = w;\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\n\n\t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\n\n\t\t\tthis._w = 0.5 * ( w + this._w );\n\t\t\tthis._x = 0.5 * ( x + this._x );\n\t\t\tthis._y = 0.5 * ( y + this._y );\n\t\t\tthis._z = 0.5 * ( z + this._z );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( quaternion ) {\n\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis._x = array[ offset ];\n\t\tthis._y = array[ offset + 1 ];\n\t\tthis._z = array[ offset + 2 ];\n\t\tthis._w = array[ offset + 3 ];\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._w;\n\n\t\treturn array;\n\n\t},\n\n\tonChange: function ( callback ) {\n\n\t\tthis.onChangeCallback = callback;\n\n\t\treturn this;\n\n\t},\n\n\tonChangeCallback: function () {}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author kile / http://kile.stravaganza.org/\n * @author philogb / http://blog.thejit.org/\n * @author mikael emtinger / http://gomo.se/\n * @author egraether / http://egraether.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction Vector3( x, y, z ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\tthis.z = z || 0;\n\n}\n\nObject.assign( Vector3.prototype, {\n\n\tisVector3: true,\n\n\tset: function ( x, y, z ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\n\t\treturn this;\n\n\t},\n\n\taddScaledVector: function ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tsubScalar: function ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t}\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyVectors: function ( a, b ) {\n\n\t\tthis.x = a.x * b.x;\n\t\tthis.y = a.y * b.y;\n\t\tthis.z = a.z * b.z;\n\n\t\treturn this;\n\n\t},\n\n\tapplyEuler: function () {\n\n\t\tvar quaternion = new Quaternion();\n\n\t\treturn function applyEuler( euler ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\n\n\t\t};\n\n\t}(),\n\n\tapplyAxisAngle: function () {\n\n\t\tvar quaternion = new Quaternion();\n\n\t\treturn function applyAxisAngle( axis, angle ) {\n\n\t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\n\n\t\t};\n\n\t}(),\n\n\tapplyMatrix3: function ( m ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function ( m ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\n\t\tvar w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\treturn this;\n\n\t},\n\n\tapplyQuaternion: function ( q ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t// calculate quat * vector\n\n\t\tvar ix = qw * x + qy * z - qz * y;\n\t\tvar iy = qw * y + qz * x - qx * z;\n\t\tvar iz = qw * z + qx * y - qy * x;\n\t\tvar iw = - qx * x - qy * y - qz * z;\n\n\t\t// calculate result * inverse quat\n\n\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\treturn this;\n\n\t},\n\n\tproject: function () {\n\n\t\tvar matrix = new Matrix4();\n\n\t\treturn function project( camera ) {\n\n\t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\n\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t};\n\n\t}(),\n\n\tunproject: function () {\n\n\t\tvar matrix = new Matrix4();\n\n\t\treturn function unproject( camera ) {\n\n\t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\n\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t};\n\n\t}(),\n\n\ttransformDirection: function ( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\t\t// vector interpreted as a direction\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\treturn this.normalize();\n\n\t},\n\n\tdivide: function ( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\t\tthis.z /= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampScalar: function () {\n\n\t\tvar min = new Vector3();\n\t\tvar max = new Vector3();\n\n\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\tmin.set( minVal, minVal, minVal );\n\t\t\tmax.set( maxVal, maxVal, maxVal );\n\n\t\t\treturn this.clamp( min, max );\n\n\t\t};\n\n\t}(),\n\n\tclampLength: function ( min, max ) {\n\n\t\tvar length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t},\n\n\tfloor: function () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tceil: function () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tround: function () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\n\t\treturn this;\n\n\t},\n\n\troundToZero: function () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t},\n\n\t// TODO lengthSquared?\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t},\n\n\tmanhattanLength: function () {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t},\n\n\tsetLength: function ( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t},\n\n\tcross: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\treturn this.crossVectors( v, w );\n\n\t\t}\n\n\t\treturn this.crossVectors( this, v );\n\n\t},\n\n\tcrossVectors: function ( a, b ) {\n\n\t\tvar ax = a.x, ay = a.y, az = a.z;\n\t\tvar bx = b.x, by = b.y, bz = b.z;\n\n\t\tthis.x = ay * bz - az * by;\n\t\tthis.y = az * bx - ax * bz;\n\t\tthis.z = ax * by - ay * bx;\n\n\t\treturn this;\n\n\t},\n\n\tprojectOnVector: function ( vector ) {\n\n\t\tvar scalar = vector.dot( this ) / vector.lengthSq();\n\n\t\treturn this.copy( vector ).multiplyScalar( scalar );\n\n\t},\n\n\tprojectOnPlane: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function projectOnPlane( planeNormal ) {\n\n\t\t\tv1.copy( this ).projectOnVector( planeNormal );\n\n\t\t\treturn this.sub( v1 );\n\n\t\t};\n\n\t}(),\n\n\treflect: function () {\n\n\t\t// reflect incident vector off plane orthogonal to normal\n\t\t// normal is assumed to have unit length\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function reflect( normal ) {\n\n\t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t\t};\n\n\t}(),\n\n\tangleTo: function ( v ) {\n\n\t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( _Math.clamp( theta, - 1, 1 ) );\n\n\t},\n\n\tdistanceTo: function ( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t},\n\n\tdistanceToSquared: function ( v ) {\n\n\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t},\n\n\tmanhattanDistanceTo: function ( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t},\n\n\tsetFromSpherical: function ( s ) {\n\n\t\tvar sinPhiRadius = Math.sin( s.phi ) * s.radius;\n\n\t\tthis.x = sinPhiRadius * Math.sin( s.theta );\n\t\tthis.y = Math.cos( s.phi ) * s.radius;\n\t\tthis.z = sinPhiRadius * Math.cos( s.theta );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCylindrical: function ( c ) {\n\n\t\tthis.x = c.radius * Math.sin( c.theta );\n\t\tthis.y = c.y;\n\t\tthis.z = c.radius * Math.cos( c.theta );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrixPosition: function ( m ) {\n\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 12 ];\n\t\tthis.y = e[ 13 ];\n\t\tthis.z = e[ 14 ];\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrixScale: function ( m ) {\n\n\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\tthis.x = sx;\n\t\tthis.y = sy;\n\t\tthis.z = sz;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrixColumn: function ( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\n\t\treturn array;\n\n\t},\n\n\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\tif ( offset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\n\n\t\t}\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n * @author tschw\n */\n\nfunction Matrix3() {\n\n\tthis.elements = [\n\n\t\t1, 0, 0,\n\t\t0, 1, 0,\n\t\t0, 0, 1\n\n\t];\n\n\tif ( arguments.length > 0 ) {\n\n\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t}\n\n}\n\nObject.assign( Matrix3.prototype, {\n\n\tisMatrix3: true,\n\n\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\treturn this;\n\n\t},\n\n\tidentity: function () {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().fromArray( this.elements );\n\n\t},\n\n\tcopy: function ( m ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrix4: function ( m ) {\n\n\t\tvar me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\n\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\n\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tapplyToBufferAttribute: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function applyToBufferAttribute( attribute ) {\n\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\tv1.x = attribute.getX( i );\n\t\t\t\tv1.y = attribute.getY( i );\n\t\t\t\tv1.z = attribute.getZ( i );\n\n\t\t\t\tv1.applyMatrix3( this );\n\n\t\t\t\tattribute.setXYZ( i, v1.x, v1.y, v1.z );\n\n\t\t\t}\n\n\t\t\treturn attribute;\n\n\t\t};\n\n\t}(),\n\n\tmultiply: function ( m ) {\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t},\n\n\tpremultiply: function ( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t},\n\n\tmultiplyMatrices: function ( a, b ) {\n\n\t\tvar ae = a.elements;\n\t\tvar be = b.elements;\n\t\tvar te = this.elements;\n\n\t\tvar a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n\t\tvar a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n\t\tvar a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n\n\t\tvar b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n\t\tvar b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n\t\tvar b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\treturn this;\n\n\t},\n\n\tdeterminant: function () {\n\n\t\tvar te = this.elements;\n\n\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t},\n\n\tgetInverse: function ( matrix, throwOnDegenerate ) {\n\n\t\tif ( matrix && matrix.isMatrix4 ) {\n\n\t\t\tconsole.error( \"THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.\" );\n\n\t\t}\n\n\t\tvar me = matrix.elements,\n\t\t\tte = this.elements,\n\n\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\n\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\tif ( det === 0 ) {\n\n\t\t\tvar msg = \"THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0\";\n\n\t\t\tif ( throwOnDegenerate === true ) {\n\n\t\t\t\tthrow new Error( msg );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( msg );\n\n\t\t\t}\n\n\t\t\treturn this.identity();\n\n\t\t}\n\n\t\tvar detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\tte[ 3 ] = t12 * detInv;\n\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\tte[ 6 ] = t13 * detInv;\n\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\treturn this;\n\n\t},\n\n\ttranspose: function () {\n\n\t\tvar tmp, m = this.elements;\n\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\treturn this;\n\n\t},\n\n\tgetNormalMatrix: function ( matrix4 ) {\n\n\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\n\t},\n\n\ttransposeIntoArray: function ( r ) {\n\n\t\tvar m = this.elements;\n\n\t\tr[ 0 ] = m[ 0 ];\n\t\tr[ 1 ] = m[ 3 ];\n\t\tr[ 2 ] = m[ 6 ];\n\t\tr[ 3 ] = m[ 1 ];\n\t\tr[ 4 ] = m[ 4 ];\n\t\tr[ 5 ] = m[ 7 ];\n\t\tr[ 6 ] = m[ 2 ];\n\t\tr[ 7 ] = m[ 5 ];\n\t\tr[ 8 ] = m[ 8 ];\n\n\t\treturn this;\n\n\t},\n\n\tsetUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {\n\n\t\tvar c = Math.cos( rotation );\n\t\tvar s = Math.sin( rotation );\n\n\t\tthis.set(\n\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\n\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\n\t\t\t0, 0, 1\n\t\t);\n\n\t},\n\n\tscale: function ( sx, sy ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\n\t\tte[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\n\n\t\treturn this;\n\n\t},\n\n\trotate: function ( theta ) {\n\n\t\tvar c = Math.cos( theta );\n\t\tvar s = Math.sin( theta );\n\n\t\tvar te = this.elements;\n\n\t\tvar a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\n\t\tvar a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\n\n\t\tte[ 0 ] = c * a11 + s * a21;\n\t\tte[ 3 ] = c * a12 + s * a22;\n\t\tte[ 6 ] = c * a13 + s * a23;\n\n\t\tte[ 1 ] = - s * a11 + c * a21;\n\t\tte[ 4 ] = - s * a12 + c * a22;\n\t\tte[ 7 ] = - s * a13 + c * a23;\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( tx, ty ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\n\t\tte[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( matrix ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = matrix.elements;\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tvar te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\n\t\treturn array;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author szimek / https://github.com/szimek/\n */\n\nvar textureId = 0;\n\nfunction Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\tObject.defineProperty( this, 'id', { value: textureId ++ } );\n\n\tthis.uuid = _Math.generateUUID();\n\n\tthis.name = '';\n\n\tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n\tthis.mipmaps = [];\n\n\tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\n\tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n\tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\n\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;\n\n\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n\tthis.format = format !== undefined ? format : RGBAFormat;\n\tthis.type = type !== undefined ? type : UnsignedByteType;\n\n\tthis.offset = new Vector2( 0, 0 );\n\tthis.repeat = new Vector2( 1, 1 );\n\tthis.center = new Vector2( 0, 0 );\n\tthis.rotation = 0;\n\n\tthis.matrixAutoUpdate = true;\n\tthis.matrix = new Matrix3();\n\n\tthis.generateMipmaps = true;\n\tthis.premultiplyAlpha = false;\n\tthis.flipY = true;\n\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t//\n\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\tthis.encoding = encoding !== undefined ? encoding : LinearEncoding;\n\n\tthis.version = 0;\n\tthis.onUpdate = null;\n\n}\n\nTexture.DEFAULT_IMAGE = undefined;\nTexture.DEFAULT_MAPPING = UVMapping;\n\nTexture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\tconstructor: Texture,\n\n\tisTexture: true,\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.image = source.image;\n\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\tthis.mapping = source.mapping;\n\n\t\tthis.wrapS = source.wrapS;\n\t\tthis.wrapT = source.wrapT;\n\n\t\tthis.magFilter = source.magFilter;\n\t\tthis.minFilter = source.minFilter;\n\n\t\tthis.anisotropy = source.anisotropy;\n\n\t\tthis.format = source.format;\n\t\tthis.type = source.type;\n\n\t\tthis.offset.copy( source.offset );\n\t\tthis.repeat.copy( source.repeat );\n\t\tthis.center.copy( source.center );\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrix.copy( source.matrix );\n\n\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\tthis.flipY = source.flipY;\n\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\tthis.encoding = source.encoding;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t}\n\n\t\tfunction getDataURL( image ) {\n\n\t\t\tvar canvas;\n\n\t\t\tif ( image instanceof HTMLCanvasElement ) {\n\n\t\t\t\tcanvas = image;\n\n\t\t\t} else {\n\n\t\t\t\tcanvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\tcanvas.width = image.width;\n\t\t\t\tcanvas.height = image.height;\n\n\t\t\t\tvar context = canvas.getContext( '2d' );\n\n\t\t\t\tif ( image instanceof ImageData ) {\n\n\t\t\t\t\tcontext.putImageData( image, 0, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t\t} else {\n\n\t\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar output = {\n\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Texture',\n\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t},\n\n\t\t\tuuid: this.uuid,\n\t\t\tname: this.name,\n\n\t\t\tmapping: this.mapping,\n\n\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\tcenter: [ this.center.x, this.center.y ],\n\t\t\trotation: this.rotation,\n\n\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\tformat: this.format,\n\t\t\tminFilter: this.minFilter,\n\t\t\tmagFilter: this.magFilter,\n\t\t\tanisotropy: this.anisotropy,\n\n\t\t\tflipY: this.flipY\n\n\t\t};\n\n\t\tif ( this.image !== undefined ) {\n\n\t\t\t// TODO: Move to THREE.Image\n\n\t\t\tvar image = this.image;\n\n\t\t\tif ( image.uuid === undefined ) {\n\n\t\t\t\timage.uuid = _Math.generateUUID(); // UGH\n\n\t\t\t}\n\n\t\t\tif ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {\n\n\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\turl: getDataURL( image )\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\toutput.image = image.uuid;\n\n\t\t}\n\n\t\tif ( ! isRootObject ) {\n\n\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t}\n\n\t\treturn output;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t},\n\n\ttransformUv: function ( uv ) {\n\n\t\tif ( this.mapping !== UVMapping ) return;\n\n\t\tuv.applyMatrix3( this.matrix );\n\n\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.flipY ) {\n\n\t\t\tuv.y = 1 - uv.y;\n\n\t\t}\n\n\t}\n\n} );\n\nObject.defineProperty( Texture.prototype, \"needsUpdate\", {\n\n\tset: function ( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n} );\n\n/**\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author philogb / http://blog.thejit.org/\n * @author mikael emtinger / http://gomo.se/\n * @author egraether / http://egraether.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction Vector4( x, y, z, w ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\tthis.z = z || 0;\n\tthis.w = ( w !== undefined ) ? w : 1;\n\n}\n\nObject.assign( Vector4.prototype, {\n\n\tisVector4: true,\n\n\tset: function ( x, y, z, w ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\t\tthis.w = scalar;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetW: function ( w ) {\n\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tcase 3: this.w = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tcase 3: return this.w;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\t\tthis.w += v.w;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\t\tthis.w += s;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\t\tthis.w = a.w + b.w;\n\n\t\treturn this;\n\n\t},\n\n\taddScaledVector: function ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\t\tthis.w += v.w * s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\t\tthis.w -= v.w;\n\n\t\treturn this;\n\n\t},\n\n\tsubScalar: function ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\t\tthis.w -= s;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\t\tthis.w = a.w - b.w;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\t\tthis.w *= scalar;\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function ( m ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t},\n\n\tsetAxisAngleFromQuaternion: function ( q ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t// q is assumed to be normalized\n\n\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n\t\tif ( s < 0.0001 ) {\n\n\t\t\tthis.x = 1;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\n\t\t} else {\n\n\t\t\tthis.x = q.x / s;\n\t\t\tthis.y = q.y / s;\n\t\t\tthis.z = q.z / s;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar angle, x, y, z,\t\t// variables for result\n\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\tte = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t// singularity found\n\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t}\n\n\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\tangle = Math.PI;\n\n\t\t\tvar xx = ( m11 + 1 ) / 2;\n\t\t\tvar yy = ( m22 + 1 ) / 2;\n\t\t\tvar zz = ( m33 + 1 ) / 2;\n\t\t\tvar xy = ( m12 + m21 ) / 4;\n\t\t\tvar xz = ( m13 + m31 ) / 4;\n\t\t\tvar yz = ( m23 + m32 ) / 4;\n\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\tx = 0;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\ty = xy / x;\n\t\t\t\t\tz = xz / x;\n\n\t\t\t\t}\n\n\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\tx = xy / y;\n\t\t\t\t\tz = yz / y;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\tx = xz / z;\n\t\t\t\t\ty = yz / z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.set( x, y, z, angle );\n\n\t\t\treturn this; // return 180 deg rotation\n\n\t\t}\n\n\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\tthis.x = ( m32 - m23 ) / s;\n\t\tthis.y = ( m13 - m31 ) / s;\n\t\tthis.z = ( m21 - m12 ) / s;\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\treturn this;\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\t\tthis.w = Math.min( this.w, v.w );\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\t\tthis.w = Math.max( this.w, v.w );\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampScalar: function () {\n\n\t\tvar min, max;\n\n\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\tif ( min === undefined ) {\n\n\t\t\t\tmin = new Vector4();\n\t\t\t\tmax = new Vector4();\n\n\t\t\t}\n\n\t\t\tmin.set( minVal, minVal, minVal, minVal );\n\t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\n\n\t\t\treturn this.clamp( min, max );\n\n\t\t};\n\n\t}(),\n\n\tclampLength: function ( min, max ) {\n\n\t\tvar length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t},\n\n\tfloor: function () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\t\tthis.w = Math.floor( this.w );\n\n\t\treturn this;\n\n\t},\n\n\tceil: function () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\t\tthis.w = Math.ceil( this.w );\n\n\t\treturn this;\n\n\t},\n\n\tround: function () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\t\tthis.w = Math.round( this.w );\n\n\t\treturn this;\n\n\t},\n\n\troundToZero: function () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\t\tthis.w = - this.w;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t},\n\n\tmanhattanLength: function () {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t},\n\n\tsetLength: function ( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\t\tthis.w = array[ offset + 3 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\t\tarray[ offset + 3 ] = this.w;\n\n\t\treturn array;\n\n\t},\n\n\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\tif ( offset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\n\n\t\t}\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\t\tthis.w = attribute.getW( index );\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author szimek / https://github.com/szimek/\n * @author alteredq / http://alteredqualia.com/\n * @author Marius Kintel / https://github.com/kintel\n */\n\n/*\n In options, we can specify:\n * Texture parameters for an auto-generated target texture\n * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n*/\nfunction WebGLRenderTarget( width, height, options ) {\n\n\tthis.width = width;\n\tthis.height = height;\n\n\tthis.scissor = new Vector4( 0, 0, width, height );\n\tthis.scissorTest = false;\n\n\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\toptions = options || {};\n\n\tif ( options.minFilter === undefined ) options.minFilter = LinearFilter;\n\n\tthis.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n}\n\nWebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\tconstructor: WebGLRenderTarget,\n\n\tisWebGLRenderTarget: true,\n\n\tsetSize: function ( width, height ) {\n\n\t\tif ( this.width !== width || this.height !== height ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t\tthis.viewport.set( 0, 0, width, height );\n\t\tthis.scissor.set( 0, 0, width, height );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\n\t\tthis.viewport.copy( source.viewport );\n\n\t\tthis.texture = source.texture.clone();\n\n\t\tthis.depthBuffer = source.depthBuffer;\n\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\tthis.depthTexture = source.depthTexture;\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com\n */\n\nfunction WebGLRenderTargetCube( width, height, options ) {\n\n\tWebGLRenderTarget.call( this, width, height, options );\n\n\tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n\tthis.activeMipMapLevel = 0;\n\n}\n\nWebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );\nWebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;\n\nWebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\tthis.image = { data: data, width: width, height: height };\n\n\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\tthis.generateMipmaps = false;\n\tthis.flipY = false;\n\tthis.unpackAlignment = 1;\n\n}\n\nDataTexture.prototype = Object.create( Texture.prototype );\nDataTexture.prototype.constructor = DataTexture;\n\nDataTexture.prototype.isDataTexture = true;\n\n/**\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction Box3( min, max ) {\n\n\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\n}\n\nObject.assign( Box3.prototype, {\n\n\tisBox3: true,\n\n\tset: function ( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromArray: function ( array ) {\n\n\t\tvar minX = + Infinity;\n\t\tvar minY = + Infinity;\n\t\tvar minZ = + Infinity;\n\n\t\tvar maxX = - Infinity;\n\t\tvar maxY = - Infinity;\n\t\tvar maxZ = - Infinity;\n\n\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\tvar x = array[ i ];\n\t\t\tvar y = array[ i + 1 ];\n\t\t\tvar z = array[ i + 2 ];\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromBufferAttribute: function ( attribute ) {\n\n\t\tvar minX = + Infinity;\n\t\tvar minY = + Infinity;\n\t\tvar minZ = + Infinity;\n\n\t\tvar maxX = - Infinity;\n\t\tvar maxY = - Infinity;\n\t\tvar maxZ = - Infinity;\n\n\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\tvar x = attribute.getX( i );\n\t\t\tvar y = attribute.getY( i );\n\t\t\tvar z = attribute.getZ( i );\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPoints: function ( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCenterAndSize: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function setFromCenterAndSize( center, size ) {\n\n\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tsetFromObject: function ( object ) {\n\n\t\tthis.makeEmpty();\n\n\t\treturn this.expandByObject( object );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tmakeEmpty: function () {\n\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\treturn this;\n\n\t},\n\n\tisEmpty: function () {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t},\n\n\tgetCenter: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .getCenter() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t},\n\n\tgetSize: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .getSize() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t},\n\n\texpandByPoint: function ( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t},\n\n\texpandByVector: function ( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t},\n\n\texpandByScalar: function ( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t},\n\n\texpandByObject: function () {\n\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t// accounting for both the object's, and children's, world transforms\n\n\t\tvar scope, i, l;\n\n\t\tvar v1 = new Vector3();\n\n\t\tfunction traverse( node ) {\n\n\t\t\tvar geometry = node.geometry;\n\n\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\t\tfor ( i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tv1.copy( vertices[ i ] );\n\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\tvar attribute = geometry.attributes.position;\n\n\t\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\t\tfor ( i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tv1.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn function expandByObject( object ) {\n\n\t\t\tscope = this;\n\n\t\t\tobject.updateMatrixWorld( true );\n\n\t\t\tobject.traverse( traverse );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tcontainsPoint: function ( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t},\n\n\tcontainsBox: function ( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t},\n\n\tgetParameter: function ( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .getParameter() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t);\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t},\n\n\tintersectsSphere: ( function () {\n\n\t\tvar closestPoint = new Vector3();\n\n\t\treturn function intersectsSphere( sphere ) {\n\n\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\tthis.clampPoint( sphere.center, closestPoint );\n\n\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t};\n\n\t} )(),\n\n\tintersectsPlane: function ( plane ) {\n\n\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\tvar min, max;\n\n\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t} else {\n\n\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t}\n\n\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t}\n\n\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t}\n\n\t\treturn ( min <= plane.constant && max >= plane.constant );\n\n\t},\n\n\tintersectsTriangle: ( function () {\n\n\t\t// triangle centered vertices\n\t\tvar v0 = new Vector3();\n\t\tvar v1 = new Vector3();\n\t\tvar v2 = new Vector3();\n\n\t\t// triangle edge vectors\n\t\tvar f0 = new Vector3();\n\t\tvar f1 = new Vector3();\n\t\tvar f2 = new Vector3();\n\n\t\tvar testAxis = new Vector3();\n\n\t\tvar center = new Vector3();\n\t\tvar extents = new Vector3();\n\n\t\tvar triangleNormal = new Vector3();\n\n\t\tfunction satForAxes( axes ) {\n\n\t\t\tvar i, j;\n\n\t\t\tfor ( i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t\t\ttestAxis.fromArray( axes, i );\n\t\t\t\t// project the aabb onto the seperating axis\n\t\t\t\tvar r = extents.x * Math.abs( testAxis.x ) + extents.y * Math.abs( testAxis.y ) + extents.z * Math.abs( testAxis.z );\n\t\t\t\t// project all 3 vertices of the triangle onto the seperating axis\n\t\t\t\tvar p0 = v0.dot( testAxis );\n\t\t\t\tvar p1 = v1.dot( testAxis );\n\t\t\t\tvar p2 = v2.dot( testAxis );\n\t\t\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\t\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t\t\t// the axis is seperating and we can exit\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn function intersectsTriangle( triangle ) {\n\n\t\t\tif ( this.isEmpty() ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// compute box center and extents\n\t\t\tthis.getCenter( center );\n\t\t\textents.subVectors( this.max, center );\n\n\t\t\t// translate triangle to aabb origin\n\t\t\tv0.subVectors( triangle.a, center );\n\t\t\tv1.subVectors( triangle.b, center );\n\t\t\tv2.subVectors( triangle.c, center );\n\n\t\t\t// compute edge vectors for triangle\n\t\t\tf0.subVectors( v1, v0 );\n\t\t\tf1.subVectors( v2, v1 );\n\t\t\tf2.subVectors( v0, v2 );\n\n\t\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\t\tvar axes = [\n\t\t\t\t0, - f0.z, f0.y, 0, - f1.z, f1.y, 0, - f2.z, f2.y,\n\t\t\t\tf0.z, 0, - f0.x, f1.z, 0, - f1.x, f2.z, 0, - f2.x,\n\t\t\t\t- f0.y, f0.x, 0, - f1.y, f1.x, 0, - f2.y, f2.x, 0\n\t\t\t];\n\t\t\tif ( ! satForAxes( axes ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// test 3 face normals from the aabb\n\t\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\t\tif ( ! satForAxes( axes ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// finally testing the face normal of the triangle\n\t\t\t// use already existing triangle edge vectors here\n\t\t\ttriangleNormal.crossVectors( f0, f1 );\n\t\t\taxes = [ triangleNormal.x, triangleNormal.y, triangleNormal.z ];\n\t\t\treturn satForAxes( axes );\n\n\t\t};\n\n\t} )(),\n\n\tclampPoint: function ( point, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .clampPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t},\n\n\tdistanceToPoint: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function distanceToPoint( point ) {\n\n\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t};\n\n\t}(),\n\n\tgetBoundingSphere: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function getBoundingSphere( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getBoundingSphere() target is now required' );\n\t\t\t\ttarget = new Sphere();\n\n\t\t\t}\n\n\t\t\tthis.getCenter( target.center );\n\n\t\t\ttarget.radius = this.getSize( v1 ).length() * 0.5;\n\n\t\t\treturn target;\n\n\t\t};\n\n\t}(),\n\n\tintersect: function ( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t},\n\n\tunion: function ( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function () {\n\n\t\tvar points = [\n\t\t\tnew Vector3(),\n\t\t\tnew Vector3(),\n\t\t\tnew Vector3(),\n\t\t\tnew Vector3(),\n\t\t\tnew Vector3(),\n\t\t\tnew Vector3(),\n\t\t\tnew Vector3(),\n\t\t\tnew Vector3()\n\t\t];\n\n\t\treturn function applyMatrix4( matrix ) {\n\n\t\t\t// transform of empty box is an empty box.\n\t\t\tif ( this.isEmpty() ) return this;\n\n\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );\t// 111\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n} );\n\n/**\n * @author bhouston / http://clara.io\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Sphere( center, radius ) {\n\n\tthis.center = ( center !== undefined ) ? center : new Vector3();\n\tthis.radius = ( radius !== undefined ) ? radius : 0;\n\n}\n\nObject.assign( Sphere.prototype, {\n\n\tset: function ( center, radius ) {\n\n\t\tthis.center.copy( center );\n\t\tthis.radius = radius;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPoints: function () {\n\n\t\tvar box = new Box3();\n\n\t\treturn function setFromPoints( points, optionalCenter ) {\n\n\t\t\tvar center = this.center;\n\n\t\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\t\tcenter.copy( optionalCenter );\n\n\t\t\t} else {\n\n\t\t\t\tbox.setFromPoints( points ).getCenter( center );\n\n\t\t\t}\n\n\t\t\tvar maxRadiusSq = 0;\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( sphere ) {\n\n\t\tthis.center.copy( sphere.center );\n\t\tthis.radius = sphere.radius;\n\n\t\treturn this;\n\n\t},\n\n\tempty: function () {\n\n\t\treturn ( this.radius <= 0 );\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t},\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\tvar radiusSum = this.radius + sphere.radius;\n\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\treturn box.intersectsSphere( this );\n\n\t},\n\n\tintersectsPlane: function ( plane ) {\n\n\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t},\n\n\tclampPoint: function ( point, target ) {\n\n\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Sphere: .clampPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\ttarget.copy( point );\n\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\ttarget.sub( this.center ).normalize();\n\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\n\n\t\t}\n\n\t\treturn target;\n\n\t},\n\n\tgetBoundingBox: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );\n\t\t\ttarget = new Box3();\n\n\t\t}\n\n\t\ttarget.set( this.center, this.center );\n\t\ttarget.expandByScalar( this.radius );\n\n\t\treturn target;\n\n\t},\n\n\tapplyMatrix4: function ( matrix ) {\n\n\t\tthis.center.applyMatrix4( matrix );\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.center.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( sphere ) {\n\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t}\n\n} );\n\n/**\n * @author bhouston / http://clara.io\n */\n\nfunction Plane( normal, constant ) {\n\n\t// normal is assumed to be normalized\n\n\tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\n\tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n}\n\nObject.assign( Plane.prototype, {\n\n\tset: function ( normal, constant ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = constant;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponents: function ( x, y, z, w ) {\n\n\t\tthis.normal.set( x, y, z );\n\t\tthis.constant = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = - point.dot( this.normal );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCoplanarPoints: function () {\n\n\t\tvar v1 = new Vector3();\n\t\tvar v2 = new Vector3();\n\n\t\treturn function setFromCoplanarPoints( a, b, c ) {\n\n\t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\n\n\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( plane ) {\n\n\t\tthis.normal.copy( plane.normal );\n\t\tthis.constant = plane.constant;\n\n\t\treturn this;\n\n\t},\n\n\tnormalize: function () {\n\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\tthis.constant *= inverseNormalLength;\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.constant *= - 1;\n\t\tthis.normal.negate();\n\n\t\treturn this;\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn this.normal.dot( point ) + this.constant;\n\n\t},\n\n\tdistanceToSphere: function ( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t},\n\n\tprojectPoint: function ( point, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Plane: .projectPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\n\n\t},\n\n\tintersectLine: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function intersectLine( line, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .intersectLine() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tvar direction = line.delta( v1 );\n\n\t\t\tvar denominator = this.normal.dot( direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\t\treturn target.copy( line.start );\n\n\t\t\t\t}\n\n\t\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\treturn target.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t\t};\n\n\t}(),\n\n\tintersectsLine: function ( line ) {\n\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\tvar startSign = this.distanceToPoint( line.start );\n\t\tvar endSign = this.distanceToPoint( line.end );\n\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\treturn box.intersectsPlane( this );\n\n\t},\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\treturn sphere.intersectsPlane( this );\n\n\t},\n\n\tcoplanarPoint: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Plane: .coplanarPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t},\n\n\tapplyMatrix4: function () {\n\n\t\tvar v1 = new Vector3();\n\t\tvar m1 = new Matrix3();\n\n\t\treturn function applyMatrix4( matrix, optionalNormalMatrix ) {\n\n\t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\n\n\t\t\tvar referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );\n\n\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.constant -= offset.dot( this.normal );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( plane ) {\n\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author bhouston / http://clara.io\n */\n\nfunction Frustum( p0, p1, p2, p3, p4, p5 ) {\n\n\tthis.planes = [\n\n\t\t( p0 !== undefined ) ? p0 : new Plane(),\n\t\t( p1 !== undefined ) ? p1 : new Plane(),\n\t\t( p2 !== undefined ) ? p2 : new Plane(),\n\t\t( p3 !== undefined ) ? p3 : new Plane(),\n\t\t( p4 !== undefined ) ? p4 : new Plane(),\n\t\t( p5 !== undefined ) ? p5 : new Plane()\n\n\t];\n\n}\n\nObject.assign( Frustum.prototype, {\n\n\tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tvar planes = this.planes;\n\n\t\tplanes[ 0 ].copy( p0 );\n\t\tplanes[ 1 ].copy( p1 );\n\t\tplanes[ 2 ].copy( p2 );\n\t\tplanes[ 3 ].copy( p3 );\n\t\tplanes[ 4 ].copy( p4 );\n\t\tplanes[ 5 ].copy( p5 );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( frustum ) {\n\n\t\tvar planes = this.planes;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrix: function ( m ) {\n\n\t\tvar planes = this.planes;\n\t\tvar me = m.elements;\n\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\treturn this;\n\n\t},\n\n\tintersectsObject: function () {\n\n\t\tvar sphere = new Sphere();\n\n\t\treturn function intersectsObject( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null )\n\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\tsphere.copy( geometry.boundingSphere )\n\t\t\t\t.applyMatrix4( object.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t};\n\n\t}(),\n\n\tintersectsSprite: function () {\n\n\t\tvar sphere = new Sphere();\n\n\t\treturn function intersectsSprite( sprite ) {\n\n\t\t\tsphere.center.set( 0, 0, 0 );\n\t\t\tsphere.radius = 0.7071067811865476;\n\t\t\tsphere.applyMatrix4( sprite.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t};\n\n\t}(),\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\tvar planes = this.planes;\n\t\tvar center = sphere.center;\n\t\tvar negRadius = - sphere.radius;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tintersectsBox: function () {\n\n\t\tvar p1 = new Vector3(),\n\t\t\tp2 = new Vector3();\n\n\t\treturn function intersectsBox( box ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar plane = planes[ i ];\n\n\t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n\t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n\t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n\t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tvar d1 = plane.distanceToPoint( p1 );\n\t\t\t\tvar d2 = plane.distanceToPoint( p2 );\n\n\t\t\t\t// if both outside plane, no intersection\n\n\t\t\t\tif ( d1 < 0 && d2 < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t};\n\n\t}(),\n\n\tcontainsPoint: function ( point ) {\n\n\t\tvar planes = this.planes;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n} );\n\nvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\n\nvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\\n\";\n\nvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\n\nvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\\n\";\n\nvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\nvar begin_vertex = \"\\nvec3 transformed = vec3( position );\\n\";\n\nvar beginnormal_vertex = \"\\nvec3 objectNormal = vec3( normal );\\n\";\n\nvar bsdfs = \"float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\\t}\\n\\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\n\nvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\\n\";\n\nvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\\n\";\n\nvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\n\nvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\";\n\nvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";\n\nvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\nvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\\n\";\n\nvar color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\nvar color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\n\nvar common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define PI_HALF 1.5707963267949\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\n\";\n\nvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\n\nvar defaultnormal_vertex = \"vec3 transformedNormal = normalMatrix * objectNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n\";\n\nvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\\n\";\n\nvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\n\nvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\n\nvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\\n\";\n\nvar encodings_fragment = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\n\nvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM            = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat D      = max( maxRange / maxRGB, 1.0 );\\n\\tD            = min( floor( D ) / 255.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n\\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract(Le);\\n\\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n\\treturn vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\n\nvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\\n\";\n\nvar envmap_pars_fragment = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\\tuniform float reflectivity;\\n\\tuniform float envMapIntensity;\\n#endif\\n#ifdef USE_ENVMAP\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\\n\";\n\nvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\\n\";\n\nvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\n\";\n\nvar fog_vertex = \"\\n#ifdef USE_FOG\\nfogDepth = -mvPosition.z;\\n#endif\";\n\nvar fog_pars_vertex = \"#ifdef USE_FOG\\n  varying float fogDepth;\\n#endif\\n\";\n\nvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\n\nvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\\n\";\n\nvar gradientmap_pars_fragment = \"#ifdef TOON\\n\\tuniform sampler2D gradientMap;\\n\\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\t\\tfloat dotNL = dot( normal, lightDirection );\\n\\t\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t\\t#ifdef USE_GRADIENTMAP\\n\\t\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t\\t#else\\n\\t\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\nvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\n\nvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\nvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\nvar lights_pars_begin = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t\\tfloat shadowCameraNear;\\n\\t\\tfloat shadowCameraFar;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\\n\";\n\nvar lights_pars_maps = \"#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\\n\";\n\nvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\n\nvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifdef TOON\\n\\t\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#else\\n\\t\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\t\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#endif\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\\n\";\n\nvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.clearCoat = saturate( clearCoat );\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";\n\nvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoat;\\n\\t\\tfloat clearCoatRoughness;\\n\\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifndef STANDARD\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\tfloat dotNL = dotNV;\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\n\nvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearCoatRadiance = vec3( 0.0 );\\n#endif\\n\";\n\nvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tirradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\\n\\t#ifndef STANDARD\\n\\t\\tclearCoatRadiance += getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\\n\\t#endif\\n#endif\\n\";\n\nvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\";\n\nvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\nvar logdepthbuf_pars_fragment = \"#ifdef USE_LOGDEPTHBUF\\n\\tuniform float logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n#endif\\n\";\n\nvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n\\tuniform float logDepthBufFC;\\n#endif\";\n\nvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t#else\\n\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\tgl_Position.z *= gl_Position.w;\\n\\t#endif\\n#endif\\n\";\n\nvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\\n\";\n\nvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\nvar map_particle_fragment = \"#ifdef USE_MAP\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\n\nvar map_particle_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform mat3 uvTransform;\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\nvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\\n\";\n\nvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\nvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\n\nvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\nvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\\n\";\n\nvar normal_fragment_begin = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n#endif\\n\";\n\nvar normal_fragment_maps = \"#ifdef USE_NORMALMAP\\n\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\n\nvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\\t\\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\tmapN.xy = normalScale * mapN.xy;\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\\n\";\n\nvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\n\nvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\n\nvar project_vertex = \"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\ngl_Position = projectionMatrix * mvPosition;\\n\";\n\nvar dithering_fragment = \"#if defined( DITHERING )\\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\\n\";\n\nvar dithering_pars_fragment = \"#if defined( DITHERING )\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\\n\";\n\nvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\\n\";\n\nvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\nvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\nvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n#endif\\n\";\n\nvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\\n\";\n\nvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\\n\";\n\nvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\nvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\\n\";\n\nvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\\n\";\n\nvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\n\nvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\nvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\nvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\n\nvar tonemapping_pars_fragment = \"#ifndef saturate\\n\\t#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\n\nvar uv_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n#endif\";\n\nvar uv_pars_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n\\tuniform mat3 uvTransform;\\n#endif\\n\";\n\nvar uv_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\nvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\nvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";\n\nvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";\n\nvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n#endif\\n\";\n\nvar cube_frag = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldPosition;\\nvoid main() {\\n\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\\tgl_FragColor.a *= opacity;\\n}\\n\";\n\nvar cube_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\\n\";\n\nvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\\n\";\n\nvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\nvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\\n\";\n\nvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\\n\";\n\nvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldPosition );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n}\\n\";\n\nvar equirect_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\nvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\nvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\nvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\nvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\nvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_pars_maps>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\n\nvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_pars_maps>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\nvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_pars_maps>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\n\nvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\nvar meshphysical_frag = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars_begin>\\n#include <lights_pars_maps>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\n\nvar meshphysical_vert = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\nvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\\n\";\n\nvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\\n\";\n\nvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\nvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\\t#else\\n\\t\\tgl_PointSize = size;\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\nvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <fog_fragment>\\n}\\n\";\n\nvar shadow_vert = \"#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\nvar ShaderChunk = {\n\talphamap_fragment: alphamap_fragment,\n\talphamap_pars_fragment: alphamap_pars_fragment,\n\talphatest_fragment: alphatest_fragment,\n\taomap_fragment: aomap_fragment,\n\taomap_pars_fragment: aomap_pars_fragment,\n\tbegin_vertex: begin_vertex,\n\tbeginnormal_vertex: beginnormal_vertex,\n\tbsdfs: bsdfs,\n\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\tclipping_planes_fragment: clipping_planes_fragment,\n\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\tclipping_planes_vertex: clipping_planes_vertex,\n\tcolor_fragment: color_fragment,\n\tcolor_pars_fragment: color_pars_fragment,\n\tcolor_pars_vertex: color_pars_vertex,\n\tcolor_vertex: color_vertex,\n\tcommon: common,\n\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\tdefaultnormal_vertex: defaultnormal_vertex,\n\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\tdisplacementmap_vertex: displacementmap_vertex,\n\temissivemap_fragment: emissivemap_fragment,\n\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\tencodings_fragment: encodings_fragment,\n\tencodings_pars_fragment: encodings_pars_fragment,\n\tenvmap_fragment: envmap_fragment,\n\tenvmap_pars_fragment: envmap_pars_fragment,\n\tenvmap_pars_vertex: envmap_pars_vertex,\n\tenvmap_vertex: envmap_vertex,\n\tfog_vertex: fog_vertex,\n\tfog_pars_vertex: fog_pars_vertex,\n\tfog_fragment: fog_fragment,\n\tfog_pars_fragment: fog_pars_fragment,\n\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\tlightmap_fragment: lightmap_fragment,\n\tlightmap_pars_fragment: lightmap_pars_fragment,\n\tlights_lambert_vertex: lights_lambert_vertex,\n\tlights_pars_begin: lights_pars_begin,\n\tlights_pars_maps: lights_pars_maps,\n\tlights_phong_fragment: lights_phong_fragment,\n\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\tlights_physical_fragment: lights_physical_fragment,\n\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\tlights_fragment_begin: lights_fragment_begin,\n\tlights_fragment_maps: lights_fragment_maps,\n\tlights_fragment_end: lights_fragment_end,\n\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\tmap_fragment: map_fragment,\n\tmap_pars_fragment: map_pars_fragment,\n\tmap_particle_fragment: map_particle_fragment,\n\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\tmetalnessmap_fragment: metalnessmap_fragment,\n\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\tmorphnormal_vertex: morphnormal_vertex,\n\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\tmorphtarget_vertex: morphtarget_vertex,\n\tnormal_fragment_begin: normal_fragment_begin,\n\tnormal_fragment_maps: normal_fragment_maps,\n\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\tpacking: packing,\n\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\tproject_vertex: project_vertex,\n\tdithering_fragment: dithering_fragment,\n\tdithering_pars_fragment: dithering_pars_fragment,\n\troughnessmap_fragment: roughnessmap_fragment,\n\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\tshadowmap_vertex: shadowmap_vertex,\n\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\tskinbase_vertex: skinbase_vertex,\n\tskinning_pars_vertex: skinning_pars_vertex,\n\tskinning_vertex: skinning_vertex,\n\tskinnormal_vertex: skinnormal_vertex,\n\tspecularmap_fragment: specularmap_fragment,\n\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\ttonemapping_fragment: tonemapping_fragment,\n\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\tuv_pars_fragment: uv_pars_fragment,\n\tuv_pars_vertex: uv_pars_vertex,\n\tuv_vertex: uv_vertex,\n\tuv2_pars_fragment: uv2_pars_fragment,\n\tuv2_pars_vertex: uv2_pars_vertex,\n\tuv2_vertex: uv2_vertex,\n\tworldpos_vertex: worldpos_vertex,\n\n\tcube_frag: cube_frag,\n\tcube_vert: cube_vert,\n\tdepth_frag: depth_frag,\n\tdepth_vert: depth_vert,\n\tdistanceRGBA_frag: distanceRGBA_frag,\n\tdistanceRGBA_vert: distanceRGBA_vert,\n\tequirect_frag: equirect_frag,\n\tequirect_vert: equirect_vert,\n\tlinedashed_frag: linedashed_frag,\n\tlinedashed_vert: linedashed_vert,\n\tmeshbasic_frag: meshbasic_frag,\n\tmeshbasic_vert: meshbasic_vert,\n\tmeshlambert_frag: meshlambert_frag,\n\tmeshlambert_vert: meshlambert_vert,\n\tmeshphong_frag: meshphong_frag,\n\tmeshphong_vert: meshphong_vert,\n\tmeshphysical_frag: meshphysical_frag,\n\tmeshphysical_vert: meshphysical_vert,\n\tnormal_frag: normal_frag,\n\tnormal_vert: normal_vert,\n\tpoints_frag: points_frag,\n\tpoints_vert: points_vert,\n\tshadow_frag: shadow_frag,\n\tshadow_vert: shadow_vert\n};\n\n/**\n * Uniform Utilities\n */\n\nvar UniformsUtils = {\n\n\tmerge: function ( uniforms ) {\n\n\t\tvar merged = {};\n\n\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n\t\t\tvar tmp = this.clone( uniforms[ u ] );\n\n\t\t\tfor ( var p in tmp ) {\n\n\t\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn merged;\n\n\t},\n\n\tclone: function ( uniforms_src ) {\n\n\t\tvar uniforms_dst = {};\n\n\t\tfor ( var u in uniforms_src ) {\n\n\t\t\tuniforms_dst[ u ] = {};\n\n\t\t\tfor ( var p in uniforms_src[ u ] ) {\n\n\t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\n\n\t\t\t\tif ( parameter_src && ( parameter_src.isColor ||\n\t\t\t\t\tparameter_src.isMatrix3 || parameter_src.isMatrix4 ||\n\t\t\t\t\tparameter_src.isVector2 || parameter_src.isVector3 || parameter_src.isVector4 ||\n\t\t\t\t\tparameter_src.isTexture ) ) {\n\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\n\n\t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\n\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn uniforms_dst;\n\n\t}\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\nfunction Color( r, g, b ) {\n\n\tif ( g === undefined && b === undefined ) {\n\n\t\t// r is THREE.Color, hex or string\n\t\treturn this.set( r );\n\n\t}\n\n\treturn this.setRGB( r, g, b );\n\n}\n\nObject.assign( Color.prototype, {\n\n\tisColor: true,\n\n\tr: 1, g: 1, b: 1,\n\n\tset: function ( value ) {\n\n\t\tif ( value && value.isColor ) {\n\n\t\t\tthis.copy( value );\n\n\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\tthis.setHex( value );\n\n\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\tthis.setStyle( value );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.r = scalar;\n\t\tthis.g = scalar;\n\t\tthis.b = scalar;\n\n\t\treturn this;\n\n\t},\n\n\tsetHex: function ( hex ) {\n\n\t\thex = Math.floor( hex );\n\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\treturn this;\n\n\t},\n\n\tsetRGB: function ( r, g, b ) {\n\n\t\tthis.r = r;\n\t\tthis.g = g;\n\t\tthis.b = b;\n\n\t\treturn this;\n\n\t},\n\n\tsetHSL: function () {\n\n\t\tfunction hue2rgb( p, q, t ) {\n\n\t\t\tif ( t < 0 ) t += 1;\n\t\t\tif ( t > 1 ) t -= 1;\n\t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\t\t\tif ( t < 1 / 2 ) return q;\n\t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\t\t\treturn p;\n\n\t\t}\n\n\t\treturn function setHSL( h, s, l ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\th = _Math.euclideanModulo( h, 1 );\n\t\t\ts = _Math.clamp( s, 0, 1 );\n\t\t\tl = _Math.clamp( l, 0, 1 );\n\n\t\t\tif ( s === 0 ) {\n\n\t\t\t\tthis.r = this.g = this.b = l;\n\n\t\t\t} else {\n\n\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\t\tvar q = ( 2 * l ) - p;\n\n\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tsetStyle: function ( style ) {\n\n\t\tfunction handleAlpha( string ) {\n\n\t\t\tif ( string === undefined ) return;\n\n\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tvar m;\n\n\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t// rgb / hsl\n\n\t\t\tvar color;\n\t\t\tvar name = m[ 1 ];\n\t\t\tvar components = m[ 2 ];\n\n\t\t\tswitch ( name ) {\n\n\t\t\t\tcase 'rgb':\n\t\t\t\tcase 'rgba':\n\n\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'hsl':\n\t\t\t\tcase 'hsla':\n\n\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n\t\t\t// hex color\n\n\t\t\tvar hex = m[ 1 ];\n\t\t\tvar size = hex.length;\n\n\t\t\tif ( size === 3 ) {\n\n\t\t\t\t// #ff0\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\treturn this;\n\n\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t// #ff0000\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( style && style.length > 0 ) {\n\n\t\t\t// color keywords\n\t\t\tvar hex = ColorKeywords[ style ];\n\n\t\t\tif ( hex !== undefined ) {\n\n\t\t\t\t// red\n\t\t\t\tthis.setHex( hex );\n\n\t\t\t} else {\n\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t},\n\n\tcopy: function ( color ) {\n\n\t\tthis.r = color.r;\n\t\tthis.g = color.g;\n\t\tthis.b = color.b;\n\n\t\treturn this;\n\n\t},\n\n\tcopyGammaToLinear: function ( color, gammaFactor ) {\n\n\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\tthis.b = Math.pow( color.b, gammaFactor );\n\n\t\treturn this;\n\n\t},\n\n\tcopyLinearToGamma: function ( color, gammaFactor ) {\n\n\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\tthis.b = Math.pow( color.b, safeInverse );\n\n\t\treturn this;\n\n\t},\n\n\tconvertGammaToLinear: function () {\n\n\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\tthis.r = r * r;\n\t\tthis.g = g * g;\n\t\tthis.b = b * b;\n\n\t\treturn this;\n\n\t},\n\n\tconvertLinearToGamma: function () {\n\n\t\tthis.r = Math.sqrt( this.r );\n\t\tthis.g = Math.sqrt( this.g );\n\t\tthis.b = Math.sqrt( this.b );\n\n\t\treturn this;\n\n\t},\n\n\tgetHex: function () {\n\n\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n\t},\n\n\tgetHexString: function () {\n\n\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n\t},\n\n\tgetHSL: function ( target ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Color: .getHSL() target is now required' );\n\t\t\ttarget = { h: 0, s: 0, l: 0 };\n\n\t\t}\n\n\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\tvar max = Math.max( r, g, b );\n\t\tvar min = Math.min( r, g, b );\n\n\t\tvar hue, saturation;\n\t\tvar lightness = ( min + max ) / 2.0;\n\n\t\tif ( min === max ) {\n\n\t\t\thue = 0;\n\t\t\tsaturation = 0;\n\n\t\t} else {\n\n\t\t\tvar delta = max - min;\n\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\tswitch ( max ) {\n\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t}\n\n\t\t\thue /= 6;\n\n\t\t}\n\n\t\ttarget.h = hue;\n\t\ttarget.s = saturation;\n\t\ttarget.l = lightness;\n\n\t\treturn target;\n\n\t},\n\n\tgetStyle: function () {\n\n\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n\t},\n\n\toffsetHSL: function () {\n\n\t\tvar hsl = {};\n\n\t\treturn function ( h, s, l ) {\n\n\t\t\tthis.getHSL( hsl );\n\n\t\t\thsl.h += h; hsl.s += s; hsl.l += l;\n\n\t\t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tadd: function ( color ) {\n\n\t\tthis.r += color.r;\n\t\tthis.g += color.g;\n\t\tthis.b += color.b;\n\n\t\treturn this;\n\n\t},\n\n\taddColors: function ( color1, color2 ) {\n\n\t\tthis.r = color1.r + color2.r;\n\t\tthis.g = color1.g + color2.g;\n\t\tthis.b = color1.b + color2.b;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.r += s;\n\t\tthis.g += s;\n\t\tthis.b += s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( color ) {\n\n\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( color ) {\n\n\t\tthis.r *= color.r;\n\t\tthis.g *= color.g;\n\t\tthis.b *= color.b;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tthis.r *= s;\n\t\tthis.g *= s;\n\t\tthis.b *= s;\n\n\t\treturn this;\n\n\t},\n\n\tlerp: function ( color, alpha ) {\n\n\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( c ) {\n\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.r = array[ offset ];\n\t\tthis.g = array[ offset + 1 ];\n\t\tthis.b = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.r;\n\t\tarray[ offset + 1 ] = this.g;\n\t\tarray[ offset + 2 ] = this.b;\n\n\t\treturn array;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\treturn this.getHex();\n\n\t}\n\n} );\n\n/**\n * Uniforms library for shared webgl shaders\n */\n\nvar UniformsLib = {\n\n\tcommon: {\n\n\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\topacity: { value: 1.0 },\n\n\t\tmap: { value: null },\n\t\tuvTransform: { value: new Matrix3() },\n\n\t\talphaMap: { value: null },\n\n\t},\n\n\tspecularmap: {\n\n\t\tspecularMap: { value: null },\n\n\t},\n\n\tenvmap: {\n\n\t\tenvMap: { value: null },\n\t\tflipEnvMap: { value: - 1 },\n\t\treflectivity: { value: 1.0 },\n\t\trefractionRatio: { value: 0.98 },\n\t\tmaxMipLevel: { value: 0 }\n\n\t},\n\n\taomap: {\n\n\t\taoMap: { value: null },\n\t\taoMapIntensity: { value: 1 }\n\n\t},\n\n\tlightmap: {\n\n\t\tlightMap: { value: null },\n\t\tlightMapIntensity: { value: 1 }\n\n\t},\n\n\temissivemap: {\n\n\t\temissiveMap: { value: null }\n\n\t},\n\n\tbumpmap: {\n\n\t\tbumpMap: { value: null },\n\t\tbumpScale: { value: 1 }\n\n\t},\n\n\tnormalmap: {\n\n\t\tnormalMap: { value: null },\n\t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\n\t},\n\n\tdisplacementmap: {\n\n\t\tdisplacementMap: { value: null },\n\t\tdisplacementScale: { value: 1 },\n\t\tdisplacementBias: { value: 0 }\n\n\t},\n\n\troughnessmap: {\n\n\t\troughnessMap: { value: null }\n\n\t},\n\n\tmetalnessmap: {\n\n\t\tmetalnessMap: { value: null }\n\n\t},\n\n\tgradientmap: {\n\n\t\tgradientMap: { value: null }\n\n\t},\n\n\tfog: {\n\n\t\tfogDensity: { value: 0.00025 },\n\t\tfogNear: { value: 1 },\n\t\tfogFar: { value: 2000 },\n\t\tfogColor: { value: new Color( 0xffffff ) }\n\n\t},\n\n\tlights: {\n\n\t\tambientLightColor: { value: [] },\n\n\t\tdirectionalLights: { value: [], properties: {\n\t\t\tdirection: {},\n\t\t\tcolor: {},\n\n\t\t\tshadow: {},\n\t\t\tshadowBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {}\n\t\t} },\n\n\t\tdirectionalShadowMap: { value: [] },\n\t\tdirectionalShadowMatrix: { value: [] },\n\n\t\tspotLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\tdirection: {},\n\t\t\tdistance: {},\n\t\t\tconeCos: {},\n\t\t\tpenumbraCos: {},\n\t\t\tdecay: {},\n\n\t\t\tshadow: {},\n\t\t\tshadowBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {}\n\t\t} },\n\n\t\tspotShadowMap: { value: [] },\n\t\tspotShadowMatrix: { value: [] },\n\n\t\tpointLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\tdecay: {},\n\t\t\tdistance: {},\n\n\t\t\tshadow: {},\n\t\t\tshadowBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {},\n\t\t\tshadowCameraNear: {},\n\t\t\tshadowCameraFar: {}\n\t\t} },\n\n\t\tpointShadowMap: { value: [] },\n\t\tpointShadowMatrix: { value: [] },\n\n\t\themisphereLights: { value: [], properties: {\n\t\t\tdirection: {},\n\t\t\tskyColor: {},\n\t\t\tgroundColor: {}\n\t\t} },\n\n\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\trectAreaLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\twidth: {},\n\t\t\theight: {}\n\t\t} }\n\n\t},\n\n\tpoints: {\n\n\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\topacity: { value: 1.0 },\n\t\tsize: { value: 1.0 },\n\t\tscale: { value: 1.0 },\n\t\tmap: { value: null },\n\t\tuvTransform: { value: new Matrix3() }\n\n\t}\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n */\n\nvar ShaderLib = {\n\n\tbasic: {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n\t},\n\n\tlambert: {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: new Color( 0x000000 ) }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n\t},\n\n\tphong: {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.gradientmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\tspecular: { value: new Color( 0x111111 ) },\n\t\t\t\tshininess: { value: 30 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\tfragmentShader: ShaderChunk.meshphong_frag\n\n\t},\n\n\tstandard: {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.roughnessmap,\n\t\t\tUniformsLib.metalnessmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\troughness: { value: 0.5 },\n\t\t\t\tmetalness: { value: 0.5 },\n\t\t\t\tenvMapIntensity: { value: 1 } // temporary\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t},\n\n\tpoints: {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tUniformsLib.points,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.points_vert,\n\t\tfragmentShader: ShaderChunk.points_frag\n\n\t},\n\n\tdashed: {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tscale: { value: 1 },\n\t\t\t\tdashSize: { value: 1 },\n\t\t\t\ttotalSize: { value: 2 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\tfragmentShader: ShaderChunk.linedashed_frag\n\n\t},\n\n\tdepth: {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.displacementmap\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.depth_vert,\n\t\tfragmentShader: ShaderChunk.depth_frag\n\n\t},\n\n\tnormal: {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\t{\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.normal_vert,\n\t\tfragmentShader: ShaderChunk.normal_frag\n\n\t},\n\n\t/* -------------------------------------------------------------------------\n\t//\tCube map shader\n\t ------------------------------------------------------------------------- */\n\n\tcube: {\n\n\t\tuniforms: {\n\t\t\ttCube: { value: null },\n\t\t\ttFlip: { value: - 1 },\n\t\t\topacity: { value: 1.0 }\n\t\t},\n\n\t\tvertexShader: ShaderChunk.cube_vert,\n\t\tfragmentShader: ShaderChunk.cube_frag\n\n\t},\n\n\tequirect: {\n\n\t\tuniforms: {\n\t\t\ttEquirect: { value: null },\n\t\t},\n\n\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\tfragmentShader: ShaderChunk.equirect_frag\n\n\t},\n\n\tdistanceRGBA: {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.displacementmap,\n\t\t\t{\n\t\t\t\treferencePosition: { value: new Vector3() },\n\t\t\t\tnearDistance: { value: 1 },\n\t\t\t\tfarDistance: { value: 1000 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n\t},\n\n\tshadow: {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tUniformsLib.lights,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tcolor: { value: new Color( 0x00000 ) },\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t},\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\tfragmentShader: ShaderChunk.shadow_frag\n\n\t}\n\n};\n\nShaderLib.physical = {\n\n\tuniforms: UniformsUtils.merge( [\n\t\tShaderLib.standard.uniforms,\n\t\t{\n\t\t\tclearCoat: { value: 0 },\n\t\t\tclearCoatRoughness: { value: 0 }\n\t\t}\n\t] ),\n\n\tvertexShader: ShaderChunk.meshphysical_vert,\n\tfragmentShader: ShaderChunk.meshphysical_frag\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLAttributes( gl ) {\n\n\tvar buffers = new WeakMap();\n\n\tfunction createBuffer( attribute, bufferType ) {\n\n\t\tvar array = attribute.array;\n\t\tvar usage = attribute.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n\t\tvar buffer = gl.createBuffer();\n\n\t\tgl.bindBuffer( bufferType, buffer );\n\t\tgl.bufferData( bufferType, array, usage );\n\n\t\tattribute.onUploadCallback();\n\n\t\tvar type = gl.FLOAT;\n\n\t\tif ( array instanceof Float32Array ) {\n\n\t\t\ttype = gl.FLOAT;\n\n\t\t} else if ( array instanceof Float64Array ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );\n\n\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\ttype = gl.UNSIGNED_SHORT;\n\n\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\ttype = gl.SHORT;\n\n\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\ttype = gl.UNSIGNED_INT;\n\n\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\ttype = gl.INT;\n\n\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\ttype = gl.BYTE;\n\n\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\ttype = gl.UNSIGNED_BYTE;\n\n\t\t}\n\n\t\treturn {\n\t\t\tbuffer: buffer,\n\t\t\ttype: type,\n\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\tversion: attribute.version\n\t\t};\n\n\t}\n\n\tfunction updateBuffer( buffer, attribute, bufferType ) {\n\n\t\tvar array = attribute.array;\n\t\tvar updateRange = attribute.updateRange;\n\n\t\tgl.bindBuffer( bufferType, buffer );\n\n\t\tif ( attribute.dynamic === false ) {\n\n\t\t\tgl.bufferData( bufferType, array, gl.STATIC_DRAW );\n\n\t\t} else if ( updateRange.count === - 1 ) {\n\n\t\t\t// Not using update ranges\n\n\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t} else if ( updateRange.count === 0 ) {\n\n\t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\n\n\t\t} else {\n\n\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\n\n\t\t\tupdateRange.count = - 1; // reset range\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction get( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\treturn buffers.get( attribute );\n\n\t}\n\n\tfunction remove( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\tvar data = buffers.get( attribute );\n\n\t\tif ( data ) {\n\n\t\t\tgl.deleteBuffer( data.buffer );\n\n\t\t\tbuffers.delete( attribute );\n\n\t\t}\n\n\t}\n\n\tfunction update( attribute, bufferType ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\tvar data = buffers.get( attribute );\n\n\t\tif ( data === undefined ) {\n\n\t\t\tbuffers.set( attribute, createBuffer( attribute, bufferType ) );\n\n\t\t} else if ( data.version < attribute.version ) {\n\n\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\n\n\t\t\tdata.version = attribute.version;\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\tget: get,\n\t\tremove: remove,\n\t\tupdate: update\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n */\n\nfunction Euler( x, y, z, order ) {\n\n\tthis._x = x || 0;\n\tthis._y = y || 0;\n\tthis._z = z || 0;\n\tthis._order = order || Euler.DefaultOrder;\n\n}\n\nEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\nEuler.DefaultOrder = 'XYZ';\n\nObject.defineProperties( Euler.prototype, {\n\n\tx: {\n\n\t\tget: function () {\n\n\t\t\treturn this._x;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._x = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t}\n\n\t},\n\n\ty: {\n\n\t\tget: function () {\n\n\t\t\treturn this._y;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._y = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t}\n\n\t},\n\n\tz: {\n\n\t\tget: function () {\n\n\t\t\treturn this._z;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._z = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t}\n\n\t},\n\n\torder: {\n\n\t\tget: function () {\n\n\t\t\treturn this._order;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._order = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t}\n\n\t}\n\n} );\n\nObject.assign( Euler.prototype, {\n\n\tisEuler: true,\n\n\tset: function ( x, y, z, order ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order || this._order;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t},\n\n\tcopy: function ( euler ) {\n\n\t\tthis._x = euler._x;\n\t\tthis._y = euler._y;\n\t\tthis._z = euler._z;\n\t\tthis._order = euler._order;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromRotationMatrix: function ( m, order, update ) {\n\n\t\tvar clamp = _Math.clamp;\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar te = m.elements;\n\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\torder = order || this._order;\n\n\t\tif ( order === 'XYZ' ) {\n\n\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\tthis._z = 0;\n\n\t\t\t}\n\n\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\n\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\tthis._z = 0;\n\n\t\t\t}\n\n\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\n\n\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t}\n\n\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t}\n\n\t\t} else if ( order === 'YZX' ) {\n\n\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t}\n\n\t\t} else if ( order === 'XZY' ) {\n\n\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\tthis._y = 0;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\n\t\t}\n\n\t\tthis._order = order;\n\n\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromQuaternion: function () {\n\n\t\tvar matrix = new Matrix4();\n\n\t\treturn function setFromQuaternion( q, order, update ) {\n\n\t\t\tmatrix.makeRotationFromQuaternion( q );\n\n\t\t\treturn this.setFromRotationMatrix( matrix, order, update );\n\n\t\t};\n\n\t}(),\n\n\tsetFromVector3: function ( v, order ) {\n\n\t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n\t},\n\n\treorder: function () {\n\n\t\t// WARNING: this discards revolution information -bhouston\n\n\t\tvar q = new Quaternion();\n\n\t\treturn function reorder( newOrder ) {\n\n\t\t\tq.setFromEuler( this );\n\n\t\t\treturn this.setFromQuaternion( q, newOrder );\n\n\t\t};\n\n\t}(),\n\n\tequals: function ( euler ) {\n\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t},\n\n\tfromArray: function ( array ) {\n\n\t\tthis._x = array[ 0 ];\n\t\tthis._y = array[ 1 ];\n\t\tthis._z = array[ 2 ];\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._order;\n\n\t\treturn array;\n\n\t},\n\n\ttoVector3: function ( optionalResult ) {\n\n\t\tif ( optionalResult ) {\n\n\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n\t\t} else {\n\n\t\t\treturn new Vector3( this._x, this._y, this._z );\n\n\t\t}\n\n\t},\n\n\tonChange: function ( callback ) {\n\n\t\tthis.onChangeCallback = callback;\n\n\t\treturn this;\n\n\t},\n\n\tonChangeCallback: function () {}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Layers() {\n\n\tthis.mask = 1 | 0;\n\n}\n\nObject.assign( Layers.prototype, {\n\n\tset: function ( channel ) {\n\n\t\tthis.mask = 1 << channel | 0;\n\n\t},\n\n\tenable: function ( channel ) {\n\n\t\tthis.mask |= 1 << channel | 0;\n\n\t},\n\n\ttoggle: function ( channel ) {\n\n\t\tthis.mask ^= 1 << channel | 0;\n\n\t},\n\n\tdisable: function ( channel ) {\n\n\t\tthis.mask &= ~ ( 1 << channel | 0 );\n\n\t},\n\n\ttest: function ( layers ) {\n\n\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author elephantatwork / www.elephantatwork.ch\n */\n\nvar object3DId = 0;\n\nfunction Object3D() {\n\n\tObject.defineProperty( this, 'id', { value: object3DId ++ } );\n\n\tthis.uuid = _Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Object3D';\n\n\tthis.parent = null;\n\tthis.children = [];\n\n\tthis.up = Object3D.DefaultUp.clone();\n\n\tvar position = new Vector3();\n\tvar rotation = new Euler();\n\tvar quaternion = new Quaternion();\n\tvar scale = new Vector3( 1, 1, 1 );\n\n\tfunction onRotationChange() {\n\n\t\tquaternion.setFromEuler( rotation, false );\n\n\t}\n\n\tfunction onQuaternionChange() {\n\n\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t}\n\n\trotation.onChange( onRotationChange );\n\tquaternion.onChange( onQuaternionChange );\n\n\tObject.defineProperties( this, {\n\t\tposition: {\n\t\t\tenumerable: true,\n\t\t\tvalue: position\n\t\t},\n\t\trotation: {\n\t\t\tenumerable: true,\n\t\t\tvalue: rotation\n\t\t},\n\t\tquaternion: {\n\t\t\tenumerable: true,\n\t\t\tvalue: quaternion\n\t\t},\n\t\tscale: {\n\t\t\tenumerable: true,\n\t\t\tvalue: scale\n\t\t},\n\t\tmodelViewMatrix: {\n\t\t\tvalue: new Matrix4()\n\t\t},\n\t\tnormalMatrix: {\n\t\t\tvalue: new Matrix3()\n\t\t}\n\t} );\n\n\tthis.matrix = new Matrix4();\n\tthis.matrixWorld = new Matrix4();\n\n\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\tthis.matrixWorldNeedsUpdate = false;\n\n\tthis.layers = new Layers();\n\tthis.visible = true;\n\n\tthis.castShadow = false;\n\tthis.receiveShadow = false;\n\n\tthis.frustumCulled = true;\n\tthis.renderOrder = 0;\n\n\tthis.userData = {};\n\n}\n\nObject3D.DefaultUp = new Vector3( 0, 1, 0 );\nObject3D.DefaultMatrixAutoUpdate = true;\n\nObject3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\tconstructor: Object3D,\n\n\tisObject3D: true,\n\n\tonBeforeRender: function () {},\n\tonAfterRender: function () {},\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\n\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t},\n\n\tapplyQuaternion: function ( q ) {\n\n\t\tthis.quaternion.premultiply( q );\n\n\t\treturn this;\n\n\t},\n\n\tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n\t\t// assumes axis is normalized\n\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t},\n\n\tsetRotationFromEuler: function ( euler ) {\n\n\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t},\n\n\tsetRotationFromMatrix: function ( m ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t},\n\n\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t// assumes q is normalized\n\n\t\tthis.quaternion.copy( q );\n\n\t},\n\n\trotateOnAxis: function () {\n\n\t\t// rotate object on axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\tvar q1 = new Quaternion();\n\n\t\treturn function rotateOnAxis( axis, angle ) {\n\n\t\t\tq1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.multiply( q1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateOnWorldAxis: function () {\n\n\t\t// rotate object on axis in world space\n\t\t// axis is assumed to be normalized\n\t\t// method assumes no rotated parent\n\n\t\tvar q1 = new Quaternion();\n\n\t\treturn function rotateOnWorldAxis( axis, angle ) {\n\n\t\t\tq1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.premultiply( q1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateX: function () {\n\n\t\tvar v1 = new Vector3( 1, 0, 0 );\n\n\t\treturn function rotateX( angle ) {\n\n\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t};\n\n\t}(),\n\n\trotateY: function () {\n\n\t\tvar v1 = new Vector3( 0, 1, 0 );\n\n\t\treturn function rotateY( angle ) {\n\n\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t};\n\n\t}(),\n\n\trotateZ: function () {\n\n\t\tvar v1 = new Vector3( 0, 0, 1 );\n\n\t\treturn function rotateZ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t};\n\n\t}(),\n\n\ttranslateOnAxis: function () {\n\n\t\t// translate object by distance along axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function translateOnAxis( axis, distance ) {\n\n\t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\t\tthis.position.add( v1.multiplyScalar( distance ) );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslateX: function () {\n\n\t\tvar v1 = new Vector3( 1, 0, 0 );\n\n\t\treturn function translateX( distance ) {\n\n\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t};\n\n\t}(),\n\n\ttranslateY: function () {\n\n\t\tvar v1 = new Vector3( 0, 1, 0 );\n\n\t\treturn function translateY( distance ) {\n\n\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t};\n\n\t}(),\n\n\ttranslateZ: function () {\n\n\t\tvar v1 = new Vector3( 0, 0, 1 );\n\n\t\treturn function translateZ( distance ) {\n\n\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t};\n\n\t}(),\n\n\tlocalToWorld: function ( vector ) {\n\n\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t},\n\n\tworldToLocal: function () {\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function worldToLocal( vector ) {\n\n\t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\n\n\t\t};\n\n\t}(),\n\n\tlookAt: function () {\n\n\t\t// This method does not support objects with rotated and/or translated parent(s)\n\n\t\tvar m1 = new Matrix4();\n\t\tvar vector = new Vector3();\n\n\t\treturn function lookAt( x, y, z ) {\n\n\t\t\tif ( x.isVector3 ) {\n\n\t\t\t\tvector.copy( x );\n\n\t\t\t} else {\n\n\t\t\t\tvector.set( x, y, z );\n\n\t\t\t}\n\n\t\t\tif ( this.isCamera ) {\n\n\t\t\t\tm1.lookAt( this.position, vector, this.up );\n\n\t\t\t} else {\n\n\t\t\t\tm1.lookAt( vector, this.position, this.up );\n\n\t\t\t}\n\n\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n\t\t};\n\n\t}(),\n\n\tadd: function ( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object === this ) {\n\n\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( ( object && object.isObject3D ) ) {\n\n\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\tobject.parent.remove( object );\n\n\t\t\t}\n\n\t\t\tobject.parent = this;\n\t\t\tobject.dispatchEvent( { type: 'added' } );\n\n\t\t\tthis.children.push( object );\n\n\t\t} else {\n\n\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tremove: function ( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar index = this.children.indexOf( object );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tobject.parent = null;\n\n\t\t\tobject.dispatchEvent( { type: 'removed' } );\n\n\t\t\tthis.children.splice( index, 1 );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetObjectById: function ( id ) {\n\n\t\treturn this.getObjectByProperty( 'id', id );\n\n\t},\n\n\tgetObjectByName: function ( name ) {\n\n\t\treturn this.getObjectByProperty( 'name', name );\n\n\t},\n\n\tgetObjectByProperty: function ( name, value ) {\n\n\t\tif ( this[ name ] === value ) return this;\n\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tvar child = this.children[ i ];\n\t\t\tvar object = child.getObjectByProperty( name, value );\n\n\t\t\tif ( object !== undefined ) {\n\n\t\t\t\treturn object;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t},\n\n\tgetWorldPosition: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\tthis.updateMatrixWorld( true );\n\n\t\treturn target.setFromMatrixPosition( this.matrixWorld );\n\n\t},\n\n\tgetWorldQuaternion: function () {\n\n\t\tvar position = new Vector3();\n\t\tvar scale = new Vector3();\n\n\t\treturn function getWorldQuaternion( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );\n\t\t\t\ttarget = new Quaternion();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( position, target, scale );\n\n\t\t\treturn target;\n\n\t\t};\n\n\t}(),\n\n\tgetWorldScale: function () {\n\n\t\tvar position = new Vector3();\n\t\tvar quaternion = new Quaternion();\n\n\t\treturn function getWorldScale( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldScale() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( position, quaternion, target );\n\n\t\t\treturn target;\n\n\t\t};\n\n\t}(),\n\n\tgetWorldDirection: function () {\n\n\t\tvar quaternion = new Quaternion();\n\n\t\treturn function getWorldDirection( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\treturn target.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\n\t\t};\n\n\t}(),\n\n\traycast: function () {},\n\n\ttraverse: function ( callback ) {\n\n\t\tcallback( this );\n\n\t\tvar children = this.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverse( callback );\n\n\t\t}\n\n\t},\n\n\ttraverseVisible: function ( callback ) {\n\n\t\tif ( this.visible === false ) return;\n\n\t\tcallback( this );\n\n\t\tvar children = this.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t}\n\n\t},\n\n\ttraverseAncestors: function ( callback ) {\n\n\t\tvar parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tcallback( parent );\n\n\t\t\tparent.traverseAncestors( callback );\n\n\t\t}\n\n\t},\n\n\tupdateMatrix: function () {\n\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t},\n\n\tupdateMatrixWorld: function ( force ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\tforce = true;\n\n\t\t}\n\n\t\t// update children\n\n\t\tvar children = this.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].updateMatrixWorld( force );\n\n\t\t}\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\t// meta is a string when called from JSON.stringify\n\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tvar output = {};\n\n\t\t// meta is a hash used to collect geometries, materials.\n\t\t// not providing it implies that this is the root object\n\t\t// being serialized.\n\t\tif ( isRootObject ) {\n\n\t\t\t// initialize meta obj\n\t\t\tmeta = {\n\t\t\t\tgeometries: {},\n\t\t\t\tmaterials: {},\n\t\t\t\ttextures: {},\n\t\t\t\timages: {},\n\t\t\t\tshapes: {}\n\t\t\t};\n\n\t\t\toutput.metadata = {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Object',\n\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t};\n\n\t\t}\n\n\t\t// standard Object3D serialization\n\n\t\tvar object = {};\n\n\t\tobject.uuid = this.uuid;\n\t\tobject.type = this.type;\n\n\t\tif ( this.name !== '' ) object.name = this.name;\n\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\tif ( this.visible === false ) object.visible = false;\n\t\tif ( this.frustumCulled === false ) object.frustumCulled = false;\n\t\tif ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n\n\t\tobject.matrix = this.matrix.toArray();\n\n\t\t//\n\n\t\tfunction serialize( library, element ) {\n\n\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t}\n\n\t\t\treturn element.uuid;\n\n\t\t}\n\n\t\tif ( this.geometry !== undefined ) {\n\n\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\tvar parameters = this.geometry.parameters;\n\n\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\n\n\t\t\t\tvar shapes = parameters.shapes;\n\n\t\t\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\t\t\tserialize( meta.shapes, shape );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tserialize( meta.shapes, shapes );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.material !== undefined ) {\n\n\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\tvar uuids = [];\n\n\t\t\t\tfor ( var i = 0, l = this.material.length; i < l; i ++ ) {\n\n\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tobject.material = uuids;\n\n\t\t\t} else {\n\n\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.children.length > 0 ) {\n\n\t\t\tobject.children = [];\n\n\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tvar geometries = extractFromCache( meta.geometries );\n\t\t\tvar materials = extractFromCache( meta.materials );\n\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\tvar images = extractFromCache( meta.images );\n\t\t\tvar shapes = extractFromCache( meta.shapes );\n\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\tif ( images.length > 0 ) output.images = images;\n\t\t\tif ( shapes.length > 0 ) output.shapes = shapes;\n\n\t\t}\n\n\t\toutput.object = object;\n\n\t\treturn output;\n\n\t\t// extract data from the cache hash\n\t\t// remove metadata on each item\n\t\t// and return as array\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tvar values = [];\n\t\t\tfor ( var key in cache ) {\n\n\t\t\t\tvar data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\t\t\treturn values;\n\n\t\t}\n\n\t},\n\n\tclone: function ( recursive ) {\n\n\t\treturn new this.constructor().copy( this, recursive );\n\n\t},\n\n\tcopy: function ( source, recursive ) {\n\n\t\tif ( recursive === undefined ) recursive = true;\n\n\t\tthis.name = source.name;\n\n\t\tthis.up.copy( source.up );\n\n\t\tthis.position.copy( source.position );\n\t\tthis.quaternion.copy( source.quaternion );\n\t\tthis.scale.copy( source.scale );\n\n\t\tthis.matrix.copy( source.matrix );\n\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\tthis.layers.mask = source.layers.mask;\n\t\tthis.visible = source.visible;\n\n\t\tthis.castShadow = source.castShadow;\n\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\tthis.frustumCulled = source.frustumCulled;\n\t\tthis.renderOrder = source.renderOrder;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\tvar child = source.children[ i ];\n\t\t\t\tthis.add( child.clone() );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nfunction Camera() {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Camera';\n\n\tthis.matrixWorldInverse = new Matrix4();\n\tthis.projectionMatrix = new Matrix4();\n\n}\n\nCamera.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Camera,\n\n\tisCamera: true,\n\n\tcopy: function ( source, recursive ) {\n\n\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\n\t\treturn this;\n\n\t},\n\n\tgetWorldDirection: function () {\n\n\t\tvar quaternion = new Quaternion();\n\n\t\treturn function getWorldDirection( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Camera: .getWorldDirection() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\treturn target.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t\t};\n\n\t}(),\n\n\tupdateMatrixWorld: function ( force ) {\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author arose / http://github.com/arose\n */\n\nfunction OrthographicCamera( left, right, top, bottom, near, far ) {\n\n\tCamera.call( this );\n\n\tthis.type = 'OrthographicCamera';\n\n\tthis.zoom = 1;\n\tthis.view = null;\n\n\tthis.left = left;\n\tthis.right = right;\n\tthis.top = top;\n\tthis.bottom = bottom;\n\n\tthis.near = ( near !== undefined ) ? near : 0.1;\n\tthis.far = ( far !== undefined ) ? far : 2000;\n\n\tthis.updateProjectionMatrix();\n\n}\n\nOrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\tconstructor: OrthographicCamera,\n\n\tisOrthographicCamera: true,\n\n\tcopy: function ( source, recursive ) {\n\n\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\tthis.left = source.left;\n\t\tthis.right = source.right;\n\t\tthis.top = source.top;\n\t\tthis.bottom = source.bottom;\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\n\t\tthis.zoom = source.zoom;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\treturn this;\n\n\t},\n\n\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tclearViewOffset: function () {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tupdateProjectionMatrix: function () {\n\n\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\tvar cx = ( this.right + this.left ) / 2;\n\t\tvar cy = ( this.top + this.bottom ) / 2;\n\n\t\tvar left = cx - dx;\n\t\tvar right = cx + dx;\n\t\tvar top = cy + dy;\n\t\tvar bottom = cy - dy;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\n\t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\n\t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\n\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\n\n\t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\n\t\t\tright = left + scaleW * ( this.view.width / zoomW );\n\t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\n\t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\n\n\t\t}\n\n\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.zoom = this.zoom;\n\t\tdata.object.left = this.left;\n\t\tdata.object.right = this.right;\n\t\tdata.object.top = this.top;\n\t\tdata.object.bottom = this.bottom;\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\treturn data;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction Face3( a, b, c, normal, color, materialIndex ) {\n\n\tthis.a = a;\n\tthis.b = b;\n\tthis.c = c;\n\n\tthis.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();\n\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n\tthis.color = ( color && color.isColor ) ? color : new Color();\n\tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n}\n\nObject.assign( Face3.prototype, {\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.a = source.a;\n\t\tthis.b = source.b;\n\t\tthis.c = source.c;\n\n\t\tthis.normal.copy( source.normal );\n\t\tthis.color.copy( source.color );\n\n\t\tthis.materialIndex = source.materialIndex;\n\n\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n\t\t}\n\n\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\n\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author kile / http://kile.stravaganza.org/\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author bhouston / http://clara.io\n */\n\nvar geometryId = 0; // Geometry uses even numbers as Id\n\nfunction Geometry() {\n\n\tObject.defineProperty( this, 'id', { value: geometryId += 2 } );\n\n\tthis.uuid = _Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Geometry';\n\n\tthis.vertices = [];\n\tthis.colors = [];\n\tthis.faces = [];\n\tthis.faceVertexUvs = [[]];\n\n\tthis.morphTargets = [];\n\tthis.morphNormals = [];\n\n\tthis.skinWeights = [];\n\tthis.skinIndices = [];\n\n\tthis.lineDistances = [];\n\n\tthis.boundingBox = null;\n\tthis.boundingSphere = null;\n\n\t// update flags\n\n\tthis.elementsNeedUpdate = false;\n\tthis.verticesNeedUpdate = false;\n\tthis.uvsNeedUpdate = false;\n\tthis.normalsNeedUpdate = false;\n\tthis.colorsNeedUpdate = false;\n\tthis.lineDistancesNeedUpdate = false;\n\tthis.groupsNeedUpdate = false;\n\n}\n\nGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\tconstructor: Geometry,\n\n\tisGeometry: true,\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\tvar vertex = this.vertices[ i ];\n\t\t\tvertex.applyMatrix4( matrix );\n\n\t\t}\n\n\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\tvar face = this.faces[ i ];\n\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\tthis.verticesNeedUpdate = true;\n\t\tthis.normalsNeedUpdate = true;\n\n\t\treturn this;\n\n\t},\n\n\trotateX: function () {\n\n\t\t// rotate geometry around world x-axis\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function rotateX( angle ) {\n\n\t\t\tm1.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateY: function () {\n\n\t\t// rotate geometry around world y-axis\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function rotateY( angle ) {\n\n\t\t\tm1.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateZ: function () {\n\n\t\t// rotate geometry around world z-axis\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function rotateZ( angle ) {\n\n\t\t\tm1.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function () {\n\n\t\t// translate geometry\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function translate( x, y, z ) {\n\n\t\t\tm1.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tscale: function () {\n\n\t\t// scale geometry\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function scale( x, y, z ) {\n\n\t\t\tm1.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tlookAt: function () {\n\n\t\tvar obj = new Object3D();\n\n\t\treturn function lookAt( vector ) {\n\n\t\t\tobj.lookAt( vector );\n\n\t\t\tobj.updateMatrix();\n\n\t\t\tthis.applyMatrix( obj.matrix );\n\n\t\t};\n\n\t}(),\n\n\tfromBufferGeometry: function ( geometry ) {\n\n\t\tvar scope = this;\n\n\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n\t\tvar attributes = geometry.attributes;\n\n\t\tvar positions = attributes.position.array;\n\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n\t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\n\n\t\tvar tempNormals = [];\n\t\tvar tempUVs = [];\n\t\tvar tempUVs2 = [];\n\n\t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\n\n\t\t\tscope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\n\n\t\t\tif ( normals !== undefined ) {\n\n\t\t\t\ttempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( colors !== undefined ) {\n\n\t\t\t\tscope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\ttempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\ttempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction addFace( a, b, c, materialIndex ) {\n\n\t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\n\t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\n\n\t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n\t\t\tscope.faces.push( face );\n\n\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\n\n\t\t\t}\n\n\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar groups = geometry.groups;\n\n\t\tif ( groups.length > 0 ) {\n\n\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\n\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\tvar start = group.start;\n\t\t\t\tvar count = group.count;\n\n\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\taddFace( j, j + 1, j + 2, group.materialIndex );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\n\t\t\t\t\taddFace( i, i + 1, i + 2 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.computeFaceNormals();\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t}\n\n\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcenter: function () {\n\n\t\tvar offset = new Vector3();\n\n\t\treturn function center() {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tthis.boundingBox.getCenter( offset ).negate();\n\n\t\t\tthis.translate( offset.x, offset.y, offset.z );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tnormalize: function () {\n\n\t\tthis.computeBoundingSphere();\n\n\t\tvar center = this.boundingSphere.center;\n\t\tvar radius = this.boundingSphere.radius;\n\n\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n\t\tvar matrix = new Matrix4();\n\t\tmatrix.set(\n\t\t\ts, 0, 0, - s * center.x,\n\t\t\t0, s, 0, - s * center.y,\n\t\t\t0, 0, s, - s * center.z,\n\t\t\t0, 0, 0, 1\n\t\t);\n\n\t\tthis.applyMatrix( matrix );\n\n\t\treturn this;\n\n\t},\n\n\tcomputeFaceNormals: function () {\n\n\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tvar face = this.faces[ f ];\n\n\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\tvar vC = this.vertices[ face.c ];\n\n\t\t\tcb.subVectors( vC, vB );\n\t\t\tab.subVectors( vA, vB );\n\t\t\tcb.cross( ab );\n\n\t\t\tcb.normalize();\n\n\t\t\tface.normal.copy( cb );\n\n\t\t}\n\n\t},\n\n\tcomputeVertexNormals: function ( areaWeighted ) {\n\n\t\tif ( areaWeighted === undefined ) areaWeighted = true;\n\n\t\tvar v, vl, f, fl, face, vertices;\n\n\t\tvertices = new Array( this.vertices.length );\n\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\tvertices[ v ] = new Vector3();\n\n\t\t}\n\n\t\tif ( areaWeighted ) {\n\n\t\t\t// vertex normals weighted by triangle areas\n\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n\t\t\tvar vA, vB, vC;\n\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvA = this.vertices[ face.a ];\n\t\t\t\tvB = this.vertices[ face.b ];\n\t\t\t\tvC = this.vertices[ face.c ];\n\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\n\t\t\t\tvertices[ face.a ].add( cb );\n\t\t\t\tvertices[ face.b ].add( cb );\n\t\t\t\tvertices[ face.c ].add( cb );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvertices[ face.a ].add( face.normal );\n\t\t\t\tvertices[ face.b ].add( face.normal );\n\t\t\t\tvertices[ face.c ].add( face.normal );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\tvertices[ v ].normalize();\n\n\t\t}\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\n\t\t\t} else {\n\n\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.faces.length > 0 ) {\n\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t}\n\n\t},\n\n\tcomputeFlatVertexNormals: function () {\n\n\t\tvar f, fl, face;\n\n\t\tthis.computeFaceNormals();\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\tvertexNormals[ 0 ].copy( face.normal );\n\t\t\t\tvertexNormals[ 1 ].copy( face.normal );\n\t\t\t\tvertexNormals[ 2 ].copy( face.normal );\n\n\t\t\t} else {\n\n\t\t\t\tvertexNormals[ 0 ] = face.normal.clone();\n\t\t\t\tvertexNormals[ 1 ] = face.normal.clone();\n\t\t\t\tvertexNormals[ 2 ] = face.normal.clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.faces.length > 0 ) {\n\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t}\n\n\t},\n\n\tcomputeMorphNormals: function () {\n\n\t\tvar i, il, f, fl, face;\n\n\t\t// save original normals\n\t\t// - create temp variables on first access\n\t\t//   otherwise just copy (for faster repeated calls)\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tif ( ! face.__originalFaceNormal ) {\n\n\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n\t\t\t} else {\n\n\t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n\t\t\t}\n\n\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\n\n\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// use temp geometry to compute face and vertex normals for each morph\n\n\t\tvar tmpGeo = new Geometry();\n\t\ttmpGeo.faces = this.faces;\n\n\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n\t\t\t// create on first access\n\n\t\t\tif ( ! this.morphNormals[ i ] ) {\n\n\t\t\t\tthis.morphNormals[ i ] = {};\n\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\n\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tfaceNormal = new Vector3();\n\t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\n\t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar morphNormals = this.morphNormals[ i ];\n\n\t\t\t// set vertices to morph target\n\n\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n\t\t\t// compute morph normals\n\n\t\t\ttmpGeo.computeFaceNormals();\n\t\t\ttmpGeo.computeVertexNormals();\n\n\t\t\t// store morph normals\n\n\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\n\t\t\t\tfaceNormal.copy( face.normal );\n\n\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// restore original normals\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tface.normal = face.__originalFaceNormal;\n\t\t\tface.vertexNormals = face.__originalVertexNormals;\n\n\t\t}\n\n\t},\n\n\tcomputeBoundingBox: function () {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tthis.boundingBox.setFromPoints( this.vertices );\n\n\t},\n\n\tcomputeBoundingSphere: function () {\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n\t},\n\n\tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n\t\tif ( ! ( geometry && geometry.isGeometry ) ) {\n\n\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar normalMatrix,\n\t\t\tvertexOffset = this.vertices.length,\n\t\t\tvertices1 = this.vertices,\n\t\t\tvertices2 = geometry.vertices,\n\t\t\tfaces1 = this.faces,\n\t\t\tfaces2 = geometry.faces,\n\t\t\tuvs1 = this.faceVertexUvs[ 0 ],\n\t\t\tuvs2 = geometry.faceVertexUvs[ 0 ],\n\t\t\tcolors1 = this.colors,\n\t\t\tcolors2 = geometry.colors;\n\n\t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\n\n\t\tif ( matrix !== undefined ) {\n\n\t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t}\n\n\t\t// vertices\n\n\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n\t\t\tvar vertex = vertices2[ i ];\n\n\t\t\tvar vertexCopy = vertex.clone();\n\n\t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\n\n\t\t\tvertices1.push( vertexCopy );\n\n\t\t}\n\n\t\t// colors\n\n\t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\n\n\t\t\tcolors1.push( colors2[ i ].clone() );\n\n\t\t}\n\n\t\t// faces\n\n\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\n\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n\t\t\t\tfaceVertexNormals = face.vertexNormals,\n\t\t\t\tfaceVertexColors = face.vertexColors;\n\n\t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t\t\tfaceCopy.normal.copy( face.normal );\n\n\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n\t\t\t}\n\n\t\t\tfaceCopy.color.copy( face.color );\n\n\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n\t\t\t\tcolor = faceVertexColors[ j ];\n\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n\t\t\t}\n\n\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n\t\t\tfaces1.push( faceCopy );\n\n\t\t}\n\n\t\t// uvs\n\n\t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\n\n\t\t\tvar uv = uvs2[ i ], uvCopy = [];\n\n\t\t\tif ( uv === undefined ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\n\n\t\t\t\tuvCopy.push( uv[ j ].clone() );\n\n\t\t\t}\n\n\t\t\tuvs1.push( uvCopy );\n\n\t\t}\n\n\t},\n\n\tmergeMesh: function ( mesh ) {\n\n\t\tif ( ! ( mesh && mesh.isMesh ) ) {\n\n\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( mesh.matrixAutoUpdate ) mesh.updateMatrix();\n\n\t\tthis.merge( mesh.geometry, mesh.matrix );\n\n\t},\n\n\t/*\n\t * Checks for duplicate vertices with hashmap.\n\t * Duplicated vertices are removed\n\t * and faces' vertices are updated.\n\t */\n\n\tmergeVertices: function () {\n\n\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t\tvar unique = [], changes = [];\n\n\t\tvar v, key;\n\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t\tvar precision = Math.pow( 10, precisionPoints );\n\t\tvar i, il, face;\n\t\tvar indices, j, jl;\n\n\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\tv = this.vertices[ i ];\n\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n\t\t\tif ( verticesMap[ key ] === undefined ) {\n\n\t\t\t\tverticesMap[ key ] = i;\n\t\t\t\tunique.push( this.vertices[ i ] );\n\t\t\t\tchanges[ i ] = unique.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n\t\t\t}\n\n\t\t}\n\n\n\t\t// if faces are completely degenerate after merging vertices, we\n\t\t// have to remove them from the geometry.\n\t\tvar faceIndicesToRemove = [];\n\n\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\tface = this.faces[ i ];\n\n\t\t\tface.a = changes[ face.a ];\n\t\t\tface.b = changes[ face.b ];\n\t\t\tface.c = changes[ face.c ];\n\n\t\t\tindices = [ face.a, face.b, face.c ];\n\n\t\t\t// if any duplicate vertices are found in a Face3\n\t\t\t// we have to remove the face as nothing can be saved\n\t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n\t\t\t\t\tfaceIndicesToRemove.push( i );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\n\t\t\tvar idx = faceIndicesToRemove[ i ];\n\n\t\t\tthis.faces.splice( idx, 1 );\n\n\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Use unique set of vertices\n\n\t\tvar diff = this.vertices.length - unique.length;\n\t\tthis.vertices = unique;\n\t\treturn diff;\n\n\t},\n\n\tsetFromPoints: function ( points ) {\n\n\t\tthis.vertices = [];\n\n\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tvar point = points[ i ];\n\t\t\tthis.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsortFacesByMaterialIndex: function () {\n\n\t\tvar faces = this.faces;\n\t\tvar length = faces.length;\n\n\t\t// tag faces\n\n\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\tfaces[ i ]._id = i;\n\n\t\t}\n\n\t\t// sort faces\n\n\t\tfunction materialIndexSort( a, b ) {\n\n\t\t\treturn a.materialIndex - b.materialIndex;\n\n\t\t}\n\n\t\tfaces.sort( materialIndexSort );\n\n\t\t// sort uvs\n\n\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n\t\tvar newUvs1, newUvs2;\n\n\t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\n\t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\n\n\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\tvar id = faces[ i ]._id;\n\n\t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\n\t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\n\n\t\t}\n\n\t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\n\t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Geometry',\n\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Geometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tvar parameters = this.parameters;\n\n\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tvar vertices = [];\n\n\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n\t\t\tvar vertex = this.vertices[ i ];\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tvar faces = [];\n\t\tvar normals = [];\n\t\tvar normalsHash = {};\n\t\tvar colors = [];\n\t\tvar colorsHash = {};\n\t\tvar uvs = [];\n\t\tvar uvsHash = {};\n\n\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n\t\t\tvar face = this.faces[ i ];\n\n\t\t\tvar hasMaterial = true;\n\t\t\tvar hasFaceUv = false; // deprecated\n\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n\t\t\tvar faceType = 0;\n\n\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n\t\t\tfaces.push( faceType );\n\t\t\tfaces.push( face.a, face.b, face.c );\n\t\t\tfaces.push( face.materialIndex );\n\n\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setBit( value, position, enabled ) {\n\n\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n\t\t}\n\n\t\tfunction getNormalIndex( normal ) {\n\n\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n\t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\treturn normalsHash[ hash ];\n\n\t\t}\n\n\t\tfunction getColorIndex( color ) {\n\n\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n\t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tcolorsHash[ hash ] = colors.length;\n\t\t\tcolors.push( color.getHex() );\n\n\t\t\treturn colorsHash[ hash ];\n\n\t\t}\n\n\t\tfunction getUvIndex( uv ) {\n\n\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n\t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\treturn uvsHash[ hash ];\n\n\t\t}\n\n\t\tdata.data = {};\n\n\t\tdata.data.vertices = vertices;\n\t\tdata.data.normals = normals;\n\t\tif ( colors.length > 0 ) data.data.colors = colors;\n\t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\n\t\tdata.data.faces = faces;\n\n\t\treturn data;\n\n\t},\n\n\tclone: function () {\n\n\t\t/*\n\t\t // Handle primitives\n\n\t\t var parameters = this.parameters;\n\n\t\t if ( parameters !== undefined ) {\n\n\t\t var values = [];\n\n\t\t for ( var key in parameters ) {\n\n\t\t values.push( parameters[ key ] );\n\n\t\t }\n\n\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t this.constructor.apply( geometry, values );\n\t\t return geometry;\n\n\t\t }\n\n\t\t return new this.constructor().copy( this );\n\t\t */\n\n\t\treturn new Geometry().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tvar i, il, j, jl, k, kl;\n\n\t\t// reset\n\n\t\tthis.vertices = [];\n\t\tthis.colors = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [[]];\n\t\tthis.morphTargets = [];\n\t\tthis.morphNormals = [];\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\t\tthis.lineDistances = [];\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// name\n\n\t\tthis.name = source.name;\n\n\t\t// vertices\n\n\t\tvar vertices = source.vertices;\n\n\t\tfor ( i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n\t\t}\n\n\t\t// colors\n\n\t\tvar colors = source.colors;\n\n\t\tfor ( i = 0, il = colors.length; i < il; i ++ ) {\n\n\t\t\tthis.colors.push( colors[ i ].clone() );\n\n\t\t}\n\n\t\t// faces\n\n\t\tvar faces = source.faces;\n\n\t\tfor ( i = 0, il = faces.length; i < il; i ++ ) {\n\n\t\t\tthis.faces.push( faces[ i ].clone() );\n\n\t\t}\n\n\t\t// face vertex uvs\n\n\t\tfor ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\n\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\n\t\t\t\tthis.faceVertexUvs[ i ] = [];\n\n\t\t\t}\n\n\t\t\tfor ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n\t\t\t\tfor ( k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n\t\t\t\t\tvar uv = uvs[ k ];\n\n\t\t\t\t\tuvsCopy.push( uv.clone() );\n\n\t\t\t\t}\n\n\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// morph targets\n\n\t\tvar morphTargets = source.morphTargets;\n\n\t\tfor ( i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\tvar morphTarget = {};\n\t\t\tmorphTarget.name = morphTargets[ i ].name;\n\n\t\t\t// vertices\n\n\t\t\tif ( morphTargets[ i ].vertices !== undefined ) {\n\n\t\t\t\tmorphTarget.vertices = [];\n\n\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {\n\n\t\t\t\t\tmorphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// normals\n\n\t\t\tif ( morphTargets[ i ].normals !== undefined ) {\n\n\t\t\t\tmorphTarget.normals = [];\n\n\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tmorphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.morphTargets.push( morphTarget );\n\n\t\t}\n\n\t\t// morph normals\n\n\t\tvar morphNormals = source.morphNormals;\n\n\t\tfor ( i = 0, il = morphNormals.length; i < il; i ++ ) {\n\n\t\t\tvar morphNormal = {};\n\n\t\t\t// vertex normals\n\n\t\t\tif ( morphNormals[ i ].vertexNormals !== undefined ) {\n\n\t\t\t\tmorphNormal.vertexNormals = [];\n\n\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];\n\t\t\t\t\tvar destVertexNormal = {};\n\n\t\t\t\t\tdestVertexNormal.a = srcVertexNormal.a.clone();\n\t\t\t\t\tdestVertexNormal.b = srcVertexNormal.b.clone();\n\t\t\t\t\tdestVertexNormal.c = srcVertexNormal.c.clone();\n\n\t\t\t\t\tmorphNormal.vertexNormals.push( destVertexNormal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// face normals\n\n\t\t\tif ( morphNormals[ i ].faceNormals !== undefined ) {\n\n\t\t\t\tmorphNormal.faceNormals = [];\n\n\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tmorphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.morphNormals.push( morphNormal );\n\n\t\t}\n\n\t\t// skin weights\n\n\t\tvar skinWeights = source.skinWeights;\n\n\t\tfor ( i = 0, il = skinWeights.length; i < il; i ++ ) {\n\n\t\t\tthis.skinWeights.push( skinWeights[ i ].clone() );\n\n\t\t}\n\n\t\t// skin indices\n\n\t\tvar skinIndices = source.skinIndices;\n\n\t\tfor ( i = 0, il = skinIndices.length; i < il; i ++ ) {\n\n\t\t\tthis.skinIndices.push( skinIndices[ i ].clone() );\n\n\t\t}\n\n\t\t// line distances\n\n\t\tvar lineDistances = source.lineDistances;\n\n\t\tfor ( i = 0, il = lineDistances.length; i < il; i ++ ) {\n\n\t\t\tthis.lineDistances.push( lineDistances[ i ] );\n\n\t\t}\n\n\t\t// bounding box\n\n\t\tvar boundingBox = source.boundingBox;\n\n\t\tif ( boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t}\n\n\t\t// bounding sphere\n\n\t\tvar boundingSphere = source.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t}\n\n\t\t// update flags\n\n\t\tthis.elementsNeedUpdate = source.elementsNeedUpdate;\n\t\tthis.verticesNeedUpdate = source.verticesNeedUpdate;\n\t\tthis.uvsNeedUpdate = source.uvsNeedUpdate;\n\t\tthis.normalsNeedUpdate = source.normalsNeedUpdate;\n\t\tthis.colorsNeedUpdate = source.colorsNeedUpdate;\n\t\tthis.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n\t\tthis.groupsNeedUpdate = source.groupsNeedUpdate;\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction BufferAttribute( array, itemSize, normalized ) {\n\n\tif ( Array.isArray( array ) ) {\n\n\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t}\n\n\tthis.name = '';\n\n\tthis.array = array;\n\tthis.itemSize = itemSize;\n\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\tthis.normalized = normalized === true;\n\n\tthis.dynamic = false;\n\tthis.updateRange = { offset: 0, count: - 1 };\n\n\tthis.version = 0;\n\n}\n\nObject.defineProperty( BufferAttribute.prototype, 'needsUpdate', {\n\n\tset: function ( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n} );\n\nObject.assign( BufferAttribute.prototype, {\n\n\tisBufferAttribute: true,\n\n\tonUploadCallback: function () {},\n\n\tsetArray: function ( array ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.count = array !== undefined ? array.length / this.itemSize : 0;\n\t\tthis.array = array;\n\n\t},\n\n\tsetDynamic: function ( value ) {\n\n\t\tthis.dynamic = value;\n\n\t\treturn this;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.itemSize = source.itemSize;\n\t\tthis.count = source.count;\n\t\tthis.normalized = source.normalized;\n\n\t\tthis.dynamic = source.dynamic;\n\n\t\treturn this;\n\n\t},\n\n\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.itemSize;\n\t\tindex2 *= attribute.itemSize;\n\n\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyArray: function ( array ) {\n\n\t\tthis.array.set( array );\n\n\t\treturn this;\n\n\t},\n\n\tcopyColorsArray: function ( colors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\tvar color = colors[ i ];\n\n\t\t\tif ( color === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\tcolor = new Color();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = color.r;\n\t\t\tarray[ offset ++ ] = color.g;\n\t\t\tarray[ offset ++ ] = color.b;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyVector2sArray: function ( vectors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tvar vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\tvector = new Vector2();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyVector3sArray: function ( vectors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tvar vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\tvector = new Vector3();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\tarray[ offset ++ ] = vector.z;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyVector4sArray: function ( vectors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tvar vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\tvector = new Vector4();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\tarray[ offset ++ ] = vector.w;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tset: function ( value, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t},\n\n\tgetX: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize ];\n\n\t},\n\n\tsetX: function ( index, x ) {\n\n\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\treturn this;\n\n\t},\n\n\tgetY: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 1 ];\n\n\t},\n\n\tsetY: function ( index, y ) {\n\n\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tgetZ: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 2 ];\n\n\t},\n\n\tsetZ: function ( index, z ) {\n\n\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tgetW: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 3 ];\n\n\t},\n\n\tsetW: function ( index, w ) {\n\n\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetXY: function ( index, x, y ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZ: function ( index, x, y, z ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\t\tthis.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t},\n\n\tonUpload: function ( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t}\n\n} );\n\n//\n\nfunction Int8BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );\n\n}\n\nInt8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\n\n\nfunction Uint8BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );\n\n}\n\nUint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\n\n\nfunction Uint8ClampedBufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );\n\n}\n\nUint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\n\n\nfunction Int16BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );\n\n}\n\nInt16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\n\n\nfunction Uint16BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );\n\n}\n\nUint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\n\n\nfunction Int32BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );\n\n}\n\nInt32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\n\n\nfunction Uint32BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );\n\n}\n\nUint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\n\n\nfunction Float32BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );\n\n}\n\nFloat32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\n\n\nfunction Float64BufferAttribute( array, itemSize, normalized ) {\n\n\tBufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );\n\n}\n\nFloat64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\nFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction DirectGeometry() {\n\n\tthis.vertices = [];\n\tthis.normals = [];\n\tthis.colors = [];\n\tthis.uvs = [];\n\tthis.uvs2 = [];\n\n\tthis.groups = [];\n\n\tthis.morphTargets = {};\n\n\tthis.skinWeights = [];\n\tthis.skinIndices = [];\n\n\t// this.lineDistances = [];\n\n\tthis.boundingBox = null;\n\tthis.boundingSphere = null;\n\n\t// update flags\n\n\tthis.verticesNeedUpdate = false;\n\tthis.normalsNeedUpdate = false;\n\tthis.colorsNeedUpdate = false;\n\tthis.uvsNeedUpdate = false;\n\tthis.groupsNeedUpdate = false;\n\n}\n\nObject.assign( DirectGeometry.prototype, {\n\n\tcomputeGroups: function ( geometry ) {\n\n\t\tvar group;\n\t\tvar groups = [];\n\t\tvar materialIndex = undefined;\n\n\t\tvar faces = geometry.faces;\n\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\t// materials\n\n\t\t\tif ( face.materialIndex !== materialIndex ) {\n\n\t\t\t\tmaterialIndex = face.materialIndex;\n\n\t\t\t\tif ( group !== undefined ) {\n\n\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\tgroups.push( group );\n\n\t\t\t\t}\n\n\t\t\t\tgroup = {\n\t\t\t\t\tstart: i * 3,\n\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( group !== undefined ) {\n\n\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\tgroups.push( group );\n\n\t\t}\n\n\t\tthis.groups = groups;\n\n\t},\n\n\tfromGeometry: function ( geometry ) {\n\n\t\tvar faces = geometry.faces;\n\t\tvar vertices = geometry.vertices;\n\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n\t\t// morphs\n\n\t\tvar morphTargets = geometry.morphTargets;\n\t\tvar morphTargetsLength = morphTargets.length;\n\n\t\tvar morphTargetsPosition;\n\n\t\tif ( morphTargetsLength > 0 ) {\n\n\t\t\tmorphTargetsPosition = [];\n\n\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n\t\t\t\tmorphTargetsPosition[ i ] = [];\n\n\t\t\t}\n\n\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n\t\t}\n\n\t\tvar morphNormals = geometry.morphNormals;\n\t\tvar morphNormalsLength = morphNormals.length;\n\n\t\tvar morphTargetsNormal;\n\n\t\tif ( morphNormalsLength > 0 ) {\n\n\t\t\tmorphTargetsNormal = [];\n\n\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\n\t\t\t\tmorphTargetsNormal[ i ] = [];\n\n\t\t\t}\n\n\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n\t\t}\n\n\t\t// skins\n\n\t\tvar skinIndices = geometry.skinIndices;\n\t\tvar skinWeights = geometry.skinWeights;\n\n\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n\t\t//\n\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n\t\t\t} else {\n\n\t\t\t\tvar normal = face.normal;\n\n\t\t\t\tthis.normals.push( normal, normal, normal );\n\n\t\t\t}\n\n\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\tif ( vertexColors.length === 3 ) {\n\n\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n\t\t\t} else {\n\n\t\t\t\tvar color = face.color;\n\n\t\t\t\tthis.colors.push( color, color, color );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexUv === true ) {\n\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\n\t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexUv2 === true ) {\n\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\n\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\n\t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// morphs\n\n\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n\t\t\t\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\n\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\n\t\t\t\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n\t\t\t}\n\n\t\t\t// skins\n\n\t\t\tif ( hasSkinIndices ) {\n\n\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n\t\t\t}\n\n\t\t\tif ( hasSkinWeights ) {\n\n\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.computeGroups( geometry );\n\n\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction arrayMax( array ) {\n\n\tif ( array.length === 0 ) return - Infinity;\n\n\tvar max = array[ 0 ];\n\n\tfor ( var i = 1, l = array.length; i < l; ++ i ) {\n\n\t\tif ( array[ i ] > max ) max = array[ i ];\n\n\t}\n\n\treturn max;\n\n}\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id\n\nfunction BufferGeometry() {\n\n\tObject.defineProperty( this, 'id', { value: bufferGeometryId += 2 } );\n\n\tthis.uuid = _Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'BufferGeometry';\n\n\tthis.index = null;\n\tthis.attributes = {};\n\n\tthis.morphAttributes = {};\n\n\tthis.groups = [];\n\n\tthis.boundingBox = null;\n\tthis.boundingSphere = null;\n\n\tthis.drawRange = { start: 0, count: Infinity };\n\n}\n\nBufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\tconstructor: BufferGeometry,\n\n\tisBufferGeometry: true,\n\n\tgetIndex: function () {\n\n\t\treturn this.index;\n\n\t},\n\n\tsetIndex: function ( index ) {\n\n\t\tif ( Array.isArray( index ) ) {\n\n\t\t\tthis.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t} else {\n\n\t\t\tthis.index = index;\n\n\t\t}\n\n\t},\n\n\taddAttribute: function ( name, attribute ) {\n\n\t\tif ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\t\tthis.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( name === 'index' ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\t\tthis.setIndex( attribute );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.attributes[ name ] = attribute;\n\n\t\treturn this;\n\n\t},\n\n\tgetAttribute: function ( name ) {\n\n\t\treturn this.attributes[ name ];\n\n\t},\n\n\tremoveAttribute: function ( name ) {\n\n\t\tdelete this.attributes[ name ];\n\n\t\treturn this;\n\n\t},\n\n\taddGroup: function ( start, count, materialIndex ) {\n\n\t\tthis.groups.push( {\n\n\t\t\tstart: start,\n\t\t\tcount: count,\n\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n\t\t} );\n\n\t},\n\n\tclearGroups: function () {\n\n\t\tthis.groups = [];\n\n\t},\n\n\tsetDrawRange: function ( start, count ) {\n\n\t\tthis.drawRange.start = start;\n\t\tthis.drawRange.count = count;\n\n\t},\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tvar position = this.attributes.position;\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tmatrix.applyToBufferAttribute( position );\n\t\t\tposition.needsUpdate = true;\n\n\t\t}\n\n\t\tvar normal = this.attributes.normal;\n\n\t\tif ( normal !== undefined ) {\n\n\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tnormalMatrix.applyToBufferAttribute( normal );\n\t\t\tnormal.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\trotateX: function () {\n\n\t\t// rotate geometry around world x-axis\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function rotateX( angle ) {\n\n\t\t\tm1.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateY: function () {\n\n\t\t// rotate geometry around world y-axis\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function rotateY( angle ) {\n\n\t\t\tm1.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateZ: function () {\n\n\t\t// rotate geometry around world z-axis\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function rotateZ( angle ) {\n\n\t\t\tm1.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function () {\n\n\t\t// translate geometry\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function translate( x, y, z ) {\n\n\t\t\tm1.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tscale: function () {\n\n\t\t// scale geometry\n\n\t\tvar m1 = new Matrix4();\n\n\t\treturn function scale( x, y, z ) {\n\n\t\t\tm1.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tlookAt: function () {\n\n\t\tvar obj = new Object3D();\n\n\t\treturn function lookAt( vector ) {\n\n\t\t\tobj.lookAt( vector );\n\n\t\t\tobj.updateMatrix();\n\n\t\t\tthis.applyMatrix( obj.matrix );\n\n\t\t};\n\n\t}(),\n\n\tcenter: function () {\n\n\t\tvar offset = new Vector3();\n\n\t\treturn function center() {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tthis.boundingBox.getCenter( offset ).negate();\n\n\t\t\tthis.translate( offset.x, offset.y, offset.z );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tsetFromObject: function ( object ) {\n\n\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( object.isPoints || object.isLine ) {\n\n\t\t\tvar positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );\n\t\t\tvar colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );\n\n\t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n\t\t\t\tvar lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );\n\n\t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t} else if ( object.isMesh ) {\n\n\t\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t\tthis.fromGeometry( geometry );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPoints: function ( points ) {\n\n\t\tvar position = [];\n\n\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tvar point = points[ i ];\n\t\t\tposition.push( point.x, point.y, point.z || 0 );\n\n\t\t}\n\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\n\t\treturn this;\n\n\t},\n\n\tupdateFromObject: function ( object ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( object.isMesh ) {\n\n\t\t\tvar direct = geometry.__directGeometry;\n\n\t\t\tif ( geometry.elementsNeedUpdate === true ) {\n\n\t\t\t\tdirect = undefined;\n\t\t\t\tgeometry.elementsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( direct === undefined ) {\n\n\t\t\t\treturn this.fromGeometry( geometry );\n\n\t\t\t}\n\n\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\tgeometry = direct;\n\n\t\t}\n\n\t\tvar attribute;\n\n\t\tif ( geometry.verticesNeedUpdate === true ) {\n\n\t\t\tattribute = this.attributes.position;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.verticesNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.normalsNeedUpdate === true ) {\n\n\t\t\tattribute = this.attributes.normal;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyVector3sArray( geometry.normals );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.normalsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.colorsNeedUpdate === true ) {\n\n\t\t\tattribute = this.attributes.color;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyColorsArray( geometry.colors );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.colorsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.uvsNeedUpdate ) {\n\n\t\t\tattribute = this.attributes.uv;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.uvsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n\t\t\tattribute = this.attributes.lineDistance;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyArray( geometry.lineDistances );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.groupsNeedUpdate ) {\n\n\t\t\tgeometry.computeGroups( object.geometry );\n\t\t\tthis.groups = geometry.groups;\n\n\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tfromGeometry: function ( geometry ) {\n\n\t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\n\n\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n\t},\n\n\tfromDirectGeometry: function ( geometry ) {\n\n\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t\tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t\t\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n\t\t}\n\n\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t\t\tthis.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n\t\t}\n\n\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t\t\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n\t\t}\n\n\t\tif ( geometry.uvs2.length > 0 ) {\n\n\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t\t\tthis.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n\t\t}\n\n\t\t// groups\n\n\t\tthis.groups = geometry.groups;\n\n\t\t// morphs\n\n\t\tfor ( var name in geometry.morphTargets ) {\n\n\t\t\tvar array = [];\n\t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ i ];\n\n\t\t\t\tvar attribute = new Float32BufferAttribute( morphTarget.length * 3, 3 );\n\n\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget ) );\n\n\t\t\t}\n\n\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t}\n\n\t\t// skinning\n\n\t\tif ( geometry.skinIndices.length > 0 ) {\n\n\t\t\tvar skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );\n\t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n\t\t}\n\n\t\tif ( geometry.skinWeights.length > 0 ) {\n\n\t\t\tvar skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );\n\t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t}\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcomputeBoundingBox: function () {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tvar position = this.attributes.position;\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t} else {\n\n\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t}\n\n\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t}\n\n\t},\n\n\tcomputeBoundingSphere: function () {\n\n\t\tvar box = new Box3();\n\t\tvar vector = new Vector3();\n\n\t\treturn function computeBoundingSphere() {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif ( position ) {\n\n\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\tbox.setFromBufferAttribute( position );\n\t\t\t\tbox.getCenter( center );\n\n\t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor ( var i = 0, il = position.count; i < il; i ++ ) {\n\n\t\t\t\t\tvector.x = position.getX( i );\n\t\t\t\t\tvector.y = position.getY( i );\n\t\t\t\t\tvector.z = position.getZ( i );\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}(),\n\n\tcomputeFaceNormals: function () {\n\n\t\t// backwards compatibility\n\n\t},\n\n\tcomputeVertexNormals: function () {\n\n\t\tvar index = this.index;\n\t\tvar attributes = this.attributes;\n\t\tvar groups = this.groups;\n\n\t\tif ( attributes.position ) {\n\n\t\t\tvar positions = attributes.position.array;\n\n\t\t\tif ( attributes.normal === undefined ) {\n\n\t\t\t\tthis.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\n\t\t\t} else {\n\n\t\t\t\t// reset existing normals to zero\n\n\t\t\t\tvar array = attributes.normal.array;\n\n\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t\tarray[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar normals = attributes.normal.array;\n\n\t\t\tvar vA, vB, vC;\n\t\t\tvar pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t// indexed elements\n\n\t\t\tif ( index ) {\n\n\t\t\t\tvar indices = index.array;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tthis.addGroup( 0, indices.length );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\n\n\t\t\t\t\tvar group = groups[ j ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\n\t\t\t\t\t\tpA.fromArray( positions, vA );\n\t\t\t\t\t\tpB.fromArray( positions, vB );\n\t\t\t\t\t\tpC.fromArray( positions, vC );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ vA ] += cb.x;\n\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vB ] += cb.x;\n\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vC ] += cb.x;\n\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\n\t\t\t\t\tpA.fromArray( positions, i );\n\t\t\t\t\tpB.fromArray( positions, i + 3 );\n\t\t\t\t\tpC.fromArray( positions, i + 6 );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnormals[ i ] = cb.x;\n\t\t\t\t\tnormals[ i + 1 ] = cb.y;\n\t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\n\t\t\t\t\tnormals[ i + 3 ] = cb.x;\n\t\t\t\t\tnormals[ i + 4 ] = cb.y;\n\t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\n\t\t\t\t\tnormals[ i + 6 ] = cb.x;\n\t\t\t\t\tnormals[ i + 7 ] = cb.y;\n\t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.normalizeNormals();\n\n\t\t\tattributes.normal.needsUpdate = true;\n\n\t\t}\n\n\t},\n\n\tmerge: function ( geometry, offset ) {\n\n\t\tif ( ! ( geometry && geometry.isBufferGeometry ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( offset === undefined ) {\n\n\t\t\toffset = 0;\n\n\t\t\tconsole.warn(\n\t\t\t\t'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '\n\t\t\t\t+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'\n\t\t\t);\n\n\t\t}\n\n\t\tvar attributes = this.attributes;\n\n\t\tfor ( var key in attributes ) {\n\n\t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\n\t\t\tvar attribute1 = attributes[ key ];\n\t\t\tvar attributeArray1 = attribute1.array;\n\n\t\t\tvar attribute2 = geometry.attributes[ key ];\n\t\t\tvar attributeArray2 = attribute2.array;\n\n\t\t\tvar attributeSize = attribute2.itemSize;\n\n\t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\n\n\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tnormalizeNormals: function () {\n\n\t\tvar vector = new Vector3();\n\n\t\treturn function normalizeNormals() {\n\n\t\t\tvar normals = this.attributes.normal;\n\n\t\t\tfor ( var i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t\tvector.x = normals.getX( i );\n\t\t\t\tvector.y = normals.getY( i );\n\t\t\t\tvector.z = normals.getZ( i );\n\n\t\t\t\tvector.normalize();\n\n\t\t\t\tnormals.setXYZ( i, vector.x, vector.y, vector.z );\n\n\t\t\t}\n\n\t\t};\n\n\t}(),\n\n\ttoNonIndexed: function () {\n\n\t\tif ( this.index === null ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar geometry2 = new BufferGeometry();\n\n\t\tvar indices = this.index.array;\n\t\tvar attributes = this.attributes;\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tvar attribute = attributes[ name ];\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\tvar index = 0, index2 = 0;\n\n\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );\n\n\t\t}\n\n\t\tvar groups = this.groups;\n\n\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tvar group = groups[ i ];\n\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\treturn geometry2;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard BufferGeometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tvar parameters = this.parameters;\n\n\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tdata.data = { attributes: {} };\n\n\t\tvar index = this.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tvar array = Array.prototype.slice.call( index.array );\n\n\t\t\tdata.data.index = {\n\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\tarray: array\n\t\t\t};\n\n\t\t}\n\n\t\tvar attributes = this.attributes;\n\n\t\tfor ( var key in attributes ) {\n\n\t\t\tvar attribute = attributes[ key ];\n\n\t\t\tvar array = Array.prototype.slice.call( attribute.array );\n\n\t\t\tdata.data.attributes[ key ] = {\n\t\t\t\titemSize: attribute.itemSize,\n\t\t\t\ttype: attribute.array.constructor.name,\n\t\t\t\tarray: array,\n\t\t\t\tnormalized: attribute.normalized\n\t\t\t};\n\n\t\t}\n\n\t\tvar groups = this.groups;\n\n\t\tif ( groups.length > 0 ) {\n\n\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t}\n\n\t\tvar boundingSphere = this.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tdata.data.boundingSphere = {\n\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\tradius: boundingSphere.radius\n\t\t\t};\n\n\t\t}\n\n\t\treturn data;\n\n\t},\n\n\tclone: function () {\n\n\t\t/*\n\t\t // Handle primitives\n\n\t\t var parameters = this.parameters;\n\n\t\t if ( parameters !== undefined ) {\n\n\t\t var values = [];\n\n\t\t for ( var key in parameters ) {\n\n\t\t values.push( parameters[ key ] );\n\n\t\t }\n\n\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t this.constructor.apply( geometry, values );\n\t\t return geometry;\n\n\t\t }\n\n\t\t return new this.constructor().copy( this );\n\t\t */\n\n\t\treturn new BufferGeometry().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tvar name, i, l;\n\n\t\t// reset\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\t\tthis.morphAttributes = {};\n\t\tthis.groups = [];\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// name\n\n\t\tthis.name = source.name;\n\n\t\t// index\n\n\t\tvar index = source.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tthis.setIndex( index.clone() );\n\n\t\t}\n\n\t\t// attributes\n\n\t\tvar attributes = source.attributes;\n\n\t\tfor ( name in attributes ) {\n\n\t\t\tvar attribute = attributes[ name ];\n\t\t\tthis.addAttribute( name, attribute.clone() );\n\n\t\t}\n\n\t\t// morph attributes\n\n\t\tvar morphAttributes = source.morphAttributes;\n\n\t\tfor ( name in morphAttributes ) {\n\n\t\t\tvar array = [];\n\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\tfor ( i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\tarray.push( morphAttribute[ i ].clone() );\n\n\t\t\t}\n\n\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t}\n\n\t\t// groups\n\n\t\tvar groups = source.groups;\n\n\t\tfor ( i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tvar group = groups[ i ];\n\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\t// bounding box\n\n\t\tvar boundingBox = source.boundingBox;\n\n\t\tif ( boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t}\n\n\t\t// bounding sphere\n\n\t\tvar boundingSphere = source.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t}\n\n\t\t// draw range\n\n\t\tthis.drawRange.start = source.drawRange.start;\n\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// BoxGeometry\n\nfunction BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'BoxGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\tdepth: depth,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tdepthSegments: depthSegments\n\t};\n\n\tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\tthis.mergeVertices();\n\n}\n\nBoxGeometry.prototype = Object.create( Geometry.prototype );\nBoxGeometry.prototype.constructor = BoxGeometry;\n\n// BoxBufferGeometry\n\nfunction BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'BoxBufferGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\tdepth: depth,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tdepthSegments: depthSegments\n\t};\n\n\tvar scope = this;\n\n\twidth = width || 1;\n\theight = height || 1;\n\tdepth = depth || 1;\n\n\t// segments\n\n\twidthSegments = Math.floor( widthSegments ) || 1;\n\theightSegments = Math.floor( heightSegments ) || 1;\n\tdepthSegments = Math.floor( depthSegments ) || 1;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// helper variables\n\n\tvar numberOfVertices = 0;\n\tvar groupStart = 0;\n\n\t// build each side of the box geometry\n\n\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\n\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\n\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\n\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\n\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\n\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\tvar segmentWidth = width / gridX;\n\t\tvar segmentHeight = height / gridY;\n\n\t\tvar widthHalf = width / 2;\n\t\tvar heightHalf = height / 2;\n\t\tvar depthHalf = depth / 2;\n\n\t\tvar gridX1 = gridX + 1;\n\t\tvar gridY1 = gridY + 1;\n\n\t\tvar vertexCounter = 0;\n\t\tvar groupCount = 0;\n\n\t\tvar ix, iy;\n\n\t\tvar vector = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t// set values to correct vector component\n\n\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t// set values to correct vector component\n\n\t\t\t\tvector[ u ] = 0;\n\t\t\t\tvector[ v ] = 0;\n\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t// uvs\n\n\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t// counters\n\n\t\t\t\tvertexCounter += 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\t// 1. you need three indices to draw a single face\n\t\t// 2. a single segment consists of two faces\n\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t// increase counter\n\n\t\t\t\tgroupCount += 6;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t// calculate new start value for groups\n\n\t\tgroupStart += groupCount;\n\n\t\t// update total number of vertices\n\n\t\tnumberOfVertices += vertexCounter;\n\n\t}\n\n}\n\nBoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nBoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// PlaneGeometry\n\nfunction PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'PlaneGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments\n\t};\n\n\tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\tthis.mergeVertices();\n\n}\n\nPlaneGeometry.prototype = Object.create( Geometry.prototype );\nPlaneGeometry.prototype.constructor = PlaneGeometry;\n\n// PlaneBufferGeometry\n\nfunction PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'PlaneBufferGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments\n\t};\n\n\twidth = width || 1;\n\theight = height || 1;\n\n\tvar width_half = width / 2;\n\tvar height_half = height / 2;\n\n\tvar gridX = Math.floor( widthSegments ) || 1;\n\tvar gridY = Math.floor( heightSegments ) || 1;\n\n\tvar gridX1 = gridX + 1;\n\tvar gridY1 = gridY + 1;\n\n\tvar segment_width = width / gridX;\n\tvar segment_height = height / gridY;\n\n\tvar ix, iy;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// generate vertices, normals and uvs\n\n\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\tvar y = iy * segment_height - height_half;\n\n\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\tvar x = ix * segment_width - width_half;\n\n\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\tuvs.push( ix / gridX );\n\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t}\n\n\t}\n\n\t// indices\n\n\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\tvar a = ix + gridX1 * iy;\n\t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t// faces\n\n\t\t\tindices.push( a, b, d );\n\t\t\tindices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n}\n\nPlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nvar materialId = 0;\n\nfunction Material() {\n\n\tObject.defineProperty( this, 'id', { value: materialId ++ } );\n\n\tthis.uuid = _Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Material';\n\n\tthis.fog = true;\n\tthis.lights = true;\n\n\tthis.blending = NormalBlending;\n\tthis.side = FrontSide;\n\tthis.flatShading = false;\n\tthis.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\n\tthis.opacity = 1;\n\tthis.transparent = false;\n\n\tthis.blendSrc = SrcAlphaFactor;\n\tthis.blendDst = OneMinusSrcAlphaFactor;\n\tthis.blendEquation = AddEquation;\n\tthis.blendSrcAlpha = null;\n\tthis.blendDstAlpha = null;\n\tthis.blendEquationAlpha = null;\n\n\tthis.depthFunc = LessEqualDepth;\n\tthis.depthTest = true;\n\tthis.depthWrite = true;\n\n\tthis.clippingPlanes = null;\n\tthis.clipIntersection = false;\n\tthis.clipShadows = false;\n\n\tthis.shadowSide = null;\n\n\tthis.colorWrite = true;\n\n\tthis.precision = null; // override the renderer's default precision for this material\n\n\tthis.polygonOffset = false;\n\tthis.polygonOffsetFactor = 0;\n\tthis.polygonOffsetUnits = 0;\n\n\tthis.dithering = false;\n\n\tthis.alphaTest = 0;\n\tthis.premultipliedAlpha = false;\n\n\tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\n\tthis.visible = true;\n\n\tthis.userData = {};\n\n\tthis.needsUpdate = true;\n\n}\n\nMaterial.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\tconstructor: Material,\n\n\tisMaterial: true,\n\n\tonBeforeCompile: function () {},\n\n\tsetValues: function ( values ) {\n\n\t\tif ( values === undefined ) return;\n\n\t\tfor ( var key in values ) {\n\n\t\t\tvar newValue = values[ key ];\n\n\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t// for backward compatability if shading is set in the constructor\n\t\t\tif ( key === 'shading' ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\tthis.flatShading = ( newValue === FlatShading ) ? true : false;\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tvar currentValue = this[ key ];\n\n\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t} else if ( key === 'overdraw' ) {\n\n\t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\n\t\t\t\tthis[ key ] = Number( newValue );\n\n\t\t\t} else {\n\n\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar isRoot = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( isRoot ) {\n\n\t\t\tmeta = {\n\t\t\t\ttextures: {},\n\t\t\t\timages: {}\n\t\t\t};\n\n\t\t}\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Material',\n\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Material serialization\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\n\n\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n\t\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\n\t\tif ( this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;\n\n\t\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\t\tif ( this.clearCoat !== undefined ) data.clearCoat = this.clearCoat;\n\t\tif ( this.clearCoatRoughness !== undefined ) data.clearCoatRoughness = this.clearCoatRoughness;\n\n\t\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\n\t\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\t\tif ( this.lightMap && this.lightMap.isTexture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t}\n\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t}\n\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t}\n\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\n\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\n\t\t}\n\n\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t\tif ( this.flatShading === true ) data.flatShading = this.flatShading;\n\t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t\tif ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;\n\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\n\t\tdata.depthFunc = this.depthFunc;\n\t\tdata.depthTest = this.depthTest;\n\t\tdata.depthWrite = this.depthWrite;\n\n\t\t// rotation (SpriteMaterial)\n\t\tif ( this.rotation !== 0 ) data.rotation = this.rotation;\n\n\t\tif ( this.linewidth !== 1 ) data.linewidth = this.linewidth;\n\t\tif ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\n\t\tif ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\n\t\tif ( this.scale !== undefined ) data.scale = this.scale;\n\n\t\tif ( this.dithering === true ) data.dithering = true;\n\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\n\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n\t\tif ( this.morphTargets === true ) data.morphTargets = true;\n\t\tif ( this.skinning === true ) data.skinning = true;\n\n\t\tif ( this.visible === false ) data.visible = false;\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;\n\n\t\t// TODO: Copied from Object3D.toJSON\n\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tvar values = [];\n\n\t\t\tfor ( var key in cache ) {\n\n\t\t\t\tvar data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t\tif ( isRoot ) {\n\n\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\tif ( images.length > 0 ) data.images = images;\n\n\t\t}\n\n\t\treturn data;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.fog = source.fog;\n\t\tthis.lights = source.lights;\n\n\t\tthis.blending = source.blending;\n\t\tthis.side = source.side;\n\t\tthis.flatShading = source.flatShading;\n\t\tthis.vertexColors = source.vertexColors;\n\n\t\tthis.opacity = source.opacity;\n\t\tthis.transparent = source.transparent;\n\n\t\tthis.blendSrc = source.blendSrc;\n\t\tthis.blendDst = source.blendDst;\n\t\tthis.blendEquation = source.blendEquation;\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\tthis.depthFunc = source.depthFunc;\n\t\tthis.depthTest = source.depthTest;\n\t\tthis.depthWrite = source.depthWrite;\n\n\t\tthis.colorWrite = source.colorWrite;\n\n\t\tthis.precision = source.precision;\n\n\t\tthis.polygonOffset = source.polygonOffset;\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\tthis.dithering = source.dithering;\n\n\t\tthis.alphaTest = source.alphaTest;\n\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\tthis.overdraw = source.overdraw;\n\n\t\tthis.visible = source.visible;\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tthis.clipShadows = source.clipShadows;\n\t\tthis.clipIntersection = source.clipIntersection;\n\n\t\tvar srcPlanes = source.clippingPlanes,\n\t\t\tdstPlanes = null;\n\n\t\tif ( srcPlanes !== null ) {\n\n\t\t\tvar n = srcPlanes.length;\n\t\t\tdstPlanes = new Array( n );\n\n\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t}\n\n\t\tthis.clippingPlanes = dstPlanes;\n\n\t\tthis.shadowSide = source.shadowSide;\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>\n * }\n */\n\nfunction MeshBasicMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'MeshBasicMaterial';\n\n\tthis.color = new Color( 0xffffff ); // emissive\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshBasicMaterial.prototype = Object.create( Material.prototype );\nMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\nMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\nMeshBasicMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.specularMap = source.specularMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.combine = source.combine;\n\tthis.reflectivity = source.reflectivity;\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\n\treturn this;\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  defines: { \"label\" : \"value\" },\n *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n *\n *  fragmentShader: <string>,\n *  vertexShader: <string>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  lights: <bool>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nfunction ShaderMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'ShaderMaterial';\n\n\tthis.defines = {};\n\tthis.uniforms = {};\n\n\tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\n\tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\n\n\tthis.linewidth = 1;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\n\tthis.fog = false; // set to use scene fog\n\tthis.lights = false; // set to use scene lights\n\tthis.clipping = false; // set to use user-defined clipping planes\n\n\tthis.skinning = false; // set to use skinning attribute streams\n\tthis.morphTargets = false; // set to use morph targets\n\tthis.morphNormals = false; // set to use morph normals\n\n\tthis.extensions = {\n\t\tderivatives: false, // set to use derivatives\n\t\tfragDepth: false, // set to use fragment depth values\n\t\tdrawBuffers: false, // set to use draw buffers\n\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t};\n\n\t// When rendered geometry doesn't include these attributes but the material does,\n\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\tthis.defaultAttributeValues = {\n\t\t'color': [ 1, 1, 1 ],\n\t\t'uv': [ 0, 0 ],\n\t\t'uv2': [ 0, 0 ]\n\t};\n\n\tthis.index0AttributeName = undefined;\n\tthis.uniformsNeedUpdate = false;\n\n\tif ( parameters !== undefined ) {\n\n\t\tif ( parameters.attributes !== undefined ) {\n\n\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n}\n\nShaderMaterial.prototype = Object.create( Material.prototype );\nShaderMaterial.prototype.constructor = ShaderMaterial;\n\nShaderMaterial.prototype.isShaderMaterial = true;\n\nShaderMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.fragmentShader = source.fragmentShader;\n\tthis.vertexShader = source.vertexShader;\n\n\tthis.uniforms = UniformsUtils.clone( source.uniforms );\n\n\tthis.defines = source.defines;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\tthis.lights = source.lights;\n\tthis.clipping = source.clipping;\n\n\tthis.skinning = source.skinning;\n\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\tthis.extensions = source.extensions;\n\n\treturn this;\n\n};\n\nShaderMaterial.prototype.toJSON = function ( meta ) {\n\n\tvar data = Material.prototype.toJSON.call( this, meta );\n\n\tdata.uniforms = this.uniforms;\n\tdata.vertexShader = this.vertexShader;\n\tdata.fragmentShader = this.fragmentShader;\n\n\treturn data;\n\n};\n\n/**\n * @author bhouston / http://clara.io\n */\n\nfunction Ray( origin, direction ) {\n\n\tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\n\tthis.direction = ( direction !== undefined ) ? direction : new Vector3();\n\n}\n\nObject.assign( Ray.prototype, {\n\n\tset: function ( origin, direction ) {\n\n\t\tthis.origin.copy( origin );\n\t\tthis.direction.copy( direction );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( ray ) {\n\n\t\tthis.origin.copy( ray.origin );\n\t\tthis.direction.copy( ray.direction );\n\n\t\treturn this;\n\n\t},\n\n\tat: function ( t, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .at() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t},\n\n\tlookAt: function ( v ) {\n\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\treturn this;\n\n\t},\n\n\trecast: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function recast( t ) {\n\n\t\t\tthis.origin.copy( this.at( t, v1 ) );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclosestPointToPoint: function ( point, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\ttarget.subVectors( point, this.origin );\n\n\t\tvar directionDistance = target.dot( this.direction );\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn target.copy( this.origin );\n\n\t\t}\n\n\t\treturn target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t},\n\n\tdistanceSqToPoint: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function distanceSqToPoint( point ) {\n\n\t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t\t// point behind the ray\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t\t}\n\n\t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t\treturn v1.distanceToSquared( point );\n\n\t\t};\n\n\t}(),\n\n\tdistanceSqToSegment: function () {\n\n\t\tvar segCenter = new Vector3();\n\t\tvar segDir = new Vector3();\n\t\tvar diff = new Vector3();\n\n\t\treturn function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t// defined by v0 and v1\n\t\t\t// It can also set two optional targets :\n\t\t\t// - The closest point on the ray\n\t\t\t// - The closest point on the segment\n\n\t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\n\t\t\tdiff.copy( this.origin ).sub( segCenter );\n\n\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\t\tvar a01 = - this.direction.dot( segDir );\n\t\t\tvar b0 = diff.dot( this.direction );\n\t\t\tvar b1 = - diff.dot( segDir );\n\t\t\tvar c = diff.lengthSq();\n\t\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t\t\tvar s0, s1, sqrDist, extDet;\n\n\t\t\tif ( det > 0 ) {\n\n\t\t\t\t// The ray and segment are not parallel.\n\n\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\textDet = segExtent * det;\n\n\t\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 5\n\n\t\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t\t// region 4\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 3\n\n\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 2\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Ray and segment are parallel.\n\n\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnRay ) {\n\n\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnSegment ) {\n\n\t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\n\n\t\t\t}\n\n\t\t\treturn sqrDist;\n\n\t\t};\n\n\t}(),\n\n\tintersectSphere: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function intersectSphere( sphere, target ) {\n\n\t\t\tv1.subVectors( sphere.center, this.origin );\n\t\t\tvar tca = v1.dot( this.direction );\n\t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\n\t\t\tif ( d2 > radius2 ) return null;\n\n\t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n\t\t\t// t0 = first intersect point - entrance on front of sphere\n\t\t\tvar t0 = tca - thc;\n\n\t\t\t// t1 = second intersect point - exit point on back of sphere\n\t\t\tvar t1 = tca + thc;\n\n\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\n\t\t\t// test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\t\t\tif ( t0 < 0 ) return this.at( t1, target );\n\n\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\t\treturn this.at( t0, target );\n\n\t\t};\n\n\t}(),\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\n\n\t},\n\n\tdistanceToPlane: function ( plane ) {\n\n\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t// Return if the ray never intersects the plane\n\n\t\treturn t >= 0 ? t : null;\n\n\t},\n\n\tintersectPlane: function ( plane, target ) {\n\n\t\tvar t = this.distanceToPlane( plane );\n\n\t\tif ( t === null ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn this.at( t, target );\n\n\t},\n\n\tintersectsPlane: function ( plane ) {\n\n\t\t// check if the ray lies on the plane first\n\n\t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n\t\tif ( distToPoint === 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\treturn false;\n\n\t},\n\n\tintersectBox: function ( box, target ) {\n\n\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\tvar invdirx = 1 / this.direction.x,\n\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\tvar origin = this.origin;\n\n\t\tif ( invdirx >= 0 ) {\n\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t} else {\n\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t}\n\n\t\tif ( invdiry >= 0 ) {\n\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t} else {\n\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t}\n\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\n\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\n\t\tif ( invdirz >= 0 ) {\n\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t} else {\n\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t}\n\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t//return point closest to the ray (positive side)\n\n\t\tif ( tmax < 0 ) return null;\n\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\n\n\t},\n\n\tintersectsBox: ( function () {\n\n\t\tvar v = new Vector3();\n\n\t\treturn function intersectsBox( box ) {\n\n\t\t\treturn this.intersectBox( box, v ) !== null;\n\n\t\t};\n\n\t} )(),\n\n\tintersectTriangle: function () {\n\n\t\t// Compute the offset origin, edges, and normal.\n\t\tvar diff = new Vector3();\n\t\tvar edge1 = new Vector3();\n\t\tvar edge2 = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\treturn function intersectTriangle( a, b, c, backfaceCulling, target ) {\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t\tedge1.subVectors( b, a );\n\t\t\tedge2.subVectors( c, a );\n\t\t\tnormal.crossVectors( edge1, edge2 );\n\n\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\t\tvar DdN = this.direction.dot( normal );\n\t\t\tvar sign;\n\n\t\t\tif ( DdN > 0 ) {\n\n\t\t\t\tif ( backfaceCulling ) return null;\n\t\t\t\tsign = 1;\n\n\t\t\t} else if ( DdN < 0 ) {\n\n\t\t\t\tsign = - 1;\n\t\t\t\tDdN = - DdN;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tdiff.subVectors( this.origin, a );\n\t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\n\n\t\t\t// b1 < 0, no intersection\n\t\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\n\n\t\t\t// b2 < 0, no intersection\n\t\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// b1+b2 > 1, no intersection\n\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Line intersects triangle, check if ray does.\n\t\t\tvar QdN = - sign * diff.dot( normal );\n\n\t\t\t// t < 0, no intersection\n\t\t\tif ( QdN < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Ray intersects triangle.\n\t\t\treturn this.at( QdN / DdN, target );\n\n\t\t};\n\n\t}(),\n\n\tapplyMatrix4: function ( matrix4 ) {\n\n\t\tthis.origin.applyMatrix4( matrix4 );\n\t\tthis.direction.transformDirection( matrix4 );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( ray ) {\n\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t}\n\n} );\n\n/**\n * @author bhouston / http://clara.io\n */\n\nfunction Line3( start, end ) {\n\n\tthis.start = ( start !== undefined ) ? start : new Vector3();\n\tthis.end = ( end !== undefined ) ? end : new Vector3();\n\n}\n\nObject.assign( Line3.prototype, {\n\n\tset: function ( start, end ) {\n\n\t\tthis.start.copy( start );\n\t\tthis.end.copy( end );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( line ) {\n\n\t\tthis.start.copy( line.start );\n\t\tthis.end.copy( line.end );\n\n\t\treturn this;\n\n\t},\n\n\tgetCenter: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Line3: .getCenter() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t},\n\n\tdelta: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Line3: .delta() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.subVectors( this.end, this.start );\n\n\t},\n\n\tdistanceSq: function () {\n\n\t\treturn this.start.distanceToSquared( this.end );\n\n\t},\n\n\tdistance: function () {\n\n\t\treturn this.start.distanceTo( this.end );\n\n\t},\n\n\tat: function ( t, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Line3: .at() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t},\n\n\tclosestPointToPointParameter: function () {\n\n\t\tvar startP = new Vector3();\n\t\tvar startEnd = new Vector3();\n\n\t\treturn function closestPointToPointParameter( point, clampToLine ) {\n\n\t\t\tstartP.subVectors( point, this.start );\n\t\t\tstartEnd.subVectors( this.end, this.start );\n\n\t\t\tvar startEnd2 = startEnd.dot( startEnd );\n\t\t\tvar startEnd_startP = startEnd.dot( startP );\n\n\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\tif ( clampToLine ) {\n\n\t\t\t\tt = _Math.clamp( t, 0, 1 );\n\n\t\t\t}\n\n\t\t\treturn t;\n\n\t\t};\n\n\t}(),\n\n\tclosestPointToPoint: function ( point, clampToLine, target ) {\n\n\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t},\n\n\tapplyMatrix4: function ( matrix ) {\n\n\t\tthis.start.applyMatrix4( matrix );\n\t\tthis.end.applyMatrix4( matrix );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( line ) {\n\n\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t}\n\n} );\n\n/**\n * @author bhouston / http://clara.io\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Triangle( a, b, c ) {\n\n\tthis.a = ( a !== undefined ) ? a : new Vector3();\n\tthis.b = ( b !== undefined ) ? b : new Vector3();\n\tthis.c = ( c !== undefined ) ? c : new Vector3();\n\n}\n\nObject.assign( Triangle, {\n\n\tgetNormal: function () {\n\n\t\tvar v0 = new Vector3();\n\n\t\treturn function getNormal( a, b, c, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getNormal() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.subVectors( c, b );\n\t\t\tv0.subVectors( a, b );\n\t\t\ttarget.cross( v0 );\n\n\t\t\tvar targetLengthSq = target.lengthSq();\n\t\t\tif ( targetLengthSq > 0 ) {\n\n\t\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n\n\t\t\t}\n\n\t\t\treturn target.set( 0, 0, 0 );\n\n\t\t};\n\n\t}(),\n\n\t// static/instance method to calculate barycentric coordinates\n\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\tgetBarycoord: function () {\n\n\t\tvar v0 = new Vector3();\n\t\tvar v1 = new Vector3();\n\t\tvar v2 = new Vector3();\n\n\t\treturn function getBarycoord( point, a, b, c, target ) {\n\n\t\t\tv0.subVectors( c, a );\n\t\t\tv1.subVectors( b, a );\n\t\t\tv2.subVectors( point, a );\n\n\t\t\tvar dot00 = v0.dot( v0 );\n\t\t\tvar dot01 = v0.dot( v1 );\n\t\t\tvar dot02 = v0.dot( v2 );\n\t\t\tvar dot11 = v1.dot( v1 );\n\t\t\tvar dot12 = v1.dot( v2 );\n\n\t\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getBarycoord() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\t// collinear or singular triangle\n\t\t\tif ( denom === 0 ) {\n\n\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\treturn target.set( - 2, - 1, - 1 );\n\n\t\t\t}\n\n\t\t\tvar invDenom = 1 / denom;\n\t\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t\t// barycentric coordinates must always sum to 1\n\t\t\treturn target.set( 1 - u - v, v, u );\n\n\t\t};\n\n\t}(),\n\n\tcontainsPoint: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function containsPoint( point, a, b, c ) {\n\n\t\t\tTriangle.getBarycoord( point, a, b, c, v1 );\n\n\t\t\treturn ( v1.x >= 0 ) && ( v1.y >= 0 ) && ( ( v1.x + v1.y ) <= 1 );\n\n\t\t};\n\n\t}()\n\n} );\n\nObject.assign( Triangle.prototype, {\n\n\tset: function ( a, b, c ) {\n\n\t\tthis.a.copy( a );\n\t\tthis.b.copy( b );\n\t\tthis.c.copy( c );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n\t\tthis.a.copy( points[ i0 ] );\n\t\tthis.b.copy( points[ i1 ] );\n\t\tthis.c.copy( points[ i2 ] );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( triangle ) {\n\n\t\tthis.a.copy( triangle.a );\n\t\tthis.b.copy( triangle.b );\n\t\tthis.c.copy( triangle.c );\n\n\t\treturn this;\n\n\t},\n\n\tgetArea: function () {\n\n\t\tvar v0 = new Vector3();\n\t\tvar v1 = new Vector3();\n\n\t\treturn function getArea() {\n\n\t\t\tv0.subVectors( this.c, this.b );\n\t\t\tv1.subVectors( this.a, this.b );\n\n\t\t\treturn v0.cross( v1 ).length() * 0.5;\n\n\t\t};\n\n\t}(),\n\n\tgetMidpoint: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .getMidpoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t},\n\n\tgetNormal: function ( target ) {\n\n\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\n\n\t},\n\n\tgetPlane: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .getPlane() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t},\n\n\tgetBarycoord: function ( point, target ) {\n\n\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\treturn box.intersectsTriangle( this );\n\n\t},\n\n\tclosestPointToPoint: function () {\n\n\t\tvar plane = new Plane();\n\t\tvar edgeList = [ new Line3(), new Line3(), new Line3() ];\n\t\tvar projectedPoint = new Vector3();\n\t\tvar closestPoint = new Vector3();\n\n\t\treturn function closestPointToPoint( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tvar minDistance = Infinity;\n\n\t\t\t// project the point onto the plane of the triangle\n\n\t\t\tplane.setFromCoplanarPoints( this.a, this.b, this.c );\n\t\t\tplane.projectPoint( point, projectedPoint );\n\n\t\t\t// check if the projection lies within the triangle\n\n\t\t\tif ( this.containsPoint( projectedPoint ) === true ) {\n\n\t\t\t\t// if so, this is the closest point\n\n\t\t\t\ttarget.copy( projectedPoint );\n\n\t\t\t} else {\n\n\t\t\t\t// if not, the point falls outside the triangle. the target is the closest point to the triangle's edges or vertices\n\n\t\t\t\tedgeList[ 0 ].set( this.a, this.b );\n\t\t\t\tedgeList[ 1 ].set( this.b, this.c );\n\t\t\t\tedgeList[ 2 ].set( this.c, this.a );\n\n\t\t\t\tfor ( var i = 0; i < edgeList.length; i ++ ) {\n\n\t\t\t\t\tedgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );\n\n\t\t\t\t\tvar distance = projectedPoint.distanceToSquared( closestPoint );\n\n\t\t\t\t\tif ( distance < minDistance ) {\n\n\t\t\t\t\t\tminDistance = distance;\n\n\t\t\t\t\t\ttarget.copy( closestPoint );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn target;\n\n\t\t};\n\n\t}(),\n\n\tequals: function ( triangle ) {\n\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author jonobr1 / http://jonobr1.com/\n */\n\nfunction Mesh( geometry, material ) {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Mesh';\n\n\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\tthis.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\n\tthis.drawMode = TrianglesDrawMode;\n\n\tthis.updateMorphTargets();\n\n}\n\nMesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Mesh,\n\n\tisMesh: true,\n\n\tsetDrawMode: function ( value ) {\n\n\t\tthis.drawMode = value;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source );\n\n\t\tthis.drawMode = source.drawMode;\n\n\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t}\n\n\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tupdateMorphTargets: function () {\n\n\t\tvar geometry = this.geometry;\n\t\tvar m, ml, name;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\tfor ( m = 0, ml = morphTargets.length; m < ml; m ++ ) {\n\n\t\t\t\t\tname = morphTargets[ m ].name || String( m );\n\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\traycast: ( function () {\n\n\t\tvar inverseMatrix = new Matrix4();\n\t\tvar ray = new Ray();\n\t\tvar sphere = new Sphere();\n\n\t\tvar vA = new Vector3();\n\t\tvar vB = new Vector3();\n\t\tvar vC = new Vector3();\n\n\t\tvar tempA = new Vector3();\n\t\tvar tempB = new Vector3();\n\t\tvar tempC = new Vector3();\n\n\t\tvar uvA = new Vector2();\n\t\tvar uvB = new Vector2();\n\t\tvar uvC = new Vector2();\n\n\t\tvar barycoord = new Vector3();\n\n\t\tvar intersectionPoint = new Vector3();\n\t\tvar intersectionPointWorld = new Vector3();\n\n\t\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\n\n\t\t\tTriangle.getBarycoord( point, p1, p2, p3, barycoord );\n\n\t\t\tuv1.multiplyScalar( barycoord.x );\n\t\t\tuv2.multiplyScalar( barycoord.y );\n\t\t\tuv3.multiplyScalar( barycoord.z );\n\n\t\t\tuv1.add( uv2 ).add( uv3 );\n\n\t\t\treturn uv1.clone();\n\n\t\t}\n\n\t\tfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\t\t\tvar intersect;\n\n\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t\t\t} else {\n\n\t\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n\t\t\t}\n\n\t\t\tif ( intersect === null ) return null;\n\n\t\t\tintersectionPointWorld.copy( point );\n\t\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\n\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\t\t\treturn {\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: intersectionPointWorld.clone(),\n\t\t\t\tobject: object\n\t\t\t};\n\n\t\t}\n\n\t\tfunction checkBufferGeometryIntersection( object, raycaster, ray, position, uv, a, b, c ) {\n\n\t\t\tvA.fromBufferAttribute( position, a );\n\t\t\tvB.fromBufferAttribute( position, b );\n\t\t\tvC.fromBufferAttribute( position, c );\n\n\t\t\tvar intersection = checkIntersection( object, object.material, raycaster, ray, vA, vB, vC, intersectionPoint );\n\n\t\t\tif ( intersection ) {\n\n\t\t\t\tif ( uv ) {\n\n\t\t\t\t\tuvA.fromBufferAttribute( uv, a );\n\t\t\t\t\tuvB.fromBufferAttribute( uv, b );\n\t\t\t\t\tuvC.fromBufferAttribute( uv, c );\n\n\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, vA, vB, vC, uvA, uvB, uvC );\n\n\t\t\t\t}\n\n\t\t\t\tvar face = new Face3( a, b, c );\n\t\t\t\tTriangle.getNormal( vA, vB, vC, face.normal );\n\n\t\t\t\tintersection.face = face;\n\t\t\t\tintersection.faceIndex = a;\n\n\t\t\t}\n\n\t\t\treturn intersection;\n\n\t\t}\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar material = this.material;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\tif ( material === undefined ) return;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t//\n\n\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\t// Check boundingBox before continuing\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t\t}\n\n\t\t\tvar intersection;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar a, b, c;\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\tvar uv = geometry.attributes.uv;\n\t\t\t\tvar i, l;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t// indexed buffer geometry\n\n\t\t\t\t\tfor ( i = 0, l = index.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\ta = index.getX( i );\n\t\t\t\t\t\tb = index.getX( i + 1 );\n\t\t\t\t\t\tc = index.getX( i + 2 );\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, position, uv, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\t\t// non-indexed buffer geometry\n\n\t\t\t\t\tfor ( i = 0, l = position.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\ta = i;\n\t\t\t\t\t\tb = i + 1;\n\t\t\t\t\t\tc = i + 2;\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, position, uv, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.index = a; // triangle number in positions buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar fvA, fvB, fvC;\n\t\t\t\tvar isMultiMaterial = Array.isArray( material );\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar faces = geometry.faces;\n\t\t\t\tvar uvs;\n\n\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\n\n\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tvar face = faces[ f ];\n\t\t\t\t\tvar faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;\n\n\t\t\t\t\tif ( faceMaterial === undefined ) continue;\n\n\t\t\t\t\tfvA = vertices[ face.a ];\n\t\t\t\t\tfvB = vertices[ face.b ];\n\t\t\t\t\tfvC = vertices[ face.c ];\n\n\t\t\t\t\tif ( faceMaterial.morphTargets === true ) {\n\n\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\n\n\t\t\t\t\t\tvA.set( 0, 0, 0 );\n\t\t\t\t\t\tvB.set( 0, 0, 0 );\n\t\t\t\t\t\tvC.set( 0, 0, 0 );\n\n\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\n\n\t\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\n\t\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\n\t\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvA.add( fvA );\n\t\t\t\t\t\tvB.add( fvB );\n\t\t\t\t\t\tvC.add( fvC );\n\n\t\t\t\t\t\tfvA = vA;\n\t\t\t\t\t\tfvB = vB;\n\t\t\t\t\t\tfvC = vC;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tintersection = checkIntersection( this, faceMaterial, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tif ( uvs && uvs[ f ] ) {\n\n\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\n\n\t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tintersection.face = face;\n\t\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}() ),\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLBackground( renderer, state, geometries, premultipliedAlpha ) {\n\n\tvar clearColor = new Color( 0x000000 );\n\tvar clearAlpha = 0;\n\n\tvar planeCamera, planeMesh;\n\tvar boxMesh;\n\n\tfunction render( renderList, scene, camera, forceClear ) {\n\n\t\tvar background = scene.background;\n\n\t\tif ( background === null ) {\n\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t} else if ( background && background.isColor ) {\n\n\t\t\tsetClear( background, 1 );\n\t\t\tforceClear = true;\n\n\t\t}\n\n\t\tif ( renderer.autoClear || forceClear ) {\n\n\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t}\n\n\t\tif ( background && background.isCubeTexture ) {\n\n\t\t\tif ( boxMesh === undefined ) {\n\n\t\t\t\tboxMesh = new Mesh(\n\t\t\t\t\tnew BoxBufferGeometry( 1, 1, 1 ),\n\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\tuniforms: ShaderLib.cube.uniforms,\n\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\tdepthTest: true,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t} )\n\t\t\t\t);\n\n\t\t\t\tboxMesh.geometry.removeAttribute( 'normal' );\n\t\t\t\tboxMesh.geometry.removeAttribute( 'uv' );\n\n\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t};\n\n\t\t\t\tgeometries.update( boxMesh.geometry );\n\n\t\t\t}\n\n\t\t\tboxMesh.material.uniforms.tCube.value = background;\n\n\t\t\trenderList.push( boxMesh, boxMesh.geometry, boxMesh.material, 0, null );\n\n\t\t} else if ( background && background.isTexture ) {\n\n\t\t\tif ( planeCamera === undefined ) {\n\n\t\t\t\tplaneCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n\t\t\t\tplaneMesh = new Mesh(\n\t\t\t\t\tnew PlaneBufferGeometry( 2, 2 ),\n\t\t\t\t\tnew MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )\n\t\t\t\t);\n\n\t\t\t\tgeometries.update( planeMesh.geometry );\n\n\t\t\t}\n\n\t\t\tplaneMesh.material.map = background;\n\n\t\t\t// TODO Push this to renderList\n\n\t\t\trenderer.renderBufferDirect( planeCamera, null, planeMesh.geometry, planeMesh.material, planeMesh, null );\n\n\t\t}\n\n\t}\n\n\tfunction setClear( color, alpha ) {\n\n\t\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\n\n\t}\n\n\treturn {\n\n\t\tgetClearColor: function () {\n\n\t\t\treturn clearColor;\n\n\t\t},\n\t\tsetClearColor: function ( color, alpha ) {\n\n\t\t\tclearColor.set( color );\n\t\t\tclearAlpha = alpha !== undefined ? alpha : 1;\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t},\n\t\tgetClearAlpha: function () {\n\n\t\t\treturn clearAlpha;\n\n\t\t},\n\t\tsetClearAlpha: function ( alpha ) {\n\n\t\t\tclearAlpha = alpha;\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t},\n\t\trender: render\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLBufferRenderer( gl, extensions, info ) {\n\n\tvar mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\tgl.drawArrays( mode, start, count );\n\n\t\tinfo.update( count, mode );\n\n\t}\n\n\tfunction renderInstances( geometry, start, count ) {\n\n\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\tif ( extension === null ) {\n\n\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar position = geometry.attributes.position;\n\n\t\tif ( position.isInterleavedBufferAttribute ) {\n\n\t\t\tcount = position.data.count;\n\n\t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\n\t\t} else {\n\n\t\t\textension.drawArraysInstancedANGLE( mode, start, count, geometry.maxInstancedCount );\n\n\t\t}\n\n\t\tinfo.update( count, mode, geometry.maxInstancedCount );\n\n\t}\n\n\t//\n\n\tthis.setMode = setMode;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLCapabilities( gl, extensions, parameters ) {\n\n\tvar maxAnisotropy;\n\n\tfunction getMaxAnisotropy() {\n\n\t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t} else {\n\n\t\t\tmaxAnisotropy = 0;\n\n\t\t}\n\n\t\treturn maxAnisotropy;\n\n\t}\n\n\tfunction getMaxPrecision( precision ) {\n\n\t\tif ( precision === 'highp' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\n\t\t\t\treturn 'highp';\n\n\t\t\t}\n\n\t\t\tprecision = 'mediump';\n\n\t\t}\n\n\t\tif ( precision === 'mediump' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\n\t\t\t\treturn 'mediump';\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn 'lowp';\n\n\t}\n\n\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\tvar maxPrecision = getMaxPrecision( precision );\n\n\tif ( maxPrecision !== precision ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t\tprecision = maxPrecision;\n\n\t}\n\n\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n\tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\tvar maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n\tvar maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n\tvar maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n\tvar maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\tvar maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n\tvar maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n\tvar maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\n\tvar vertexTextures = maxVertexTextures > 0;\n\tvar floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\n\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n\treturn {\n\n\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\tgetMaxPrecision: getMaxPrecision,\n\n\t\tprecision: precision,\n\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\tmaxTextures: maxTextures,\n\t\tmaxVertexTextures: maxVertexTextures,\n\t\tmaxTextureSize: maxTextureSize,\n\t\tmaxCubemapSize: maxCubemapSize,\n\n\t\tmaxAttributes: maxAttributes,\n\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\tmaxVaryings: maxVaryings,\n\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n\t\tvertexTextures: vertexTextures,\n\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\tfloatVertexTextures: floatVertexTextures\n\n\t};\n\n}\n\n/**\n * @author tschw\n */\n\nfunction WebGLClipping() {\n\n\tvar scope = this,\n\n\t\tglobalState = null,\n\t\tnumGlobalPlanes = 0,\n\t\tlocalClippingEnabled = false,\n\t\trenderingShadows = false,\n\n\t\tplane = new Plane(),\n\t\tviewNormalMatrix = new Matrix3(),\n\n\t\tuniform = { value: null, needsUpdate: false };\n\n\tthis.uniform = uniform;\n\tthis.numPlanes = 0;\n\tthis.numIntersection = 0;\n\n\tthis.init = function ( planes, enableLocalClipping, camera ) {\n\n\t\tvar enabled =\n\t\t\tplanes.length !== 0 ||\n\t\t\tenableLocalClipping ||\n\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t// run another frame in order to reset the state:\n\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\tlocalClippingEnabled;\n\n\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\tnumGlobalPlanes = planes.length;\n\n\t\treturn enabled;\n\n\t};\n\n\tthis.beginShadows = function () {\n\n\t\trenderingShadows = true;\n\t\tprojectPlanes( null );\n\n\t};\n\n\tthis.endShadows = function () {\n\n\t\trenderingShadows = false;\n\t\tresetGlobalState();\n\n\t};\n\n\tthis.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {\n\n\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\n\n\t\t\t// there's no local clipping\n\n\t\t\tif ( renderingShadows ) {\n\n\t\t\t\t// there's no global clipping\n\n\t\t\t\tprojectPlanes( null );\n\n\t\t\t} else {\n\n\t\t\t\tresetGlobalState();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\tlGlobal = nGlobal * 4,\n\n\t\t\t\tdstArray = cache.clippingState || null;\n\n\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\n\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t}\n\n\t\t\tcache.clippingState = dstArray;\n\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\tthis.numPlanes += nGlobal;\n\n\t\t}\n\n\n\t};\n\n\tfunction resetGlobalState() {\n\n\t\tif ( uniform.value !== globalState ) {\n\n\t\t\tuniform.value = globalState;\n\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t}\n\n\t\tscope.numPlanes = numGlobalPlanes;\n\t\tscope.numIntersection = 0;\n\n\t}\n\n\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\tvar nPlanes = planes !== null ? planes.length : 0,\n\t\t\tdstArray = null;\n\n\t\tif ( nPlanes !== 0 ) {\n\n\t\t\tdstArray = uniform.value;\n\n\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tuniform.value = dstArray;\n\t\t\tuniform.needsUpdate = true;\n\n\t\t}\n\n\t\tscope.numPlanes = nPlanes;\n\n\t\treturn dstArray;\n\n\t}\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLExtensions( gl ) {\n\n\tvar extensions = {};\n\n\treturn {\n\n\t\tget: function ( name ) {\n\n\t\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\t\treturn extensions[ name ];\n\n\t\t\t}\n\n\t\t\tvar extension;\n\n\t\t\tswitch ( name ) {\n\n\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_etc1':\n\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\textension = gl.getExtension( name );\n\n\t\t\t}\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t\t}\n\n\t\t\textensions[ name ] = extension;\n\n\t\t\treturn extension;\n\n\t\t}\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLGeometries( gl, attributes, info ) {\n\n\tvar geometries = {};\n\tvar wireframeAttributes = {};\n\n\tfunction onGeometryDispose( event ) {\n\n\t\tvar geometry = event.target;\n\t\tvar buffergeometry = geometries[ geometry.id ];\n\n\t\tif ( buffergeometry.index !== null ) {\n\n\t\t\tattributes.remove( buffergeometry.index );\n\n\t\t}\n\n\t\tfor ( var name in buffergeometry.attributes ) {\n\n\t\t\tattributes.remove( buffergeometry.attributes[ name ] );\n\n\t\t}\n\n\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\tdelete geometries[ geometry.id ];\n\n\t\t// TODO Remove duplicate code\n\n\t\tvar attribute = wireframeAttributes[ geometry.id ];\n\n\t\tif ( attribute ) {\n\n\t\t\tattributes.remove( attribute );\n\t\t\tdelete wireframeAttributes[ geometry.id ];\n\n\t\t}\n\n\t\tattribute = wireframeAttributes[ buffergeometry.id ];\n\n\t\tif ( attribute ) {\n\n\t\t\tattributes.remove( attribute );\n\t\t\tdelete wireframeAttributes[ buffergeometry.id ];\n\n\t\t}\n\n\t\t//\n\n\t\tinfo.memory.geometries --;\n\n\t}\n\n\tfunction get( object, geometry ) {\n\n\t\tvar buffergeometry = geometries[ geometry.id ];\n\n\t\tif ( buffergeometry ) return buffergeometry;\n\n\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tbuffergeometry = geometry;\n\n\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\n\n\t\t\t}\n\n\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n\t\t}\n\n\t\tgeometries[ geometry.id ] = buffergeometry;\n\n\t\tinfo.memory.geometries ++;\n\n\t\treturn buffergeometry;\n\n\t}\n\n\tfunction update( geometry ) {\n\n\t\tvar index = geometry.index;\n\t\tvar geometryAttributes = geometry.attributes;\n\n\t\tif ( index !== null ) {\n\n\t\t\tattributes.update( index, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\t}\n\n\t\tfor ( var name in geometryAttributes ) {\n\n\t\t\tattributes.update( geometryAttributes[ name ], gl.ARRAY_BUFFER );\n\n\t\t}\n\n\t\t// morph targets\n\n\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\tfor ( var name in morphAttributes ) {\n\n\t\t\tvar array = morphAttributes[ name ];\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tattributes.update( array[ i ], gl.ARRAY_BUFFER );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction getWireframeAttribute( geometry ) {\n\n\t\tvar attribute = wireframeAttributes[ geometry.id ];\n\n\t\tif ( attribute ) return attribute;\n\n\t\tvar indices = [];\n\n\t\tvar geometryIndex = geometry.index;\n\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t// console.time( 'wireframe' );\n\n\t\tif ( geometryIndex !== null ) {\n\n\t\t\tvar array = geometryIndex.array;\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tvar a = array[ i + 0 ];\n\t\t\t\tvar b = array[ i + 1 ];\n\t\t\t\tvar c = array[ i + 2 ];\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tvar array = geometryAttributes.position.array;\n\n\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\tvar a = i + 0;\n\t\t\t\tvar b = i + 1;\n\t\t\t\tvar c = i + 2;\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// console.timeEnd( 'wireframe' );\n\n\t\tattribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\n\t\tattributes.update( attribute, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\twireframeAttributes[ geometry.id ] = attribute;\n\n\t\treturn attribute;\n\n\t}\n\n\treturn {\n\n\t\tget: get,\n\t\tupdate: update,\n\n\t\tgetWireframeAttribute: getWireframeAttribute\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLIndexedBufferRenderer( gl, extensions, info ) {\n\n\tvar mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tvar type, bytesPerElement;\n\n\tfunction setIndex( value ) {\n\n\t\ttype = value.type;\n\t\tbytesPerElement = value.bytesPerElement;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\n\n\t\tinfo.update( count, mode );\n\n\t}\n\n\tfunction renderInstances( geometry, start, count ) {\n\n\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\tif ( extension === null ) {\n\n\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\textension.drawElementsInstancedANGLE( mode, count, type, start * bytesPerElement, geometry.maxInstancedCount );\n\n\t\tinfo.update( count, mode, geometry.maxInstancedCount );\n\n\t}\n\n\t//\n\n\tthis.setMode = setMode;\n\tthis.setIndex = setIndex;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n}\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nfunction WebGLInfo( gl ) {\n\n\tvar memory = {\n\t\tgeometries: 0,\n\t\ttextures: 0\n\t};\n\n\tvar render = {\n\t\tframe: 0,\n\t\tcalls: 0,\n\t\ttriangles: 0,\n\t\tpoints: 0,\n\t\tlines: 0\n\t};\n\n\tfunction update( count, mode, instanceCount ) {\n\n\t\tinstanceCount = instanceCount || 1;\n\n\t\trender.calls ++;\n\n\t\tswitch ( mode ) {\n\n\t\t\tcase gl.TRIANGLES:\n\t\t\t\trender.triangles += instanceCount * ( count / 3 );\n\t\t\t\tbreak;\n\n\t\t\tcase gl.TRIANGLE_STRIP:\n\t\t\tcase gl.TRIANGLE_FAN:\n\t\t\t\trender.triangles += instanceCount * ( count - 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase gl.LINES:\n\t\t\t\trender.lines += instanceCount * ( count / 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase gl.LINE_STRIP:\n\t\t\t\trender.lines += instanceCount * ( count - 1 );\n\t\t\t\tbreak;\n\n\t\t\tcase gl.LINE_LOOP:\n\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\tbreak;\n\n\t\t\tcase gl.POINTS:\n\t\t\t\trender.points += instanceCount * count;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction reset() {\n\n\t\trender.frame ++;\n\t\trender.calls = 0;\n\t\trender.triangles = 0;\n\t\trender.points = 0;\n\t\trender.lines = 0;\n\n\t}\n\n\treturn {\n\t\tmemory: memory,\n\t\trender: render,\n\t\tprograms: null,\n\t\tautoReset: true,\n\t\treset: reset,\n\t\tupdate: update\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction absNumericalSort( a, b ) {\n\n\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\n\n}\n\nfunction WebGLMorphtargets( gl ) {\n\n\tvar influencesList = {};\n\tvar morphInfluences = new Float32Array( 8 );\n\n\tfunction update( object, geometry, material, program ) {\n\n\t\tvar objectInfluences = object.morphTargetInfluences;\n\n\t\tvar length = objectInfluences.length;\n\n\t\tvar influences = influencesList[ geometry.id ];\n\n\t\tif ( influences === undefined ) {\n\n\t\t\t// initialise list\n\n\t\t\tinfluences = [];\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tinfluences[ i ] = [ i, 0 ];\n\n\t\t\t}\n\n\t\t\tinfluencesList[ geometry.id ] = influences;\n\n\t\t}\n\n\t\tvar morphTargets = material.morphTargets && geometry.morphAttributes.position;\n\t\tvar morphNormals = material.morphNormals && geometry.morphAttributes.normal;\n\n\t\t// Remove current morphAttributes\n\n\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\tvar influence = influences[ i ];\n\n\t\t\tif ( influence[ 1 ] !== 0 ) {\n\n\t\t\t\tif ( morphTargets ) geometry.removeAttribute( 'morphTarget' + i );\n\t\t\t\tif ( morphNormals ) geometry.removeAttribute( 'morphNormal' + i );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Collect influences\n\n\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\tvar influence = influences[ i ];\n\n\t\t\tinfluence[ 0 ] = i;\n\t\t\tinfluence[ 1 ] = objectInfluences[ i ];\n\n\t\t}\n\n\t\tinfluences.sort( absNumericalSort );\n\n\t\t// Add morphAttributes\n\n\t\tfor ( var i = 0; i < 8; i ++ ) {\n\n\t\t\tvar influence = influences[ i ];\n\n\t\t\tif ( influence ) {\n\n\t\t\t\tvar index = influence[ 0 ];\n\t\t\t\tvar value = influence[ 1 ];\n\n\t\t\t\tif ( value ) {\n\n\t\t\t\t\tif ( morphTargets ) geometry.addAttribute( 'morphTarget' + i, morphTargets[ index ] );\n\t\t\t\t\tif ( morphNormals ) geometry.addAttribute( 'morphNormal' + i, morphNormals[ index ] );\n\n\t\t\t\t\tmorphInfluences[ i ] = value;\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tmorphInfluences[ i ] = 0;\n\n\t\t}\n\n\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\n\n\t}\n\n\treturn {\n\n\t\tupdate: update\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLObjects( geometries, info ) {\n\n\tvar updateList = {};\n\n\tfunction update( object ) {\n\n\t\tvar frame = info.render.frame;\n\n\t\tvar geometry = object.geometry;\n\t\tvar buffergeometry = geometries.get( object, geometry );\n\n\t\t// Update once per frame\n\n\t\tif ( updateList[ buffergeometry.id ] !== frame ) {\n\n\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\tbuffergeometry.updateFromObject( object );\n\n\t\t\t}\n\n\t\t\tgeometries.update( buffergeometry );\n\n\t\t\tupdateList[ buffergeometry.id ] = frame;\n\n\t\t}\n\n\t\treturn buffergeometry;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tupdateList = {};\n\n\t}\n\n\treturn {\n\n\t\tupdate: update,\n\t\tdispose: dispose\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\timages = images !== undefined ? images : [];\n\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\n\tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\tthis.flipY = false;\n\n}\n\nCubeTexture.prototype = Object.create( Texture.prototype );\nCubeTexture.prototype.constructor = CubeTexture;\n\nCubeTexture.prototype.isCubeTexture = true;\n\nObject.defineProperty( CubeTexture.prototype, 'images', {\n\n\tget: function () {\n\n\t\treturn this.image;\n\n\t},\n\n\tset: function ( value ) {\n\n\t\tthis.image = value;\n\n\t}\n\n} );\n\n/**\n * @author tschw\n *\n * Uniforms of a program.\n * Those form a tree structure with a special top-level container for the root,\n * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.\n *\n *\n * Properties of inner nodes including the top-level container:\n *\n * .seq - array of nested uniforms\n * .map - nested uniforms by name\n *\n *\n * Methods of all nodes except the top-level container:\n *\n * .setValue( gl, value, [renderer] )\n *\n * \t\tuploads a uniform value(s)\n *  \tthe 'renderer' parameter is needed for sampler uniforms\n *\n *\n * Static methods of the top-level container (renderer factorizations):\n *\n * .upload( gl, seq, values, renderer )\n *\n * \t\tsets uniforms in 'seq' to 'values[id].value'\n *\n * .seqWithValue( seq, values ) : filteredSeq\n *\n * \t\tfilters 'seq' entries with corresponding entry in values\n *\n *\n * Methods of the top-level container (renderer factorizations):\n *\n * .setValue( gl, name, value )\n *\n * \t\tsets uniform with  name 'name' to 'value'\n *\n * .set( gl, obj, prop )\n *\n * \t\tsets uniform from object and property with same name than uniform\n *\n * .setOptional( gl, obj, prop )\n *\n * \t\tlike .set for an optional property of the object\n *\n */\n\nvar emptyTexture = new Texture();\nvar emptyCubeTexture = new CubeTexture();\n\n// --- Base for inner nodes (including the root) ---\n\nfunction UniformContainer() {\n\n\tthis.seq = [];\n\tthis.map = {};\n\n}\n\n// --- Utilities ---\n\n// Array Caches (provide typed arrays for temporary by size)\n\nvar arrayCacheF32 = [];\nvar arrayCacheI32 = [];\n\n// Float32Array caches used for uploading Matrix uniforms\n\nvar mat4array = new Float32Array( 16 );\nvar mat3array = new Float32Array( 9 );\n\n// Flattening for arrays of vectors and matrices\n\nfunction flatten( array, nBlocks, blockSize ) {\n\n\tvar firstElem = array[ 0 ];\n\n\tif ( firstElem <= 0 || firstElem > 0 ) return array;\n\t// unoptimized: ! isNaN( firstElem )\n\t// see http://jacksondunstan.com/articles/983\n\n\tvar n = nBlocks * blockSize,\n\t\tr = arrayCacheF32[ n ];\n\n\tif ( r === undefined ) {\n\n\t\tr = new Float32Array( n );\n\t\tarrayCacheF32[ n ] = r;\n\n\t}\n\n\tif ( nBlocks !== 0 ) {\n\n\t\tfirstElem.toArray( r, 0 );\n\n\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\toffset += blockSize;\n\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t}\n\n\t}\n\n\treturn r;\n\n}\n\n// Texture unit allocation\n\nfunction allocTexUnits( renderer, n ) {\n\n\tvar r = arrayCacheI32[ n ];\n\n\tif ( r === undefined ) {\n\n\t\tr = new Int32Array( n );\n\t\tarrayCacheI32[ n ] = r;\n\n\t}\n\n\tfor ( var i = 0; i !== n; ++ i )\n\t\tr[ i ] = renderer.allocTextureUnit();\n\n\treturn r;\n\n}\n\n// --- Setters ---\n\n// Note: Defining these methods externally, because they come in a bunch\n// and this way their names minify.\n\n// Single scalar\n\nfunction setValue1f( gl, v ) {\n\n\tgl.uniform1f( this.addr, v );\n\n}\n\nfunction setValue1i( gl, v ) {\n\n\tgl.uniform1i( this.addr, v );\n\n}\n\n// Single float vector (from flat array or THREE.VectorN)\n\nfunction setValue2fv( gl, v ) {\n\n\tif ( v.x === undefined ) {\n\n\t\tgl.uniform2fv( this.addr, v );\n\n\t} else {\n\n\t\tgl.uniform2f( this.addr, v.x, v.y );\n\n\t}\n\n}\n\nfunction setValue3fv( gl, v ) {\n\n\tif ( v.x !== undefined ) {\n\n\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\n\t} else if ( v.r !== undefined ) {\n\n\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\n\t} else {\n\n\t\tgl.uniform3fv( this.addr, v );\n\n\t}\n\n}\n\nfunction setValue4fv( gl, v ) {\n\n\tif ( v.x === undefined ) {\n\n\t\tgl.uniform4fv( this.addr, v );\n\n\t} else {\n\n\t\t gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t}\n\n}\n\n// Single matrix (from flat array or MatrixN)\n\nfunction setValue2fm( gl, v ) {\n\n\tgl.uniformMatrix2fv( this.addr, false, v.elements || v );\n\n}\n\nfunction setValue3fm( gl, v ) {\n\n\tif ( v.elements === undefined ) {\n\n\t\tgl.uniformMatrix3fv( this.addr, false, v );\n\n\t} else {\n\n\t\tmat3array.set( v.elements );\n\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\n\n\t}\n\n}\n\nfunction setValue4fm( gl, v ) {\n\n\tif ( v.elements === undefined ) {\n\n\t\tgl.uniformMatrix4fv( this.addr, false, v );\n\n\t} else {\n\n\t\tmat4array.set( v.elements );\n\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\n\n\t}\n\n}\n\n// Single texture (2D / Cube)\n\nfunction setValueT1( gl, v, renderer ) {\n\n\tvar unit = renderer.allocTextureUnit();\n\tgl.uniform1i( this.addr, unit );\n\trenderer.setTexture2D( v || emptyTexture, unit );\n\n}\n\nfunction setValueT6( gl, v, renderer ) {\n\n\tvar unit = renderer.allocTextureUnit();\n\tgl.uniform1i( this.addr, unit );\n\trenderer.setTextureCube( v || emptyCubeTexture, unit );\n\n}\n\n// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\nfunction setValue2iv( gl, v ) {\n\n\tgl.uniform2iv( this.addr, v );\n\n}\n\nfunction setValue3iv( gl, v ) {\n\n\tgl.uniform3iv( this.addr, v );\n\n}\n\nfunction setValue4iv( gl, v ) {\n\n\tgl.uniform4iv( this.addr, v );\n\n}\n\n// Helper to pick the right setter for the singular case\n\nfunction getSingularSetter( type ) {\n\n\tswitch ( type ) {\n\n\t\tcase 0x1406: return setValue1f; // FLOAT\n\t\tcase 0x8b50: return setValue2fv; // _VEC2\n\t\tcase 0x8b51: return setValue3fv; // _VEC3\n\t\tcase 0x8b52: return setValue4fv; // _VEC4\n\n\t\tcase 0x8b5a: return setValue2fm; // _MAT2\n\t\tcase 0x8b5b: return setValue3fm; // _MAT3\n\t\tcase 0x8b5c: return setValue4fm; // _MAT4\n\n\t\tcase 0x8b5e: case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES\n\t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\n\n\t\tcase 0x1404: case 0x8b56: return setValue1i; // INT, BOOL\n\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n\t}\n\n}\n\n// Array of scalars\n\nfunction setValue1fv( gl, v ) {\n\n\tgl.uniform1fv( this.addr, v );\n\n}\nfunction setValue1iv( gl, v ) {\n\n\tgl.uniform1iv( this.addr, v );\n\n}\n\n// Array of vectors (flat or from THREE classes)\n\nfunction setValueV2a( gl, v ) {\n\n\tgl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );\n\n}\n\nfunction setValueV3a( gl, v ) {\n\n\tgl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );\n\n}\n\nfunction setValueV4a( gl, v ) {\n\n\tgl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );\n\n}\n\n// Array of matrices (flat or from THREE clases)\n\nfunction setValueM2a( gl, v ) {\n\n\tgl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );\n\n}\n\nfunction setValueM3a( gl, v ) {\n\n\tgl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );\n\n}\n\nfunction setValueM4a( gl, v ) {\n\n\tgl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );\n\n}\n\n// Array of textures (2D / Cube)\n\nfunction setValueT1a( gl, v, renderer ) {\n\n\tvar n = v.length,\n\t\tunits = allocTexUnits( renderer, n );\n\n\tgl.uniform1iv( this.addr, units );\n\n\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\trenderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t}\n\n}\n\nfunction setValueT6a( gl, v, renderer ) {\n\n\tvar n = v.length,\n\t\tunits = allocTexUnits( renderer, n );\n\n\tgl.uniform1iv( this.addr, units );\n\n\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\trenderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t}\n\n}\n\n// Helper to pick the right setter for a pure (bottom-level) array\n\nfunction getPureArraySetter( type ) {\n\n\tswitch ( type ) {\n\n\t\tcase 0x1406: return setValue1fv; // FLOAT\n\t\tcase 0x8b50: return setValueV2a; // _VEC2\n\t\tcase 0x8b51: return setValueV3a; // _VEC3\n\t\tcase 0x8b52: return setValueV4a; // _VEC4\n\n\t\tcase 0x8b5a: return setValueM2a; // _MAT2\n\t\tcase 0x8b5b: return setValueM3a; // _MAT3\n\t\tcase 0x8b5c: return setValueM4a; // _MAT4\n\n\t\tcase 0x8b5e: return setValueT1a; // SAMPLER_2D\n\t\tcase 0x8b60: return setValueT6a; // SAMPLER_CUBE\n\n\t\tcase 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL\n\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n\t}\n\n}\n\n// --- Uniform Classes ---\n\nfunction SingleUniform( id, activeInfo, addr ) {\n\n\tthis.id = id;\n\tthis.addr = addr;\n\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t// this.path = activeInfo.name; // DEBUG\n\n}\n\nfunction PureArrayUniform( id, activeInfo, addr ) {\n\n\tthis.id = id;\n\tthis.addr = addr;\n\tthis.size = activeInfo.size;\n\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t// this.path = activeInfo.name; // DEBUG\n\n}\n\nfunction StructuredUniform( id ) {\n\n\tthis.id = id;\n\n\tUniformContainer.call( this ); // mix-in\n\n}\n\nStructuredUniform.prototype.setValue = function ( gl, value ) {\n\n\t// Note: Don't need an extra 'renderer' parameter, since samplers\n\t// are not allowed in structured uniforms.\n\n\tvar seq = this.seq;\n\n\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\tvar u = seq[ i ];\n\t\tu.setValue( gl, value[ u.id ] );\n\n\t}\n\n};\n\n// --- Top-level ---\n\n// Parser - builds up the property tree from the path strings\n\nvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\n// extracts\n// \t- the identifier (member name or array index)\n//  - followed by an optional right bracket (found when array index)\n//  - followed by an optional left bracket or dot (type of subscript)\n//\n// Note: These portions can be read in a non-overlapping fashion and\n// allow straightforward parsing of the hierarchy that WebGL encodes\n// in the uniform names.\n\nfunction addUniform( container, uniformObject ) {\n\n\tcontainer.seq.push( uniformObject );\n\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n}\n\nfunction parseUniform( activeInfo, addr, container ) {\n\n\tvar path = activeInfo.name,\n\t\tpathLength = path.length;\n\n\t// reset RegExp object, because of the early exit of a previous run\n\tRePathPart.lastIndex = 0;\n\n\tfor ( ; ; ) {\n\n\t\tvar match = RePathPart.exec( path ),\n\t\t\tmatchEnd = RePathPart.lastIndex,\n\n\t\t\tid = match[ 1 ],\n\t\t\tidIsIndex = match[ 2 ] === ']',\n\t\t\tsubscript = match[ 3 ];\n\n\t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\n\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\n\n\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\tbreak;\n\n\t\t} else {\n\n\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\tvar map = container.map, next = map[ id ];\n\n\t\t\tif ( next === undefined ) {\n\n\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\taddUniform( container, next );\n\n\t\t\t}\n\n\t\t\tcontainer = next;\n\n\t\t}\n\n\t}\n\n}\n\n// Root Container\n\nfunction WebGLUniforms( gl, program, renderer ) {\n\n\tUniformContainer.call( this );\n\n\tthis.renderer = renderer;\n\n\tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\n\n\tfor ( var i = 0; i < n; ++ i ) {\n\n\t\tvar info = gl.getActiveUniform( program, i ),\n\t\t\tpath = info.name,\n\t\t\taddr = gl.getUniformLocation( program, path );\n\n\t\tparseUniform( info, addr, this );\n\n\t}\n\n}\n\nWebGLUniforms.prototype.setValue = function ( gl, name, value ) {\n\n\tvar u = this.map[ name ];\n\n\tif ( u !== undefined ) u.setValue( gl, value, this.renderer );\n\n};\n\nWebGLUniforms.prototype.setOptional = function ( gl, object, name ) {\n\n\tvar v = object[ name ];\n\n\tif ( v !== undefined ) this.setValue( gl, name, v );\n\n};\n\n\n// Static interface\n\nWebGLUniforms.upload = function ( gl, seq, values, renderer ) {\n\n\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\tvar u = seq[ i ],\n\t\t\tv = values[ u.id ];\n\n\t\tif ( v.needsUpdate !== false ) {\n\n\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\tu.setValue( gl, v.value, renderer );\n\n\t\t}\n\n\t}\n\n};\n\nWebGLUniforms.seqWithValue = function ( seq, values ) {\n\n\tvar r = [];\n\n\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\tvar u = seq[ i ];\n\t\tif ( u.id in values ) r.push( u );\n\n\t}\n\n\treturn r;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction addLineNumbers( string ) {\n\n\tvar lines = string.split( '\\n' );\n\n\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n\t}\n\n\treturn lines.join( '\\n' );\n\n}\n\nfunction WebGLShader( gl, type, string ) {\n\n\tvar shader = gl.createShader( type );\n\n\tgl.shaderSource( shader, string );\n\tgl.compileShader( shader );\n\n\tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\n\n\t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\n\n\t}\n\n\tif ( gl.getShaderInfoLog( shader ) !== '' ) {\n\n\t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\n\n\t}\n\n\t// --enable-privileged-webgl-extension\n\t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\treturn shader;\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar programIdCount = 0;\n\nfunction getEncodingComponents( encoding ) {\n\n\tswitch ( encoding ) {\n\n\t\tcase LinearEncoding:\n\t\t\treturn [ 'Linear', '( value )' ];\n\t\tcase sRGBEncoding:\n\t\t\treturn [ 'sRGB', '( value )' ];\n\t\tcase RGBEEncoding:\n\t\t\treturn [ 'RGBE', '( value )' ];\n\t\tcase RGBM7Encoding:\n\t\t\treturn [ 'RGBM', '( value, 7.0 )' ];\n\t\tcase RGBM16Encoding:\n\t\t\treturn [ 'RGBM', '( value, 16.0 )' ];\n\t\tcase RGBDEncoding:\n\t\t\treturn [ 'RGBD', '( value, 256.0 )' ];\n\t\tcase GammaEncoding:\n\t\t\treturn [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];\n\t\tdefault:\n\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\n\t}\n\n}\n\nfunction getTexelDecodingFunction( functionName, encoding ) {\n\n\tvar components = getEncodingComponents( encoding );\n\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';\n\n}\n\nfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\tvar components = getEncodingComponents( encoding );\n\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';\n\n}\n\nfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\tvar toneMappingName;\n\n\tswitch ( toneMapping ) {\n\n\t\tcase LinearToneMapping:\n\t\t\ttoneMappingName = 'Linear';\n\t\t\tbreak;\n\n\t\tcase ReinhardToneMapping:\n\t\t\ttoneMappingName = 'Reinhard';\n\t\t\tbreak;\n\n\t\tcase Uncharted2ToneMapping:\n\t\t\ttoneMappingName = 'Uncharted2';\n\t\t\tbreak;\n\n\t\tcase CineonToneMapping:\n\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\n\t}\n\n\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\n}\n\nfunction generateExtensions( extensions, parameters, rendererExtensions ) {\n\n\textensions = extensions || {};\n\n\tvar chunks = [\n\t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''\n\t];\n\n\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n}\n\nfunction generateDefines( defines ) {\n\n\tvar chunks = [];\n\n\tfor ( var name in defines ) {\n\n\t\tvar value = defines[ name ];\n\n\t\tif ( value === false ) continue;\n\n\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t}\n\n\treturn chunks.join( '\\n' );\n\n}\n\nfunction fetchAttributeLocations( gl, program ) {\n\n\tvar attributes = {};\n\n\tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\n\n\tfor ( var i = 0; i < n; i ++ ) {\n\n\t\tvar info = gl.getActiveAttrib( program, i );\n\t\tvar name = info.name;\n\n\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n\t}\n\n\treturn attributes;\n\n}\n\nfunction filterEmptyLine( string ) {\n\n\treturn string !== '';\n\n}\n\nfunction replaceLightNums( string, parameters ) {\n\n\treturn string\n\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\n\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\n\n}\n\nfunction replaceClippingPlaneNums( string, parameters ) {\n\n\treturn string\n\t\t.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\n\t\t.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\n\n}\n\nfunction parseIncludes( string ) {\n\n\tvar pattern = /^[ \\t]*#include +<([\\w\\d.]+)>/gm;\n\n\tfunction replace( match, include ) {\n\n\t\tvar replace = ShaderChunk[ include ];\n\n\t\tif ( replace === undefined ) {\n\n\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t\t}\n\n\t\treturn parseIncludes( replace );\n\n\t}\n\n\treturn string.replace( pattern, replace );\n\n}\n\nfunction unrollLoops( string ) {\n\n\tvar pattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\n\tfunction replace( match, start, end, snippet ) {\n\n\t\tvar unroll = '';\n\n\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\t\tunroll += snippet.replace( /\\[ i \\]/g, '[ ' + i + ' ]' );\n\n\t\t}\n\n\t\treturn unroll;\n\n\t}\n\n\treturn string.replace( pattern, replace );\n\n}\n\nfunction WebGLProgram( renderer, extensions, code, material, shader, parameters ) {\n\n\tvar gl = renderer.context;\n\n\tvar defines = material.defines;\n\n\tvar vertexShader = shader.vertexShader;\n\tvar fragmentShader = shader.fragmentShader;\n\n\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t}\n\n\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\tcase CubeReflectionMapping:\n\t\t\tcase CubeRefractionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\tbreak;\n\n\t\t\tcase CubeUVReflectionMapping:\n\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\tbreak;\n\n\t\t\tcase EquirectangularReflectionMapping:\n\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t\t\t\tbreak;\n\n\t\t\tcase SphericalReflectionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\tcase CubeRefractionMapping:\n\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tswitch ( material.combine ) {\n\n\t\t\tcase MultiplyOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\tbreak;\n\n\t\t\tcase MixOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\tbreak;\n\n\t\t\tcase AddOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n\t// console.log( 'building new program ' );\n\n\t//\n\n\tvar customExtensions = generateExtensions( material.extensions, parameters, extensions );\n\n\tvar customDefines = generateDefines( defines );\n\n\t//\n\n\tvar program = gl.createProgram();\n\n\tvar prefixVertex, prefixFragment;\n\n\tif ( material.isRawShaderMaterial ) {\n\n\t\tprefixVertex = [\n\n\t\t\tcustomDefines\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tif ( prefixVertex.length > 0 ) {\n\n\t\t\tprefixVertex += '\\n';\n\n\t\t}\n\n\t\tprefixFragment = [\n\n\t\t\tcustomExtensions,\n\t\t\tcustomDefines\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tif ( prefixFragment.length > 0 ) {\n\n\t\t\tprefixFragment += '\\n';\n\n\t\t}\n\n\t} else {\n\n\t\tprefixVertex = [\n\n\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t'precision ' + parameters.precision + ' int;',\n\n\t\t\t'#define SHADER_NAME ' + shader.name,\n\n\t\t\tcustomDefines,\n\n\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\n\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\tparameters.logarithmicDepthBuffer && extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t'attribute vec3 position;',\n\t\t\t'attribute vec3 normal;',\n\t\t\t'attribute vec2 uv;',\n\n\t\t\t'#ifdef USE_COLOR',\n\n\t\t\t'\tattribute vec3 color;',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_MORPHTARGETS',\n\n\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t'\t#else',\n\n\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t'\t#endif',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t'#endif',\n\n\t\t\t'\\n'\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tprefixFragment = [\n\n\t\t\tcustomExtensions,\n\n\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t'precision ' + parameters.precision + ' int;',\n\n\t\t\t'#define SHADER_NAME ' + shader.name,\n\n\t\t\tcustomDefines,\n\n\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\n\n\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\n\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n\n\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\n\n\t\t\tparameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',\n\n\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\tparameters.logarithmicDepthBuffer && extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\tparameters.envMap && extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',\n\n\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\n\n\t\t\tparameters.dithering ? '#define DITHERING' : '',\n\n\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ) : '',\n\n\t\t\tparameters.depthPacking ? '#define DEPTH_PACKING ' + material.depthPacking : '',\n\n\t\t\t'\\n'\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tvertexShader = parseIncludes( vertexShader );\n\tvertexShader = replaceLightNums( vertexShader, parameters );\n\tvertexShader = replaceClippingPlaneNums( vertexShader, parameters );\n\n\tfragmentShader = parseIncludes( fragmentShader );\n\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\tfragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\n\n\tvertexShader = unrollLoops( vertexShader );\n\tfragmentShader = unrollLoops( fragmentShader );\n\n\tvar vertexGlsl = prefixVertex + vertexShader;\n\tvar fragmentGlsl = prefixFragment + fragmentShader;\n\n\t// console.log( '*VERTEX*', vertexGlsl );\n\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\tvar glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\n\tvar glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\n\n\tgl.attachShader( program, glVertexShader );\n\tgl.attachShader( program, glFragmentShader );\n\n\t// Force a particular attribute to index 0.\n\n\tif ( material.index0AttributeName !== undefined ) {\n\n\t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\n\n\t} else if ( parameters.morphTargets === true ) {\n\n\t\t// programs with morphTargets displace position out of attribute 0\n\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t}\n\n\tgl.linkProgram( program );\n\n\tvar programLog = gl.getProgramInfoLog( program ).trim();\n\tvar vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\n\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\n\n\tvar runnable = true;\n\tvar haveDiagnostics = true;\n\n\t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\n\t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\n\n\tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\n\n\t\trunnable = false;\n\n\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\n\n\t} else if ( programLog !== '' ) {\n\n\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\thaveDiagnostics = false;\n\n\t}\n\n\tif ( haveDiagnostics ) {\n\n\t\tthis.diagnostics = {\n\n\t\t\trunnable: runnable,\n\t\t\tmaterial: material,\n\n\t\t\tprogramLog: programLog,\n\n\t\t\tvertexShader: {\n\n\t\t\t\tlog: vertexLog,\n\t\t\t\tprefix: prefixVertex\n\n\t\t\t},\n\n\t\t\tfragmentShader: {\n\n\t\t\t\tlog: fragmentLog,\n\t\t\t\tprefix: prefixFragment\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t// clean up\n\n\tgl.deleteShader( glVertexShader );\n\tgl.deleteShader( glFragmentShader );\n\n\t// set up caching for uniform locations\n\n\tvar cachedUniforms;\n\n\tthis.getUniforms = function () {\n\n\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\tcachedUniforms = new WebGLUniforms( gl, program, renderer );\n\n\t\t}\n\n\t\treturn cachedUniforms;\n\n\t};\n\n\t// set up caching for attribute locations\n\n\tvar cachedAttributes;\n\n\tthis.getAttributes = function () {\n\n\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t}\n\n\t\treturn cachedAttributes;\n\n\t};\n\n\t// free resource\n\n\tthis.destroy = function () {\n\n\t\tgl.deleteProgram( program );\n\t\tthis.program = undefined;\n\n\t};\n\n\t// DEPRECATED\n\n\tObject.defineProperties( this, {\n\n\t\tuniforms: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\n\t\t\t\treturn this.getUniforms();\n\n\t\t\t}\n\t\t},\n\n\t\tattributes: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\n\t\t\t\treturn this.getAttributes();\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\n\t//\n\n\tthis.id = programIdCount ++;\n\tthis.code = code;\n\tthis.usedTimes = 1;\n\tthis.program = program;\n\tthis.vertexShader = glVertexShader;\n\tthis.fragmentShader = glFragmentShader;\n\n\treturn this;\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLPrograms( renderer, extensions, capabilities ) {\n\n\tvar programs = [];\n\n\tvar shaderIDs = {\n\t\tMeshDepthMaterial: 'depth',\n\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\tMeshNormalMaterial: 'normal',\n\t\tMeshBasicMaterial: 'basic',\n\t\tMeshLambertMaterial: 'lambert',\n\t\tMeshPhongMaterial: 'phong',\n\t\tMeshToonMaterial: 'phong',\n\t\tMeshStandardMaterial: 'physical',\n\t\tMeshPhysicalMaterial: 'physical',\n\t\tLineBasicMaterial: 'basic',\n\t\tLineDashedMaterial: 'dashed',\n\t\tPointsMaterial: 'points',\n\t\tShadowMaterial: 'shadow'\n\t};\n\n\tvar parameterNames = [\n\t\t\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\n\t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\n\t\t\"roughnessMap\", \"metalnessMap\", \"gradientMap\",\n\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\n\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\",\n\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\"\n\t];\n\n\n\tfunction allocateBones( object ) {\n\n\t\tvar skeleton = object.skeleton;\n\t\tvar bones = skeleton.bones;\n\n\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\treturn 1024;\n\n\t\t} else {\n\n\t\t\t// default for when object is not specified\n\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t//\n\t\t\t//  - leave some extra space for other uniforms\n\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t//    (up to 54 should be safe)\n\n\t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\n\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\tvar maxBones = Math.min( nVertexMatrices, bones.length );\n\n\t\t\tif ( maxBones < bones.length ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\treturn maxBones;\n\n\t\t}\n\n\t}\n\n\tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\n\n\t\tvar encoding;\n\n\t\tif ( ! map ) {\n\n\t\t\tencoding = LinearEncoding;\n\n\t\t} else if ( map.isTexture ) {\n\n\t\t\tencoding = map.encoding;\n\n\t\t} else if ( map.isWebGLRenderTarget ) {\n\n\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\tencoding = map.texture.encoding;\n\n\t\t}\n\n\t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n\t\tif ( encoding === LinearEncoding && gammaOverrideLinear ) {\n\n\t\t\tencoding = GammaEncoding;\n\n\t\t}\n\n\t\treturn encoding;\n\n\t}\n\n\tthis.getParameters = function ( material, lights, shadows, fog, nClipPlanes, nClipIntersection, object ) {\n\n\t\tvar shaderID = shaderIDs[ material.type ];\n\n\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t// (not to blow over maxLights budget)\n\n\t\tvar maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;\n\t\tvar precision = capabilities.precision;\n\n\t\tif ( material.precision !== null ) {\n\n\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\tvar parameters = {\n\n\t\t\tshaderID: shaderID,\n\n\t\t\tprecision: precision,\n\t\t\tsupportsVertexTextures: capabilities.vertexTextures,\n\t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\n\t\t\tmap: !! material.map,\n\t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\n\t\t\tenvMap: !! material.envMap,\n\t\t\tenvMapMode: material.envMap && material.envMap.mapping,\n\t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\n\t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),\n\t\t\tlightMap: !! material.lightMap,\n\t\t\taoMap: !! material.aoMap,\n\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\n\t\t\tbumpMap: !! material.bumpMap,\n\t\t\tnormalMap: !! material.normalMap,\n\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\tspecularMap: !! material.specularMap,\n\t\t\talphaMap: !! material.alphaMap,\n\n\t\t\tgradientMap: !! material.gradientMap,\n\n\t\t\tcombine: material.combine,\n\n\t\t\tvertexColors: material.vertexColors,\n\n\t\t\tfog: !! fog,\n\t\t\tuseFog: material.fog,\n\t\t\tfogExp: ( fog && fog.isFogExp2 ),\n\n\t\t\tflatShading: material.flatShading,\n\n\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n\n\t\t\tskinning: material.skinning && maxBones > 0,\n\t\t\tmaxBones: maxBones,\n\t\t\tuseVertexTexture: capabilities.floatVertexTextures,\n\n\t\t\tmorphTargets: material.morphTargets,\n\t\t\tmorphNormals: material.morphNormals,\n\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n\t\t\tnumDirLights: lights.directional.length,\n\t\t\tnumPointLights: lights.point.length,\n\t\t\tnumSpotLights: lights.spot.length,\n\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\tnumClippingPlanes: nClipPlanes,\n\t\t\tnumClipIntersection: nClipIntersection,\n\n\t\t\tdithering: material.dithering,\n\n\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && shadows.length > 0,\n\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\ttoneMapping: renderer.toneMapping,\n\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\talphaTest: material.alphaTest,\n\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\tflipSided: material.side === BackSide,\n\n\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\n\n\t\t};\n\n\t\treturn parameters;\n\n\t};\n\n\tthis.getProgramCode = function ( material, parameters ) {\n\n\t\tvar array = [];\n\n\t\tif ( parameters.shaderID ) {\n\n\t\t\tarray.push( parameters.shaderID );\n\n\t\t} else {\n\n\t\t\tarray.push( material.fragmentShader );\n\t\t\tarray.push( material.vertexShader );\n\n\t\t}\n\n\t\tif ( material.defines !== undefined ) {\n\n\t\t\tfor ( var name in material.defines ) {\n\n\t\t\t\tarray.push( name );\n\t\t\t\tarray.push( material.defines[ name ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t}\n\n\t\tarray.push( material.onBeforeCompile.toString() );\n\n\t\tarray.push( renderer.gammaOutput );\n\n\t\treturn array.join();\n\n\t};\n\n\tthis.acquireProgram = function ( material, shader, parameters, code ) {\n\n\t\tvar program;\n\n\t\t// Check if code has been already compiled\n\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\tvar programInfo = programs[ p ];\n\n\t\t\tif ( programInfo.code === code ) {\n\n\t\t\t\tprogram = programInfo;\n\t\t\t\t++ program.usedTimes;\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( program === undefined ) {\n\n\t\t\tprogram = new WebGLProgram( renderer, extensions, code, material, shader, parameters );\n\t\t\tprograms.push( program );\n\n\t\t}\n\n\t\treturn program;\n\n\t};\n\n\tthis.releaseProgram = function ( program ) {\n\n\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t// Remove from unordered set\n\t\t\tvar i = programs.indexOf( program );\n\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\tprograms.pop();\n\n\t\t\t// Free WebGL resources\n\t\t\tprogram.destroy();\n\n\t\t}\n\n\t};\n\n\t// Exposed for resource monitoring & error feedback via renderer.info:\n\tthis.programs = programs;\n\n}\n\n/**\n * @author fordacious / fordacious.github.io\n */\n\nfunction WebGLProperties() {\n\n\tvar properties = new WeakMap();\n\n\tfunction get( object ) {\n\n\t\tvar map = properties.get( object );\n\n\t\tif ( map === undefined ) {\n\n\t\t\tmap = {};\n\t\t\tproperties.set( object, map );\n\n\t\t}\n\n\t\treturn map;\n\n\t}\n\n\tfunction remove( object ) {\n\n\t\tproperties.delete( object );\n\n\t}\n\n\tfunction update( object, key, value ) {\n\n\t\tproperties.get( object )[ key ] = value;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tproperties = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tremove: remove,\n\t\tupdate: update,\n\t\tdispose: dispose\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction painterSortStable( a, b ) {\n\n\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.program && b.program && a.program !== b.program ) {\n\n\t\treturn a.program.id - b.program.id;\n\n\t} else if ( a.material.id !== b.material.id ) {\n\n\t\treturn a.material.id - b.material.id;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn a.z - b.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\nfunction reversePainterSortStable( a, b ) {\n\n\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} if ( a.z !== b.z ) {\n\n\t\treturn b.z - a.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\nfunction WebGLRenderList() {\n\n\tvar renderItems = [];\n\tvar renderItemsIndex = 0;\n\n\tvar opaque = [];\n\tvar transparent = [];\n\n\tfunction init() {\n\n\t\trenderItemsIndex = 0;\n\n\t\topaque.length = 0;\n\t\ttransparent.length = 0;\n\n\t}\n\n\tfunction push( object, geometry, material, z, group ) {\n\n\t\tvar renderItem = renderItems[ renderItemsIndex ];\n\n\t\tif ( renderItem === undefined ) {\n\n\t\t\trenderItem = {\n\t\t\t\tid: object.id,\n\t\t\t\tobject: object,\n\t\t\t\tgeometry: geometry,\n\t\t\t\tmaterial: material,\n\t\t\t\tprogram: material.program,\n\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\tz: z,\n\t\t\t\tgroup: group\n\t\t\t};\n\n\t\t\trenderItems[ renderItemsIndex ] = renderItem;\n\n\t\t} else {\n\n\t\t\trenderItem.id = object.id;\n\t\t\trenderItem.object = object;\n\t\t\trenderItem.geometry = geometry;\n\t\t\trenderItem.material = material;\n\t\t\trenderItem.program = material.program;\n\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\trenderItem.z = z;\n\t\t\trenderItem.group = group;\n\n\t\t}\n\n\t\t( material.transparent === true ? transparent : opaque ).push( renderItem );\n\n\t\trenderItemsIndex ++;\n\n\t}\n\n\tfunction sort() {\n\n\t\tif ( opaque.length > 1 ) opaque.sort( painterSortStable );\n\t\tif ( transparent.length > 1 ) transparent.sort( reversePainterSortStable );\n\n\t}\n\n\treturn {\n\t\topaque: opaque,\n\t\ttransparent: transparent,\n\n\t\tinit: init,\n\t\tpush: push,\n\n\t\tsort: sort\n\t};\n\n}\n\nfunction WebGLRenderLists() {\n\n\tvar lists = {};\n\n\tfunction get( scene, camera ) {\n\n\t\tvar hash = scene.id + ',' + camera.id;\n\t\tvar list = lists[ hash ];\n\n\t\tif ( list === undefined ) {\n\n\t\t\t// console.log( 'THREE.WebGLRenderLists:', hash );\n\n\t\t\tlist = new WebGLRenderList();\n\t\t\tlists[ hash ] = list;\n\n\t\t}\n\n\t\treturn list;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tlists = {};\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction UniformsCache() {\n\n\tvar lights = {};\n\n\treturn {\n\n\t\tget: function ( light ) {\n\n\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\treturn lights[ light.id ];\n\n\t\t\t}\n\n\t\t\tvar uniforms;\n\n\t\t\tswitch ( light.type ) {\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\n\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\treturn uniforms;\n\n\t\t}\n\n\t};\n\n}\n\nvar count = 0;\n\nfunction WebGLLights() {\n\n\tvar cache = new UniformsCache();\n\n\tvar state = {\n\n\t\tid: count ++,\n\n\t\thash: '',\n\n\t\tambient: [ 0, 0, 0 ],\n\t\tdirectional: [],\n\t\tdirectionalShadowMap: [],\n\t\tdirectionalShadowMatrix: [],\n\t\tspot: [],\n\t\tspotShadowMap: [],\n\t\tspotShadowMatrix: [],\n\t\trectArea: [],\n\t\tpoint: [],\n\t\tpointShadowMap: [],\n\t\tpointShadowMatrix: [],\n\t\themi: []\n\n\t};\n\n\tvar vector3 = new Vector3();\n\tvar matrix4 = new Matrix4();\n\tvar matrix42 = new Matrix4();\n\n\tfunction setup( lights, shadows, camera ) {\n\n\t\tvar r = 0, g = 0, b = 0;\n\n\t\tvar directionalLength = 0;\n\t\tvar pointLength = 0;\n\t\tvar spotLength = 0;\n\t\tvar rectAreaLength = 0;\n\t\tvar hemiLength = 0;\n\n\t\tvar viewMatrix = camera.matrixWorldInverse;\n\n\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\tvar light = lights[ i ];\n\n\t\t\tvar color = light.color;\n\t\t\tvar intensity = light.intensity;\n\t\t\tvar distance = light.distance;\n\n\t\t\tvar shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\tr += color.r * intensity;\n\t\t\t\tg += color.g * intensity;\n\t\t\t\tb += color.b * intensity;\n\n\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t}\n\n\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\t\t\t\tstate.directional[ directionalLength ] = uniforms;\n\n\t\t\t\tdirectionalLength ++;\n\n\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t}\n\n\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\tstate.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\t\t\t\tstate.spot[ spotLength ] = uniforms;\n\n\t\t\t\tspotLength ++;\n\n\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t// (a) intensity is the total visible light emitted\n\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\n\t\t\t\t// (b) intensity is the brightness of the light\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t// extract local rotation of light to derive width/height half vectors\n\t\t\t\tmatrix42.identity();\n\t\t\t\tmatrix4.copy( light.matrixWorld );\n\t\t\t\tmatrix4.premultiply( viewMatrix );\n\t\t\t\tmatrix42.extractRotation( matrix4 );\n\n\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\tuniforms.halfWidth.applyMatrix4( matrix42 );\n\t\t\t\tuniforms.halfHeight.applyMatrix4( matrix42 );\n\n\t\t\t\t// TODO (abelnation): RectAreaLight distance?\n\t\t\t\t// uniforms.distance = distance;\n\n\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms;\n\n\t\t\t\trectAreaLength ++;\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\tuniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\tuniforms.shadowCameraFar = shadow.camera.far;\n\n\t\t\t\t}\n\n\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\n\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n\t\t\t\tstate.point[ pointLength ] = uniforms;\n\n\t\t\t\tpointLength ++;\n\n\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\t\t\tuniforms.direction.normalize();\n\n\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n\t\t\t\tstate.hemi[ hemiLength ] = uniforms;\n\n\t\t\t\themiLength ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.ambient[ 0 ] = r;\n\t\tstate.ambient[ 1 ] = g;\n\t\tstate.ambient[ 2 ] = b;\n\n\t\tstate.directional.length = directionalLength;\n\t\tstate.spot.length = spotLength;\n\t\tstate.rectArea.length = rectAreaLength;\n\t\tstate.point.length = pointLength;\n\t\tstate.hemi.length = hemiLength;\n\n\t\tstate.hash = state.id + ',' + directionalLength + ',' + pointLength + ',' + spotLength + ',' + rectAreaLength + ',' + hemiLength + ',' + shadows.length;\n\n\t}\n\n\treturn {\n\t\tsetup: setup,\n\t\tstate: state\n\t};\n\n}\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nfunction WebGLRenderState() {\n\n\tvar lights = new WebGLLights();\n\n\tvar lightsArray = [];\n\tvar shadowsArray = [];\n\tvar spritesArray = [];\n\n\tfunction init() {\n\n\t\tlightsArray.length = 0;\n\t\tshadowsArray.length = 0;\n\t\tspritesArray.length = 0;\n\n\t}\n\n\tfunction pushLight( light ) {\n\n\t\tlightsArray.push( light );\n\n\t}\n\n\tfunction pushShadow( shadowLight ) {\n\n\t\tshadowsArray.push( shadowLight );\n\n\t}\n\n\tfunction pushSprite( shadowLight ) {\n\n\t\tspritesArray.push( shadowLight );\n\n\t}\n\n\tfunction setupLights( camera ) {\n\n\t\tlights.setup( lightsArray, shadowsArray, camera );\n\n\t}\n\n\tvar state = {\n\t\tlightsArray: lightsArray,\n\t\tshadowsArray: shadowsArray,\n\t\tspritesArray: spritesArray,\n\n\t\tlights: lights\n\t};\n\n\treturn {\n\t\tinit: init,\n\t\tstate: state,\n\t\tsetupLights: setupLights,\n\n\t\tpushLight: pushLight,\n\t\tpushShadow: pushShadow,\n\t\tpushSprite: pushSprite\n\t};\n\n}\n\nfunction WebGLRenderStates() {\n\n\tvar renderStates = {};\n\n\tfunction get( scene, camera ) {\n\n\t\tvar hash = scene.id + ',' + camera.id;\n\n\t\tvar renderState = renderStates[ hash ];\n\n\t\tif ( renderState === undefined ) {\n\n\t\t\trenderState = new WebGLRenderState();\n\t\t\trenderStates[ hash ] = renderState;\n\n\t\t}\n\n\t\treturn renderState;\n\n\t}\n\n\tfunction dispose() {\n\n\t\trenderStates = {};\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author bhouston / https://clara.io\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>\n * }\n */\n\nfunction MeshDepthMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'MeshDepthMaterial';\n\n\tthis.depthPacking = BasicDepthPacking;\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\n\tthis.map = null;\n\n\tthis.alphaMap = null;\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\n\tthis.fog = false;\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshDepthMaterial.prototype = Object.create( Material.prototype );\nMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\nMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\nMeshDepthMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.depthPacking = source.depthPacking;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\n\tthis.map = source.map;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\treturn this;\n\n};\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *\n *  referencePosition: <float>,\n *  nearDistance: <float>,\n *  farDistance: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>\n *\n * }\n */\n\nfunction MeshDistanceMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'MeshDistanceMaterial';\n\n\tthis.referencePosition = new Vector3();\n\tthis.nearDistance = 1;\n\tthis.farDistance = 1000;\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\n\tthis.map = null;\n\n\tthis.alphaMap = null;\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.fog = false;\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshDistanceMaterial.prototype = Object.create( Material.prototype );\nMeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;\n\nMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\nMeshDistanceMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.referencePosition.copy( source.referencePosition );\n\tthis.nearDistance = source.nearDistance;\n\tthis.farDistance = source.farDistance;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\n\tthis.map = source.map;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\treturn this;\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLShadowMap( _renderer, _objects, maxTextureSize ) {\n\n\tvar _frustum = new Frustum(),\n\t\t_projScreenMatrix = new Matrix4(),\n\n\t\t_shadowMapSize = new Vector2(),\n\t\t_maxShadowMapSize = new Vector2( maxTextureSize, maxTextureSize ),\n\n\t\t_lookTarget = new Vector3(),\n\t\t_lightPositionWorld = new Vector3(),\n\n\t\t_MorphingFlag = 1,\n\t\t_SkinningFlag = 2,\n\n\t\t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\n\n\t\t_depthMaterials = new Array( _NumberOfMaterialVariants ),\n\t\t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\n\n\t\t_materialCache = {};\n\n\tvar shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };\n\n\tvar cubeDirections = [\n\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t];\n\n\tvar cubeUps = [\n\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t];\n\n\tvar cube2DViewPorts = [\n\t\tnew Vector4(), new Vector4(), new Vector4(),\n\t\tnew Vector4(), new Vector4(), new Vector4()\n\t];\n\n\t// init\n\n\tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\n\n\t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\n\t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\n\n\t\tvar depthMaterial = new MeshDepthMaterial( {\n\n\t\t\tdepthPacking: RGBADepthPacking,\n\n\t\t\tmorphTargets: useMorphing,\n\t\t\tskinning: useSkinning\n\n\t\t} );\n\n\t\t_depthMaterials[ i ] = depthMaterial;\n\n\t\t//\n\n\t\tvar distanceMaterial = new MeshDistanceMaterial( {\n\n\t\t\tmorphTargets: useMorphing,\n\t\t\tskinning: useSkinning\n\n\t\t} );\n\n\t\t_distanceMaterials[ i ] = distanceMaterial;\n\n\t}\n\n\t//\n\n\tvar scope = this;\n\n\tthis.enabled = false;\n\n\tthis.autoUpdate = true;\n\tthis.needsUpdate = false;\n\n\tthis.type = PCFShadowMap;\n\n\tthis.render = function ( lights, scene, camera ) {\n\n\t\tif ( scope.enabled === false ) return;\n\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\n\t\tif ( lights.length === 0 ) return;\n\n\t\t// TODO Clean up (needed in case of contextlost)\n\t\tvar _gl = _renderer.context;\n\t\tvar _state = _renderer.state;\n\n\t\t// Set GL state for depth map.\n\t\t_state.disable( _gl.BLEND );\n\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\n\t\t_state.buffers.depth.setTest( true );\n\t\t_state.setScissorTest( false );\n\n\t\t// render depth map\n\n\t\tvar faceCount;\n\n\t\tfor ( var i = 0, il = lights.length; i < il; i ++ ) {\n\n\t\t\tvar light = lights[ i ];\n\t\t\tvar shadow = light.shadow;\n\t\t\tvar isPointLight = light && light.isPointLight;\n\n\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tvar shadowCamera = shadow.camera;\n\n\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\t\t\t_shadowMapSize.min( _maxShadowMapSize );\n\n\t\t\tif ( isPointLight ) {\n\n\t\t\t\tvar vpWidth = _shadowMapSize.x;\n\t\t\t\tvar vpHeight = _shadowMapSize.y;\n\n\t\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t\t// following orientation:\n\t\t\t\t//\n\t\t\t\t//  xzXZ\n\t\t\t\t//   y Y\n\t\t\t\t//\n\t\t\t\t// X - Positive x direction\n\t\t\t\t// x - Negative x direction\n\t\t\t\t// Y - Positive y direction\n\t\t\t\t// y - Negative y direction\n\t\t\t\t// Z - Positive z direction\n\t\t\t\t// z - Negative z direction\n\n\t\t\t\t// positive X\n\t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\n\t\t\t\t// negative X\n\t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\n\t\t\t\t// positive Z\n\t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\n\t\t\t\t// negative Z\n\t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\n\t\t\t\t// positive Y\n\t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\n\t\t\t\t// negative Y\n\t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\n\n\t\t\t\t_shadowMapSize.x *= 4.0;\n\t\t\t\t_shadowMapSize.y *= 2.0;\n\n\t\t\t}\n\n\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\n\t\t\t\tshadowCamera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\tif ( shadow.isSpotLightShadow ) {\n\n\t\t\t\tshadow.update( light );\n\n\t\t\t}\n\n\t\t\tvar shadowMap = shadow.map;\n\t\t\tvar shadowMatrix = shadow.matrix;\n\n\t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\tshadowCamera.position.copy( _lightPositionWorld );\n\n\t\t\tif ( isPointLight ) {\n\n\t\t\t\tfaceCount = 6;\n\n\t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\n\t\t\t\t// equal to inverse of the light's position\n\n\t\t\t\tshadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );\n\n\t\t\t} else {\n\n\t\t\t\tfaceCount = 1;\n\n\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\t\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\t\t// compute shadow matrix\n\n\t\t\t\tshadowMatrix.set(\n\t\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t\t);\n\n\t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t\t\t}\n\n\t\t\t_renderer.setRenderTarget( shadowMap );\n\t\t\t_renderer.clear();\n\n\t\t\t// render shadow map for each cube face (if omni-directional) or\n\t\t\t// run a single pass if not\n\n\t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\n\n\t\t\t\tif ( isPointLight ) {\n\n\t\t\t\t\t_lookTarget.copy( shadowCamera.position );\n\t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\n\t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\n\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\t\t\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\n\t\t\t\t\t_state.viewport( vpDimensions );\n\n\t\t\t\t}\n\n\t\t\t\t// update camera matrices and frustum\n\n\t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\t\t\t// set object matrices & frustum culling\n\n\t\t\t\trenderObject( scene, camera, shadowCamera, isPointLight );\n\n\t\t\t}\n\n\t\t}\n\n\t\tscope.needsUpdate = false;\n\n\t};\n\n\tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld, shadowCameraNear, shadowCameraFar ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tvar result = null;\n\n\t\tvar materialVariants = _depthMaterials;\n\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\tif ( isPointLight ) {\n\n\t\t\tmaterialVariants = _distanceMaterials;\n\t\t\tcustomMaterial = object.customDistanceMaterial;\n\n\t\t}\n\n\t\tif ( ! customMaterial ) {\n\n\t\t\tvar useMorphing = false;\n\n\t\t\tif ( material.morphTargets ) {\n\n\t\t\t\tif ( geometry && geometry.isBufferGeometry ) {\n\n\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\n\t\t\t\t} else if ( geometry && geometry.isGeometry ) {\n\n\t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( object.isSkinnedMesh && material.skinning === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );\n\n\t\t\t}\n\n\t\t\tvar useSkinning = object.isSkinnedMesh && material.skinning;\n\n\t\t\tvar variantIndex = 0;\n\n\t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\n\t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\n\n\t\t\tresult = materialVariants[ variantIndex ];\n\n\t\t} else {\n\n\t\t\tresult = customMaterial;\n\n\t\t}\n\n\t\tif ( _renderer.localClippingEnabled &&\n\t\t\t\tmaterial.clipShadows === true &&\n\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\n\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t// appropriate state\n\n\t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\n\t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\n\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t}\n\n\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t}\n\n\t\t\tresult = cachedMaterial;\n\n\t\t}\n\n\t\tresult.visible = material.visible;\n\t\tresult.wireframe = material.wireframe;\n\n\t\tresult.side = ( material.shadowSide != null ) ? material.shadowSide : shadowSide[ material.side ];\n\n\t\tresult.clipShadows = material.clipShadows;\n\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\tresult.clipIntersection = material.clipIntersection;\n\n\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\tresult.linewidth = material.linewidth;\n\n\t\tif ( isPointLight && result.isMeshDistanceMaterial ) {\n\n\t\t\tresult.referencePosition.copy( lightPositionWorld );\n\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\tresult.farDistance = shadowCameraFar;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tfunction renderObject( object, camera, shadowCamera, isPointLight ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tvar visible = object.layers.test( camera.layers );\n\n\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n\t\t\tif ( object.castShadow && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\n\n\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n\t\t\t\tvar geometry = _objects.update( object );\n\t\t\t\tvar material = object.material;\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tvar group = groups[ k ];\n\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );\n\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );\n\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar children = object.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\trenderObject( children[ i ], camera, shadowCamera, isPointLight );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\tthis.needsUpdate = true;\n\n}\n\nCanvasTexture.prototype = Object.create( Texture.prototype );\nCanvasTexture.prototype.constructor = CanvasTexture;\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction WebGLSpriteRenderer( renderer, gl, state, textures, capabilities ) {\n\n\tvar vertexBuffer, elementBuffer;\n\tvar program, attributes, uniforms;\n\n\tvar texture;\n\n\t// decompose matrixWorld\n\n\tvar spritePosition = new Vector3();\n\tvar spriteRotation = new Quaternion();\n\tvar spriteScale = new Vector3();\n\n\tfunction init() {\n\n\t\tvar vertices = new Float32Array( [\n\t\t\t- 0.5, - 0.5, 0, 0,\n\t\t\t  0.5, - 0.5, 1, 0,\n\t\t\t  0.5, 0.5, 1, 1,\n\t\t\t- 0.5, 0.5, 0, 1\n\t\t] );\n\n\t\tvar faces = new Uint16Array( [\n\t\t\t0, 1, 2,\n\t\t\t0, 2, 3\n\t\t] );\n\n\t\tvertexBuffer = gl.createBuffer();\n\t\telementBuffer = gl.createBuffer();\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n\t\tprogram = createProgram();\n\n\t\tattributes = {\n\t\t\tposition: gl.getAttribLocation( program, 'position' ),\n\t\t\tuv: gl.getAttribLocation( program, 'uv' )\n\t\t};\n\n\t\tuniforms = {\n\t\t\tuvOffset: gl.getUniformLocation( program, 'uvOffset' ),\n\t\t\tuvScale: gl.getUniformLocation( program, 'uvScale' ),\n\n\t\t\trotation: gl.getUniformLocation( program, 'rotation' ),\n\t\t\tcenter: gl.getUniformLocation( program, 'center' ),\n\t\t\tscale: gl.getUniformLocation( program, 'scale' ),\n\n\t\t\tcolor: gl.getUniformLocation( program, 'color' ),\n\t\t\tmap: gl.getUniformLocation( program, 'map' ),\n\t\t\topacity: gl.getUniformLocation( program, 'opacity' ),\n\n\t\t\tmodelViewMatrix: gl.getUniformLocation( program, 'modelViewMatrix' ),\n\t\t\tprojectionMatrix: gl.getUniformLocation( program, 'projectionMatrix' ),\n\n\t\t\tfogType: gl.getUniformLocation( program, 'fogType' ),\n\t\t\tfogDensity: gl.getUniformLocation( program, 'fogDensity' ),\n\t\t\tfogNear: gl.getUniformLocation( program, 'fogNear' ),\n\t\t\tfogFar: gl.getUniformLocation( program, 'fogFar' ),\n\t\t\tfogColor: gl.getUniformLocation( program, 'fogColor' ),\n\t\t\tfogDepth: gl.getUniformLocation( program, 'fogDepth' ),\n\n\t\t\talphaTest: gl.getUniformLocation( program, 'alphaTest' )\n\t\t};\n\n\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\tcanvas.width = 8;\n\t\tcanvas.height = 8;\n\n\t\tvar context = canvas.getContext( '2d' );\n\t\tcontext.fillStyle = 'white';\n\t\tcontext.fillRect( 0, 0, 8, 8 );\n\n\t\ttexture = new CanvasTexture( canvas );\n\n\t}\n\n\tthis.render = function ( sprites, scene, camera ) {\n\n\t\tif ( sprites.length === 0 ) return;\n\n\t\t// setup gl\n\n\t\tif ( program === undefined ) {\n\n\t\t\tinit();\n\n\t\t}\n\n\t\tstate.useProgram( program );\n\n\t\tstate.initAttributes();\n\t\tstate.enableAttribute( attributes.position );\n\t\tstate.enableAttribute( attributes.uv );\n\t\tstate.disableUnusedAttributes();\n\n\t\tstate.disable( gl.CULL_FACE );\n\t\tstate.enable( gl.BLEND );\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n\t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\n\n\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\tgl.uniform1i( uniforms.map, 0 );\n\n\t\tvar oldFogType = 0;\n\t\tvar sceneFogType = 0;\n\t\tvar fog = scene.fog;\n\n\t\tif ( fog ) {\n\n\t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\n\n\t\t\tif ( fog.isFog ) {\n\n\t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\n\t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\n\t\t\t\toldFogType = 1;\n\t\t\t\tsceneFogType = 1;\n\n\t\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\n\t\t\t\toldFogType = 2;\n\t\t\t\tsceneFogType = 2;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl.uniform1i( uniforms.fogType, 0 );\n\t\t\toldFogType = 0;\n\t\t\tsceneFogType = 0;\n\n\t\t}\n\n\n\t\t// update positions and sort\n\n\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n\t\t\tvar sprite = sprites[ i ];\n\n\t\t\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\n\t\t\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\n\n\t\t}\n\n\t\tsprites.sort( painterSortStable );\n\n\t\t// render all sprites\n\n\t\tvar scale = [];\n\t\tvar center = [];\n\n\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n\t\t\tvar sprite = sprites[ i ];\n\t\t\tvar material = sprite.material;\n\n\t\t\tif ( material.visible === false ) continue;\n\n\t\t\tsprite.onBeforeRender( renderer, scene, camera, undefined, material, undefined );\n\n\t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\n\t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\n\n\t\t\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\n\n\t\t\tscale[ 0 ] = spriteScale.x;\n\t\t\tscale[ 1 ] = spriteScale.y;\n\n\t\t\tcenter[ 0 ] = sprite.center.x - 0.5;\n\t\t\tcenter[ 1 ] = sprite.center.y - 0.5;\n\n\t\t\tvar fogType = 0;\n\n\t\t\tif ( scene.fog && material.fog ) {\n\n\t\t\t\tfogType = sceneFogType;\n\n\t\t\t}\n\n\t\t\tif ( oldFogType !== fogType ) {\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\n\t\t\t\toldFogType = fogType;\n\n\t\t\t}\n\n\t\t\tif ( material.map !== null ) {\n\n\t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\n\t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\n\n\t\t\t} else {\n\n\t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\n\t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\n\n\t\t\t}\n\n\t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\n\t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\n\n\t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\n\t\t\tgl.uniform2fv( uniforms.center, center );\n\t\t\tgl.uniform2fv( uniforms.scale, scale );\n\n\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\t\t\tstate.buffers.depth.setTest( material.depthTest );\n\t\t\tstate.buffers.depth.setMask( material.depthWrite );\n\t\t\tstate.buffers.color.setMask( material.colorWrite );\n\n\t\t\ttextures.setTexture2D( material.map || texture, 0 );\n\n\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\t\t\tsprite.onAfterRender( renderer, scene, camera, undefined, material, undefined );\n\n\t\t}\n\n\t\t// restore gl\n\n\t\tstate.enable( gl.CULL_FACE );\n\n\t\tstate.reset();\n\n\t};\n\n\tfunction createProgram() {\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\n\t\tgl.shaderSource( vertexShader, [\n\n\t\t\t'precision ' + capabilities.precision + ' float;',\n\n\t\t\t'#define SHADER_NAME ' + 'SpriteMaterial',\n\n\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t'uniform float rotation;',\n\t\t\t'uniform vec2 center;',\n\t\t\t'uniform vec2 scale;',\n\t\t\t'uniform vec2 uvOffset;',\n\t\t\t'uniform vec2 uvScale;',\n\n\t\t\t'attribute vec2 position;',\n\t\t\t'attribute vec2 uv;',\n\n\t\t\t'varying vec2 vUV;',\n\t\t\t'varying float fogDepth;',\n\n\t\t\t'void main() {',\n\n\t\t\t'\tvUV = uvOffset + uv * uvScale;',\n\n\t\t\t'\tvec2 alignedPosition = ( position - center ) * scale;',\n\n\t\t\t'\tvec2 rotatedPosition;',\n\t\t\t'\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\n\t\t\t'\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\n\n\t\t\t'\tvec4 mvPosition;',\n\n\t\t\t'\tmvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\n\t\t\t'\tmvPosition.xy += rotatedPosition;',\n\n\t\t\t'\tgl_Position = projectionMatrix * mvPosition;',\n\n\t\t\t'\tfogDepth = - mvPosition.z;',\n\n\t\t\t'}'\n\n\t\t].join( '\\n' ) );\n\n\t\tgl.shaderSource( fragmentShader, [\n\n\t\t\t'precision ' + capabilities.precision + ' float;',\n\n\t\t\t'#define SHADER_NAME ' + 'SpriteMaterial',\n\n\t\t\t'uniform vec3 color;',\n\t\t\t'uniform sampler2D map;',\n\t\t\t'uniform float opacity;',\n\n\t\t\t'uniform int fogType;',\n\t\t\t'uniform vec3 fogColor;',\n\t\t\t'uniform float fogDensity;',\n\t\t\t'uniform float fogNear;',\n\t\t\t'uniform float fogFar;',\n\t\t\t'uniform float alphaTest;',\n\n\t\t\t'varying vec2 vUV;',\n\t\t\t'varying float fogDepth;',\n\n\t\t\t'void main() {',\n\n\t\t\t'\tvec4 texture = texture2D( map, vUV );',\n\n\t\t\t'\tgl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\n\n\t\t\t'\tif ( gl_FragColor.a < alphaTest ) discard;',\n\n\t\t\t'\tif ( fogType > 0 ) {',\n\n\t\t\t'\t\tfloat fogFactor = 0.0;',\n\n\t\t\t'\t\tif ( fogType == 1 ) {',\n\n\t\t\t'\t\t\tfogFactor = smoothstep( fogNear, fogFar, fogDepth );',\n\n\t\t\t'\t\t} else {',\n\n\t\t\t'\t\t\tconst float LOG2 = 1.442695;',\n\t\t\t'\t\t\tfogFactor = exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 );',\n\t\t\t'\t\t\tfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\n\n\t\t\t'\t\t}',\n\n\t\t\t'\t\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );',\n\n\t\t\t'\t}',\n\n\t\t\t'}'\n\n\t\t].join( '\\n' ) );\n\n\t\tgl.compileShader( vertexShader );\n\t\tgl.compileShader( fragmentShader );\n\n\t\tgl.attachShader( program, vertexShader );\n\t\tgl.attachShader( program, fragmentShader );\n\n\t\tgl.linkProgram( program );\n\n\t\treturn program;\n\n\t}\n\n\tfunction painterSortStable( a, b ) {\n\n\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else {\n\n\t\t\treturn b.id - a.id;\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLState( gl, extensions, utils ) {\n\n\tfunction ColorBuffer() {\n\n\t\tvar locked = false;\n\n\t\tvar color = new Vector4();\n\t\tvar currentColorMask = null;\n\t\tvar currentColorClear = new Vector4( 0, 0, 0, 0 );\n\n\t\treturn {\n\n\t\t\tsetMask: function ( colorMask ) {\n\n\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\n\n\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t\t}\n\n\t\t\t\tcolor.set( r, g, b, a );\n\n\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentColorMask = null;\n\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction DepthBuffer() {\n\n\t\tvar locked = false;\n\n\t\tvar currentDepthMask = null;\n\t\tvar currentDepthFunc = null;\n\t\tvar currentDepthClear = null;\n\n\t\treturn {\n\n\t\t\tsetTest: function ( depthTest ) {\n\n\t\t\t\tif ( depthTest ) {\n\n\t\t\t\t\tenable( gl.DEPTH_TEST );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdisable( gl.DEPTH_TEST );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetMask: function ( depthMask ) {\n\n\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetFunc: function ( depthFunc ) {\n\n\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\t\tif ( depthFunc ) {\n\n\t\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase LessDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.LESS );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( depth ) {\n\n\t\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentDepthMask = null;\n\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\tcurrentDepthClear = null;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction StencilBuffer() {\n\n\t\tvar locked = false;\n\n\t\tvar currentStencilMask = null;\n\t\tvar currentStencilFunc = null;\n\t\tvar currentStencilRef = null;\n\t\tvar currentStencilFuncMask = null;\n\t\tvar currentStencilFail = null;\n\t\tvar currentStencilZFail = null;\n\t\tvar currentStencilZPass = null;\n\t\tvar currentStencilClear = null;\n\n\t\treturn {\n\n\t\t\tsetTest: function ( stencilTest ) {\n\n\t\t\t\tif ( stencilTest ) {\n\n\t\t\t\t\tenable( gl.STENCIL_TEST );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdisable( gl.STENCIL_TEST );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetMask: function ( stencilMask ) {\n\n\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t     currentStencilRef \t!== stencilRef \t||\n\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( stencil ) {\n\n\t\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentStencilMask = null;\n\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\tcurrentStencilRef = null;\n\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\tcurrentStencilFail = null;\n\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\tcurrentStencilClear = null;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t//\n\n\tvar colorBuffer = new ColorBuffer();\n\tvar depthBuffer = new DepthBuffer();\n\tvar stencilBuffer = new StencilBuffer();\n\n\tvar maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\tvar newAttributes = new Uint8Array( maxVertexAttributes );\n\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\n\tvar capabilities = {};\n\n\tvar compressedTextureFormats = null;\n\n\tvar currentProgram = null;\n\n\tvar currentBlending = null;\n\tvar currentBlendEquation = null;\n\tvar currentBlendSrc = null;\n\tvar currentBlendDst = null;\n\tvar currentBlendEquationAlpha = null;\n\tvar currentBlendSrcAlpha = null;\n\tvar currentBlendDstAlpha = null;\n\tvar currentPremultipledAlpha = false;\n\n\tvar currentFlipSided = null;\n\tvar currentCullFace = null;\n\n\tvar currentLineWidth = null;\n\n\tvar currentPolygonOffsetFactor = null;\n\tvar currentPolygonOffsetUnits = null;\n\n\tvar maxTextures = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );\n\n\tvar lineWidthAvailable = false;\n\tvar version = 0;\n\tvar glVersion = gl.getParameter( gl.VERSION );\n\n\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\n\n\t   version = parseFloat( /^WebGL\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t   lineWidthAvailable = ( version >= 1.0 );\n\n\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\n\n\t   version = parseFloat( /^OpenGL\\ ES\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t   lineWidthAvailable = ( version >= 2.0 );\n\n\t}\n\n\tvar currentTextureSlot = null;\n\tvar currentBoundTextures = {};\n\n\tvar currentScissor = new Vector4();\n\tvar currentViewport = new Vector4();\n\n\tfunction createTexture( type, target, count ) {\n\n\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\tvar texture = gl.createTexture();\n\n\t\tgl.bindTexture( type, texture );\n\t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\n\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tvar emptyTextures = {};\n\temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\n\temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\n\n\t// init\n\n\tcolorBuffer.setClear( 0, 0, 0, 1 );\n\tdepthBuffer.setClear( 1 );\n\tstencilBuffer.setClear( 0 );\n\n\tenable( gl.DEPTH_TEST );\n\tdepthBuffer.setFunc( LessEqualDepth );\n\n\tsetFlipSided( false );\n\tsetCullFace( CullFaceBack );\n\tenable( gl.CULL_FACE );\n\n\tenable( gl.BLEND );\n\tsetBlending( NormalBlending );\n\n\t//\n\n\tfunction initAttributes() {\n\n\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\n\t\t\tnewAttributes[ i ] = 0;\n\n\t\t}\n\n\t}\n\n\tfunction enableAttribute( attribute ) {\n\n\t\tnewAttributes[ attribute ] = 1;\n\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t}\n\n\t\tif ( attributeDivisors[ attribute ] !== 0 ) {\n\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\textension.vertexAttribDivisorANGLE( attribute, 0 );\n\t\t\tattributeDivisors[ attribute ] = 0;\n\n\t\t}\n\n\t}\n\n\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\n\n\t\tnewAttributes[ attribute ] = 1;\n\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t}\n\n\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\n\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t}\n\n\t}\n\n\tfunction disableUnusedAttributes() {\n\n\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\n\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction enable( id ) {\n\n\t\tif ( capabilities[ id ] !== true ) {\n\n\t\t\tgl.enable( id );\n\t\t\tcapabilities[ id ] = true;\n\n\t\t}\n\n\t}\n\n\tfunction disable( id ) {\n\n\t\tif ( capabilities[ id ] !== false ) {\n\n\t\t\tgl.disable( id );\n\t\t\tcapabilities[ id ] = false;\n\n\t\t}\n\n\t}\n\n\tfunction getCompressedTextureFormats() {\n\n\t\tif ( compressedTextureFormats === null ) {\n\n\t\t\tcompressedTextureFormats = [];\n\n\t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\n\t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\n\t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ||\n\t\t\t     extensions.get( 'WEBGL_compressed_texture_astc' ) ) {\n\n\t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\n\n\t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\n\n\t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn compressedTextureFormats;\n\n\t}\n\n\tfunction useProgram( program ) {\n\n\t\tif ( currentProgram !== program ) {\n\n\t\t\tgl.useProgram( program );\n\n\t\t\tcurrentProgram = program;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\tif ( blending !== NoBlending ) {\n\n\t\t\tenable( gl.BLEND );\n\n\t\t} else {\n\n\t\t\tdisable( gl.BLEND );\n\n\t\t}\n\n\t\tif ( blending !== CustomBlending ) {\n\n\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\tcase AdditiveBlending:\n\n\t\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase SubtractiveBlending:\n\n\t\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MultiplyBlending:\n\n\t\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tcurrentBlendEquation = null;\n\t\t\tcurrentBlendSrc = null;\n\t\t\tcurrentBlendDst = null;\n\t\t\tcurrentBlendEquationAlpha = null;\n\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t} else {\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\t\tgl.blendEquationSeparate( utils.convert( blendEquation ), utils.convert( blendEquationAlpha ) );\n\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t\t}\n\n\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\t\tgl.blendFuncSeparate( utils.convert( blendSrc ), utils.convert( blendDst ), utils.convert( blendSrcAlpha ), utils.convert( blendDstAlpha ) );\n\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t\t}\n\n\t\t}\n\n\t\tcurrentBlending = blending;\n\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t}\n\n\tfunction setMaterial( material, frontFaceCW ) {\n\n\t\tmaterial.side === DoubleSide\n\t\t\t? disable( gl.CULL_FACE )\n\t\t\t: enable( gl.CULL_FACE );\n\n\t\tvar flipSided = ( material.side === BackSide );\n\t\tif ( frontFaceCW ) flipSided = ! flipSided;\n\n\t\tsetFlipSided( flipSided );\n\n\t\tmaterial.transparent === true\n\t\t\t? setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha )\n\t\t\t: setBlending( NoBlending );\n\n\t\tdepthBuffer.setFunc( material.depthFunc );\n\t\tdepthBuffer.setTest( material.depthTest );\n\t\tdepthBuffer.setMask( material.depthWrite );\n\t\tcolorBuffer.setMask( material.colorWrite );\n\n\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t}\n\n\t//\n\n\tfunction setFlipSided( flipSided ) {\n\n\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\tif ( flipSided ) {\n\n\t\t\t\tgl.frontFace( gl.CW );\n\n\t\t\t} else {\n\n\t\t\t\tgl.frontFace( gl.CCW );\n\n\t\t\t}\n\n\t\t\tcurrentFlipSided = flipSided;\n\n\t\t}\n\n\t}\n\n\tfunction setCullFace( cullFace ) {\n\n\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\tenable( gl.CULL_FACE );\n\n\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\tgl.cullFace( gl.BACK );\n\n\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\tgl.cullFace( gl.FRONT );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdisable( gl.CULL_FACE );\n\n\t\t}\n\n\t\tcurrentCullFace = cullFace;\n\n\t}\n\n\tfunction setLineWidth( width ) {\n\n\t\tif ( width !== currentLineWidth ) {\n\n\t\t\tif ( lineWidthAvailable ) gl.lineWidth( width );\n\n\t\t\tcurrentLineWidth = width;\n\n\t\t}\n\n\t}\n\n\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n\t\tif ( polygonOffset ) {\n\n\t\t\tenable( gl.POLYGON_OFFSET_FILL );\n\n\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdisable( gl.POLYGON_OFFSET_FILL );\n\n\t\t}\n\n\t}\n\n\tfunction setScissorTest( scissorTest ) {\n\n\t\tif ( scissorTest ) {\n\n\t\t\tenable( gl.SCISSOR_TEST );\n\n\t\t} else {\n\n\t\t\tdisable( gl.SCISSOR_TEST );\n\n\t\t}\n\n\t}\n\n\t// texture\n\n\tfunction activeTexture( webglSlot ) {\n\n\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\tgl.activeTexture( webglSlot );\n\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t}\n\n\t}\n\n\tfunction bindTexture( webglType, webglTexture ) {\n\n\t\tif ( currentTextureSlot === null ) {\n\n\t\t\tactiveTexture();\n\n\t\t}\n\n\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\tif ( boundTexture === undefined ) {\n\n\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t}\n\n\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\tboundTexture.type = webglType;\n\t\t\tboundTexture.texture = webglTexture;\n\n\t\t}\n\n\t}\n\n\tfunction compressedTexImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction scissor( scissor ) {\n\n\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\tcurrentScissor.copy( scissor );\n\n\t\t}\n\n\t}\n\n\tfunction viewport( viewport ) {\n\n\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\tcurrentViewport.copy( viewport );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction reset() {\n\n\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\n\t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\n\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tcapabilities = {};\n\n\t\tcompressedTextureFormats = null;\n\n\t\tcurrentTextureSlot = null;\n\t\tcurrentBoundTextures = {};\n\n\t\tcurrentProgram = null;\n\n\t\tcurrentBlending = null;\n\n\t\tcurrentFlipSided = null;\n\t\tcurrentCullFace = null;\n\n\t\tcolorBuffer.reset();\n\t\tdepthBuffer.reset();\n\t\tstencilBuffer.reset();\n\n\t}\n\n\treturn {\n\n\t\tbuffers: {\n\t\t\tcolor: colorBuffer,\n\t\t\tdepth: depthBuffer,\n\t\t\tstencil: stencilBuffer\n\t\t},\n\n\t\tinitAttributes: initAttributes,\n\t\tenableAttribute: enableAttribute,\n\t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\n\t\tdisableUnusedAttributes: disableUnusedAttributes,\n\t\tenable: enable,\n\t\tdisable: disable,\n\t\tgetCompressedTextureFormats: getCompressedTextureFormats,\n\n\t\tuseProgram: useProgram,\n\n\t\tsetBlending: setBlending,\n\t\tsetMaterial: setMaterial,\n\n\t\tsetFlipSided: setFlipSided,\n\t\tsetCullFace: setCullFace,\n\n\t\tsetLineWidth: setLineWidth,\n\t\tsetPolygonOffset: setPolygonOffset,\n\n\t\tsetScissorTest: setScissorTest,\n\n\t\tactiveTexture: activeTexture,\n\t\tbindTexture: bindTexture,\n\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\ttexImage2D: texImage2D,\n\n\t\tscissor: scissor,\n\t\tviewport: viewport,\n\n\t\treset: reset\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\n\n\tvar _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext ); /* global WebGL2RenderingContext */\n\tvar _videoTextures = {};\n\tvar _canvas;\n\n\t//\n\n\tfunction clampToMaxSize( image, maxSize ) {\n\n\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\tif ( 'data' in image ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// Warning: Scaling through the canvas will only work with images that use\n\t\t\t// premultiplied alpha.\n\n\t\t\tvar scale = maxSize / Math.max( image.width, image.height );\n\n\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\tcanvas.width = Math.floor( image.width * scale );\n\t\t\tcanvas.height = Math.floor( image.height * scale );\n\n\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n\t\t\treturn canvas;\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction isPowerOfTwo( image ) {\n\n\t\treturn _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );\n\n\t}\n\n\tfunction makePowerOfTwo( image ) {\n\n\t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement || image instanceof ImageBitmap ) {\n\n\t\t\tif ( _canvas === undefined ) _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\n\t\t\t_canvas.width = _Math.floorPowerOfTwo( image.width );\n\t\t\t_canvas.height = _Math.floorPowerOfTwo( image.height );\n\n\t\t\tvar context = _canvas.getContext( '2d' );\n\t\t\tcontext.drawImage( image, 0, 0, _canvas.width, _canvas.height );\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + _canvas.width + 'x' + _canvas.height, image );\n\n\t\t\treturn _canvas;\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n\n\t}\n\n\tfunction textureNeedsGenerateMipmaps( texture, isPowerOfTwo ) {\n\n\t\treturn texture.generateMipmaps && isPowerOfTwo &&\n\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t}\n\n\tfunction generateMipmap( target, texture, width, height ) {\n\n\t\t_gl.generateMipmap( target );\n\n\t\tvar textureProperties = properties.get( texture );\n\t\ttextureProperties.__maxMipLevel = Math.log2( Math.max( width, height ) );\n\n\t}\n\n\t// Fallback filters for non-power-of-2 textures\n\n\tfunction filterFallback( f ) {\n\n\t\tif ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {\n\n\t\t\treturn _gl.NEAREST;\n\n\t\t}\n\n\t\treturn _gl.LINEAR;\n\n\t}\n\n\t//\n\n\tfunction onTextureDispose( event ) {\n\n\t\tvar texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tdeallocateTexture( texture );\n\n\t\tif ( texture.isVideoTexture ) {\n\n\t\t\tdelete _videoTextures[ texture.id ];\n\n\t\t}\n\n\t\tinfo.memory.textures --;\n\n\t}\n\n\tfunction onRenderTargetDispose( event ) {\n\n\t\tvar renderTarget = event.target;\n\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tdeallocateRenderTarget( renderTarget );\n\n\t\tinfo.memory.textures --;\n\n\t}\n\n\t//\n\n\tfunction deallocateTexture( texture ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\n\n\t\t\t// cube texture\n\n\t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\n\n\t\t} else {\n\n\t\t\t// 2D texture\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t}\n\n\t\t// remove all webgl properties\n\t\tproperties.remove( texture );\n\n\t}\n\n\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\tif ( ! renderTarget ) return;\n\n\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t}\n\n\t\tif ( renderTarget.isWebGLRenderTargetCube ) {\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\n\t\t}\n\n\t\tproperties.remove( renderTarget.texture );\n\t\tproperties.remove( renderTarget );\n\n\t}\n\n\t//\n\n\n\n\tfunction setTexture2D( texture, slot ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.isVideoTexture ) updateVideoTexture( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tvar image = texture.image;\n\n\t\t\tif ( image === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\n\n\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\n\n\t\t\t} else {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t}\n\n\tfunction setTextureCube( texture, slot ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.image.length === 6 ) {\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\n\n\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\n\n\t\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n\t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\n\t\t\t\tvar isCompressed = ( texture && texture.isCompressedTexture );\n\t\t\t\tvar isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\t\t\tvar cubeImage = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar image = cubeImage[ 0 ],\n\t\t\t\t\tisPowerOfTwoImage = isPowerOfTwo( image ),\n\t\t\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( ! isCompressed ) {\n\n\t\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tmipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! isCompressed ) {\n\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) {\n\n\t\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\t\tgenerateMipmap( _gl.TEXTURE_CUBE_MAP, texture, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t\t} else {\n\n\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction setTextureCubeDynamic( texture, slot ) {\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\n\n\t}\n\n\tfunction setTextureParameters( textureType, texture, isPowerOfTwoImage ) {\n\n\t\tvar extension;\n\n\t\tif ( isPowerOfTwoImage ) {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, utils.convert( texture.wrapS ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, utils.convert( texture.wrapT ) );\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, utils.convert( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, utils.convert( texture.minFilter ) );\n\n\t\t} else {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\n\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\n\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\n\n\t\t\t}\n\n\t\t}\n\n\t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\tif ( extension ) {\n\n\t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\n\t\t\tif ( texture.type === HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\n\n\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\tinfo.memory.textures ++;\n\n\t\t}\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\n\t\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\n\n\t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\n\n\t\t\timage = makePowerOfTwo( image );\n\n\t\t}\n\n\t\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\n\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\tglType = utils.convert( texture.type );\n\n\t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\n\n\t\tvar mipmap, mipmaps = texture.mipmaps;\n\n\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t// populate depth texture with dummy data\n\n\t\t\tvar internalFormat = _gl.DEPTH_COMPONENT;\n\n\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\tif ( ! _isWebGL2 ) throw new Error( 'Float Depth Texture only supported in WebGL2.0' );\n\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT32F;\n\n\t\t\t} else if ( _isWebGL2 ) {\n\n\t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT16;\n\n\t\t\t}\n\n\t\t\tif ( texture.format === DepthFormat && internalFormat === _gl.DEPTH_COMPONENT ) {\n\n\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n\n\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\tif ( texture.format === DepthStencilFormat ) {\n\n\t\t\t\tinternalFormat = _gl.DEPTH_STENCIL;\n\n\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n\n\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t// use manually created mipmaps if available\n\t\t\t// if there are no manual mipmaps\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t}\n\n\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t} else {\n\n\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t// use manually created mipmaps if available\n\t\t\t// if there are no manual mipmaps\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) {\n\n\t\t\tgenerateMipmap( _gl.TEXTURE_2D, texture, image.width, image.height );\n\n\t\t}\n\n\t\ttextureProperties.__version = texture.version;\n\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t}\n\n\t// Render targets\n\n\t// Setup storage for target texture and bind it to correct framebuffer\n\tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\n\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\tstate.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t}\n\n\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\tfunction setupRenderBufferStorage( renderbuffer, renderTarget ) {\n\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\n\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else {\n\n\t\t\t// FIXME: We don't support !depth !stencil\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\n\n\t\t}\n\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n\t}\n\n\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\n\t\tif ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );\n\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n\n\t\t}\n\n\t\t// upload an empty depth texture with framebuffer size\n\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\n\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\n\t\t}\n\n\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\n\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'Unknown depthTexture format' );\n\n\t\t}\n\n\t}\n\n\t// Setup GL resources for a non-texture depth buffer\n\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\tif ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );\n\n\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t} else {\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t}\n\n\t// Set up GL resources for the render target\n\tfunction setupRenderTarget( renderTarget ) {\n\n\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\tinfo.memory.textures ++;\n\n\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\n\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\n\t\t// Setup framebuffer\n\n\t\tif ( isCube ) {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t}\n\n\t\t// Setup color buffer\n\n\t\tif ( isCube ) {\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) {\n\n\t\t\t\tgenerateMipmap( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\n\t\t} else {\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\n\n\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) {\n\n\t\t\t\tgenerateMipmap( _gl.TEXTURE_2D, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\n\n\t\t}\n\n\t\t// Setup depth and stencil buffers\n\n\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t}\n\n\t}\n\n\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\tvar texture = renderTarget.texture;\n\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\n\t\tif ( textureNeedsGenerateMipmaps( texture, isTargetPowerOfTwo ) ) {\n\n\t\t\tvar target = renderTarget.isWebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\tgenerateMipmap( target, texture, renderTarget.width, renderTarget.height );\n\t\t\tstate.bindTexture( target, null );\n\n\t\t}\n\n\t}\n\n\tfunction updateVideoTexture( texture ) {\n\n\t\tvar id = texture.id;\n\t\tvar frame = info.render.frame;\n\n\t\t// Check the last frame we updated the VideoTexture\n\n\t\tif ( _videoTextures[ id ] !== frame ) {\n\n\t\t\t_videoTextures[ id ] = frame;\n\t\t\ttexture.update();\n\n\t\t}\n\n\t}\n\n\tthis.setTexture2D = setTexture2D;\n\tthis.setTextureCube = setTextureCube;\n\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\tthis.setupRenderTarget = setupRenderTarget;\n\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\n}\n\n/**\n * @author thespite / http://www.twitter.com/thespite\n */\n\nfunction WebGLUtils( gl, extensions ) {\n\n\tfunction convert( p ) {\n\n\t\tvar extension;\n\n\t\tif ( p === RepeatWrapping ) return gl.REPEAT;\n\t\tif ( p === ClampToEdgeWrapping ) return gl.CLAMP_TO_EDGE;\n\t\tif ( p === MirroredRepeatWrapping ) return gl.MIRRORED_REPEAT;\n\n\t\tif ( p === NearestFilter ) return gl.NEAREST;\n\t\tif ( p === NearestMipMapNearestFilter ) return gl.NEAREST_MIPMAP_NEAREST;\n\t\tif ( p === NearestMipMapLinearFilter ) return gl.NEAREST_MIPMAP_LINEAR;\n\n\t\tif ( p === LinearFilter ) return gl.LINEAR;\n\t\tif ( p === LinearMipMapNearestFilter ) return gl.LINEAR_MIPMAP_NEAREST;\n\t\tif ( p === LinearMipMapLinearFilter ) return gl.LINEAR_MIPMAP_LINEAR;\n\n\t\tif ( p === UnsignedByteType ) return gl.UNSIGNED_BYTE;\n\t\tif ( p === UnsignedShort4444Type ) return gl.UNSIGNED_SHORT_4_4_4_4;\n\t\tif ( p === UnsignedShort5551Type ) return gl.UNSIGNED_SHORT_5_5_5_1;\n\t\tif ( p === UnsignedShort565Type ) return gl.UNSIGNED_SHORT_5_6_5;\n\n\t\tif ( p === ByteType ) return gl.BYTE;\n\t\tif ( p === ShortType ) return gl.SHORT;\n\t\tif ( p === UnsignedShortType ) return gl.UNSIGNED_SHORT;\n\t\tif ( p === IntType ) return gl.INT;\n\t\tif ( p === UnsignedIntType ) return gl.UNSIGNED_INT;\n\t\tif ( p === FloatType ) return gl.FLOAT;\n\n\t\tif ( p === HalfFloatType ) {\n\n\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\t\tif ( extension !== null ) return extension.HALF_FLOAT_OES;\n\n\t\t}\n\n\t\tif ( p === AlphaFormat ) return gl.ALPHA;\n\t\tif ( p === RGBFormat ) return gl.RGB;\n\t\tif ( p === RGBAFormat ) return gl.RGBA;\n\t\tif ( p === LuminanceFormat ) return gl.LUMINANCE;\n\t\tif ( p === LuminanceAlphaFormat ) return gl.LUMINANCE_ALPHA;\n\t\tif ( p === DepthFormat ) return gl.DEPTH_COMPONENT;\n\t\tif ( p === DepthStencilFormat ) return gl.DEPTH_STENCIL;\n\n\t\tif ( p === AddEquation ) return gl.FUNC_ADD;\n\t\tif ( p === SubtractEquation ) return gl.FUNC_SUBTRACT;\n\t\tif ( p === ReverseSubtractEquation ) return gl.FUNC_REVERSE_SUBTRACT;\n\n\t\tif ( p === ZeroFactor ) return gl.ZERO;\n\t\tif ( p === OneFactor ) return gl.ONE;\n\t\tif ( p === SrcColorFactor ) return gl.SRC_COLOR;\n\t\tif ( p === OneMinusSrcColorFactor ) return gl.ONE_MINUS_SRC_COLOR;\n\t\tif ( p === SrcAlphaFactor ) return gl.SRC_ALPHA;\n\t\tif ( p === OneMinusSrcAlphaFactor ) return gl.ONE_MINUS_SRC_ALPHA;\n\t\tif ( p === DstAlphaFactor ) return gl.DST_ALPHA;\n\t\tif ( p === OneMinusDstAlphaFactor ) return gl.ONE_MINUS_DST_ALPHA;\n\n\t\tif ( p === DstColorFactor ) return gl.DST_COLOR;\n\t\tif ( p === OneMinusDstColorFactor ) return gl.ONE_MINUS_DST_COLOR;\n\t\tif ( p === SrcAlphaSaturateFactor ) return gl.SRC_ALPHA_SATURATE;\n\n\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\n\t\t\tp === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\n\t\t\tp === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === RGB_ETC1_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\t\tif ( extension !== null ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t}\n\n\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn p;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === MinEquation || p === MaxEquation ) {\n\n\t\t\textension = extensions.get( 'EXT_blend_minmax' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === MinEquation ) return extension.MIN_EXT;\n\t\t\t\tif ( p === MaxEquation ) return extension.MAX_EXT;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n\t\t\tif ( extension !== null ) return extension.UNSIGNED_INT_24_8_WEBGL;\n\n\t\t}\n\n\t\treturn 0;\n\n\t}\n\n\treturn { convert: convert };\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author greggman / http://games.greggman.com/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author tschw\n */\n\nfunction PerspectiveCamera( fov, aspect, near, far ) {\n\n\tCamera.call( this );\n\n\tthis.type = 'PerspectiveCamera';\n\n\tthis.fov = fov !== undefined ? fov : 50;\n\tthis.zoom = 1;\n\n\tthis.near = near !== undefined ? near : 0.1;\n\tthis.far = far !== undefined ? far : 2000;\n\tthis.focus = 10;\n\n\tthis.aspect = aspect !== undefined ? aspect : 1;\n\tthis.view = null;\n\n\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\tthis.updateProjectionMatrix();\n\n}\n\nPerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\tconstructor: PerspectiveCamera,\n\n\tisPerspectiveCamera: true,\n\n\tcopy: function ( source, recursive ) {\n\n\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\tthis.fov = source.fov;\n\t\tthis.zoom = source.zoom;\n\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\t\tthis.focus = source.focus;\n\n\t\tthis.aspect = source.aspect;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\tthis.filmGauge = source.filmGauge;\n\t\tthis.filmOffset = source.filmOffset;\n\n\t\treturn this;\n\n\t},\n\n\t/**\n\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t *\n\t * The default film gauge is 35, so that the focal length can be specified for\n\t * a 35mm (full frame) camera.\n\t *\n\t * Values for focal length and film gauge must have the same unit.\n\t */\n\tsetFocalLength: function ( focalLength ) {\n\n\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\tthis.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\t/**\n\t * Calculates the focal length from the current .fov and .filmGauge.\n\t */\n\tgetFocalLength: function () {\n\n\t\tvar vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );\n\n\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t},\n\n\tgetEffectiveFOV: function () {\n\n\t\treturn _Math.RAD2DEG * 2 * Math.atan(\n\t\t\tMath.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t},\n\n\tgetFilmWidth: function () {\n\n\t\t// film not completely covered in portrait format (aspect < 1)\n\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t},\n\n\tgetFilmHeight: function () {\n\n\t\t// film not completely covered in landscape format (aspect > 1)\n\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t},\n\n\t/**\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t * multi-monitor/multi-machine setups.\n\t *\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t * the monitors are in grid like this\n\t *\n\t *   +---+---+---+\n\t *   | A | B | C |\n\t *   +---+---+---+\n\t *   | D | E | F |\n\t *   +---+---+---+\n\t *\n\t * then for each monitor you would call it like this\n\t *\n\t *   var w = 1920;\n\t *   var h = 1080;\n\t *   var fullWidth = w * 3;\n\t *   var fullHeight = h * 2;\n\t *\n\t *   --A--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t *   --B--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t *   --C--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t *   --D--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t *   --E--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t *   --F--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t *\n\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t */\n\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tclearViewOffset: function () {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tupdateProjectionMatrix: function () {\n\n\t\tvar near = this.near,\n\t\t\ttop = near * Math.tan(\n\t\t\t\t_Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t\t\theight = 2 * top,\n\t\t\twidth = this.aspect * height,\n\t\t\tleft = - 0.5 * width,\n\t\t\tview = this.view;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\twidth *= view.width / fullWidth;\n\t\t\theight *= view.height / fullHeight;\n\n\t\t}\n\n\t\tvar skew = this.filmOffset;\n\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.fov = this.fov;\n\t\tdata.object.zoom = this.zoom;\n\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\t\tdata.object.focus = this.focus;\n\n\t\tdata.object.aspect = this.aspect;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\tdata.object.filmGauge = this.filmGauge;\n\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\treturn data;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction ArrayCamera( array ) {\n\n\tPerspectiveCamera.call( this );\n\n\tthis.cameras = array || [];\n\n}\n\nArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {\n\n\tconstructor: ArrayCamera,\n\n\tisArrayCamera: true\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction WebVRManager( renderer ) {\n\n\tvar scope = this;\n\n\tvar device = null;\n\tvar frameData = null;\n\n\tvar poseTarget = null;\n\n\tvar standingMatrix = new Matrix4();\n\tvar standingMatrixInverse = new Matrix4();\n\n\tif ( typeof window !== 'undefined' && 'VRFrameData' in window ) {\n\n\t\tframeData = new window.VRFrameData();\n\n\t}\n\n\tvar matrixWorldInverse = new Matrix4();\n\tvar tempQuaternion = new Quaternion();\n\tvar tempPosition = new Vector3();\n\n\tvar cameraL = new PerspectiveCamera();\n\tcameraL.bounds = new Vector4( 0.0, 0.0, 0.5, 1.0 );\n\tcameraL.layers.enable( 1 );\n\n\tvar cameraR = new PerspectiveCamera();\n\tcameraR.bounds = new Vector4( 0.5, 0.0, 0.5, 1.0 );\n\tcameraR.layers.enable( 2 );\n\n\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\n\tcameraVR.layers.enable( 1 );\n\tcameraVR.layers.enable( 2 );\n\n\t//\n\n\tvar currentSize, currentPixelRatio;\n\n\tfunction onVRDisplayPresentChange() {\n\n\t\tif ( device !== null && device.isPresenting ) {\n\n\t\t\tvar eyeParameters = device.getEyeParameters( 'left' );\n\t\t\tvar renderWidth = eyeParameters.renderWidth;\n\t\t\tvar renderHeight = eyeParameters.renderHeight;\n\n\t\t\tcurrentPixelRatio = renderer.getPixelRatio();\n\t\t\tcurrentSize = renderer.getSize();\n\n\t\t\trenderer.setDrawingBufferSize( renderWidth * 2, renderHeight, 1 );\n\n\t\t} else if ( scope.enabled ) {\n\n\t\t\trenderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );\n\n\t\t}\n\n\t}\n\n\tif ( typeof window !== 'undefined' ) {\n\n\t\twindow.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );\n\n\t}\n\n\t//\n\n\tthis.enabled = false;\n\tthis.userHeight = 1.6;\n\n\tthis.getDevice = function () {\n\n\t\treturn device;\n\n\t};\n\n\tthis.setDevice = function ( value ) {\n\n\t\tif ( value !== undefined ) device = value;\n\n\t};\n\n\tthis.setPoseTarget = function ( object ) {\n\n\t\tif ( object !== undefined ) poseTarget = object;\n\n\t};\n\n\tthis.getCamera = function ( camera ) {\n\n\t\tif ( device === null ) return camera;\n\n\t\tdevice.depthNear = camera.near;\n\t\tdevice.depthFar = camera.far;\n\n\t\tdevice.getFrameData( frameData );\n\n\t\t//\n\n\t\tvar stageParameters = device.stageParameters;\n\n\t\tif ( stageParameters ) {\n\n\t\t\tstandingMatrix.fromArray( stageParameters.sittingToStandingTransform );\n\n\t\t} else {\n\n\t\t\tstandingMatrix.makeTranslation( 0, scope.userHeight, 0 );\n\n\t\t}\n\n\n\t\tvar pose = frameData.pose;\n\t\tvar poseObject = poseTarget !== null ? poseTarget : camera;\n\n\t\t// We want to manipulate poseObject by its position and quaternion components since users may rely on them.\n\t\tposeObject.matrix.copy( standingMatrix );\n\t\tposeObject.matrix.decompose( poseObject.position, poseObject.quaternion, poseObject.scale );\n\n\t\tif ( pose.orientation !== null ) {\n\n\t\t\ttempQuaternion.fromArray( pose.orientation );\n\t\t\tposeObject.quaternion.multiply( tempQuaternion );\n\n\t\t}\n\n\t\tif ( pose.position !== null ) {\n\n\t\t\ttempQuaternion.setFromRotationMatrix( standingMatrix );\n\t\t\ttempPosition.fromArray( pose.position );\n\t\t\ttempPosition.applyQuaternion( tempQuaternion );\n\t\t\tposeObject.position.add( tempPosition );\n\n\t\t}\n\n\t\tposeObject.updateMatrixWorld();\n\n\t\tif ( device.isPresenting === false ) return camera;\n\n\t\t//\n\n\t\tcameraL.near = camera.near;\n\t\tcameraR.near = camera.near;\n\n\t\tcameraL.far = camera.far;\n\t\tcameraR.far = camera.far;\n\n\t\tcameraVR.matrixWorld.copy( camera.matrixWorld );\n\t\tcameraVR.matrixWorldInverse.copy( camera.matrixWorldInverse );\n\n\t\tcameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );\n\t\tcameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );\n\n\t\t// TODO (mrdoob) Double check this code\n\n\t\tstandingMatrixInverse.getInverse( standingMatrix );\n\n\t\tcameraL.matrixWorldInverse.multiply( standingMatrixInverse );\n\t\tcameraR.matrixWorldInverse.multiply( standingMatrixInverse );\n\n\t\tvar parent = poseObject.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\n\n\t\t\tcameraL.matrixWorldInverse.multiply( matrixWorldInverse );\n\t\t\tcameraR.matrixWorldInverse.multiply( matrixWorldInverse );\n\n\t\t}\n\n\t\t// envMap and Mirror needs camera.matrixWorld\n\n\t\tcameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );\n\t\tcameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );\n\n\t\tcameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );\n\t\tcameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );\n\n\t\t// HACK (mrdoob)\n\t\t// https://github.com/w3c/webvr/issues/203\n\n\t\tcameraVR.projectionMatrix.copy( cameraL.projectionMatrix );\n\n\t\t//\n\n\t\tvar layers = device.getLayers();\n\n\t\tif ( layers.length ) {\n\n\t\t\tvar layer = layers[ 0 ];\n\n\t\t\tif ( layer.leftBounds !== null && layer.leftBounds.length === 4 ) {\n\n\t\t\t\tcameraL.bounds.fromArray( layer.leftBounds );\n\n\t\t\t}\n\n\t\t\tif ( layer.rightBounds !== null && layer.rightBounds.length === 4 ) {\n\n\t\t\t\tcameraR.bounds.fromArray( layer.rightBounds );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn cameraVR;\n\n\t};\n\n\tthis.getStandingMatrix = function () {\n\n\t\treturn standingMatrix;\n\n\t};\n\n\tthis.submitFrame = function () {\n\n\t\tif ( device && device.isPresenting ) device.submitFrame();\n\n\t};\n\n\tthis.dispose = function () {\n\n\t\tif ( typeof window !== 'undefined' ) {\n\n\t\t\twindow.removeEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange );\n\n\t\t}\n\n\t};\n\n}\n\n/**\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author szimek / https://github.com/szimek/\n * @author tschw\n */\n\nfunction WebGLRenderer( parameters ) {\n\n\tconsole.log( 'THREE.WebGLRenderer', REVISION );\n\n\tparameters = parameters || {};\n\n\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default';\n\n\tvar currentRenderList = null;\n\tvar currentRenderState = null;\n\n\t// public properties\n\n\tthis.domElement = _canvas;\n\tthis.context = null;\n\n\t// clearing\n\n\tthis.autoClear = true;\n\tthis.autoClearColor = true;\n\tthis.autoClearDepth = true;\n\tthis.autoClearStencil = true;\n\n\t// scene graph\n\n\tthis.sortObjects = true;\n\n\t// user-defined clipping\n\n\tthis.clippingPlanes = [];\n\tthis.localClippingEnabled = false;\n\n\t// physically based shading\n\n\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\tthis.gammaInput = false;\n\tthis.gammaOutput = false;\n\n\t// physical lights\n\n\tthis.physicallyCorrectLights = false;\n\n\t// tone mapping\n\n\tthis.toneMapping = LinearToneMapping;\n\tthis.toneMappingExposure = 1.0;\n\tthis.toneMappingWhitePoint = 1.0;\n\n\t// morphs\n\n\tthis.maxMorphTargets = 8;\n\tthis.maxMorphNormals = 4;\n\n\t// internal properties\n\n\tvar _this = this,\n\n\t\t_isContextLost = false,\n\n\t\t// internal state cache\n\n\t\t_currentRenderTarget = null,\n\t\t_currentFramebuffer = null,\n\t\t_currentMaterialId = - 1,\n\t\t_currentGeometryProgram = '',\n\n\t\t_currentCamera = null,\n\t\t_currentArrayCamera = null,\n\n\t\t_currentViewport = new Vector4(),\n\t\t_currentScissor = new Vector4(),\n\t\t_currentScissorTest = null,\n\n\t\t//\n\n\t\t_usedTextureUnits = 0,\n\n\t\t//\n\n\t\t_width = _canvas.width,\n\t\t_height = _canvas.height,\n\n\t\t_pixelRatio = 1,\n\n\t\t_viewport = new Vector4( 0, 0, _width, _height ),\n\t\t_scissor = new Vector4( 0, 0, _width, _height ),\n\t\t_scissorTest = false,\n\n\t\t// frustum\n\n\t\t_frustum = new Frustum(),\n\n\t\t// clipping\n\n\t\t_clipping = new WebGLClipping(),\n\t\t_clippingEnabled = false,\n\t\t_localClippingEnabled = false,\n\n\t\t// camera matrices cache\n\n\t\t_projScreenMatrix = new Matrix4(),\n\n\t\t_vector3 = new Vector3();\n\n\tfunction getTargetPixelRatio() {\n\n\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t}\n\n\t// initialize\n\n\tvar _gl;\n\n\ttry {\n\n\t\tvar contextAttributes = {\n\t\t\talpha: _alpha,\n\t\t\tdepth: _depth,\n\t\t\tstencil: _stencil,\n\t\t\tantialias: _antialias,\n\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\tpowerPreference: _powerPreference\n\t\t};\n\n\t\t// event listeners must be registered before WebGL context is created, see #12753\n\n\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );\n\n\t\tif ( _gl === null ) {\n\n\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\n\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t};\n\n\t\t}\n\n\t} catch ( error ) {\n\n\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\n\n\t}\n\n\tvar extensions, capabilities, state, info;\n\tvar properties, textures, attributes, geometries, objects;\n\tvar programCache, renderLists, renderStates;\n\n\tvar background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\tvar spriteRenderer;\n\n\tvar utils;\n\n\tfunction initGLContext() {\n\n\t\textensions = new WebGLExtensions( _gl );\n\t\textensions.get( 'WEBGL_depth_texture' );\n\t\textensions.get( 'OES_texture_float' );\n\t\textensions.get( 'OES_texture_float_linear' );\n\t\textensions.get( 'OES_texture_half_float' );\n\t\textensions.get( 'OES_texture_half_float_linear' );\n\t\textensions.get( 'OES_standard_derivatives' );\n\t\textensions.get( 'OES_element_index_uint' );\n\t\textensions.get( 'ANGLE_instanced_arrays' );\n\n\t\tutils = new WebGLUtils( _gl, extensions );\n\n\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n\t\tstate = new WebGLState( _gl, extensions, utils );\n\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\n\t\tinfo = new WebGLInfo( _gl );\n\t\tproperties = new WebGLProperties();\n\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\n\t\tattributes = new WebGLAttributes( _gl );\n\t\tgeometries = new WebGLGeometries( _gl, attributes, info );\n\t\tobjects = new WebGLObjects( geometries, info );\n\t\tmorphtargets = new WebGLMorphtargets( _gl );\n\t\tprogramCache = new WebGLPrograms( _this, extensions, capabilities );\n\t\trenderLists = new WebGLRenderLists();\n\t\trenderStates = new WebGLRenderStates();\n\n\t\tbackground = new WebGLBackground( _this, state, geometries, _premultipliedAlpha );\n\n\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info );\n\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info );\n\n\t\tspriteRenderer = new WebGLSpriteRenderer( _this, _gl, state, textures, capabilities );\n\n\t\tinfo.programs = programCache.programs;\n\n\t\t_this.context = _gl;\n\t\t_this.capabilities = capabilities;\n\t\t_this.extensions = extensions;\n\t\t_this.properties = properties;\n\t\t_this.renderLists = renderLists;\n\t\t_this.state = state;\n\t\t_this.info = info;\n\n\t}\n\n\tinitGLContext();\n\n\t// vr\n\n\tvar vr = new WebVRManager( _this );\n\n\tthis.vr = vr;\n\n\t// shadow map\n\n\tvar shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );\n\n\tthis.shadowMap = shadowMap;\n\n\t// API\n\n\tthis.getContext = function () {\n\n\t\treturn _gl;\n\n\t};\n\n\tthis.getContextAttributes = function () {\n\n\t\treturn _gl.getContextAttributes();\n\n\t};\n\n\tthis.forceContextLoss = function () {\n\n\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\tif ( extension ) extension.loseContext();\n\n\t};\n\n\tthis.forceContextRestore = function () {\n\n\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\tif ( extension ) extension.restoreContext();\n\n\t};\n\n\tthis.getPixelRatio = function () {\n\n\t\treturn _pixelRatio;\n\n\t};\n\n\tthis.setPixelRatio = function ( value ) {\n\n\t\tif ( value === undefined ) return;\n\n\t\t_pixelRatio = value;\n\n\t\tthis.setSize( _width, _height, false );\n\n\t};\n\n\tthis.getSize = function () {\n\n\t\treturn {\n\t\t\twidth: _width,\n\t\t\theight: _height\n\t\t};\n\n\t};\n\n\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\tvar device = vr.getDevice();\n\n\t\tif ( device && device.isPresenting ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_canvas.width = width * _pixelRatio;\n\t\t_canvas.height = height * _pixelRatio;\n\n\t\tif ( updateStyle !== false ) {\n\n\t\t\t_canvas.style.width = width + 'px';\n\t\t\t_canvas.style.height = height + 'px';\n\n\t\t}\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.getDrawingBufferSize = function () {\n\n\t\treturn {\n\t\t\twidth: _width * _pixelRatio,\n\t\t\theight: _height * _pixelRatio\n\t\t};\n\n\t};\n\n\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_pixelRatio = pixelRatio;\n\n\t\t_canvas.width = width * pixelRatio;\n\t\t_canvas.height = height * pixelRatio;\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.getCurrentViewport = function () {\n\n\t\treturn _currentViewport;\n\n\t};\n\n\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t_viewport.set( x, _height - y - height, width, height );\n\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\n\t};\n\n\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\t_scissor.set( x, _height - y - height, width, height );\n\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n\n\t};\n\n\tthis.setScissorTest = function ( boolean ) {\n\n\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t};\n\n\t// Clearing\n\n\tthis.getClearColor = function () {\n\n\t\treturn background.getClearColor();\n\n\t};\n\n\tthis.setClearColor = function () {\n\n\t\tbackground.setClearColor.apply( background, arguments );\n\n\t};\n\n\tthis.getClearAlpha = function () {\n\n\t\treturn background.getClearAlpha();\n\n\t};\n\n\tthis.setClearAlpha = function () {\n\n\t\tbackground.setClearAlpha.apply( background, arguments );\n\n\t};\n\n\tthis.clear = function ( color, depth, stencil ) {\n\n\t\tvar bits = 0;\n\n\t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\n\t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n\t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t_gl.clear( bits );\n\n\t};\n\n\tthis.clearColor = function () {\n\n\t\tthis.clear( true, false, false );\n\n\t};\n\n\tthis.clearDepth = function () {\n\n\t\tthis.clear( false, true, false );\n\n\t};\n\n\tthis.clearStencil = function () {\n\n\t\tthis.clear( false, false, true );\n\n\t};\n\n\tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\n\t\tthis.setRenderTarget( renderTarget );\n\t\tthis.clear( color, depth, stencil );\n\n\t};\n\n\t//\n\n\tthis.dispose = function () {\n\n\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\trenderLists.dispose();\n\t\trenderStates.dispose();\n\t\tproperties.dispose();\n\t\tobjects.dispose();\n\n\t\tvr.dispose();\n\n\t\tstopAnimation();\n\n\t};\n\n\t// Events\n\n\tfunction onContextLost( event ) {\n\n\t\tevent.preventDefault();\n\n\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\n\n\t\t_isContextLost = true;\n\n\t}\n\n\tfunction onContextRestore( /* event */ ) {\n\n\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\n\n\t\t_isContextLost = false;\n\n\t\tinitGLContext();\n\n\t}\n\n\tfunction onMaterialDispose( event ) {\n\n\t\tvar material = event.target;\n\n\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\tdeallocateMaterial( material );\n\n\t}\n\n\t// Buffer deallocation\n\n\tfunction deallocateMaterial( material ) {\n\n\t\treleaseMaterialProgramReference( material );\n\n\t\tproperties.remove( material );\n\n\t}\n\n\n\tfunction releaseMaterialProgramReference( material ) {\n\n\t\tvar programInfo = properties.get( material ).program;\n\n\t\tmaterial.program = undefined;\n\n\t\tif ( programInfo !== undefined ) {\n\n\t\t\tprogramCache.releaseProgram( programInfo );\n\n\t\t}\n\n\t}\n\n\t// Buffer rendering\n\n\tfunction renderObjectImmediate( object, program, material ) {\n\n\t\tobject.render( function ( object ) {\n\n\t\t\t_this.renderBufferImmediate( object, program, material );\n\n\t\t} );\n\n\t}\n\n\tthis.renderBufferImmediate = function ( object, program, material ) {\n\n\t\tstate.initAttributes();\n\n\t\tvar buffers = properties.get( object );\n\n\t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\n\t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\n\t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\n\t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\n\n\t\tvar programAttributes = program.getAttributes();\n\n\t\tif ( object.hasPositions ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( programAttributes.position );\n\t\t\t_gl.vertexAttribPointer( programAttributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasNormals ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\n\n\t\t\tif ( ! material.isMeshPhongMaterial &&\n\t\t\t\t! material.isMeshStandardMaterial &&\n\t\t\t\t! material.isMeshNormalMaterial &&\n\t\t\t\tmaterial.flatShading === true ) {\n\n\t\t\t\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\n\n\t\t\t\t\tvar array = object.normalArray;\n\n\t\t\t\t\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\n\t\t\t\t\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\n\t\t\t\t\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\n\n\t\t\t\t\tarray[ i + 0 ] = nx;\n\t\t\t\t\tarray[ i + 1 ] = ny;\n\t\t\t\t\tarray[ i + 2 ] = nz;\n\n\t\t\t\t\tarray[ i + 3 ] = nx;\n\t\t\t\t\tarray[ i + 4 ] = ny;\n\t\t\t\t\tarray[ i + 5 ] = nz;\n\n\t\t\t\t\tarray[ i + 6 ] = nx;\n\t\t\t\t\tarray[ i + 7 ] = ny;\n\t\t\t\t\tarray[ i + 8 ] = nz;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( programAttributes.normal );\n\n\t\t\t_gl.vertexAttribPointer( programAttributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasUvs && material.map ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( programAttributes.uv );\n\n\t\t\t_gl.vertexAttribPointer( programAttributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasColors && material.vertexColors !== NoColors ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( programAttributes.color );\n\n\t\t\t_gl.vertexAttribPointer( programAttributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tstate.disableUnusedAttributes();\n\n\t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\n\n\t\tobject.count = 0;\n\n\t};\n\n\tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\n\n\t\tvar frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n\n\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\tvar program = setProgram( camera, fog, material, object );\n\t\tvar geometryProgram = geometry.id + '_' + program.id + '_' + ( material.wireframe === true );\n\n\t\tvar updateBuffers = false;\n\n\t\tif ( geometryProgram !== _currentGeometryProgram ) {\n\n\t\t\t_currentGeometryProgram = geometryProgram;\n\t\t\tupdateBuffers = true;\n\n\t\t}\n\n\t\tif ( object.morphTargetInfluences ) {\n\n\t\t\tmorphtargets.update( object, geometry, material, program );\n\n\t\t\tupdateBuffers = true;\n\n\t\t}\n\n\t\t//\n\n\t\tvar index = geometry.index;\n\t\tvar position = geometry.attributes.position;\n\t\tvar rangeFactor = 1;\n\n\t\tif ( material.wireframe === true ) {\n\n\t\t\tindex = geometries.getWireframeAttribute( geometry );\n\t\t\trangeFactor = 2;\n\n\t\t}\n\n\t\tvar attribute;\n\t\tvar renderer = bufferRenderer;\n\n\t\tif ( index !== null ) {\n\n\t\t\tattribute = attributes.get( index );\n\n\t\t\trenderer = indexedBufferRenderer;\n\t\t\trenderer.setIndex( attribute );\n\n\t\t}\n\n\t\tif ( updateBuffers ) {\n\n\t\t\tsetupVertexAttributes( material, program, geometry );\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, attribute.buffer );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar dataCount = Infinity;\n\n\t\tif ( index !== null ) {\n\n\t\t\tdataCount = index.count;\n\n\t\t} else if ( position !== undefined ) {\n\n\t\t\tdataCount = position.count;\n\n\t\t}\n\n\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\n\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n\t\tvar drawStart = Math.max( rangeStart, groupStart );\n\t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\tif ( drawCount === 0 ) return;\n\n\t\t//\n\n\t\tif ( object.isMesh ) {\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t} else {\n\n\t\t\t\tswitch ( object.drawMode ) {\n\n\t\t\t\t\tcase TrianglesDrawMode:\n\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase TriangleStripDrawMode:\n\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_STRIP );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase TriangleFanDrawMode:\n\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_FAN );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t} else if ( object.isLine ) {\n\n\t\t\tvar lineWidth = material.linewidth;\n\n\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\trenderer.setMode( _gl.LINE_LOOP );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\n\t\t\t}\n\n\t\t} else if ( object.isPoints ) {\n\n\t\t\trenderer.setMode( _gl.POINTS );\n\n\t\t}\n\n\t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\n\t\t\tif ( geometry.maxInstancedCount > 0 ) {\n\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t}\n\n\t};\n\n\tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\n\n\t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\n\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( startIndex === undefined ) startIndex = 0;\n\n\t\tstate.initAttributes();\n\n\t\tvar geometryAttributes = geometry.attributes;\n\n\t\tvar programAttributes = program.getAttributes();\n\n\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\tfor ( var name in programAttributes ) {\n\n\t\t\tvar programAttribute = programAttributes[ name ];\n\n\t\t\tif ( programAttribute >= 0 ) {\n\n\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\n\t\t\t\t\tvar attribute = attributes.get( geometryAttribute );\n\n\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\tif ( attribute === undefined ) continue;\n\n\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\tvar type = attribute.type;\n\t\t\t\t\tvar bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );\n\n\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, ( startIndex * stride + offset ) * bytesPerElement );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );\n\n\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * bytesPerElement );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.disableUnusedAttributes();\n\n\t}\n\n\t// Compile\n\n\tthis.compile = function ( scene, camera ) {\n\n\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\tcurrentRenderState.init();\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tif ( object.isLight ) {\n\n\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\tcurrentRenderState.setupLights( camera );\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tif ( object.material ) {\n\n\t\t\t\tif ( Array.isArray( object.material ) ) {\n\n\t\t\t\t\tfor ( var i = 0; i < object.material.length; i ++ ) {\n\n\t\t\t\t\t\tinitMaterial( object.material[ i ], scene.fog, object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tinitMaterial( object.material, scene.fog, object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t};\n\n\t// Animation Loop\n\n\tvar isAnimating = false;\n\tvar onAnimationFrame = null;\n\n\tfunction startAnimation() {\n\n\t\tif ( isAnimating ) return;\n\n\t\trequestAnimationLoopFrame();\n\n\t\tisAnimating = true;\n\n\t}\n\n\tfunction stopAnimation() {\n\n\t\tisAnimating = false;\n\n\t}\n\n\tfunction requestAnimationLoopFrame() {\n\n\t\tvar device = vr.getDevice();\n\n\t\tif ( device && device.isPresenting ) {\n\n\t\t\tdevice.requestAnimationFrame( animationLoop );\n\n\t\t} else {\n\n\t\t\twindow.requestAnimationFrame( animationLoop );\n\n\t\t}\n\n\t}\n\n\tfunction animationLoop( time ) {\n\n\t\tif ( isAnimating === false ) return;\n\n\t\tonAnimationFrame( time );\n\n\t\trequestAnimationLoopFrame();\n\n\t}\n\n\tthis.animate = function ( callback ) {\n\n\t\tonAnimationFrame = callback;\n\t\tonAnimationFrame !== null ? startAnimation() : stopAnimation();\n\n\t};\n\n\t// Rendering\n\n\tthis.render = function ( scene, camera, renderTarget, forceClear ) {\n\n\t\tif ( ! ( camera && camera.isCamera ) ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( _isContextLost ) return;\n\n\t\t// reset caching for this frame\n\n\t\t_currentGeometryProgram = '';\n\t\t_currentMaterialId = - 1;\n\t\t_currentCamera = null;\n\n\t\t// update scene graph\n\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t// update camera matrices and frustum\n\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\tif ( vr.enabled ) {\n\n\t\t\tcamera = vr.getCamera( camera );\n\n\t\t}\n\n\t\t//\n\n\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\tcurrentRenderState.init();\n\n\t\tscene.onBeforeRender( _this, scene, camera, renderTarget );\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\tcurrentRenderList = renderLists.get( scene, camera );\n\t\tcurrentRenderList.init();\n\n\t\tprojectObject( scene, camera, _this.sortObjects );\n\n\t\tif ( _this.sortObjects === true ) {\n\n\t\t\tcurrentRenderList.sort();\n\n\t\t}\n\n\t\t//\n\n\t\tif ( _clippingEnabled ) _clipping.beginShadows();\n\n\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\tshadowMap.render( shadowsArray, scene, camera );\n\n\t\tcurrentRenderState.setupLights( camera );\n\n\t\tif ( _clippingEnabled ) _clipping.endShadows();\n\n\t\t//\n\n\t\tif ( this.info.autoReset ) this.info.reset();\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\trenderTarget = null;\n\n\t\t}\n\n\t\tthis.setRenderTarget( renderTarget );\n\n\t\t//\n\n\t\tbackground.render( currentRenderList, scene, camera, forceClear );\n\n\t\t// render scene\n\n\t\tvar opaqueObjects = currentRenderList.opaque;\n\t\tvar transparentObjects = currentRenderList.transparent;\n\n\t\tif ( scene.overrideMaterial ) {\n\n\t\t\tvar overrideMaterial = scene.overrideMaterial;\n\n\t\t\tif ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera, overrideMaterial );\n\t\t\tif ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera, overrideMaterial );\n\n\t\t} else {\n\n\t\t\t// opaque pass (front-to-back order)\n\n\t\t\tif ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera );\n\n\t\t\t// transparent pass (back-to-front order)\n\n\t\t\tif ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera );\n\n\t\t}\n\n\t\t// custom renderers\n\n\t\tvar spritesArray = currentRenderState.state.spritesArray;\n\n\t\tspriteRenderer.render( spritesArray, scene, camera );\n\n\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\tif ( renderTarget ) {\n\n\t\t\ttextures.updateRenderTargetMipmap( renderTarget );\n\n\t\t}\n\n\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\tstate.buffers.depth.setTest( true );\n\t\tstate.buffers.depth.setMask( true );\n\t\tstate.buffers.color.setMask( true );\n\n\t\tstate.setPolygonOffset( false );\n\n\t\tscene.onAfterRender( _this, scene, camera );\n\n\t\tif ( vr.enabled ) {\n\n\t\t\tvr.submitFrame();\n\n\t\t}\n\n\t\t// _gl.finish();\n\n\t\tcurrentRenderList = null;\n\t\tcurrentRenderState = null;\n\n\t};\n\n\t/*\n\t// TODO Duplicated code (Frustum)\n\n\tvar _sphere = new Sphere();\n\n\tfunction isObjectViewable( object ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( geometry.boundingSphere === null )\n\t\t\tgeometry.computeBoundingSphere();\n\n\t\t_sphere.copy( geometry.boundingSphere ).\n\t\tapplyMatrix4( object.matrixWorld );\n\n\t\treturn isSphereViewable( _sphere );\n\n\t}\n\n\tfunction isSpriteViewable( sprite ) {\n\n\t\t_sphere.center.set( 0, 0, 0 );\n\t\t_sphere.radius = 0.7071067811865476;\n\t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\n\t\treturn isSphereViewable( _sphere );\n\n\t}\n\n\tfunction isSphereViewable( sphere ) {\n\n\t\tif ( ! _frustum.intersectsSphere( sphere ) ) return false;\n\n\t\tvar numPlanes = _clipping.numPlanes;\n\n\t\tif ( numPlanes === 0 ) return true;\n\n\t\tvar planes = _this.clippingPlanes,\n\n\t\t\tcenter = sphere.center,\n\t\t\tnegRad = - sphere.radius,\n\t\t\ti = 0;\n\n\t\tdo {\n\n\t\t\t// out when deeper than radius in the negative halfspace\n\t\t\tif ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\n\n\t\t} while ( ++ i !== numPlanes );\n\n\t\treturn true;\n\n\t}\n\t*/\n\n\tfunction projectObject( object, camera, sortObjects ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tvar visible = object.layers.test( camera.layers );\n\n\t\tif ( visible ) {\n\n\t\t\tif ( object.isLight ) {\n\n\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\tcurrentRenderState.pushSprite( object );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isImmediateRenderObject ) {\n\n\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t}\n\n\t\t\t\tcurrentRenderList.push( object, null, object.material, _vector3.z, null );\n\n\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\tobject.skeleton.update();\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, _vector3.z, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, _vector3.z, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar children = object.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tprojectObject( children[ i ], camera, sortObjects );\n\n\t\t}\n\n\t}\n\n\tfunction renderObjects( renderList, scene, camera, overrideMaterial ) {\n\n\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\tvar renderItem = renderList[ i ];\n\n\t\t\tvar object = renderItem.object;\n\t\t\tvar geometry = renderItem.geometry;\n\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n\t\t\tvar group = renderItem.group;\n\n\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\t_currentArrayCamera = camera;\n\n\t\t\t\tvar cameras = camera.cameras;\n\n\t\t\t\tfor ( var j = 0, jl = cameras.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar camera2 = cameras[ j ];\n\n\t\t\t\t\tif ( object.layers.test( camera2.layers ) ) {\n\n\t\t\t\t\t\tvar bounds = camera2.bounds;\n\n\t\t\t\t\t\tvar x = bounds.x * _width;\n\t\t\t\t\t\tvar y = bounds.y * _height;\n\t\t\t\t\t\tvar width = bounds.z * _width;\n\t\t\t\t\t\tvar height = bounds.w * _height;\n\n\t\t\t\t\t\tstate.viewport( _currentViewport.set( x, y, width, height ).multiplyScalar( _pixelRatio ) );\n\n\t\t\t\t\t\trenderObject( object, scene, camera2, geometry, material, group );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_currentArrayCamera = null;\n\n\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction renderObject( object, scene, camera, geometry, material, group ) {\n\n\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\tif ( object.isImmediateRenderObject ) {\n\n\t\t\tvar frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n\n\t\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\t\tvar program = setProgram( camera, scene.fog, material, object );\n\n\t\t\t_currentGeometryProgram = '';\n\n\t\t\trenderObjectImmediate( object, program, material );\n\n\t\t} else {\n\n\t\t\t_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );\n\n\t\t}\n\n\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t}\n\n\tfunction initMaterial( material, fog, object ) {\n\n\t\tvar materialProperties = properties.get( material );\n\n\t\tvar lights = currentRenderState.state.lights;\n\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\tvar parameters = programCache.getParameters(\n\t\t\tmaterial, lights.state, shadowsArray, fog, _clipping.numPlanes, _clipping.numIntersection, object );\n\n\t\tvar code = programCache.getProgramCode( material, parameters );\n\n\t\tvar program = materialProperties.program;\n\t\tvar programChange = true;\n\n\t\tif ( program === undefined ) {\n\n\t\t\t// new material\n\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t} else if ( program.code !== code ) {\n\n\t\t\t// changed glsl or parameters\n\t\t\treleaseMaterialProgramReference( material );\n\n\t\t} else if ( materialProperties.lightsHash !== lights.state.hash ) {\n\n\t\t\tproperties.update( material, 'lightsHash', lights.state.hash );\n\t\t\tprogramChange = false;\n\n\t\t} else if ( parameters.shaderID !== undefined ) {\n\n\t\t\t// same glsl and uniform list\n\t\t\treturn;\n\n\t\t} else {\n\n\t\t\t// only rebuild uniform list\n\t\t\tprogramChange = false;\n\n\t\t}\n\n\t\tif ( programChange ) {\n\n\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\tvar shader = ShaderLib[ parameters.shaderID ];\n\n\t\t\t\tmaterialProperties.shader = {\n\t\t\t\t\tname: material.type,\n\t\t\t\t\tuniforms: UniformsUtils.clone( shader.uniforms ),\n\t\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\t\tfragmentShader: shader.fragmentShader\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tmaterialProperties.shader = {\n\t\t\t\t\tname: material.type,\n\t\t\t\t\tuniforms: material.uniforms,\n\t\t\t\t\tvertexShader: material.vertexShader,\n\t\t\t\t\tfragmentShader: material.fragmentShader\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tmaterial.onBeforeCompile( materialProperties.shader, _this );\n\n\t\t\tprogram = programCache.acquireProgram( material, materialProperties.shader, parameters, code );\n\n\t\t\tmaterialProperties.program = program;\n\t\t\tmaterial.program = program;\n\n\t\t}\n\n\t\tvar programAttributes = program.getAttributes();\n\n\t\tif ( material.morphTargets ) {\n\n\t\t\tmaterial.numSupportedMorphTargets = 0;\n\n\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n\t\t\t\tif ( programAttributes[ 'morphTarget' + i ] >= 0 ) {\n\n\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.morphNormals ) {\n\n\t\t\tmaterial.numSupportedMorphNormals = 0;\n\n\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\n\t\t\t\tif ( programAttributes[ 'morphNormal' + i ] >= 0 ) {\n\n\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar uniforms = materialProperties.shader.uniforms;\n\n\t\tif ( ! material.isShaderMaterial &&\n\t\t\t! material.isRawShaderMaterial ||\n\t\t\tmaterial.clipping === true ) {\n\n\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t\t\tmaterialProperties.numIntersection = _clipping.numIntersection;\n\t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\n\t\t}\n\n\t\tmaterialProperties.fog = fog;\n\n\t\t// store the light setup it was created for\n\n\t\tmaterialProperties.lightsHash = lights.state.hash;\n\n\t\tif ( material.lights ) {\n\n\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\n\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\n\n\t\t}\n\n\t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t\t\tuniformsList =\n\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\tmaterialProperties.uniformsList = uniformsList;\n\n\t}\n\n\tfunction setProgram( camera, fog, material, object ) {\n\n\t\t_usedTextureUnits = 0;\n\n\t\tvar materialProperties = properties.get( material );\n\t\tvar lights = currentRenderState.state.lights;\n\n\t\tif ( _clippingEnabled ) {\n\n\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\n\t\t\t\tvar useCache =\n\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t// (#8465, #8379)\n\t\t\t\t_clipping.setState(\n\t\t\t\t\tmaterial.clippingPlanes, material.clipIntersection, material.clipShadows,\n\t\t\t\t\tcamera, materialProperties, useCache );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.needsUpdate === false ) {\n\n\t\t\tif ( materialProperties.program === undefined ) {\n\n\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\n\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t} else if ( material.lights && materialProperties.lightsHash !== lights.state.hash ) {\n\n\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t( materialProperties.numClippingPlanes !== _clipping.numPlanes ||\n\t\t\t\tmaterialProperties.numIntersection !== _clipping.numIntersection ) ) {\n\n\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.needsUpdate ) {\n\n\t\t\tinitMaterial( material, fog, object );\n\t\t\tmaterial.needsUpdate = false;\n\n\t\t}\n\n\t\tvar refreshProgram = false;\n\t\tvar refreshMaterial = false;\n\t\tvar refreshLights = false;\n\n\t\tvar program = materialProperties.program,\n\t\t\tp_uniforms = program.getUniforms(),\n\t\t\tm_uniforms = materialProperties.shader.uniforms;\n\n\t\tif ( state.useProgram( program.program ) ) {\n\n\t\t\trefreshProgram = true;\n\t\t\trefreshMaterial = true;\n\t\t\trefreshLights = true;\n\n\t\t}\n\n\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t_currentMaterialId = material.id;\n\n\t\t\trefreshMaterial = true;\n\n\t\t}\n\n\t\tif ( refreshProgram || camera !== _currentCamera ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n\n\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t}\n\n\t\t\t// Avoid unneeded uniform updates per ArrayCamera's sub-camera\n\n\t\t\tif ( _currentCamera !== ( _currentArrayCamera || camera ) ) {\n\n\t\t\t\t_currentCamera = ( _currentArrayCamera || camera );\n\n\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t}\n\n\t\t\t// load material specific uniforms\n\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\tif ( material.isShaderMaterial ||\n\t\t\t\tmaterial.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.envMap ) {\n\n\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.isShaderMaterial ||\n\t\t\t\tmaterial.skinning ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// skinning uniforms must be set even if material didn't change\n\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t// not sure why, but otherwise weird things happen\n\n\t\tif ( material.skinning ) {\n\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\tvar skeleton = object.skeleton;\n\n\t\t\tif ( skeleton ) {\n\n\t\t\t\tvar bones = skeleton.bones;\n\n\t\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\t\tif ( skeleton.boneTexture === undefined ) {\n\n\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t\t\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t\t\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t\t\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n\t\t\t\t\t\tvar size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\t\t\t\t\tsize = _Math.ceilPowerOfTwo( size );\n\t\t\t\t\t\tsize = Math.max( size, 4 );\n\n\t\t\t\t\t\tvar boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\t\t\t\t\tboneMatrices.set( skeleton.boneMatrices ); // copy current values\n\n\t\t\t\t\t\tvar boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\t\t\t\t\t\tboneTexture.needsUpdate = true;\n\n\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\n\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\n\t\t\t\t\t\tskeleton.boneTextureSize = size;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture );\n\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( refreshMaterial ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n\t\t\tp_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );\n\n\t\t\tif ( material.lights ) {\n\n\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t// values\n\t\t\t\t//\n\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t// the GL state when required\n\n\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t}\n\n\t\t\t// refresh uniforms common to several materials\n\n\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\n\t\t\t}\n\n\t\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\n\t\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\tif ( material.isMeshToonMaterial ) {\n\n\t\t\t\t\trefreshUniformsToon( m_uniforms, material );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\t\trefreshUniformsPhysical( m_uniforms, material );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trefreshUniformsStandard( m_uniforms, material );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\trefreshUniformsDepth( m_uniforms, material );\n\n\t\t\t} else if ( material.isMeshDistanceMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\trefreshUniformsDistance( m_uniforms, material );\n\n\t\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\trefreshUniformsNormal( m_uniforms, material );\n\n\t\t\t} else if ( material.isLineBasicMaterial ) {\n\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\n\t\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\t\trefreshUniformsDash( m_uniforms, material );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\n\t\t\t} else if ( material.isShadowMaterial ) {\n\n\t\t\t\tm_uniforms.color.value = material.color;\n\t\t\t\tm_uniforms.opacity.value = material.opacity;\n\n\t\t\t}\n\n\t\t\t// RectAreaLight Texture\n\t\t\t// TODO (mrdoob): Find a nicer implementation\n\n\t\t\tif ( m_uniforms.ltc_1 !== undefined ) m_uniforms.ltc_1.value = UniformsLib.LTC_1;\n\t\t\tif ( m_uniforms.ltc_2 !== undefined ) m_uniforms.ltc_2.value = UniformsLib.LTC_2;\n\n\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, _this );\n\n\t\t}\n\n\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\n\n\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, _this );\n\t\t\tmaterial.uniformsNeedUpdate = false;\n\n\t\t}\n\n\t\t// common matrices\n\n\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\treturn program;\n\n\t}\n\n\t// Uniforms (refresh uniforms objects)\n\n\tfunction refreshUniformsCommon( uniforms, material ) {\n\n\t\tuniforms.opacity.value = material.opacity;\n\n\t\tif ( material.color ) {\n\n\t\t\tuniforms.diffuse.value = material.color;\n\n\t\t}\n\n\t\tif ( material.emissive ) {\n\n\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t}\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\tif ( material.specularMap ) {\n\n\t\t\tuniforms.specularMap.value = material.specularMap;\n\n\t\t}\n\n\t\tif ( material.envMap ) {\n\n\t\t\tuniforms.envMap.value = material.envMap;\n\n\t\t\t// don't flip CubeTexture envMaps, flip everything else:\n\t\t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n\t\t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n\t\t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n\t\t\tuniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\tuniforms.maxMipLevel.value = properties.get( material.envMap ).__maxMipLevel;\n\n\t\t}\n\n\t\tif ( material.lightMap ) {\n\n\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. specular map\n\t\t// 3. normal map\n\t\t// 4. bump map\n\t\t// 5. alpha map\n\t\t// 6. emissive map\n\n\t\tvar uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.specularMap ) {\n\n\t\t\tuvScaleMap = material.specularMap;\n\n\t\t} else if ( material.displacementMap ) {\n\n\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t} else if ( material.normalMap ) {\n\n\t\t\tuvScaleMap = material.normalMap;\n\n\t\t} else if ( material.bumpMap ) {\n\n\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t} else if ( material.roughnessMap ) {\n\n\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t} else if ( material.metalnessMap ) {\n\n\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t} else if ( material.emissiveMap ) {\n\n\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t// backwards compatibility\n\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tvar offset = uvScaleMap.offset;\n\t\t\t\tvar repeat = uvScaleMap.repeat;\n\t\t\t\tvar rotation = uvScaleMap.rotation;\n\t\t\t\tvar center = uvScaleMap.center;\n\n\t\t\t\tuvScaleMap.matrix.setUvTransform( offset.x, offset.y, repeat.x, repeat.y, rotation, center.x, center.y );\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\tuniforms.diffuse.value = material.color;\n\t\tuniforms.opacity.value = material.opacity;\n\n\t}\n\n\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\tuniforms.dashSize.value = material.dashSize;\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\tuniforms.scale.value = material.scale;\n\n\t}\n\n\tfunction refreshUniformsPoints( uniforms, material ) {\n\n\t\tuniforms.diffuse.value = material.color;\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.size.value = material.size * _pixelRatio;\n\t\tuniforms.scale.value = _height * 0.5;\n\n\t\tuniforms.map.value = material.map;\n\n\t\tif ( material.map !== null ) {\n\n\t\t\tif ( material.map.matrixAutoUpdate === true ) {\n\n\t\t\t\tvar offset = material.map.offset;\n\t\t\t\tvar repeat = material.map.repeat;\n\t\t\t\tvar rotation = material.map.rotation;\n\t\t\t\tvar center = material.map.center;\n\n\t\t\t\tmaterial.map.matrix.setUvTransform( offset.x, offset.y, repeat.x, repeat.y, rotation, center.x, center.y );\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( material.map.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsFog( uniforms, fog ) {\n\n\t\tuniforms.fogColor.value = fog.color;\n\n\t\tif ( fog.isFog ) {\n\n\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLambert( uniforms, material ) {\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\tuniforms.specular.value = material.specular;\n\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\trefreshUniformsPhong( uniforms, material );\n\n\t\tif ( material.gradientMap ) {\n\n\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsStandard( uniforms, material ) {\n\n\t\tuniforms.roughness.value = material.roughness;\n\t\tuniforms.metalness.value = material.metalness;\n\n\t\tif ( material.roughnessMap ) {\n\n\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t}\n\n\t\tif ( material.metalnessMap ) {\n\n\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t\tif ( material.envMap ) {\n\n\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhysical( uniforms, material ) {\n\n\t\tuniforms.clearCoat.value = material.clearCoat;\n\t\tuniforms.clearCoatRoughness.value = material.clearCoatRoughness;\n\n\t\trefreshUniformsStandard( uniforms, material );\n\n\t}\n\n\tfunction refreshUniformsDepth( uniforms, material ) {\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsDistance( uniforms, material ) {\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t\tuniforms.referencePosition.value.copy( material.referencePosition );\n\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\tuniforms.farDistance.value = material.farDistance;\n\n\t}\n\n\tfunction refreshUniformsNormal( uniforms, material ) {\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\tuniforms.ambientLightColor.needsUpdate = value;\n\n\t\tuniforms.directionalLights.needsUpdate = value;\n\t\tuniforms.pointLights.needsUpdate = value;\n\t\tuniforms.spotLights.needsUpdate = value;\n\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t}\n\n\t// Textures\n\n\tfunction allocTextureUnit() {\n\n\t\tvar textureUnit = _usedTextureUnits;\n\n\t\tif ( textureUnit >= capabilities.maxTextures ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\n\n\t\t}\n\n\t\t_usedTextureUnits += 1;\n\n\t\treturn textureUnit;\n\n\t}\n\n\tthis.allocTextureUnit = allocTextureUnit;\n\n\t// this.setTexture2D = setTexture2D;\n\tthis.setTexture2D = ( function () {\n\n\t\tvar warned = false;\n\n\t\t// backwards compatibility: peel texture.texture\n\t\treturn function setTexture2D( texture, slot ) {\n\n\t\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\n\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarned = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\ttextures.setTexture2D( texture, slot );\n\n\t\t};\n\n\t}() );\n\n\tthis.setTexture = ( function () {\n\n\t\tvar warned = false;\n\n\t\treturn function setTexture( texture, slot ) {\n\n\t\t\tif ( ! warned ) {\n\n\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\" );\n\t\t\t\twarned = true;\n\n\t\t\t}\n\n\t\t\ttextures.setTexture2D( texture, slot );\n\n\t\t};\n\n\t}() );\n\n\tthis.setTextureCube = ( function () {\n\n\t\tvar warned = false;\n\n\t\treturn function setTextureCube( texture, slot ) {\n\n\t\t\t// backwards compatibility: peel texture.texture\n\t\t\tif ( texture && texture.isWebGLRenderTargetCube ) {\n\n\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarned = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n\t\t\t// TODO: unify these code paths\n\t\t\tif ( ( texture && texture.isCubeTexture ) ||\n\t\t\t\t( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n\t\t\t\t// CompressedTexture can have Array in image :/\n\n\t\t\t\t// this function alone should take care of cube textures\n\t\t\t\ttextures.setTextureCube( texture, slot );\n\n\t\t\t} else {\n\n\t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\n\n\t\t\t\ttextures.setTextureCubeDynamic( texture, slot );\n\n\t\t\t}\n\n\t\t};\n\n\t}() );\n\n\tthis.getRenderTarget = function () {\n\n\t\treturn _currentRenderTarget;\n\n\t};\n\n\tthis.setRenderTarget = function ( renderTarget ) {\n\n\t\t_currentRenderTarget = renderTarget;\n\n\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t}\n\n\t\tvar framebuffer = null;\n\t\tvar isCube = false;\n\n\t\tif ( renderTarget ) {\n\n\t\t\tvar __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( renderTarget.isWebGLRenderTargetCube ) {\n\n\t\t\t\tframebuffer = __webglFramebuffer[ renderTarget.activeCubeFace ];\n\t\t\t\tisCube = true;\n\n\t\t\t} else {\n\n\t\t\t\tframebuffer = __webglFramebuffer;\n\n\t\t\t}\n\n\t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t} else {\n\n\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\n\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\n\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t}\n\n\t\tif ( _currentFramebuffer !== framebuffer ) {\n\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t\t_currentFramebuffer = framebuffer;\n\n\t\t}\n\n\t\tstate.viewport( _currentViewport );\n\t\tstate.scissor( _currentScissor );\n\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\tif ( isCube ) {\n\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\n\n\t\t}\n\n\t};\n\n\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\n\n\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\tif ( framebuffer ) {\n\n\t\t\tvar restore = false;\n\n\t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\t\trestore = true;\n\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\tvar texture = renderTarget.texture;\n\t\t\t\tvar textureFormat = texture.format;\n\t\t\t\tvar textureType = texture.type;\n\n\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t! ( textureType === FloatType && ( extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t! ( textureType === HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\n\n\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t}\n\n\t\t\t} finally {\n\n\t\t\t\tif ( restore ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.copyFramebufferToTexture = function ( position, texture, level ) {\n\n\t\tvar width = texture.image.width;\n\t\tvar height = texture.image.height;\n\t\tvar glFormat = utils.convert( texture.format );\n\n\t\tthis.setTexture2D( texture, 0 );\n\n\t\t_gl.copyTexImage2D( _gl.TEXTURE_2D, level || 0, glFormat, position.x, position.y, width, height, 0 );\n\n\t};\n\n\tthis.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {\n\n\t\tvar width = srcTexture.image.width;\n\t\tvar height = srcTexture.image.height;\n\t\tvar glFormat = utils.convert( dstTexture.format );\n\t\tvar glType = utils.convert( dstTexture.type );\n\t\tvar pixels = srcTexture.isDataTexture ? srcTexture.image.data : srcTexture.image;\n\n\t\tthis.setTexture2D( dstTexture, 0 );\n\n\t\t_gl.texSubImage2D( _gl.TEXTURE_2D, level || 0, position.x, position.y, width, height, glFormat, glType, pixels );\n\n\t};\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction FogExp2( color, density ) {\n\n\tthis.name = '';\n\n\tthis.color = new Color( color );\n\tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n}\n\nFogExp2.prototype.isFogExp2 = true;\n\nFogExp2.prototype.clone = function () {\n\n\treturn new FogExp2( this.color.getHex(), this.density );\n\n};\n\nFogExp2.prototype.toJSON = function ( /* meta */ ) {\n\n\treturn {\n\t\ttype: 'FogExp2',\n\t\tcolor: this.color.getHex(),\n\t\tdensity: this.density\n\t};\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction Fog( color, near, far ) {\n\n\tthis.name = '';\n\n\tthis.color = new Color( color );\n\n\tthis.near = ( near !== undefined ) ? near : 1;\n\tthis.far = ( far !== undefined ) ? far : 1000;\n\n}\n\nFog.prototype.isFog = true;\n\nFog.prototype.clone = function () {\n\n\treturn new Fog( this.color.getHex(), this.near, this.far );\n\n};\n\nFog.prototype.toJSON = function ( /* meta */ ) {\n\n\treturn {\n\t\ttype: 'Fog',\n\t\tcolor: this.color.getHex(),\n\t\tnear: this.near,\n\t\tfar: this.far\n\t};\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Scene() {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Scene';\n\n\tthis.background = null;\n\tthis.fog = null;\n\tthis.overrideMaterial = null;\n\n\tthis.autoUpdate = true; // checked by the renderer\n\n}\n\nScene.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Scene,\n\n\tcopy: function ( source, recursive ) {\n\n\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\tif ( source.background !== null ) this.background = source.background.clone();\n\t\tif ( source.fog !== null ) this.fog = source.fog.clone();\n\t\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n\t\tthis.autoUpdate = source.autoUpdate;\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\tif ( this.background !== null ) data.object.background = this.background.toJSON( meta );\n\t\tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\n\t\treturn data;\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *\tuvOffset: new THREE.Vector2(),\n *\tuvScale: new THREE.Vector2()\n * }\n */\n\nfunction SpriteMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'SpriteMaterial';\n\n\tthis.color = new Color( 0xffffff );\n\tthis.map = null;\n\n\tthis.rotation = 0;\n\n\tthis.fog = false;\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n}\n\nSpriteMaterial.prototype = Object.create( Material.prototype );\nSpriteMaterial.prototype.constructor = SpriteMaterial;\nSpriteMaterial.prototype.isSpriteMaterial = true;\n\nSpriteMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\tthis.map = source.map;\n\n\tthis.rotation = source.rotation;\n\n\treturn this;\n\n};\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction Sprite( material ) {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Sprite';\n\n\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n\tthis.center = new Vector2( 0.5, 0.5 );\n\n}\n\nSprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Sprite,\n\n\tisSprite: true,\n\n\traycast: ( function () {\n\n\t\tvar intersectPoint = new Vector3();\n\t\tvar worldPosition = new Vector3();\n\t\tvar worldScale = new Vector3();\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tworldPosition.setFromMatrixPosition( this.matrixWorld );\n\t\t\traycaster.ray.closestPointToPoint( worldPosition, intersectPoint );\n\n\t\t\tworldScale.setFromMatrixScale( this.matrixWorld );\n\t\t\tvar guessSizeSq = worldScale.x * worldScale.y / 4;\n\n\t\t\tif ( worldPosition.distanceToSquared( intersectPoint ) > guessSizeSq ) return;\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\t\tintersects.push( {\n\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: intersectPoint.clone(),\n\t\t\t\tface: null,\n\t\t\t\tobject: this\n\n\t\t\t} );\n\n\t\t};\n\n\t}() ),\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.material ).copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source );\n\n\t\tif ( source.center !== undefined ) this.center.copy( source.center );\n\n\t\treturn this;\n\n\t}\n\n\n} );\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction LOD() {\n\n\tObject3D.call( this );\n\n\tthis.type = 'LOD';\n\n\tObject.defineProperties( this, {\n\t\tlevels: {\n\t\t\tenumerable: true,\n\t\t\tvalue: []\n\t\t}\n\t} );\n\n}\n\nLOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: LOD,\n\n\tcopy: function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\tvar levels = source.levels;\n\n\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tvar level = levels[ i ];\n\n\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\taddLevel: function ( object, distance ) {\n\n\t\tif ( distance === undefined ) distance = 0;\n\n\t\tdistance = Math.abs( distance );\n\n\t\tvar levels = this.levels;\n\n\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\t\tthis.add( object );\n\n\t},\n\n\tgetObjectForDistance: function ( distance ) {\n\n\t\tvar levels = this.levels;\n\n\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn levels[ i - 1 ].object;\n\n\t},\n\n\traycast: ( function () {\n\n\t\tvar matrixPosition = new Vector3();\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\n\n\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t};\n\n\t}() ),\n\n\tupdate: function () {\n\n\t\tvar v1 = new Vector3();\n\t\tvar v2 = new Vector3();\n\n\t\treturn function update( camera ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 1 ) {\n\n\t\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = v1.distanceTo( v2 );\n\n\t\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}(),\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.levels = [];\n\n\t\tvar levels = this.levels;\n\n\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tvar level = levels[ i ];\n\n\t\t\tdata.object.levels.push( {\n\t\t\t\tobject: level.object.uuid,\n\t\t\t\tdistance: level.distance\n\t\t\t} );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n} );\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author michael guerrero / http://realitymeltdown.com\n * @author ikerr / http://verold.com\n */\n\nfunction Skeleton( bones, boneInverses ) {\n\n\t// copy the bone array\n\n\tbones = bones || [];\n\n\tthis.bones = bones.slice( 0 );\n\tthis.boneMatrices = new Float32Array( this.bones.length * 16 );\n\n\t// use the supplied bone inverses or calculate the inverses\n\n\tif ( boneInverses === undefined ) {\n\n\t\tthis.calculateInverses();\n\n\t} else {\n\n\t\tif ( this.bones.length === boneInverses.length ) {\n\n\t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Skeleton boneInverses is the wrong length.' );\n\n\t\t\tthis.boneInverses = [];\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nObject.assign( Skeleton.prototype, {\n\n\tcalculateInverses: function () {\n\n\t\tthis.boneInverses = [];\n\n\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tvar inverse = new Matrix4();\n\n\t\t\tif ( this.bones[ i ] ) {\n\n\t\t\t\tinverse.getInverse( this.bones[ i ].matrixWorld );\n\n\t\t\t}\n\n\t\t\tthis.boneInverses.push( inverse );\n\n\t\t}\n\n\t},\n\n\tpose: function () {\n\n\t\tvar bone, i, il;\n\n\t\t// recover the bind-time world matrices\n\n\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tbone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// compute the local matrices, positions, rotations and scales\n\n\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tbone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tupdate: ( function () {\n\n\t\tvar offsetMatrix = new Matrix4();\n\t\tvar identityMatrix = new Matrix4();\n\n\t\treturn function update() {\n\n\t\t\tvar bones = this.bones;\n\t\t\tvar boneInverses = this.boneInverses;\n\t\t\tvar boneMatrices = this.boneMatrices;\n\t\t\tvar boneTexture = this.boneTexture;\n\n\t\t\t// flatten bone matrices to array\n\n\t\t\tfor ( var i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\t\t// compute the offset between the current and the original transform\n\n\t\t\t\tvar matrix = bones[ i ] ? bones[ i ].matrixWorld : identityMatrix;\n\n\t\t\t\toffsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n\t\t\t\toffsetMatrix.toArray( boneMatrices, i * 16 );\n\n\t\t\t}\n\n\t\t\tif ( boneTexture !== undefined ) {\n\n\t\t\t\tboneTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t};\n\n\t} )(),\n\n\tclone: function () {\n\n\t\treturn new Skeleton( this.bones, this.boneInverses );\n\n\t},\n\n\tgetBoneByName: function ( name ) {\n\n\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tvar bone = this.bones[ i ];\n\n\t\t\tif ( bone.name === name ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t}\n\n} );\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author ikerr / http://verold.com\n */\n\nfunction Bone() {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Bone';\n\n}\n\nBone.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Bone,\n\n\tisBone: true\n\n} );\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author ikerr / http://verold.com\n */\n\nfunction SkinnedMesh( geometry, material ) {\n\n\tMesh.call( this, geometry, material );\n\n\tthis.type = 'SkinnedMesh';\n\n\tthis.bindMode = 'attached';\n\tthis.bindMatrix = new Matrix4();\n\tthis.bindMatrixInverse = new Matrix4();\n\n\tvar bones = this.initBones();\n\tvar skeleton = new Skeleton( bones );\n\n\tthis.bind( skeleton, this.matrixWorld );\n\n\tthis.normalizeSkinWeights();\n\n}\n\nSkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\tconstructor: SkinnedMesh,\n\n\tisSkinnedMesh: true,\n\n\tinitBones: function () {\n\n\t\tvar bones = [], bone, gbone;\n\t\tvar i, il;\n\n\t\tif ( this.geometry && this.geometry.bones !== undefined ) {\n\n\t\t\t// first, create array of 'Bone' objects from geometry data\n\n\t\t\tfor ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {\n\n\t\t\t\tgbone = this.geometry.bones[ i ];\n\n\t\t\t\t// create new 'Bone' object\n\n\t\t\t\tbone = new Bone();\n\t\t\t\tbones.push( bone );\n\n\t\t\t\t// apply values\n\n\t\t\t\tbone.name = gbone.name;\n\t\t\t\tbone.position.fromArray( gbone.pos );\n\t\t\t\tbone.quaternion.fromArray( gbone.rotq );\n\t\t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\n\n\t\t\t}\n\n\t\t\t// second, create bone hierarchy\n\n\t\t\tfor ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {\n\n\t\t\t\tgbone = this.geometry.bones[ i ];\n\n\t\t\t\tif ( ( gbone.parent !== - 1 ) && ( gbone.parent !== null ) && ( bones[ gbone.parent ] !== undefined ) ) {\n\n\t\t\t\t\t// subsequent bones in the hierarchy\n\n\t\t\t\t\tbones[ gbone.parent ].add( bones[ i ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// topmost bone, immediate child of the skinned mesh\n\n\t\t\t\t\tthis.add( bones[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// now the bones are part of the scene graph and children of the skinned mesh.\n\t\t// let's update the corresponding matrices\n\n\t\tthis.updateMatrixWorld( true );\n\n\t\treturn bones;\n\n\t},\n\n\tbind: function ( skeleton, bindMatrix ) {\n\n\t\tthis.skeleton = skeleton;\n\n\t\tif ( bindMatrix === undefined ) {\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t}\n\n\t\tthis.bindMatrix.copy( bindMatrix );\n\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n\t},\n\n\tpose: function () {\n\n\t\tthis.skeleton.pose();\n\n\t},\n\n\tnormalizeSkinWeights: function () {\n\n\t\tvar scale, i;\n\n\t\tif ( this.geometry && this.geometry.isGeometry ) {\n\n\t\t\tfor ( i = 0; i < this.geometry.skinWeights.length; i ++ ) {\n\n\t\t\t\tvar sw = this.geometry.skinWeights[ i ];\n\n\t\t\t\tscale = 1.0 / sw.manhattanLength();\n\n\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\tsw.multiplyScalar( scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsw.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( this.geometry && this.geometry.isBufferGeometry ) {\n\n\t\t\tvar vec = new Vector4();\n\n\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\tfor ( i = 0; i < skinWeight.count; i ++ ) {\n\n\t\t\t\tvec.x = skinWeight.getX( i );\n\t\t\t\tvec.y = skinWeight.getY( i );\n\t\t\t\tvec.z = skinWeight.getZ( i );\n\t\t\t\tvec.w = skinWeight.getW( i );\n\n\t\t\t\tscale = 1.0 / vec.manhattanLength();\n\n\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\tvec.multiplyScalar( scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvec.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t}\n\n\t\t\t\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tupdateMatrixWorld: function ( force ) {\n\n\t\tMesh.prototype.updateMatrixWorld.call( this, force );\n\n\t\tif ( this.bindMode === 'attached' ) {\n\n\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n\t\t} else if ( this.bindMode === 'detached' ) {\n\n\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  linewidth: <float>,\n *  linecap: \"round\",\n *  linejoin: \"round\"\n * }\n */\n\nfunction LineBasicMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'LineBasicMaterial';\n\n\tthis.color = new Color( 0xffffff );\n\n\tthis.linewidth = 1;\n\tthis.linecap = 'round';\n\tthis.linejoin = 'round';\n\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n}\n\nLineBasicMaterial.prototype = Object.create( Material.prototype );\nLineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\nLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\nLineBasicMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.linewidth = source.linewidth;\n\tthis.linecap = source.linecap;\n\tthis.linejoin = source.linejoin;\n\n\treturn this;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Line( geometry, material, mode ) {\n\n\tif ( mode === 1 ) {\n\n\t\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\n\t\treturn new LineSegments( geometry, material );\n\n\t}\n\n\tObject3D.call( this );\n\n\tthis.type = 'Line';\n\n\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\tthis.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\n}\n\nLine.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Line,\n\n\tisLine: true,\n\n\tcomputeLineDistances: ( function () {\n\n\t\tvar start = new Vector3();\n\t\tvar end = new Vector3();\n\n\t\treturn function computeLineDistances() {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t// we assume non-indexed geometry\n\n\t\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [ 0 ];\n\n\t\t\t\t\tfor ( var i = 1, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t\tstart.fromBufferAttribute( positionAttribute, i - 1 );\n\t\t\t\t\t\tend.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\t\t\tlineDistances[ i ] += start.distanceTo( end );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.addAttribute( 'lineDistance', new THREE.Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar lineDistances = geometry.lineDistances;\n\n\t\t\t\tlineDistances[ 0 ] = 0;\n\n\t\t\t\tfor ( var i = 1, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\t\tlineDistances[ i ] += vertices[ i - 1 ].distanceTo( vertices[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}() ),\n\n\traycast: ( function () {\n\n\t\tvar inverseMatrix = new Matrix4();\n\t\tvar ray = new Ray();\n\t\tvar sphere = new Sphere();\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tvar precision = raycaster.linePrecision;\n\t\t\tvar precisionSq = precision * precision;\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t//\n\n\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\tvar vStart = new Vector3();\n\t\t\tvar vEnd = new Vector3();\n\t\t\tvar interSegment = new Vector3();\n\t\t\tvar interRay = new Vector3();\n\t\t\tvar step = ( this && this.isLineSegments ) ? 2 : 1;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\t\t\t\t\t\tvar b = indices[ i + 1 ];\n\n\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar nbVertices = vertices.length;\n\n\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\n\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\n\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}() ),\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction LineSegments( geometry, material ) {\n\n\tLine.call( this, geometry, material );\n\n\tthis.type = 'LineSegments';\n\n}\n\nLineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\tconstructor: LineSegments,\n\n\tisLineSegments: true,\n\n\tcomputeLineDistances: ( function () {\n\n\t\tvar start = new Vector3();\n\t\tvar end = new Vector3();\n\n\t\treturn function computeLineDistances() {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t// we assume non-indexed geometry\n\n\t\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [];\n\n\t\t\t\t\tfor ( var i = 0, l = positionAttribute.count; i < l; i += 2 ) {\n\n\t\t\t\t\t\tstart.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t\t\tend.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + start.distanceTo( end );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.addAttribute( 'lineDistance', new THREE.Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar lineDistances = geometry.lineDistances;\n\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i += 2 ) {\n\n\t\t\t\t\tstart.copy( vertices[ i ] );\n\t\t\t\t\tend.copy( vertices[ i + 1 ] );\n\n\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + start.distanceTo( end );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}() )\n\n} );\n\n/**\n * @author mgreter / http://github.com/mgreter\n */\n\nfunction LineLoop( geometry, material ) {\n\n\tLine.call( this, geometry, material );\n\n\tthis.type = 'LineLoop';\n\n}\n\nLineLoop.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\tconstructor: LineLoop,\n\n\tisLineLoop: true,\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  size: <float>,\n *  sizeAttenuation: <bool>\n * }\n */\n\nfunction PointsMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'PointsMaterial';\n\n\tthis.color = new Color( 0xffffff );\n\n\tthis.map = null;\n\n\tthis.size = 1;\n\tthis.sizeAttenuation = true;\n\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n}\n\nPointsMaterial.prototype = Object.create( Material.prototype );\nPointsMaterial.prototype.constructor = PointsMaterial;\n\nPointsMaterial.prototype.isPointsMaterial = true;\n\nPointsMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.map = source.map;\n\n\tthis.size = source.size;\n\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\treturn this;\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction Points( geometry, material ) {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Points';\n\n\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\tthis.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );\n\n}\n\nPoints.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Points,\n\n\tisPoints: true,\n\n\traycast: ( function () {\n\n\t\tvar inverseMatrix = new Matrix4();\n\t\tvar ray = new Ray();\n\t\tvar sphere = new Sphere();\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tvar object = this;\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Points.threshold;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\tsphere.applyMatrix4( matrixWorld );\n\t\t\tsphere.radius += threshold;\n\n\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t//\n\n\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\t\t\tvar position = new Vector3();\n\t\t\tvar intersectPoint = new Vector3();\n\n\t\t\tfunction testPoint( point, index ) {\n\n\t\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\n\n\t\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\t\t\t\tray.closestPointToPoint( point, intersectPoint );\n\t\t\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\t\t\t\tpoint: intersectPoint.clone(),\n\t\t\t\t\t\tindex: index,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tobject: object\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\n\t\t\t\t\t\tposition.fromArray( positions, a * 3 );\n\n\t\t\t\t\t\ttestPoint( position, a );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\n\t\t\t\t\t\tposition.fromArray( positions, i * 3 );\n\n\t\t\t\t\t\ttestPoint( position, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\ttestPoint( vertices[ i ], i );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}() ),\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Group() {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Group';\n\n}\n\nGroup.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Group,\n\n\tisGroup: true\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\tthis.generateMipmaps = false;\n\n}\n\nVideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {\n\n\tconstructor: VideoTexture,\n\n\tisVideoTexture: true,\n\n\tupdate: function () {\n\n\t\tvar video = this.image;\n\n\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\tthis.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\tthis.image = { width: width, height: height };\n\tthis.mipmaps = mipmaps;\n\n\t// no flipping for cube textures\n\t// (also flipping doesn't work for compressed textures )\n\n\tthis.flipY = false;\n\n\t// can't generate mipmaps for compressed textures\n\t// mips must be embedded in DDS files\n\n\tthis.generateMipmaps = false;\n\n}\n\nCompressedTexture.prototype = Object.create( Texture.prototype );\nCompressedTexture.prototype.constructor = CompressedTexture;\n\nCompressedTexture.prototype.isCompressedTexture = true;\n\n/**\n * @author Matt DesLauriers / @mattdesl\n * @author atix / arthursilber.de\n */\n\nfunction DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n\tformat = format !== undefined ? format : DepthFormat;\n\n\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\n\n\t}\n\n\tif ( type === undefined && format === DepthFormat ) type = UnsignedShortType;\n\tif ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;\n\n\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\tthis.image = { width: width, height: height };\n\n\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\tthis.flipY = false;\n\tthis.generateMipmaps\t= false;\n\n}\n\nDepthTexture.prototype = Object.create( Texture.prototype );\nDepthTexture.prototype.constructor = DepthTexture;\nDepthTexture.prototype.isDepthTexture = true;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nfunction WireframeGeometry( geometry ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'WireframeGeometry';\n\n\t// buffer\n\n\tvar vertices = [];\n\n\t// helper variables\n\n\tvar i, j, l, o, ol;\n\tvar edge = [ 0, 0 ], edges = {}, e, edge1, edge2;\n\tvar key, keys = [ 'a', 'b', 'c' ];\n\tvar vertex;\n\n\t// different logic for Geometry and BufferGeometry\n\n\tif ( geometry && geometry.isGeometry ) {\n\n\t\t// create a data structure that contains all edges without duplicates\n\n\t\tvar faces = geometry.faces;\n\n\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate vertices\n\n\t\tfor ( key in edges ) {\n\n\t\t\te = edges[ key ];\n\n\t\t\tvertex = geometry.vertices[ e.index1 ];\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\tvertex = geometry.vertices[ e.index2 ];\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t} else if ( geometry && geometry.isBufferGeometry ) {\n\n\t\tvar position, indices, groups;\n\t\tvar group, start, count;\n\t\tvar index1, index2;\n\n\t\tvertex = new Vector3();\n\n\t\tif ( geometry.index !== null ) {\n\n\t\t\t// indexed BufferGeometry\n\n\t\t\tposition = geometry.attributes.position;\n\t\t\tindices = geometry.index;\n\t\t\tgroups = geometry.groups;\n\n\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\n\n\t\t\t}\n\n\t\t\t// create a data structure that contains all eges without duplicates\n\n\t\t\tfor ( o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\tgroup = groups[ o ];\n\n\t\t\t\tstart = group.start;\n\t\t\t\tcount = group.count;\n\n\t\t\t\tfor ( i = start, l = ( start + count ); i < l; i += 3 ) {\n\n\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\tedge1 = indices.getX( i + j );\n\t\t\t\t\t\tedge2 = indices.getX( i + ( j + 1 ) % 3 );\n\t\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// generate vertices\n\n\t\t\tfor ( key in edges ) {\n\n\t\t\t\te = edges[ key ];\n\n\t\t\t\tvertex.fromBufferAttribute( position, e.index1 );\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex.fromBufferAttribute( position, e.index2 );\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// non-indexed BufferGeometry\n\n\t\t\tposition = geometry.attributes.position;\n\n\t\t\tfor ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n\t\t\t\t\tindex1 = 3 * i + j;\n\t\t\t\t\tvertex.fromBufferAttribute( position, index1 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\tindex2 = 3 * i + ( ( j + 1 ) % 3 );\n\t\t\t\t\tvertex.fromBufferAttribute( position, index2 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n}\n\nWireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\nWireframeGeometry.prototype.constructor = WireframeGeometry;\n\n/**\n * @author zz85 / https://github.com/zz85\n * @author Mugen87 / https://github.com/Mugen87\n *\n * Parametric Surfaces Geometry\n * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n */\n\n// ParametricGeometry\n\nfunction ParametricGeometry( func, slices, stacks ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'ParametricGeometry';\n\n\tthis.parameters = {\n\t\tfunc: func,\n\t\tslices: slices,\n\t\tstacks: stacks\n\t};\n\n\tthis.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );\n\tthis.mergeVertices();\n\n}\n\nParametricGeometry.prototype = Object.create( Geometry.prototype );\nParametricGeometry.prototype.constructor = ParametricGeometry;\n\n// ParametricBufferGeometry\n\nfunction ParametricBufferGeometry( func, slices, stacks ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'ParametricBufferGeometry';\n\n\tthis.parameters = {\n\t\tfunc: func,\n\t\tslices: slices,\n\t\tstacks: stacks\n\t};\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\tvar EPS = 0.00001;\n\n\tvar normal = new Vector3();\n\n\tvar p0 = new Vector3(), p1 = new Vector3();\n\tvar pu = new Vector3(), pv = new Vector3();\n\n\tvar i, j;\n\n\t// generate vertices, normals and uvs\n\n\tvar sliceCount = slices + 1;\n\n\tfor ( i = 0; i <= stacks; i ++ ) {\n\n\t\tvar v = i / stacks;\n\n\t\tfor ( j = 0; j <= slices; j ++ ) {\n\n\t\t\tvar u = j / slices;\n\n\t\t\t// vertex\n\n\t\t\tfunc( u, v, p0 );\n\t\t\tvertices.push( p0.x, p0.y, p0.z );\n\n\t\t\t// normal\n\n\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\tif ( u - EPS >= 0 ) {\n\n\t\t\t\tfunc( u - EPS, v, p1 );\n\t\t\t\tpu.subVectors( p0, p1 );\n\n\t\t\t} else {\n\n\t\t\t\tfunc( u + EPS, v, p1 );\n\t\t\t\tpu.subVectors( p1, p0 );\n\n\t\t\t}\n\n\t\t\tif ( v - EPS >= 0 ) {\n\n\t\t\t\tfunc( u, v - EPS, p1 );\n\t\t\t\tpv.subVectors( p0, p1 );\n\n\t\t\t} else {\n\n\t\t\t\tfunc( u, v + EPS, p1 );\n\t\t\t\tpv.subVectors( p1, p0 );\n\n\t\t\t}\n\n\t\t\t// cross product of tangent vectors returns surface normal\n\n\t\t\tnormal.crossVectors( pu, pv ).normalize();\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t// uv\n\n\t\t\tuvs.push( u, v );\n\n\t\t}\n\n\t}\n\n\t// generate indices\n\n\tfor ( i = 0; i < stacks; i ++ ) {\n\n\t\tfor ( j = 0; j < slices; j ++ ) {\n\n\t\t\tvar a = i * sliceCount + j;\n\t\t\tvar b = i * sliceCount + j + 1;\n\t\t\tvar c = ( i + 1 ) * sliceCount + j + 1;\n\t\t\tvar d = ( i + 1 ) * sliceCount + j;\n\n\t\t\t// faces one and two\n\n\t\t\tindices.push( a, b, d );\n\t\t\tindices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n}\n\nParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\n\n/**\n * @author clockworkgeek / https://github.com/clockworkgeek\n * @author timothypratley / https://github.com/timothypratley\n * @author WestLangley / http://github.com/WestLangley\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// PolyhedronGeometry\n\nfunction PolyhedronGeometry( vertices, indices, radius, detail ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'PolyhedronGeometry';\n\n\tthis.parameters = {\n\t\tvertices: vertices,\n\t\tindices: indices,\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tthis.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );\n\tthis.mergeVertices();\n\n}\n\nPolyhedronGeometry.prototype = Object.create( Geometry.prototype );\nPolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\n// PolyhedronBufferGeometry\n\nfunction PolyhedronBufferGeometry( vertices, indices, radius, detail ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'PolyhedronBufferGeometry';\n\n\tthis.parameters = {\n\t\tvertices: vertices,\n\t\tindices: indices,\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tradius = radius || 1;\n\tdetail = detail || 0;\n\n\t// default buffer data\n\n\tvar vertexBuffer = [];\n\tvar uvBuffer = [];\n\n\t// the subdivision creates the vertex buffer data\n\n\tsubdivide( detail );\n\n\t// all vertices should lie on a conceptual sphere with a given radius\n\n\tappplyRadius( radius );\n\n\t// finally, create the uv data\n\n\tgenerateUVs();\n\n\t// build non-indexed geometry\n\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\n\n\tif ( detail === 0 ) {\n\n\t\tthis.computeVertexNormals(); // flat normals\n\n\t} else {\n\n\t\tthis.normalizeNormals(); // smooth normals\n\n\t}\n\n\t// helper functions\n\n\tfunction subdivide( detail ) {\n\n\t\tvar a = new Vector3();\n\t\tvar b = new Vector3();\n\t\tvar c = new Vector3();\n\n\t\t// iterate over all faces and apply a subdivison with the given detail value\n\n\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t// get the vertices of the face\n\n\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\n\t\t\t// perform subdivision\n\n\t\t\tsubdivideFace( a, b, c, detail );\n\n\t\t}\n\n\t}\n\n\tfunction subdivideFace( a, b, c, detail ) {\n\n\t\tvar cols = Math.pow( 2, detail );\n\n\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\n\t\tvar v = [];\n\n\t\tvar i, j;\n\n\t\t// construct all of the vertices for this subdivision\n\n\t\tfor ( i = 0; i <= cols; i ++ ) {\n\n\t\t\tv[ i ] = [];\n\n\t\t\tvar aj = a.clone().lerp( c, i / cols );\n\t\t\tvar bj = b.clone().lerp( c, i / cols );\n\n\t\t\tvar rows = cols - i;\n\n\t\t\tfor ( j = 0; j <= rows; j ++ ) {\n\n\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// construct all of the faces\n\n\t\tfor ( i = 0; i < cols; i ++ ) {\n\n\t\t\tfor ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\tvar k = Math.floor( j / 2 );\n\n\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\t\t\t\t\tpushVertex( v[ i ][ k ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\n\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction appplyRadius( radius ) {\n\n\t\tvar vertex = new Vector3();\n\n\t\t// iterate over the entire buffer and apply the radius to each vertex\n\n\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\tvertex.normalize().multiplyScalar( radius );\n\n\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\n\t\t}\n\n\t}\n\n\tfunction generateUVs() {\n\n\t\tvar vertex = new Vector3();\n\n\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\tvar u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\tvar v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\tuvBuffer.push( u, 1 - v );\n\n\t\t}\n\n\t\tcorrectUVs();\n\n\t\tcorrectSeam();\n\n\t}\n\n\tfunction correctSeam() {\n\n\t\t// handle case when face straddles the seam, see #3269\n\n\t\tfor ( var i = 0; i < uvBuffer.length; i += 6 ) {\n\n\t\t\t// uv data of a single face\n\n\t\t\tvar x0 = uvBuffer[ i + 0 ];\n\t\t\tvar x1 = uvBuffer[ i + 2 ];\n\t\t\tvar x2 = uvBuffer[ i + 4 ];\n\n\t\t\tvar max = Math.max( x0, x1, x2 );\n\t\t\tvar min = Math.min( x0, x1, x2 );\n\n\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\tif ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;\n\t\t\t\tif ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;\n\t\t\t\tif ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction pushVertex( vertex ) {\n\n\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\n\t}\n\n\tfunction getVertexByIndex( index, vertex ) {\n\n\t\tvar stride = index * 3;\n\n\t\tvertex.x = vertices[ stride + 0 ];\n\t\tvertex.y = vertices[ stride + 1 ];\n\t\tvertex.z = vertices[ stride + 2 ];\n\n\t}\n\n\tfunction correctUVs() {\n\n\t\tvar a = new Vector3();\n\t\tvar b = new Vector3();\n\t\tvar c = new Vector3();\n\n\t\tvar centroid = new Vector3();\n\n\t\tvar uvA = new Vector2();\n\t\tvar uvB = new Vector2();\n\t\tvar uvC = new Vector2();\n\n\t\tfor ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\n\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\n\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\n\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\n\t\t\tvar azi = azimuth( centroid );\n\n\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\n\t\t}\n\n\t}\n\n\tfunction correctUV( uv, stride, vector, azimuth ) {\n\n\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\n\t\t\tuvBuffer[ stride ] = uv.x - 1;\n\n\t\t}\n\n\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\n\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\n\t\t}\n\n\t}\n\n\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\tfunction azimuth( vector ) {\n\n\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t}\n\n\n\t// Angle above the XZ plane.\n\n\tfunction inclination( vector ) {\n\n\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t}\n\n}\n\nPolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nPolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// TetrahedronGeometry\n\nfunction TetrahedronGeometry( radius, detail ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'TetrahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tthis.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );\n\tthis.mergeVertices();\n\n}\n\nTetrahedronGeometry.prototype = Object.create( Geometry.prototype );\nTetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\n// TetrahedronBufferGeometry\n\nfunction TetrahedronBufferGeometry( radius, detail ) {\n\n\tvar vertices = [\n\t\t1, 1, 1, \t- 1, - 1, 1, \t- 1, 1, - 1, \t1, - 1, - 1\n\t];\n\n\tvar indices = [\n\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\n\t];\n\n\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'TetrahedronBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n}\n\nTetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\nTetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// OctahedronGeometry\n\nfunction OctahedronGeometry( radius, detail ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'OctahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tthis.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );\n\tthis.mergeVertices();\n\n}\n\nOctahedronGeometry.prototype = Object.create( Geometry.prototype );\nOctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\n// OctahedronBufferGeometry\n\nfunction OctahedronBufferGeometry( radius, detail ) {\n\n\tvar vertices = [\n\t\t1, 0, 0, \t- 1, 0, 0,\t0, 1, 0,\n\t\t0, - 1, 0, \t0, 0, 1,\t0, 0, - 1\n\t];\n\n\tvar indices = [\n\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\n\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\n\t\t1, 3, 4,\t1, 4, 2\n\t];\n\n\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'OctahedronBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n}\n\nOctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\nOctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// IcosahedronGeometry\n\nfunction IcosahedronGeometry( radius, detail ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'IcosahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tthis.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );\n\tthis.mergeVertices();\n\n}\n\nIcosahedronGeometry.prototype = Object.create( Geometry.prototype );\nIcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\n// IcosahedronBufferGeometry\n\nfunction IcosahedronBufferGeometry( radius, detail ) {\n\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\tvar vertices = [\n\t\t- 1, t, 0, \t1, t, 0, \t- 1, - t, 0, \t1, - t, 0,\n\t\t 0, - 1, t, \t0, 1, t,\t0, - 1, - t, \t0, 1, - t,\n\t\t t, 0, - 1, \tt, 0, 1, \t- t, 0, - 1, \t- t, 0, 1\n\t];\n\n\tvar indices = [\n\t\t 0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\n\t\t 1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\n\t\t 3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\n\t\t 4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\n\t];\n\n\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'IcosahedronBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n}\n\nIcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\nIcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;\n\n/**\n * @author Abe Pazos / https://hamoid.com\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// DodecahedronGeometry\n\nfunction DodecahedronGeometry( radius, detail ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'DodecahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tthis.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );\n\tthis.mergeVertices();\n\n}\n\nDodecahedronGeometry.prototype = Object.create( Geometry.prototype );\nDodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\n// DodecahedronBufferGeometry\n\nfunction DodecahedronBufferGeometry( radius, detail ) {\n\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\tvar r = 1 / t;\n\n\tvar vertices = [\n\n\t\t// (±1, ±1, ±1)\n\t\t- 1, - 1, - 1,\t- 1, - 1, 1,\n\t\t- 1, 1, - 1, - 1, 1, 1,\n\t\t1, - 1, - 1, 1, - 1, 1,\n\t\t1, 1, - 1, 1, 1, 1,\n\n\t\t// (0, ±1/φ, ±φ)\n\t\t 0, - r, - t, 0, - r, t,\n\t\t 0, r, - t, 0, r, t,\n\n\t\t// (±1/φ, ±φ, 0)\n\t\t- r, - t, 0, - r, t, 0,\n\t\t r, - t, 0, r, t, 0,\n\n\t\t// (±φ, 0, ±1/φ)\n\t\t- t, 0, - r, t, 0, - r,\n\t\t- t, 0, r, t, 0, r\n\t];\n\n\tvar indices = [\n\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\n\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\n\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\n\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\n\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\n\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\n\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\n\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\n\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\n\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\n\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\n\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\n\t];\n\n\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'DodecahedronBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n}\n\nDodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\nDodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;\n\n/**\n * @author oosmoxiecode / https://github.com/oosmoxiecode\n * @author WestLangley / https://github.com/WestLangley\n * @author zz85 / https://github.com/zz85\n * @author miningold / https://github.com/miningold\n * @author jonobr1 / https://github.com/jonobr1\n * @author Mugen87 / https://github.com/Mugen87\n *\n */\n\n// TubeGeometry\n\nfunction TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'TubeGeometry';\n\n\tthis.parameters = {\n\t\tpath: path,\n\t\ttubularSegments: tubularSegments,\n\t\tradius: radius,\n\t\tradialSegments: radialSegments,\n\t\tclosed: closed\n\t};\n\n\tif ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );\n\n\tvar bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );\n\n\t// expose internals\n\n\tthis.tangents = bufferGeometry.tangents;\n\tthis.normals = bufferGeometry.normals;\n\tthis.binormals = bufferGeometry.binormals;\n\n\t// create geometry\n\n\tthis.fromBufferGeometry( bufferGeometry );\n\tthis.mergeVertices();\n\n}\n\nTubeGeometry.prototype = Object.create( Geometry.prototype );\nTubeGeometry.prototype.constructor = TubeGeometry;\n\n// TubeBufferGeometry\n\nfunction TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'TubeBufferGeometry';\n\n\tthis.parameters = {\n\t\tpath: path,\n\t\ttubularSegments: tubularSegments,\n\t\tradius: radius,\n\t\tradialSegments: radialSegments,\n\t\tclosed: closed\n\t};\n\n\ttubularSegments = tubularSegments || 64;\n\tradius = radius || 1;\n\tradialSegments = radialSegments || 8;\n\tclosed = closed || false;\n\n\tvar frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t// expose internals\n\n\tthis.tangents = frames.tangents;\n\tthis.normals = frames.normals;\n\tthis.binormals = frames.binormals;\n\n\t// helper variables\n\n\tvar vertex = new Vector3();\n\tvar normal = new Vector3();\n\tvar uv = new Vector2();\n\tvar P = new Vector3();\n\n\tvar i, j;\n\n\t// buffer\n\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\tvar indices = [];\n\n\t// create buffer data\n\n\tgenerateBufferData();\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t// functions\n\n\tfunction generateBufferData() {\n\n\t\tfor ( i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\tgenerateSegment( i );\n\n\t\t}\n\n\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t// at the regular position on the given path\n\t\t//\n\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t// uvs are generated in a separate function.\n\t\t// this makes it easy compute correct values for closed geometries\n\n\t\tgenerateUVs();\n\n\t\t// finally create faces\n\n\t\tgenerateIndices();\n\n\t}\n\n\tfunction generateSegment( i ) {\n\n\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\tP = path.getPointAt( i / tubularSegments, P );\n\n\t\t// retrieve corresponding normal and binormal\n\n\t\tvar N = frames.normals[ i ];\n\t\tvar B = frames.binormals[ i ];\n\n\t\t// generate normals and vertices for the current segment\n\n\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\tvar sin = Math.sin( v );\n\t\t\tvar cos = - Math.cos( v );\n\n\t\t\t// normal\n\n\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\tnormal.normalize();\n\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t}\n\n\tfunction generateIndices() {\n\n\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction generateUVs() {\n\n\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nTubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nTubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\n\n/**\n * @author oosmoxiecode\n * @author Mugen87 / https://github.com/Mugen87\n *\n * based on http://www.blackpawn.com/texts/pqtorus/\n */\n\n// TorusKnotGeometry\n\nfunction TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'TorusKnotGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\ttubularSegments: tubularSegments,\n\t\tradialSegments: radialSegments,\n\t\tp: p,\n\t\tq: q\n\t};\n\n\tif ( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\n\n\tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\tthis.mergeVertices();\n\n}\n\nTorusKnotGeometry.prototype = Object.create( Geometry.prototype );\nTorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\n// TorusKnotBufferGeometry\n\nfunction TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'TorusKnotBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\ttubularSegments: tubularSegments,\n\t\tradialSegments: radialSegments,\n\t\tp: p,\n\t\tq: q\n\t};\n\n\tradius = radius || 1;\n\ttube = tube || 0.4;\n\ttubularSegments = Math.floor( tubularSegments ) || 64;\n\tradialSegments = Math.floor( radialSegments ) || 8;\n\tp = p || 2;\n\tq = q || 3;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// helper variables\n\n\tvar i, j;\n\n\tvar vertex = new Vector3();\n\tvar normal = new Vector3();\n\n\tvar P1 = new Vector3();\n\tvar P2 = new Vector3();\n\n\tvar B = new Vector3();\n\tvar T = new Vector3();\n\tvar N = new Vector3();\n\n\t// generate vertices, normals and uvs\n\n\tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n\t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t// calculate orthonormal basis\n\n\t\tT.subVectors( P2, P1 );\n\t\tN.addVectors( P2, P1 );\n\t\tB.crossVectors( T, N );\n\t\tN.crossVectors( B, T );\n\n\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\tB.normalize();\n\t\tN.normalize();\n\n\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\tvar cx = - tube * Math.cos( v );\n\t\t\tvar cy = tube * Math.sin( v );\n\n\t\t\t// now calculate the final vertex position.\n\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t// uv\n\n\t\t\tuvs.push( i / tubularSegments );\n\t\t\tuvs.push( j / radialSegments );\n\n\t\t}\n\n\t}\n\n\t// generate indices\n\n\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t// indices\n\n\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t// faces\n\n\t\t\tindices.push( a, b, d );\n\t\t\tindices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t// this function calculates the current position on the torus curve\n\n\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\tvar cu = Math.cos( u );\n\t\tvar su = Math.sin( u );\n\t\tvar quOverP = q / p * u;\n\t\tvar cs = Math.cos( quOverP );\n\n\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t}\n\n}\n\nTorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nTorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\n/**\n * @author oosmoxiecode\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// TorusGeometry\n\nfunction TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'TorusGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\tradialSegments: radialSegments,\n\t\ttubularSegments: tubularSegments,\n\t\tarc: arc\n\t};\n\n\tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\tthis.mergeVertices();\n\n}\n\nTorusGeometry.prototype = Object.create( Geometry.prototype );\nTorusGeometry.prototype.constructor = TorusGeometry;\n\n// TorusBufferGeometry\n\nfunction TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'TorusBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\tradialSegments: radialSegments,\n\t\ttubularSegments: tubularSegments,\n\t\tarc: arc\n\t};\n\n\tradius = radius || 1;\n\ttube = tube || 0.4;\n\tradialSegments = Math.floor( radialSegments ) || 8;\n\ttubularSegments = Math.floor( tubularSegments ) || 6;\n\tarc = arc || Math.PI * 2;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// helper variables\n\n\tvar center = new Vector3();\n\tvar vertex = new Vector3();\n\tvar normal = new Vector3();\n\n\tvar j, i;\n\n\t// generate vertices, normals and uvs\n\n\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\tvar u = i / tubularSegments * arc;\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t// uv\n\n\t\t\tuvs.push( i / tubularSegments );\n\t\t\tuvs.push( j / radialSegments );\n\n\t\t}\n\n\t}\n\n\t// generate indices\n\n\tfor ( j = 1; j <= radialSegments; j ++ ) {\n\n\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t// indices\n\n\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t// faces\n\n\t\t\tindices.push( a, b, d );\n\t\t\tindices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n}\n\nTorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nTorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n * Port from https://github.com/mapbox/earcut (v2.1.2)\n */\n\nvar Earcut = {\n\n\ttriangulate: function ( data, holeIndices, dim ) {\n\n\t\tdim = dim || 2;\n\n\t\tvar hasHoles = holeIndices && holeIndices.length,\n\t\t\touterLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,\n\t\t\touterNode = linkedList( data, 0, outerLen, dim, true ),\n\t\t\ttriangles = [];\n\n\t\tif ( ! outerNode ) return triangles;\n\n\t\tvar minX, minY, maxX, maxY, x, y, invSize;\n\n\t\tif ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );\n\n\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\n\t\tif ( data.length > 80 * dim ) {\n\n\t\t\tminX = maxX = data[ 0 ];\n\t\t\tminY = maxY = data[ 1 ];\n\n\t\t\tfor ( var i = dim; i < outerLen; i += dim ) {\n\n\t\t\t\tx = data[ i ];\n\t\t\t\ty = data[ i + 1 ];\n\t\t\t\tif ( x < minX ) minX = x;\n\t\t\t\tif ( y < minY ) minY = y;\n\t\t\t\tif ( x > maxX ) maxX = x;\n\t\t\t\tif ( y > maxY ) maxY = y;\n\n\t\t\t}\n\n\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\n\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\n\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\n\t\t}\n\n\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize );\n\n\t\treturn triangles;\n\n\t}\n\n};\n\n// create a circular doubly linked list from polygon points in the specified winding order\n\nfunction linkedList( data, start, end, dim, clockwise ) {\n\n\tvar i, last;\n\n\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\n\n\t\tfor ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\n\n\t} else {\n\n\t\tfor ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\n\n\t}\n\n\tif ( last && equals( last, last.next ) ) {\n\n\t\tremoveNode( last );\n\t\tlast = last.next;\n\n\t}\n\n\treturn last;\n\n}\n\n// eliminate colinear or duplicate points\n\nfunction filterPoints( start, end ) {\n\n\tif ( ! start ) return start;\n\tif ( ! end ) end = start;\n\n\tvar p = start, again;\n\n\tdo {\n\n\t\tagain = false;\n\n\t\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\n\n\t\t\tremoveNode( p );\n\t\t\tp = end = p.prev;\n\t\t\tif ( p === p.next ) break;\n\t\t\tagain = true;\n\n\t\t} else {\n\n\t\t\tp = p.next;\n\n\t\t}\n\n\t} while ( again || p !== end );\n\n\treturn end;\n\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\n\nfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\n\n\tif ( ! ear ) return;\n\n\t// interlink polygon nodes in z-order\n\n\tif ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );\n\n\tvar stop = ear, prev, next;\n\n\t// iterate through ears, slicing them one by one\n\n\twhile ( ear.prev !== ear.next ) {\n\n\t\tprev = ear.prev;\n\t\tnext = ear.next;\n\n\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\n\n\t\t\t// cut off the triangle\n\t\t\ttriangles.push( prev.i / dim );\n\t\t\ttriangles.push( ear.i / dim );\n\t\t\ttriangles.push( next.i / dim );\n\n\t\t\tremoveNode( ear );\n\n\t\t\t// skipping the next vertice leads to less sliver triangles\n\t\t\tear = next.next;\n\t\t\tstop = next.next;\n\n\t\t\tcontinue;\n\n\t\t}\n\n\t\tear = next;\n\n\t\t// if we looped through the whole remaining polygon and can't find any more ears\n\n\t\tif ( ear === stop ) {\n\n\t\t\t// try filtering points and slicing again\n\n\t\t\tif ( ! pass ) {\n\n\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\n\n\t\t\t\t// if this didn't work, try curing all small self-intersections locally\n\n\t\t\t} else if ( pass === 1 ) {\n\n\t\t\t\tear = cureLocalIntersections( ear, triangles, dim );\n\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\n\n\t\t\t// as a last resort, try splitting the remaining polygon into two\n\n\t\t\t} else if ( pass === 2 ) {\n\n\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\n\nfunction isEar( ear ) {\n\n\tvar a = ear.prev,\n\t\tb = ear,\n\t\tc = ear.next;\n\n\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\n\n\t// now make sure we don't have other points inside the potential ear\n\tvar p = ear.next.next;\n\n\twhile ( p !== ear.prev ) {\n\n\t\tif ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) && area( p.prev, p, p.next ) >= 0 ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tp = p.next;\n\n\t}\n\n\treturn true;\n\n}\n\nfunction isEarHashed( ear, minX, minY, invSize ) {\n\n\tvar a = ear.prev,\n\t\tb = ear,\n\t\tc = ear.next;\n\n\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\n\n\t// triangle bbox; min & max are calculated like this for speed\n\n\tvar minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),\n\t\tminTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),\n\t\tmaxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),\n\t\tmaxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );\n\n\t// z-order range for the current triangle bbox;\n\n\tvar minZ = zOrder( minTX, minTY, minX, minY, invSize ),\n\t\tmaxZ = zOrder( maxTX, maxTY, minX, minY, invSize );\n\n\t// first look for points inside the triangle in increasing z-order\n\n\tvar p = ear.nextZ;\n\n\twhile ( p && p.z <= maxZ ) {\n\n\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\n\t\tp = p.nextZ;\n\n\t}\n\n\t// then look for points in decreasing z-order\n\n\tp = ear.prevZ;\n\n\twhile ( p && p.z >= minZ ) {\n\n\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\n\n\t\tp = p.prevZ;\n\n\t}\n\n\treturn true;\n\n}\n\n// go through all polygon nodes and cure small local self-intersections\n\nfunction cureLocalIntersections( start, triangles, dim ) {\n\n\tvar p = start;\n\n\tdo {\n\n\t\tvar a = p.prev, b = p.next.next;\n\n\t\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\n\n\t\t\ttriangles.push( a.i / dim );\n\t\t\ttriangles.push( p.i / dim );\n\t\t\ttriangles.push( b.i / dim );\n\n\t\t\t// remove two nodes involved\n\n\t\t\tremoveNode( p );\n\t\t\tremoveNode( p.next );\n\n\t\t\tp = start = b;\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\treturn p;\n\n}\n\n// try splitting polygon into two and triangulate them independently\n\nfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\n\n\t// look for a valid diagonal that divides the polygon into two\n\n\tvar a = start;\n\n\tdo {\n\n\t\tvar b = a.next.next;\n\n\t\twhile ( b !== a.prev ) {\n\n\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\n\n\t\t\t\t// split the polygon in two by the diagonal\n\n\t\t\t\tvar c = splitPolygon( a, b );\n\n\t\t\t\t// filter colinear points around the cuts\n\n\t\t\t\ta = filterPoints( a, a.next );\n\t\t\t\tc = filterPoints( c, c.next );\n\n\t\t\t\t// run earcut on each half\n\n\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize );\n\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tb = b.next;\n\n\t\t}\n\n\t\ta = a.next;\n\n\t} while ( a !== start );\n\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\n\nfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\n\n\tvar queue = [], i, len, start, end, list;\n\n\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\n\n\t\tstart = holeIndices[ i ] * dim;\n\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\n\t\tlist = linkedList( data, start, end, dim, false );\n\t\tif ( list === list.next ) list.steiner = true;\n\t\tqueue.push( getLeftmost( list ) );\n\n\t}\n\n\tqueue.sort( compareX );\n\n\t// process holes from left to right\n\n\tfor ( i = 0; i < queue.length; i ++ ) {\n\n\t\teliminateHole( queue[ i ], outerNode );\n\t\touterNode = filterPoints( outerNode, outerNode.next );\n\n\t}\n\n\treturn outerNode;\n\n}\n\nfunction compareX( a, b ) {\n\n\treturn a.x - b.x;\n\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\n\nfunction eliminateHole( hole, outerNode ) {\n\n\touterNode = findHoleBridge( hole, outerNode );\n\n\tif ( outerNode ) {\n\n\t\tvar b = splitPolygon( outerNode, hole );\n\n\t\tfilterPoints( b, b.next );\n\n\t}\n\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\n\nfunction findHoleBridge( hole, outerNode ) {\n\n\tvar p = outerNode,\n\t\thx = hole.x,\n\t\thy = hole.y,\n\t\tqx = - Infinity,\n\t\tm;\n\n\t// find a segment intersected by a ray from the hole's leftmost point to the left;\n\t// segment's endpoint with lesser x will be potential connection point\n\n\tdo {\n\n\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\n\n\t\t\tvar x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\n\n\t\t\tif ( x <= hx && x > qx ) {\n\n\t\t\t\tqx = x;\n\n\t\t\t\tif ( x === hx ) {\n\n\t\t\t\t\tif ( hy === p.y ) return p;\n\t\t\t\t\tif ( hy === p.next.y ) return p.next;\n\n\t\t\t\t}\n\n\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\n\t\t\t}\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== outerNode );\n\n\tif ( ! m ) return null;\n\n\tif ( hx === qx ) return m.prev; // hole touches outer segment; pick lower endpoint\n\n\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t// if there are no points found, we have a valid connection;\n\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\tvar stop = m,\n\t\tmx = m.x,\n\t\tmy = m.y,\n\t\ttanMin = Infinity,\n\t\ttan;\n\n\tp = m.next;\n\n\twhile ( p !== stop ) {\n\n\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\n\t\t\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\n\n\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\n\n\t\t\tif ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {\n\n\t\t\t\tm = p;\n\t\t\t\ttanMin = tan;\n\n\t\t\t}\n\n\t\t}\n\n\t\tp = p.next;\n\n\t}\n\n\treturn m;\n\n}\n\n// interlink polygon nodes in z-order\n\nfunction indexCurve( start, minX, minY, invSize ) {\n\n\tvar p = start;\n\n\tdo {\n\n\t\tif ( p.z === null ) p.z = zOrder( p.x, p.y, minX, minY, invSize );\n\t\tp.prevZ = p.prev;\n\t\tp.nextZ = p.next;\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\tp.prevZ.nextZ = null;\n\tp.prevZ = null;\n\n\tsortLinked( p );\n\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\nfunction sortLinked( list ) {\n\n\tvar i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;\n\n\tdo {\n\n\t\tp = list;\n\t\tlist = null;\n\t\ttail = null;\n\t\tnumMerges = 0;\n\n\t\twhile ( p ) {\n\n\t\t\tnumMerges ++;\n\t\t\tq = p;\n\t\t\tpSize = 0;\n\n\t\t\tfor ( i = 0; i < inSize; i ++ ) {\n\n\t\t\t\tpSize ++;\n\t\t\t\tq = q.nextZ;\n\t\t\t\tif ( ! q ) break;\n\n\t\t\t}\n\n\t\t\tqSize = inSize;\n\n\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\n\n\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\n\n\t\t\t\t\te = p;\n\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\tpSize --;\n\n\t\t\t\t} else {\n\n\t\t\t\t\te = q;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tqSize --;\n\n\t\t\t\t}\n\n\t\t\t\tif ( tail ) tail.nextZ = e;\n\t\t\t\telse list = e;\n\n\t\t\t\te.prevZ = tail;\n\t\t\t\ttail = e;\n\n\t\t\t}\n\n\t\t\tp = q;\n\n\t\t}\n\n\t\ttail.nextZ = null;\n\t\tinSize *= 2;\n\n\t} while ( numMerges > 1 );\n\n\treturn list;\n\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\n\nfunction zOrder( x, y, minX, minY, invSize ) {\n\n\t// coords are transformed into non-negative 15-bit integer range\n\n\tx = 32767 * ( x - minX ) * invSize;\n\ty = 32767 * ( y - minY ) * invSize;\n\n\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\n\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\n\tx = ( x | ( x << 2 ) ) & 0x33333333;\n\tx = ( x | ( x << 1 ) ) & 0x55555555;\n\n\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\n\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\n\ty = ( y | ( y << 2 ) ) & 0x33333333;\n\ty = ( y | ( y << 1 ) ) & 0x55555555;\n\n\treturn x | ( y << 1 );\n\n}\n\n// find the leftmost node of a polygon ring\n\nfunction getLeftmost( start ) {\n\n\tvar p = start, leftmost = start;\n\n\tdo {\n\n\t\tif ( p.x < leftmost.x ) leftmost = p;\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\treturn leftmost;\n\n}\n\n// check if a point lies within a convex triangle\n\nfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\n\n\treturn ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&\n\t ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&\n\t ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;\n\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\nfunction isValidDiagonal( a, b ) {\n\n\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&\n\t\tlocallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );\n\n}\n\n// signed area of a triangle\n\nfunction area( p, q, r ) {\n\n\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\n\n}\n\n// check if two points are equal\n\nfunction equals( p1, p2 ) {\n\n\treturn p1.x === p2.x && p1.y === p2.y;\n\n}\n\n// check if two segments intersect\n\nfunction intersects( p1, q1, p2, q2 ) {\n\n\tif ( ( equals( p1, q1 ) && equals( p2, q2 ) ) ||\n\t\t\t( equals( p1, q2 ) && equals( p2, q1 ) ) ) return true;\n\n\treturn area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&\n\t\t\t\t area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;\n\n}\n\n// check if a polygon diagonal intersects any polygon segments\n\nfunction intersectsPolygon( a, b ) {\n\n\tvar p = a;\n\n\tdo {\n\n\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n\t\t\t\t\t\tintersects( p, p.next, a, b ) ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== a );\n\n\treturn false;\n\n}\n\n// check if a polygon diagonal is locally inside the polygon\n\nfunction locallyInside( a, b ) {\n\n\treturn area( a.prev, a, a.next ) < 0 ?\n\t\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\n\t\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\n\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\n\nfunction middleInside( a, b ) {\n\n\tvar p = a,\n\t\tinside = false,\n\t\tpx = ( a.x + b.x ) / 2,\n\t\tpy = ( a.y + b.y ) / 2;\n\n\tdo {\n\n\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\n\t\t\t\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) ) {\n\n\t\t\tinside = ! inside;\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== a );\n\n\treturn inside;\n\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\nfunction splitPolygon( a, b ) {\n\n\tvar a2 = new Node( a.i, a.x, a.y ),\n\t\tb2 = new Node( b.i, b.x, b.y ),\n\t\tan = a.next,\n\t\tbp = b.prev;\n\n\ta.next = b;\n\tb.prev = a;\n\n\ta2.next = an;\n\tan.prev = a2;\n\n\tb2.next = a2;\n\ta2.prev = b2;\n\n\tbp.next = b2;\n\tb2.prev = bp;\n\n\treturn b2;\n\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\n\nfunction insertNode( i, x, y, last ) {\n\n\tvar p = new Node( i, x, y );\n\n\tif ( ! last ) {\n\n\t\tp.prev = p;\n\t\tp.next = p;\n\n\t} else {\n\n\t\tp.next = last.next;\n\t\tp.prev = last;\n\t\tlast.next.prev = p;\n\t\tlast.next = p;\n\n\t}\n\n\treturn p;\n\n}\n\nfunction removeNode( p ) {\n\n\tp.next.prev = p.prev;\n\tp.prev.next = p.next;\n\n\tif ( p.prevZ ) p.prevZ.nextZ = p.nextZ;\n\tif ( p.nextZ ) p.nextZ.prevZ = p.prevZ;\n\n}\n\nfunction Node( i, x, y ) {\n\n\t// vertice index in coordinates array\n\tthis.i = i;\n\n\t// vertex coordinates\n\tthis.x = x;\n\tthis.y = y;\n\n\t// previous and next vertice nodes in a polygon ring\n\tthis.prev = null;\n\tthis.next = null;\n\n\t// z-order curve value\n\tthis.z = null;\n\n\t// previous and next nodes in z-order\n\tthis.prevZ = null;\n\tthis.nextZ = null;\n\n\t// indicates whether this is a steiner point\n\tthis.steiner = false;\n\n}\n\nfunction signedArea( data, start, end, dim ) {\n\n\tvar sum = 0;\n\n\tfor ( var i = start, j = end - dim; i < end; i += dim ) {\n\n\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\n\t\tj = i;\n\n\t}\n\n\treturn sum;\n\n}\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\n\nvar ShapeUtils = {\n\n\t// calculate area of the contour polygon\n\n\tarea: function ( contour ) {\n\n\t\tvar n = contour.length;\n\t\tvar a = 0.0;\n\n\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t}\n\n\t\treturn a * 0.5;\n\n\t},\n\n\tisClockWise: function ( pts ) {\n\n\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t},\n\n\ttriangulateShape: function ( contour, holes ) {\n\n\t\tvar vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\t\tvar holeIndices = []; // array of hole indices\n\t\tvar faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\tremoveDupEndPts( contour );\n\t\taddContour( vertices, contour );\n\n\t\t//\n\n\t\tvar holeIndex = contour.length;\n\n\t\tholes.forEach( removeDupEndPts );\n\n\t\tfor ( var i = 0; i < holes.length; i ++ ) {\n\n\t\t\tholeIndices.push( holeIndex );\n\t\t\tholeIndex += holes[ i ].length;\n\t\t\taddContour( vertices, holes[ i ] );\n\n\t\t}\n\n\t\t//\n\n\t\tvar triangles = Earcut.triangulate( vertices, holeIndices );\n\n\t\t//\n\n\t\tfor ( var i = 0; i < triangles.length; i += 3 ) {\n\n\t\t\tfaces.push( triangles.slice( i, i + 3 ) );\n\n\t\t}\n\n\t\treturn faces;\n\n\t}\n\n};\n\nfunction removeDupEndPts( points ) {\n\n\tvar l = points.length;\n\n\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\tpoints.pop();\n\n\t}\n\n}\n\nfunction addContour( vertices, contour ) {\n\n\tfor ( var i = 0; i < contour.length; i ++ ) {\n\n\t\tvertices.push( contour[ i ].x );\n\t\tvertices.push( contour[ i ].y );\n\n\t}\n\n}\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n *\n * Creates extruded geometry from a path shape.\n *\n * parameters = {\n *\n *  curveSegments: <int>, // number of points on the curves\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n *  amount: <int>, // Depth to extrude the shape\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into the original shape bevel goes\n *  bevelSize: <float>, // how far from shape outline is bevel\n *  bevelSegments: <int>, // number of bevel layers\n *\n *  extrudePath: <THREE.Curve> // curve to extrude shape along\n *  frames: <Object> // containing arrays of tangents, normals, binormals\n *\n *  UVGenerator: <Object> // object that provides UV generator functions\n *\n * }\n */\n\n// ExtrudeGeometry\n\nfunction ExtrudeGeometry( shapes, options ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'ExtrudeGeometry';\n\n\tthis.parameters = {\n\t\tshapes: shapes,\n\t\toptions: options\n\t};\n\n\tthis.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );\n\tthis.mergeVertices();\n\n}\n\nExtrudeGeometry.prototype = Object.create( Geometry.prototype );\nExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\n// ExtrudeBufferGeometry\n\nfunction ExtrudeBufferGeometry( shapes, options ) {\n\n\tif ( typeof ( shapes ) === \"undefined\" ) {\n\n\t\treturn;\n\n\t}\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'ExtrudeBufferGeometry';\n\n\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\tthis.addShapeList( shapes, options );\n\n\tthis.computeVertexNormals();\n\n\t// can't really use automatic vertex normals\n\t// as then front and back sides get smoothed too\n\t// should do separate smoothing just for sides\n\n\t//this.computeVertexNormals();\n\n\t//console.log( \"took\", ( Date.now() - startTime ) );\n\n}\n\nExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;\n\nExtrudeBufferGeometry.prototype.getArrays = function () {\n\n\tvar positionAttribute = this.getAttribute( \"position\" );\n\tvar verticesArray = positionAttribute ? Array.prototype.slice.call( positionAttribute.array ) : [];\n\n\tvar uvAttribute = this.getAttribute( \"uv\" );\n\tvar uvArray = uvAttribute ? Array.prototype.slice.call( uvAttribute.array ) : [];\n\n\tvar IndexAttribute = this.index;\n\tvar indicesArray = IndexAttribute ? Array.prototype.slice.call( IndexAttribute.array ) : [];\n\n\treturn {\n\t\tposition: verticesArray,\n\t\tuv: uvArray,\n\t\tindex: indicesArray\n\t};\n\n};\n\nExtrudeBufferGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n\tvar sl = shapes.length;\n\toptions.arrays = this.getArrays();\n\n\tfor ( var s = 0; s < sl; s ++ ) {\n\n\t\tvar shape = shapes[ s ];\n\t\tthis.addShape( shape, options );\n\n\t}\n\n\tthis.setIndex( options.arrays.index );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( options.arrays.position, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( options.arrays.uv, 2 ) );\n\n};\n\nExtrudeBufferGeometry.prototype.addShape = function ( shape, options ) {\n\n\tvar arrays = options.arrays ? options.arrays : this.getArrays();\n\tvar verticesArray = arrays.position;\n\tvar indicesArray = arrays.index;\n\tvar uvArray = arrays.uv;\n\n\tvar placeholder = [];\n\n\n\tvar amount = options.amount !== undefined ? options.amount : 100;\n\n\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\n\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\n\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\n\n\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n\tvar steps = options.steps !== undefined ? options.steps : 1;\n\n\tvar extrudePath = options.extrudePath;\n\tvar extrudePts, extrudeByPath = false;\n\n\t// Use default WorldUVGenerator if no UV generators are specified.\n\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;\n\n\tvar splineTube, binormal, normal, position2;\n\tif ( extrudePath ) {\n\n\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\textrudeByPath = true;\n\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t// SETUP TNB variables\n\n\t\t// TODO1 - have a .isClosed in spline?\n\n\t\tsplineTube = options.frames !== undefined ? options.frames : extrudePath.computeFrenetFrames( steps, false );\n\n\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\tbinormal = new Vector3();\n\t\tnormal = new Vector3();\n\t\tposition2 = new Vector3();\n\n\t}\n\n\t// Safeguards if bevels are not enabled\n\n\tif ( ! bevelEnabled ) {\n\n\t\tbevelSegments = 0;\n\t\tbevelThickness = 0;\n\t\tbevelSize = 0;\n\n\t}\n\n\t// Variables initialization\n\n\tvar ahole, h, hl; // looping of holes\n\tvar scope = this;\n\n\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\tvar vertices = shapePoints.shape;\n\tvar holes = shapePoints.holes;\n\n\tvar reverse = ! ShapeUtils.isClockWise( vertices );\n\n\tif ( reverse ) {\n\n\t\tvertices = vertices.reverse();\n\n\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\n\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\tvar faces = ShapeUtils.triangulateShape( vertices, holes );\n\n\t/* Vertices */\n\n\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\tahole = holes[ h ];\n\n\t\tvertices = vertices.concat( ahole );\n\n\t}\n\n\n\tfunction scalePt2( pt, vec, size ) {\n\n\t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\n\n\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t}\n\n\tvar b, bs, t, z,\n\t\tvert, vlen = vertices.length,\n\t\tface, flen = faces.length;\n\n\n\t// Find directions for point movement\n\n\n\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t//\n\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\tvar v_prev_x = inPt.x - inPrev.x,\n\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\tvar v_next_x = inNext.x - inPt.x,\n\t\t\tv_next_y = inNext.y - inPt.y;\n\n\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t// check for collinear edges\n\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t// not collinear\n\n\t\t\t// length of vectors for normalizing\n\n\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\tvar sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\n\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t// vector from inPt to intersection point\n\n\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t//  but prevent crazy spikes\n\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\n\n\t\t\t} else {\n\n\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// handle special case of collinear edges\n\n\t\t\tvar direction_eq = false; // assumes: opposite\n\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( direction_eq ) {\n\n\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t} else {\n\n\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t}\n\n\n\tvar contourMovements = [];\n\n\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\tif ( j === il ) j = 0;\n\t\tif ( k === il ) k = 0;\n\n\t\t//  (j)---(i)---(k)\n\t\t// console.log('i,j,k', i, j , k)\n\n\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t}\n\n\tvar holesMovements = [],\n\t\toneHoleMovements, verticesMovements = contourMovements.concat();\n\n\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\tahole = holes[ h ];\n\n\t\toneHoleMovements = [];\n\n\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\tif ( j === il ) j = 0;\n\t\t\tif ( k === il ) k = 0;\n\n\t\t\t//  (j)---(i)---(k)\n\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t}\n\n\t\tholesMovements.push( oneHoleMovements );\n\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t}\n\n\n\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\tfor ( b = 0; b < bevelSegments; b ++ ) {\n\n\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\tt = b / bevelSegments;\n\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\n\t\t// contract shape\n\n\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\tv( vert.x, vert.y, - z );\n\n\t\t}\n\n\t\t// expand holes\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tbs = bevelSize;\n\n\t// Back facing vertices\n\n\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\tif ( ! extrudeByPath ) {\n\n\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t} else {\n\n\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t}\n\n\t}\n\n\t// Add stepped vertices...\n\t// Including front facing vertices\n\n\tvar s;\n\n\tfor ( s = 1; s <= steps; s ++ ) {\n\n\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\tv( vert.x, vert.y, amount / steps * s );\n\n\t\t\t} else {\n\n\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\t// Add bevel segments planes\n\n\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\tt = b / bevelSegments;\n\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\n\t\t// contract shape\n\n\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\tv( vert.x, vert.y, amount + z );\n\n\t\t}\n\n\t\t// expand holes\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y, amount + z );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/* Faces */\n\n\t// Top and bottom faces\n\n\tbuildLidFaces();\n\n\t// Sides faces\n\n\tbuildSideFaces();\n\n\n\t/////  Internal functions\n\n\tfunction buildLidFaces() {\n\n\t\tvar start = verticesArray.length / 3;\n\n\t\tif ( bevelEnabled ) {\n\n\t\t\tvar layer = 0; // steps + 1\n\t\t\tvar offset = vlen * layer;\n\n\t\t\t// Bottom faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t}\n\n\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\toffset = vlen * layer;\n\n\t\t\t// Top faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Bottom faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t}\n\n\t\t\t// Top faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t}\n\n\t\t}\n\n\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\n\n\t}\n\n\t// Create faces for the z-sides of the shape\n\n\tfunction buildSideFaces() {\n\n\t\tvar start = verticesArray.length / 3;\n\t\tvar layeroffset = 0;\n\t\tsidewalls( contour, layeroffset );\n\t\tlayeroffset += contour.length;\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t//, true\n\t\t\tlayeroffset += ahole.length;\n\n\t\t}\n\n\n\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\n\n\n\t}\n\n\tfunction sidewalls( contour, layeroffset ) {\n\n\t\tvar j, k;\n\t\ti = contour.length;\n\n\t\twhile ( -- i >= 0 ) {\n\n\t\t\tj = i;\n\t\t\tk = i - 1;\n\t\t\tif ( k < 0 ) k = contour.length - 1;\n\n\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\tvar s = 0,\n\t\t\t\tsl = steps + bevelSegments * 2;\n\n\t\t\tfor ( s = 0; s < sl; s ++ ) {\n\n\t\t\t\tvar slen1 = vlen * s;\n\t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n\t\t\t\tvar a = layeroffset + j + slen1,\n\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\tf4( a, b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction v( x, y, z ) {\n\n\t\tplaceholder.push( x );\n\t\tplaceholder.push( y );\n\t\tplaceholder.push( z );\n\n\t}\n\n\n\tfunction f3( a, b, c ) {\n\n\t\taddVertex( a );\n\t\taddVertex( b );\n\t\taddVertex( c );\n\n\t\tvar nextIndex = verticesArray.length / 3;\n\t\tvar uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\taddUV( uvs[ 0 ] );\n\t\taddUV( uvs[ 1 ] );\n\t\taddUV( uvs[ 2 ] );\n\n\t}\n\n\tfunction f4( a, b, c, d ) {\n\n\t\taddVertex( a );\n\t\taddVertex( b );\n\t\taddVertex( d );\n\n\t\taddVertex( b );\n\t\taddVertex( c );\n\t\taddVertex( d );\n\n\n\t\tvar nextIndex = verticesArray.length / 3;\n\t\tvar uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\taddUV( uvs[ 0 ] );\n\t\taddUV( uvs[ 1 ] );\n\t\taddUV( uvs[ 3 ] );\n\n\t\taddUV( uvs[ 1 ] );\n\t\taddUV( uvs[ 2 ] );\n\t\taddUV( uvs[ 3 ] );\n\n\t}\n\n\tfunction addVertex( index ) {\n\n\t\tindicesArray.push( verticesArray.length / 3 );\n\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\n\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\n\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\n\n\t}\n\n\n\tfunction addUV( vector2 ) {\n\n\t\tuvArray.push( vector2.x );\n\t\tuvArray.push( vector2.y );\n\n\t}\n\n\tif ( ! options.arrays ) {\n\n\t\tthis.setIndex( indicesArray );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\n\n\t}\n\n};\n\nExtrudeGeometry.WorldUVGenerator = {\n\n\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\n\n\t\tvar a_x = vertices[ indexA * 3 ];\n\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\tvar b_x = vertices[ indexB * 3 ];\n\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\tvar c_x = vertices[ indexC * 3 ];\n\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\n\t\treturn [\n\t\t\tnew Vector2( a_x, a_y ),\n\t\t\tnew Vector2( b_x, b_y ),\n\t\t\tnew Vector2( c_x, c_y )\n\t\t];\n\n\t},\n\n\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\n\n\t\tvar a_x = vertices[ indexA * 3 ];\n\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\tvar a_z = vertices[ indexA * 3 + 2 ];\n\t\tvar b_x = vertices[ indexB * 3 ];\n\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\tvar b_z = vertices[ indexB * 3 + 2 ];\n\t\tvar c_x = vertices[ indexC * 3 ];\n\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\t\tvar c_z = vertices[ indexC * 3 + 2 ];\n\t\tvar d_x = vertices[ indexD * 3 ];\n\t\tvar d_y = vertices[ indexD * 3 + 1 ];\n\t\tvar d_z = vertices[ indexD * 3 + 2 ];\n\n\t\tif ( Math.abs( a_y - b_y ) < 0.01 ) {\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_x, 1 - a_z ),\n\t\t\t\tnew Vector2( b_x, 1 - b_z ),\n\t\t\t\tnew Vector2( c_x, 1 - c_z ),\n\t\t\t\tnew Vector2( d_x, 1 - d_z )\n\t\t\t];\n\n\t\t} else {\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_y, 1 - a_z ),\n\t\t\t\tnew Vector2( b_y, 1 - b_z ),\n\t\t\t\tnew Vector2( c_y, 1 - c_z ),\n\t\t\t\tnew Vector2( d_y, 1 - d_z )\n\t\t\t];\n\n\t\t}\n\n\t}\n};\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author alteredq / http://alteredqualia.com/\n *\n * Text = 3D Text\n *\n * parameters = {\n *  font: <THREE.Font>, // font\n *\n *  size: <float>, // size of the text\n *  height: <float>, // thickness to extrude text\n *  curveSegments: <int>, // number of points on the curves\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into text bevel goes\n *  bevelSize: <float> // how far from text outline is bevel\n * }\n */\n\n// TextGeometry\n\nfunction TextGeometry( text, parameters ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'TextGeometry';\n\n\tthis.parameters = {\n\t\ttext: text,\n\t\tparameters: parameters\n\t};\n\n\tthis.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );\n\tthis.mergeVertices();\n\n}\n\nTextGeometry.prototype = Object.create( Geometry.prototype );\nTextGeometry.prototype.constructor = TextGeometry;\n\n// TextBufferGeometry\n\nfunction TextBufferGeometry( text, parameters ) {\n\n\tparameters = parameters || {};\n\n\tvar font = parameters.font;\n\n\tif ( ! ( font && font.isFont ) ) {\n\n\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t\treturn new Geometry();\n\n\t}\n\n\tvar shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );\n\n\t// translate parameters to ExtrudeGeometry API\n\n\tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\n\n\t// defaults\n\n\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n\tExtrudeBufferGeometry.call( this, shapes, parameters );\n\n\tthis.type = 'TextBufferGeometry';\n\n}\n\nTextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );\nTextBufferGeometry.prototype.constructor = TextBufferGeometry;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author benaadams / https://twitter.com/ben_a_adams\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// SphereGeometry\n\nfunction SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'SphereGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\tthis.mergeVertices();\n\n}\n\nSphereGeometry.prototype = Object.create( Geometry.prototype );\nSphereGeometry.prototype.constructor = SphereGeometry;\n\n// SphereBufferGeometry\n\nfunction SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'SphereBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tradius = radius || 1;\n\n\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n\tphiStart = phiStart !== undefined ? phiStart : 0;\n\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n\tvar thetaEnd = thetaStart + thetaLength;\n\n\tvar ix, iy;\n\n\tvar index = 0;\n\tvar grid = [];\n\n\tvar vertex = new Vector3();\n\tvar normal = new Vector3();\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// generate vertices, normals and uvs\n\n\tfor ( iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\tvar verticesRow = [];\n\n\t\tvar v = iy / heightSegments;\n\n\t\tfor ( ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\tvar u = ix / widthSegments;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormal.set( vertex.x, vertex.y, vertex.z ).normalize();\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t// uv\n\n\t\t\tuvs.push( u, 1 - v );\n\n\t\t\tverticesRow.push( index ++ );\n\n\t\t}\n\n\t\tgrid.push( verticesRow );\n\n\t}\n\n\t// indices\n\n\tfor ( iy = 0; iy < heightSegments; iy ++ ) {\n\n\t\tfor ( ix = 0; ix < widthSegments; ix ++ ) {\n\n\t\t\tvar a = grid[ iy ][ ix + 1 ];\n\t\t\tvar b = grid[ iy ][ ix ];\n\t\t\tvar c = grid[ iy + 1 ][ ix ];\n\t\t\tvar d = grid[ iy + 1 ][ ix + 1 ];\n\n\t\t\tif ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );\n\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n}\n\nSphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nSphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\n/**\n * @author Kaleb Murphy\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// RingGeometry\n\nfunction RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'RingGeometry';\n\n\tthis.parameters = {\n\t\tinnerRadius: innerRadius,\n\t\touterRadius: outerRadius,\n\t\tthetaSegments: thetaSegments,\n\t\tphiSegments: phiSegments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\tthis.mergeVertices();\n\n}\n\nRingGeometry.prototype = Object.create( Geometry.prototype );\nRingGeometry.prototype.constructor = RingGeometry;\n\n// RingBufferGeometry\n\nfunction RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'RingBufferGeometry';\n\n\tthis.parameters = {\n\t\tinnerRadius: innerRadius,\n\t\touterRadius: outerRadius,\n\t\tthetaSegments: thetaSegments,\n\t\tphiSegments: phiSegments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tinnerRadius = innerRadius || 0.5;\n\touterRadius = outerRadius || 1;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// some helper variables\n\n\tvar segment;\n\tvar radius = innerRadius;\n\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\tvar vertex = new Vector3();\n\tvar uv = new Vector2();\n\tvar j, i;\n\n\t// generate vertices, normals and uvs\n\n\tfor ( j = 0; j <= phiSegments; j ++ ) {\n\n\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t// uv\n\n\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t}\n\n\t\t// increase the radius for next row of vertices\n\n\t\tradius += radiusStep;\n\n\t}\n\n\t// indices\n\n\tfor ( j = 0; j < phiSegments; j ++ ) {\n\n\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\tsegment = i + thetaSegmentLevel;\n\n\t\t\tvar a = segment;\n\t\t\tvar b = segment + thetaSegments + 1;\n\t\t\tvar c = segment + thetaSegments + 2;\n\t\t\tvar d = segment + 1;\n\n\t\t\t// faces\n\n\t\t\tindices.push( a, b, d );\n\t\t\tindices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n}\n\nRingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nRingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\n/**\n * @author astrodud / http://astrodud.isgreat.org/\n * @author zz85 / https://github.com/zz85\n * @author bhouston / http://clara.io\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// LatheGeometry\n\nfunction LatheGeometry( points, segments, phiStart, phiLength ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'LatheGeometry';\n\n\tthis.parameters = {\n\t\tpoints: points,\n\t\tsegments: segments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength\n\t};\n\n\tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\tthis.mergeVertices();\n\n}\n\nLatheGeometry.prototype = Object.create( Geometry.prototype );\nLatheGeometry.prototype.constructor = LatheGeometry;\n\n// LatheBufferGeometry\n\nfunction LatheBufferGeometry( points, segments, phiStart, phiLength ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'LatheBufferGeometry';\n\n\tthis.parameters = {\n\t\tpoints: points,\n\t\tsegments: segments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength\n\t};\n\n\tsegments = Math.floor( segments ) || 12;\n\tphiStart = phiStart || 0;\n\tphiLength = phiLength || Math.PI * 2;\n\n\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\n\tphiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );\n\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar uvs = [];\n\n\t// helper variables\n\n\tvar base;\n\tvar inverseSegments = 1.0 / segments;\n\tvar vertex = new Vector3();\n\tvar uv = new Vector2();\n\tvar i, j;\n\n\t// generate vertices and uvs\n\n\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n\t\tvar sin = Math.sin( phi );\n\t\tvar cos = Math.cos( phi );\n\n\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\tvertex.y = points[ j ].y;\n\t\t\tvertex.z = points[ j ].x * cos;\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// uv\n\n\t\t\tuv.x = i / segments;\n\t\t\tuv.y = j / ( points.length - 1 );\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\n\t\t}\n\n\t}\n\n\t// indices\n\n\tfor ( i = 0; i < segments; i ++ ) {\n\n\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\tbase = j + i * points.length;\n\n\t\t\tvar a = base;\n\t\t\tvar b = base + points.length;\n\t\t\tvar c = base + points.length + 1;\n\t\t\tvar d = base + 1;\n\n\t\t\t// faces\n\n\t\t\tindices.push( a, b, d );\n\t\t\tindices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t// generate normals\n\n\tthis.computeVertexNormals();\n\n\t// if the geometry is closed, we need to average the normals along the seam.\n\t// because the corresponding vertices are identical (but still have different UVs).\n\n\tif ( phiLength === Math.PI * 2 ) {\n\n\t\tvar normals = this.attributes.normal.array;\n\t\tvar n1 = new Vector3();\n\t\tvar n2 = new Vector3();\n\t\tvar n = new Vector3();\n\n\t\t// this is the buffer offset for the last line of vertices\n\n\t\tbase = segments * points.length * 3;\n\n\t\tfor ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\n\t\t\t// select the normal of the vertex in the first line\n\n\t\t\tn1.x = normals[ j + 0 ];\n\t\t\tn1.y = normals[ j + 1 ];\n\t\t\tn1.z = normals[ j + 2 ];\n\n\t\t\t// select the normal of the vertex in the last line\n\n\t\t\tn2.x = normals[ base + j + 0 ];\n\t\t\tn2.y = normals[ base + j + 1 ];\n\t\t\tn2.z = normals[ base + j + 2 ];\n\n\t\t\t// average normals\n\n\t\t\tn.addVectors( n1, n2 ).normalize();\n\n\t\t\t// assign the new values to both normals\n\n\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\n\t\t}\n\n\t}\n\n}\n\nLatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nLatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\n/**\n * @author jonobr1 / http://jonobr1.com\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// ShapeGeometry\n\nfunction ShapeGeometry( shapes, curveSegments ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'ShapeGeometry';\n\n\tif ( typeof curveSegments === 'object' ) {\n\n\t\tconsole.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );\n\n\t\tcurveSegments = curveSegments.curveSegments;\n\n\t}\n\n\tthis.parameters = {\n\t\tshapes: shapes,\n\t\tcurveSegments: curveSegments\n\t};\n\n\tthis.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );\n\tthis.mergeVertices();\n\n}\n\nShapeGeometry.prototype = Object.create( Geometry.prototype );\nShapeGeometry.prototype.constructor = ShapeGeometry;\n\nShapeGeometry.prototype.toJSON = function () {\n\n\tvar data = Geometry.prototype.toJSON.call( this );\n\n\tvar shapes = this.parameters.shapes;\n\n\treturn toJSON( shapes, data );\n\n};\n\n// ShapeBufferGeometry\n\nfunction ShapeBufferGeometry( shapes, curveSegments ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'ShapeBufferGeometry';\n\n\tthis.parameters = {\n\t\tshapes: shapes,\n\t\tcurveSegments: curveSegments\n\t};\n\n\tcurveSegments = curveSegments || 12;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// helper variables\n\n\tvar groupStart = 0;\n\tvar groupCount = 0;\n\n\t// allow single and array values for \"shapes\" parameter\n\n\tif ( Array.isArray( shapes ) === false ) {\n\n\t\taddShape( shapes );\n\n\t} else {\n\n\t\tfor ( var i = 0; i < shapes.length; i ++ ) {\n\n\t\t\taddShape( shapes[ i ] );\n\n\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n\n\t\t\tgroupStart += groupCount;\n\t\t\tgroupCount = 0;\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t// helper functions\n\n\tfunction addShape( shape ) {\n\n\t\tvar i, l, shapeHole;\n\n\t\tvar indexOffset = vertices.length / 3;\n\t\tvar points = shape.extractPoints( curveSegments );\n\n\t\tvar shapeVertices = points.shape;\n\t\tvar shapeHoles = points.holes;\n\n\t\t// check direction of vertices\n\n\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n\n\t\t\tshapeVertices = shapeVertices.reverse();\n\n\t\t\t// also check if holes are in the opposite direction\n\n\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tshapeHole = shapeHoles[ i ];\n\n\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n\n\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n\n\t\t// join vertices of inner and outer paths to a single array\n\n\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\tshapeHole = shapeHoles[ i ];\n\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\n\n\t\t}\n\n\t\t// vertices, normals, uvs\n\n\t\tfor ( i = 0, l = shapeVertices.length; i < l; i ++ ) {\n\n\t\t\tvar vertex = shapeVertices[ i ];\n\n\t\t\tvertices.push( vertex.x, vertex.y, 0 );\n\t\t\tnormals.push( 0, 0, 1 );\n\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\n\n\t\t}\n\n\t\t// incides\n\n\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tvar a = face[ 0 ] + indexOffset;\n\t\t\tvar b = face[ 1 ] + indexOffset;\n\t\t\tvar c = face[ 2 ] + indexOffset;\n\n\t\t\tindices.push( a, b, c );\n\t\t\tgroupCount += 3;\n\n\t\t}\n\n\t}\n\n}\n\nShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;\n\nShapeBufferGeometry.prototype.toJSON = function () {\n\n\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\tvar shapes = this.parameters.shapes;\n\n\treturn toJSON( shapes, data );\n\n};\n\n//\n\nfunction toJSON( shapes, data ) {\n\n\tdata.shapes = [];\n\n\tif ( Array.isArray( shapes ) ) {\n\n\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tvar shape = shapes[ i ];\n\n\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t}\n\n\t} else {\n\n\t\tdata.shapes.push( shapes.uuid );\n\n\t}\n\n\treturn data;\n\n}\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nfunction EdgesGeometry( geometry, thresholdAngle ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'EdgesGeometry';\n\n\tthis.parameters = {\n\t\tthresholdAngle: thresholdAngle\n\t};\n\n\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n\t// buffer\n\n\tvar vertices = [];\n\n\t// helper variables\n\n\tvar thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );\n\tvar edge = [ 0, 0 ], edges = {}, edge1, edge2;\n\tvar key, keys = [ 'a', 'b', 'c' ];\n\n\t// prepare source geometry\n\n\tvar geometry2;\n\n\tif ( geometry.isBufferGeometry ) {\n\n\t\tgeometry2 = new Geometry();\n\t\tgeometry2.fromBufferGeometry( geometry );\n\n\t} else {\n\n\t\tgeometry2 = geometry.clone();\n\n\t}\n\n\tgeometry2.mergeVertices();\n\tgeometry2.computeFaceNormals();\n\n\tvar sourceVertices = geometry2.vertices;\n\tvar faces = geometry2.faces;\n\n\t// now create a data structure where each entry represents an edge with its adjoining faces\n\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\tvar face = faces[ i ];\n\n\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\tedge[ 0 ] = Math.min( edge1, edge2 );\n\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };\n\n\t\t\t} else {\n\n\t\t\t\tedges[ key ].face2 = i;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// generate vertices\n\n\tfor ( key in edges ) {\n\n\t\tvar e = edges[ key ];\n\n\t\t// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n\n\t\tif ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {\n\n\t\t\tvar vertex = sourceVertices[ e.index1 ];\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\tvertex = sourceVertices[ e.index2 ];\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n}\n\nEdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\nEdgesGeometry.prototype.constructor = EdgesGeometry;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n// CylinderGeometry\n\nfunction CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'CylinderGeometry';\n\n\tthis.parameters = {\n\t\tradiusTop: radiusTop,\n\t\tradiusBottom: radiusBottom,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\topenEnded: openEnded,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\tthis.mergeVertices();\n\n}\n\nCylinderGeometry.prototype = Object.create( Geometry.prototype );\nCylinderGeometry.prototype.constructor = CylinderGeometry;\n\n// CylinderBufferGeometry\n\nfunction CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'CylinderBufferGeometry';\n\n\tthis.parameters = {\n\t\tradiusTop: radiusTop,\n\t\tradiusBottom: radiusBottom,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\topenEnded: openEnded,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tvar scope = this;\n\n\tradiusTop = radiusTop !== undefined ? radiusTop : 1;\n\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 1;\n\theight = height || 1;\n\n\tradialSegments = Math.floor( radialSegments ) || 8;\n\theightSegments = Math.floor( heightSegments ) || 1;\n\n\topenEnded = openEnded !== undefined ? openEnded : false;\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// helper variables\n\n\tvar index = 0;\n\tvar indexArray = [];\n\tvar halfHeight = height / 2;\n\tvar groupStart = 0;\n\n\t// generate geometry\n\n\tgenerateTorso();\n\n\tif ( openEnded === false ) {\n\n\t\tif ( radiusTop > 0 ) generateCap( true );\n\t\tif ( radiusBottom > 0 ) generateCap( false );\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\tfunction generateTorso() {\n\n\t\tvar x, y;\n\t\tvar normal = new Vector3();\n\t\tvar vertex = new Vector3();\n\n\t\tvar groupCount = 0;\n\n\t\t// this will be used to calculate the normal\n\t\tvar slope = ( radiusBottom - radiusTop ) / height;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\tvar indexRow = [];\n\n\t\t\tvar v = y / heightSegments;\n\n\t\t\t// calculate the radius of the current row\n\n\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tvar u = x / radialSegments;\n\n\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\tvar sinTheta = Math.sin( theta );\n\t\t\t\tvar cosTheta = Math.cos( theta );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\t// save index of vertex in respective row\n\n\t\t\t\tindexRow.push( index ++ );\n\n\t\t\t}\n\n\t\t\t// now save vertices of the row in our index array\n\n\t\t\tindexArray.push( indexRow );\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t// we use the index array to access the correct indices\n\n\t\t\t\tvar a = indexArray[ y ][ x ];\n\t\t\t\tvar b = indexArray[ y + 1 ][ x ];\n\t\t\t\tvar c = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\tvar d = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t// update group counter\n\n\t\t\t\tgroupCount += 6;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t// calculate new start value for groups\n\n\t\tgroupStart += groupCount;\n\n\t}\n\n\tfunction generateCap( top ) {\n\n\t\tvar x, centerIndexStart, centerIndexEnd;\n\n\t\tvar uv = new Vector2();\n\t\tvar vertex = new Vector3();\n\n\t\tvar groupCount = 0;\n\n\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\tvar sign = ( top === true ) ? 1 : - 1;\n\n\t\t// save the index of the first center vertex\n\t\tcenterIndexStart = index;\n\n\t\t// first we generate the center vertex data of the cap.\n\t\t// because the geometry needs one set of uvs per face,\n\t\t// we must generate a center vertex per face/segment\n\n\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t// vertex\n\n\t\t\tvertices.push( 0, halfHeight * sign, 0 );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t// uv\n\n\t\t\tuvs.push( 0.5, 0.5 );\n\n\t\t\t// increase index\n\n\t\t\tindex ++;\n\n\t\t}\n\n\t\t// save the index of the last center vertex\n\n\t\tcenterIndexEnd = index;\n\n\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\tvar u = x / radialSegments;\n\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\tvar cosTheta = Math.cos( theta );\n\t\t\tvar sinTheta = Math.sin( theta );\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * sinTheta;\n\t\t\tvertex.y = halfHeight * sign;\n\t\t\tvertex.z = radius * cosTheta;\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t// uv\n\n\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t// increase index\n\n\t\t\tindex ++;\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\tvar c = centerIndexStart + x;\n\t\t\tvar i = centerIndexEnd + x;\n\n\t\t\tif ( top === true ) {\n\n\t\t\t\t// face top\n\n\t\t\t\tindices.push( i, i + 1, c );\n\n\t\t\t} else {\n\n\t\t\t\t// face bottom\n\n\t\t\t\tindices.push( i + 1, i, c );\n\n\t\t\t}\n\n\t\t\tgroupCount += 3;\n\n\t\t}\n\n\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t// calculate new start value for groups\n\n\t\tgroupStart += groupCount;\n\n\t}\n\n}\n\nCylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nCylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\n/**\n * @author abelnation / http://github.com/abelnation\n */\n\n// ConeGeometry\n\nfunction ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\tCylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\tthis.type = 'ConeGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\topenEnded: openEnded,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n}\n\nConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\nConeGeometry.prototype.constructor = ConeGeometry;\n\n// ConeBufferGeometry\n\nfunction ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\tCylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\tthis.type = 'ConeBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\topenEnded: openEnded,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n}\n\nConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );\nConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n * @author Mugen87 / https://github.com/Mugen87\n * @author hughes\n */\n\n// CircleGeometry\n\nfunction CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'CircleGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tsegments: segments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\tthis.mergeVertices();\n\n}\n\nCircleGeometry.prototype = Object.create( Geometry.prototype );\nCircleGeometry.prototype.constructor = CircleGeometry;\n\n// CircleBufferGeometry\n\nfunction CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'CircleBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tsegments: segments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tradius = radius || 1;\n\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// helper variables\n\n\tvar i, s;\n\tvar vertex = new Vector3();\n\tvar uv = new Vector2();\n\n\t// center point\n\n\tvertices.push( 0, 0, 0 );\n\tnormals.push( 0, 0, 1 );\n\tuvs.push( 0.5, 0.5 );\n\n\tfor ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n\n\t\tvar segment = thetaStart + s / segments * thetaLength;\n\n\t\t// vertex\n\n\t\tvertex.x = radius * Math.cos( segment );\n\t\tvertex.y = radius * Math.sin( segment );\n\n\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t// normal\n\n\t\tnormals.push( 0, 0, 1 );\n\n\t\t// uvs\n\n\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\n\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n\n\t\tuvs.push( uv.x, uv.y );\n\n\t}\n\n\t// indices\n\n\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\tindices.push( i, i + 1, 0 );\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n}\n\nCircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nCircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\n\n\nvar Geometries = Object.freeze({\n\tWireframeGeometry: WireframeGeometry,\n\tParametricGeometry: ParametricGeometry,\n\tParametricBufferGeometry: ParametricBufferGeometry,\n\tTetrahedronGeometry: TetrahedronGeometry,\n\tTetrahedronBufferGeometry: TetrahedronBufferGeometry,\n\tOctahedronGeometry: OctahedronGeometry,\n\tOctahedronBufferGeometry: OctahedronBufferGeometry,\n\tIcosahedronGeometry: IcosahedronGeometry,\n\tIcosahedronBufferGeometry: IcosahedronBufferGeometry,\n\tDodecahedronGeometry: DodecahedronGeometry,\n\tDodecahedronBufferGeometry: DodecahedronBufferGeometry,\n\tPolyhedronGeometry: PolyhedronGeometry,\n\tPolyhedronBufferGeometry: PolyhedronBufferGeometry,\n\tTubeGeometry: TubeGeometry,\n\tTubeBufferGeometry: TubeBufferGeometry,\n\tTorusKnotGeometry: TorusKnotGeometry,\n\tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n\tTorusGeometry: TorusGeometry,\n\tTorusBufferGeometry: TorusBufferGeometry,\n\tTextGeometry: TextGeometry,\n\tTextBufferGeometry: TextBufferGeometry,\n\tSphereGeometry: SphereGeometry,\n\tSphereBufferGeometry: SphereBufferGeometry,\n\tRingGeometry: RingGeometry,\n\tRingBufferGeometry: RingBufferGeometry,\n\tPlaneGeometry: PlaneGeometry,\n\tPlaneBufferGeometry: PlaneBufferGeometry,\n\tLatheGeometry: LatheGeometry,\n\tLatheBufferGeometry: LatheBufferGeometry,\n\tShapeGeometry: ShapeGeometry,\n\tShapeBufferGeometry: ShapeBufferGeometry,\n\tExtrudeGeometry: ExtrudeGeometry,\n\tExtrudeBufferGeometry: ExtrudeBufferGeometry,\n\tEdgesGeometry: EdgesGeometry,\n\tConeGeometry: ConeGeometry,\n\tConeBufferGeometry: ConeBufferGeometry,\n\tCylinderGeometry: CylinderGeometry,\n\tCylinderBufferGeometry: CylinderBufferGeometry,\n\tCircleGeometry: CircleGeometry,\n\tCircleBufferGeometry: CircleBufferGeometry,\n\tBoxGeometry: BoxGeometry,\n\tBoxBufferGeometry: BoxBufferGeometry\n});\n\n/**\n * @author mrdoob / http://mrdoob.com/\n *\n * parameters = {\n *  color: <THREE.Color>\n * }\n */\n\nfunction ShadowMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'ShadowMaterial';\n\n\tthis.color = new Color( 0x000000 );\n\tthis.transparent = true;\n\n\tthis.setValues( parameters );\n\n}\n\nShadowMaterial.prototype = Object.create( Material.prototype );\nShadowMaterial.prototype.constructor = ShadowMaterial;\n\nShadowMaterial.prototype.isShadowMaterial = true;\n\nShadowMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\treturn this;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction RawShaderMaterial( parameters ) {\n\n\tShaderMaterial.call( this, parameters );\n\n\tthis.type = 'RawShaderMaterial';\n\n}\n\nRawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\nRawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\nRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  color: <hex>,\n *  roughness: <float>,\n *  metalness: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  roughnessMap: new THREE.Texture( <Image> ),\n *\n *  metalnessMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  envMapIntensity: <float>\n *\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nfunction MeshStandardMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.defines = { 'STANDARD': '' };\n\n\tthis.type = 'MeshStandardMaterial';\n\n\tthis.color = new Color( 0xffffff ); // diffuse\n\tthis.roughness = 0.5;\n\tthis.metalness = 0.5;\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.emissive = new Color( 0x000000 );\n\tthis.emissiveIntensity = 1.0;\n\tthis.emissiveMap = null;\n\n\tthis.bumpMap = null;\n\tthis.bumpScale = 1;\n\n\tthis.normalMap = null;\n\tthis.normalScale = new Vector2( 1, 1 );\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.roughnessMap = null;\n\n\tthis.metalnessMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.envMapIntensity = 1.0;\n\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshStandardMaterial.prototype = Object.create( Material.prototype );\nMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\nMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\nMeshStandardMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.defines = { 'STANDARD': '' };\n\n\tthis.color.copy( source.color );\n\tthis.roughness = source.roughness;\n\tthis.metalness = source.metalness;\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.emissive.copy( source.emissive );\n\tthis.emissiveMap = source.emissiveMap;\n\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\tthis.bumpMap = source.bumpMap;\n\tthis.bumpScale = source.bumpScale;\n\n\tthis.normalMap = source.normalMap;\n\tthis.normalScale.copy( source.normalScale );\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.roughnessMap = source.roughnessMap;\n\n\tthis.metalnessMap = source.metalnessMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.envMapIntensity = source.envMapIntensity;\n\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  reflectivity: <float>\n * }\n */\n\nfunction MeshPhysicalMaterial( parameters ) {\n\n\tMeshStandardMaterial.call( this );\n\n\tthis.defines = { 'PHYSICAL': '' };\n\n\tthis.type = 'MeshPhysicalMaterial';\n\n\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\tthis.clearCoat = 0.0;\n\tthis.clearCoatRoughness = 0.0;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\nMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\nMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\nMeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n\tMeshStandardMaterial.prototype.copy.call( this, source );\n\n\tthis.defines = { 'PHYSICAL': '' };\n\n\tthis.reflectivity = source.reflectivity;\n\n\tthis.clearCoat = source.clearCoat;\n\tthis.clearCoatRoughness = source.clearCoatRoughness;\n\n\treturn this;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  specular: <hex>,\n *  shininess: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nfunction MeshPhongMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'MeshPhongMaterial';\n\n\tthis.color = new Color( 0xffffff ); // diffuse\n\tthis.specular = new Color( 0x111111 );\n\tthis.shininess = 30;\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.emissive = new Color( 0x000000 );\n\tthis.emissiveIntensity = 1.0;\n\tthis.emissiveMap = null;\n\n\tthis.bumpMap = null;\n\tthis.bumpScale = 1;\n\n\tthis.normalMap = null;\n\tthis.normalScale = new Vector2( 1, 1 );\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshPhongMaterial.prototype = Object.create( Material.prototype );\nMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\nMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\nMeshPhongMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\tthis.specular.copy( source.specular );\n\tthis.shininess = source.shininess;\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.emissive.copy( source.emissive );\n\tthis.emissiveMap = source.emissiveMap;\n\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\tthis.bumpMap = source.bumpMap;\n\tthis.bumpScale = source.bumpScale;\n\n\tthis.normalMap = source.normalMap;\n\tthis.normalScale.copy( source.normalScale );\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.specularMap = source.specularMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.combine = source.combine;\n\tthis.reflectivity = source.reflectivity;\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n/**\n * @author takahirox / http://github.com/takahirox\n *\n * parameters = {\n *  gradientMap: new THREE.Texture( <Image> )\n * }\n */\n\nfunction MeshToonMaterial( parameters ) {\n\n\tMeshPhongMaterial.call( this );\n\n\tthis.defines = { 'TOON': '' };\n\n\tthis.type = 'MeshToonMaterial';\n\n\tthis.gradientMap = null;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );\nMeshToonMaterial.prototype.constructor = MeshToonMaterial;\n\nMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\nMeshToonMaterial.prototype.copy = function ( source ) {\n\n\tMeshPhongMaterial.prototype.copy.call( this, source );\n\n\tthis.gradientMap = source.gradientMap;\n\n\treturn this;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  opacity: <float>,\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nfunction MeshNormalMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'MeshNormalMaterial';\n\n\tthis.bumpMap = null;\n\tthis.bumpScale = 1;\n\n\tthis.normalMap = null;\n\tthis.normalScale = new Vector2( 1, 1 );\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\n\tthis.fog = false;\n\tthis.lights = false;\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshNormalMaterial.prototype = Object.create( Material.prototype );\nMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\nMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\nMeshNormalMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.bumpMap = source.bumpMap;\n\tthis.bumpScale = source.bumpScale;\n\n\tthis.normalMap = source.normalMap;\n\tthis.normalScale.copy( source.normalScale );\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nfunction MeshLambertMaterial( parameters ) {\n\n\tMaterial.call( this );\n\n\tthis.type = 'MeshLambertMaterial';\n\n\tthis.color = new Color( 0xffffff ); // diffuse\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.emissive = new Color( 0x000000 );\n\tthis.emissiveIntensity = 1.0;\n\tthis.emissiveMap = null;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshLambertMaterial.prototype = Object.create( Material.prototype );\nMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\nMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\nMeshLambertMaterial.prototype.copy = function ( source ) {\n\n\tMaterial.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.emissive.copy( source.emissive );\n\tthis.emissiveMap = source.emissiveMap;\n\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\tthis.specularMap = source.specularMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.combine = source.combine;\n\tthis.reflectivity = source.reflectivity;\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  linewidth: <float>,\n *\n *  scale: <float>,\n *  dashSize: <float>,\n *  gapSize: <float>\n * }\n */\n\nfunction LineDashedMaterial( parameters ) {\n\n\tLineBasicMaterial.call( this );\n\n\tthis.type = 'LineDashedMaterial';\n\n\tthis.scale = 1;\n\tthis.dashSize = 3;\n\tthis.gapSize = 1;\n\n\tthis.setValues( parameters );\n\n}\n\nLineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );\nLineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\nLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\nLineDashedMaterial.prototype.copy = function ( source ) {\n\n\tLineBasicMaterial.prototype.copy.call( this, source );\n\n\tthis.scale = source.scale;\n\tthis.dashSize = source.dashSize;\n\tthis.gapSize = source.gapSize;\n\n\treturn this;\n\n};\n\n\n\nvar Materials = Object.freeze({\n\tShadowMaterial: ShadowMaterial,\n\tSpriteMaterial: SpriteMaterial,\n\tRawShaderMaterial: RawShaderMaterial,\n\tShaderMaterial: ShaderMaterial,\n\tPointsMaterial: PointsMaterial,\n\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\tMeshStandardMaterial: MeshStandardMaterial,\n\tMeshPhongMaterial: MeshPhongMaterial,\n\tMeshToonMaterial: MeshToonMaterial,\n\tMeshNormalMaterial: MeshNormalMaterial,\n\tMeshLambertMaterial: MeshLambertMaterial,\n\tMeshDepthMaterial: MeshDepthMaterial,\n\tMeshDistanceMaterial: MeshDistanceMaterial,\n\tMeshBasicMaterial: MeshBasicMaterial,\n\tLineDashedMaterial: LineDashedMaterial,\n\tLineBasicMaterial: LineBasicMaterial,\n\tMaterial: Material\n});\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar Cache = {\n\n\tenabled: false,\n\n\tfiles: {},\n\n\tadd: function ( key, file ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\tthis.files[ key ] = file;\n\n\t},\n\n\tget: function ( key ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\treturn this.files[ key ];\n\n\t},\n\n\tremove: function ( key ) {\n\n\t\tdelete this.files[ key ];\n\n\t},\n\n\tclear: function () {\n\n\t\tthis.files = {};\n\n\t}\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction LoadingManager( onLoad, onProgress, onError ) {\n\n\tvar scope = this;\n\n\tvar isLoading = false;\n\tvar itemsLoaded = 0;\n\tvar itemsTotal = 0;\n\tvar urlModifier = undefined;\n\n\tthis.onStart = undefined;\n\tthis.onLoad = onLoad;\n\tthis.onProgress = onProgress;\n\tthis.onError = onError;\n\n\tthis.itemStart = function ( url ) {\n\n\t\titemsTotal ++;\n\n\t\tif ( isLoading === false ) {\n\n\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t}\n\n\t\tisLoading = true;\n\n\t};\n\n\tthis.itemEnd = function ( url ) {\n\n\t\titemsLoaded ++;\n\n\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t}\n\n\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\tisLoading = false;\n\n\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\tscope.onLoad();\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.itemError = function ( url ) {\n\n\t\tif ( scope.onError !== undefined ) {\n\n\t\t\tscope.onError( url );\n\n\t\t}\n\n\t};\n\n\tthis.resolveURL = function ( url ) {\n\n\t\tif ( urlModifier ) {\n\n\t\t\treturn urlModifier( url );\n\n\t\t}\n\n\t\treturn url;\n\n\t};\n\n\tthis.setURLModifier = function ( transform ) {\n\n\t\turlModifier = transform;\n\t\treturn this;\n\n\t};\n\n}\n\nvar DefaultLoadingManager = new LoadingManager();\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar loading = {};\n\nfunction FileLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n}\n\nObject.assign( FileLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tvar scope = this;\n\n\t\tvar cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\t// Check if request is duplicate\n\n\t\tif ( loading[ url ] !== undefined ) {\n\n\t\t\tloading[ url ].push( {\n\n\t\t\t\tonLoad: onLoad,\n\t\t\t\tonProgress: onProgress,\n\t\t\t\tonError: onError\n\n\t\t\t} );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// Check for data: URI\n\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\tvar dataUriRegexResult = url.match( dataUriRegex );\n\n\t\t// Safari can not handle Data URIs through XMLHttpRequest so process manually\n\t\tif ( dataUriRegexResult ) {\n\n\t\t\tvar mimeType = dataUriRegexResult[ 1 ];\n\t\t\tvar isBase64 = !! dataUriRegexResult[ 2 ];\n\t\t\tvar data = dataUriRegexResult[ 3 ];\n\n\t\t\tdata = window.decodeURIComponent( data );\n\n\t\t\tif ( isBase64 ) data = window.atob( data );\n\n\t\t\ttry {\n\n\t\t\t\tvar response;\n\t\t\t\tvar responseType = ( this.responseType || '' ).toLowerCase();\n\n\t\t\t\tswitch ( responseType ) {\n\n\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\tvar view = new Uint8Array( data.length );\n\n\t\t\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\t\t\t\tview[ i ] = data.charCodeAt( i );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( responseType === 'blob' ) {\n\n\t\t\t\t\t\t\tresponse = new Blob( [ view.buffer ], { type: mimeType } );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tresponse = view.buffer;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\t\tresponse = parser.parseFromString( data, mimeType );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\tresponse = JSON.parse( data );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // 'text' or other\n\n\t\t\t\t\t\tresponse = data;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\twindow.setTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) onLoad( response );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\twindow.setTimeout( function () {\n\n\t\t\t\t\tif ( onError ) onError( error );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Initialise array for duplicate requests\n\n\t\t\tloading[ url ] = [];\n\n\t\t\tloading[ url ].push( {\n\n\t\t\t\tonLoad: onLoad,\n\t\t\t\tonProgress: onProgress,\n\t\t\t\tonError: onError\n\n\t\t\t} );\n\n\t\t\tvar request = new XMLHttpRequest();\n\n\t\t\trequest.open( 'GET', url, true );\n\n\t\t\trequest.addEventListener( 'load', function ( event ) {\n\n\t\t\t\tvar response = this.response;\n\n\t\t\t\tCache.add( url, response );\n\n\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tif ( this.status === 200 ) {\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onLoad ) callback.onLoad( response );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t} else if ( this.status === 0 ) {\n\n\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\tconsole.warn( 'THREE.FileLoader: HTTP Status 0 received.' );\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onLoad ) callback.onLoad( response );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) callback.onError( event );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t}\n\n\t\t\t}, false );\n\n\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onProgress ) callback.onProgress( event );\n\n\t\t\t\t}\n\n\t\t\t}, false );\n\n\t\t\trequest.addEventListener( 'error', function ( event ) {\n\n\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onError ) callback.onError( event );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}, false );\n\n\t\t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\n\t\t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\n\n\t\t\tif ( request.overrideMimeType ) request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' );\n\n\t\t\tfor ( var header in this.requestHeader ) {\n\n\t\t\t\trequest.setRequestHeader( header, this.requestHeader[ header ] );\n\n\t\t\t}\n\n\t\t\trequest.send( null );\n\n\t\t}\n\n\t\tscope.manager.itemStart( url );\n\n\t\treturn request;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t},\n\n\tsetResponseType: function ( value ) {\n\n\t\tthis.responseType = value;\n\t\treturn this;\n\n\t},\n\n\tsetWithCredentials: function ( value ) {\n\n\t\tthis.withCredentials = value;\n\t\treturn this;\n\n\t},\n\n\tsetMimeType: function ( value ) {\n\n\t\tthis.mimeType = value;\n\t\treturn this;\n\n\t},\n\n\tsetRequestHeader: function ( value ) {\n\n\t\tthis.requestHeader = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n *\n * Abstract Base class to block based textures loader (dds, pvr, ...)\n */\n\nfunction CompressedTextureLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t// override in sub classes\n\tthis._parser = null;\n\n}\n\nObject.assign( CompressedTextureLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar images = [];\n\n\t\tvar texture = new CompressedTexture();\n\t\ttexture.image = images;\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\timages[ i ] = {\n\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t};\n\n\t\t\t\tloaded += 1;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\tif ( Array.isArray( url ) ) {\n\n\t\t\tvar loaded = 0;\n\n\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\n\n\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\treturn texture;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author Nikos M. / https://github.com/foo123/\n *\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n */\n\nfunction DataTextureLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t// override in sub classes\n\tthis._parser = null;\n\n}\n\nObject.assign( DataTextureLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar texture = new DataTexture();\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tvar texData = scope._parser( buffer );\n\n\t\t\tif ( ! texData ) return;\n\n\t\t\tif ( undefined !== texData.image ) {\n\n\t\t\t\ttexture.image = texData.image;\n\n\t\t\t} else if ( undefined !== texData.data ) {\n\n\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t}\n\n\t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;\n\t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;\n\n\t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\n\n\t\t\tif ( undefined !== texData.format ) {\n\n\t\t\t\ttexture.format = texData.format;\n\n\t\t\t}\n\t\t\tif ( undefined !== texData.type ) {\n\n\t\t\t\ttexture.type = texData.type;\n\n\t\t\t}\n\n\t\t\tif ( undefined !== texData.mipmaps ) {\n\n\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\n\t\t\t}\n\n\t\t\tif ( 1 === texData.mipmapCount ) {\n\n\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t}\n\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}, onProgress, onError );\n\n\n\t\treturn texture;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction ImageLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n}\n\nObject.assign( ImageLoader.prototype, {\n\n\tcrossOrigin: 'Anonymous',\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tvar scope = this;\n\n\t\tvar cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\n\t\timage.addEventListener( 'load', function () {\n\n\t\t\tCache.add( url, this );\n\n\t\t\tif ( onLoad ) onLoad( this );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t}, false );\n\n\t\t/*\n\t\timage.addEventListener( 'progress', function ( event ) {\n\n\t\t\tif ( onProgress ) onProgress( event );\n\n\t\t}, false );\n\t\t*/\n\n\t\timage.addEventListener( 'error', function ( event ) {\n\n\t\t\tif ( onError ) onError( event );\n\n\t\t\tscope.manager.itemEnd( url );\n\t\t\tscope.manager.itemError( url );\n\n\t\t}, false );\n\n\t\tif ( url.substr( 0, 5 ) !== 'data:' ) {\n\n\t\t\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\n\n\t\t}\n\n\t\tscope.manager.itemStart( url );\n\n\t\timage.src = url;\n\n\t\treturn image;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction CubeTextureLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n}\n\nObject.assign( CubeTextureLoader.prototype, {\n\n\tcrossOrigin: 'Anonymous',\n\n\tload: function ( urls, onLoad, onProgress, onError ) {\n\n\t\tvar texture = new CubeTexture();\n\n\t\tvar loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tvar loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\tloaded ++;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, undefined, onError );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n\t\t\tloadTexture( i );\n\n\t\t}\n\n\t\treturn texture;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction TextureLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n}\n\nObject.assign( TextureLoader.prototype, {\n\n\tcrossOrigin: 'Anonymous',\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar texture = new Texture();\n\n\t\tvar loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tloader.load( url, function ( image ) {\n\n\t\t\ttexture.image = image;\n\n\t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\t\t\tvar isJPEG = url.search( /\\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\n\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\tonLoad( texture );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\treturn texture;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Extensible curve object\n *\n * Some common of curve methods:\n * .getPoint( t, optionalTarget ), .getTangent( t )\n * .getPointAt( u, optionalTarget ), .getTangentAt( u )\n * .getPoints(), .getSpacedPoints()\n * .getLength()\n * .updateArcLengths()\n *\n * This following curves inherit from THREE.Curve:\n *\n * -- 2D curves --\n * THREE.ArcCurve\n * THREE.CubicBezierCurve\n * THREE.EllipseCurve\n * THREE.LineCurve\n * THREE.QuadraticBezierCurve\n * THREE.SplineCurve\n *\n * -- 3D curves --\n * THREE.CatmullRomCurve3\n * THREE.CubicBezierCurve3\n * THREE.LineCurve3\n * THREE.QuadraticBezierCurve3\n *\n * A series of curves can be represented as a THREE.CurvePath.\n *\n **/\n\n/**************************************************************\n *\tAbstract Curve base class\n **************************************************************/\n\nfunction Curve() {\n\n\tthis.type = 'Curve';\n\n\tthis.arcLengthDivisions = 200;\n\n}\n\nObject.assign( Curve.prototype, {\n\n\t// Virtual base class method to overwrite and implement in subclasses\n\t//\t- t [0 .. 1]\n\n\tgetPoint: function ( /* t, optionalTarget */ ) {\n\n\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\n\t\treturn null;\n\n\t},\n\n\t// Get point at relative position in curve according to arc length\n\t// - u [0 .. 1]\n\n\tgetPointAt: function ( u, optionalTarget ) {\n\n\t\tvar t = this.getUtoTmapping( u );\n\t\treturn this.getPoint( t, optionalTarget );\n\n\t},\n\n\t// Get sequence of points using getPoint( t )\n\n\tgetPoints: function ( divisions ) {\n\n\t\tif ( divisions === undefined ) divisions = 5;\n\n\t\tvar points = [];\n\n\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t}\n\n\t\treturn points;\n\n\t},\n\n\t// Get sequence of points using getPointAt( u )\n\n\tgetSpacedPoints: function ( divisions ) {\n\n\t\tif ( divisions === undefined ) divisions = 5;\n\n\t\tvar points = [];\n\n\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t}\n\n\t\treturn points;\n\n\t},\n\n\t// Get total curve arc length\n\n\tgetLength: function () {\n\n\t\tvar lengths = this.getLengths();\n\t\treturn lengths[ lengths.length - 1 ];\n\n\t},\n\n\t// Get list of cumulative segment lengths\n\n\tgetLengths: function ( divisions ) {\n\n\t\tif ( divisions === undefined ) divisions = this.arcLengthDivisions;\n\n\t\tif ( this.cacheArcLengths &&\n\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\n\t\t\t! this.needsUpdate ) {\n\n\t\t\treturn this.cacheArcLengths;\n\n\t\t}\n\n\t\tthis.needsUpdate = false;\n\n\t\tvar cache = [];\n\t\tvar current, last = this.getPoint( 0 );\n\t\tvar p, sum = 0;\n\n\t\tcache.push( 0 );\n\n\t\tfor ( p = 1; p <= divisions; p ++ ) {\n\n\t\t\tcurrent = this.getPoint( p / divisions );\n\t\t\tsum += current.distanceTo( last );\n\t\t\tcache.push( sum );\n\t\t\tlast = current;\n\n\t\t}\n\n\t\tthis.cacheArcLengths = cache;\n\n\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\n\t},\n\n\tupdateArcLengths: function () {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.getLengths();\n\n\t},\n\n\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\tgetUtoTmapping: function ( u, distance ) {\n\n\t\tvar arcLengths = this.getLengths();\n\n\t\tvar i = 0, il = arcLengths.length;\n\n\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\tif ( distance ) {\n\n\t\t\ttargetArcLength = distance;\n\n\t\t} else {\n\n\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t}\n\n\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\tvar low = 0, high = il - 1, comparison;\n\n\t\twhile ( low <= high ) {\n\n\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\tlow = i + 1;\n\n\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\thigh = i - 1;\n\n\t\t\t} else {\n\n\t\t\t\thigh = i;\n\t\t\t\tbreak;\n\n\t\t\t\t// DONE\n\n\t\t\t}\n\n\t\t}\n\n\t\ti = high;\n\n\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\treturn i / ( il - 1 );\n\n\t\t}\n\n\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\tvar lengthBefore = arcLengths[ i ];\n\t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n\t\tvar segmentLength = lengthAfter - lengthBefore;\n\n\t\t// determine where we are between the 'before' and 'after' points\n\n\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t// add that fractional amount to t\n\n\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\treturn t;\n\n\t},\n\n\t// Returns a unit vector tangent at t\n\t// In case any sub curve does not implement its tangent derivation,\n\t// 2 points a small delta apart will be used to find its gradient\n\t// which seems to give a reasonable approximation\n\n\tgetTangent: function ( t ) {\n\n\t\tvar delta = 0.0001;\n\t\tvar t1 = t - delta;\n\t\tvar t2 = t + delta;\n\n\t\t// Capping in case of danger\n\n\t\tif ( t1 < 0 ) t1 = 0;\n\t\tif ( t2 > 1 ) t2 = 1;\n\n\t\tvar pt1 = this.getPoint( t1 );\n\t\tvar pt2 = this.getPoint( t2 );\n\n\t\tvar vec = pt2.clone().sub( pt1 );\n\t\treturn vec.normalize();\n\n\t},\n\n\tgetTangentAt: function ( u ) {\n\n\t\tvar t = this.getUtoTmapping( u );\n\t\treturn this.getTangent( t );\n\n\t},\n\n\tcomputeFrenetFrames: function ( segments, closed ) {\n\n\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n\t\tvar normal = new Vector3();\n\n\t\tvar tangents = [];\n\t\tvar normals = [];\n\t\tvar binormals = [];\n\n\t\tvar vec = new Vector3();\n\t\tvar mat = new Matrix4();\n\n\t\tvar i, u, theta;\n\n\t\t// compute the tangent vectors for each segment on the curve\n\n\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\tu = i / segments;\n\n\t\t\ttangents[ i ] = this.getTangentAt( u );\n\t\t\ttangents[ i ].normalize();\n\n\t\t}\n\n\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t// and in the direction of the minimum tangent xyz component\n\n\t\tnormals[ 0 ] = new Vector3();\n\t\tbinormals[ 0 ] = new Vector3();\n\t\tvar min = Number.MAX_VALUE;\n\t\tvar tx = Math.abs( tangents[ 0 ].x );\n\t\tvar ty = Math.abs( tangents[ 0 ].y );\n\t\tvar tz = Math.abs( tangents[ 0 ].z );\n\n\t\tif ( tx <= min ) {\n\n\t\t\tmin = tx;\n\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t}\n\n\t\tif ( ty <= min ) {\n\n\t\t\tmin = ty;\n\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t}\n\n\t\tif ( tz <= min ) {\n\n\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t}\n\n\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\tvec.normalize();\n\n\t\t\t\ttheta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t}\n\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t}\n\n\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\tif ( closed === true ) {\n\n\t\t\ttheta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n\t\t\ttheta /= segments;\n\n\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n\t\t\t\ttheta = - theta;\n\n\t\t\t}\n\n\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\t\t// twist a little...\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\ttangents: tangents,\n\t\t\tnormals: normals,\n\t\t\tbinormals: binormals\n\t\t};\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Curve',\n\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t}\n\t\t};\n\n\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\tdata.type = this.type;\n\n\t\treturn data;\n\n\t},\n\n\tfromJSON: function ( json ) {\n\n\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\n\t\treturn this;\n\n\t}\n\n} );\n\nfunction EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'EllipseCurve';\n\n\tthis.aX = aX || 0;\n\tthis.aY = aY || 0;\n\n\tthis.xRadius = xRadius || 1;\n\tthis.yRadius = yRadius || 1;\n\n\tthis.aStartAngle = aStartAngle || 0;\n\tthis.aEndAngle = aEndAngle || 2 * Math.PI;\n\n\tthis.aClockwise = aClockwise || false;\n\n\tthis.aRotation = aRotation || 0;\n\n}\n\nEllipseCurve.prototype = Object.create( Curve.prototype );\nEllipseCurve.prototype.constructor = EllipseCurve;\n\nEllipseCurve.prototype.isEllipseCurve = true;\n\nEllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector2();\n\n\tvar twoPi = Math.PI * 2;\n\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t// ensures that deltaAngle is 0 .. 2 PI\n\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\n\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\tif ( samePoints ) {\n\n\t\t\tdeltaAngle = 0;\n\n\t\t} else {\n\n\t\t\tdeltaAngle = twoPi;\n\n\t\t}\n\n\t}\n\n\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\tdeltaAngle = - twoPi;\n\n\t\t} else {\n\n\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t}\n\n\t}\n\n\tvar angle = this.aStartAngle + t * deltaAngle;\n\tvar x = this.aX + this.xRadius * Math.cos( angle );\n\tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n\tif ( this.aRotation !== 0 ) {\n\n\t\tvar cos = Math.cos( this.aRotation );\n\t\tvar sin = Math.sin( this.aRotation );\n\n\t\tvar tx = x - this.aX;\n\t\tvar ty = y - this.aY;\n\n\t\t// Rotate the point about the center of the ellipse.\n\t\tx = tx * cos - ty * sin + this.aX;\n\t\ty = tx * sin + ty * cos + this.aY;\n\n\t}\n\n\treturn point.set( x, y );\n\n};\n\nEllipseCurve.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.aX = source.aX;\n\tthis.aY = source.aY;\n\n\tthis.xRadius = source.xRadius;\n\tthis.yRadius = source.yRadius;\n\n\tthis.aStartAngle = source.aStartAngle;\n\tthis.aEndAngle = source.aEndAngle;\n\n\tthis.aClockwise = source.aClockwise;\n\n\tthis.aRotation = source.aRotation;\n\n\treturn this;\n\n};\n\n\nEllipseCurve.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.aX = this.aX;\n\tdata.aY = this.aY;\n\n\tdata.xRadius = this.xRadius;\n\tdata.yRadius = this.yRadius;\n\n\tdata.aStartAngle = this.aStartAngle;\n\tdata.aEndAngle = this.aEndAngle;\n\n\tdata.aClockwise = this.aClockwise;\n\n\tdata.aRotation = this.aRotation;\n\n\treturn data;\n\n};\n\nEllipseCurve.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.aX = json.aX;\n\tthis.aY = json.aY;\n\n\tthis.xRadius = json.xRadius;\n\tthis.yRadius = json.yRadius;\n\n\tthis.aStartAngle = json.aStartAngle;\n\tthis.aEndAngle = json.aEndAngle;\n\n\tthis.aClockwise = json.aClockwise;\n\n\tthis.aRotation = json.aRotation;\n\n\treturn this;\n\n};\n\nfunction ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\tthis.type = 'ArcCurve';\n\n}\n\nArcCurve.prototype = Object.create( EllipseCurve.prototype );\nArcCurve.prototype.constructor = ArcCurve;\n\nArcCurve.prototype.isArcCurve = true;\n\n/**\n * @author zz85 https://github.com/zz85\n *\n * Centripetal CatmullRom Curve - which is useful for avoiding\n * cusps and self-intersections in non-uniform catmull rom curves.\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n *\n * curve.type accepts centripetal(default), chordal and catmullrom\n * curve.tension is used for catmullrom which defaults to 0.5\n */\n\n\n/*\nBased on an optimized c++ solution in\n - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n - http://ideone.com/NoEbVM\n\nThis CubicPoly class could be used for reusing some variables and calculations,\nbut for three.js curve use, it could be possible inlined and flatten into a single function call\nwhich can be placed in CurveUtils.\n*/\n\nfunction CubicPoly() {\n\n\tvar c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t/*\n\t * Compute coefficients for a cubic polynomial\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t * such that\n\t *   p(0) = x0, p(1) = x1\n\t *  and\n\t *   p'(0) = t0, p'(1) = t1.\n\t */\n\tfunction init( x0, x1, t0, t1 ) {\n\n\t\tc0 = x0;\n\t\tc1 = t0;\n\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t}\n\n\treturn {\n\n\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t},\n\n\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\tt1 *= dt1;\n\t\t\tt2 *= dt1;\n\n\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t},\n\n\t\tcalc: function ( t ) {\n\n\t\t\tvar t2 = t * t;\n\t\t\tvar t3 = t2 * t;\n\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t}\n\n\t};\n\n}\n\n//\n\nvar tmp = new Vector3();\nvar px = new CubicPoly();\nvar py = new CubicPoly();\nvar pz = new CubicPoly();\n\nfunction CatmullRomCurve3( points, closed, curveType, tension ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'CatmullRomCurve3';\n\n\tthis.points = points || [];\n\tthis.closed = closed || false;\n\tthis.curveType = curveType || 'centripetal';\n\tthis.tension = tension || 0.5;\n\n}\n\nCatmullRomCurve3.prototype = Object.create( Curve.prototype );\nCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\n\nCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\nCatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector3();\n\n\tvar points = this.points;\n\tvar l = points.length;\n\n\tvar p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\tvar intPoint = Math.floor( p );\n\tvar weight = p - intPoint;\n\n\tif ( this.closed ) {\n\n\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\n\n\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\tintPoint = l - 2;\n\t\tweight = 1;\n\n\t}\n\n\tvar p0, p1, p2, p3; // 4 points\n\n\tif ( this.closed || intPoint > 0 ) {\n\n\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t} else {\n\n\t\t// extrapolate first point\n\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\tp0 = tmp;\n\n\t}\n\n\tp1 = points[ intPoint % l ];\n\tp2 = points[ ( intPoint + 1 ) % l ];\n\n\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t} else {\n\n\t\t// extrapolate last point\n\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\tp3 = tmp;\n\n\t}\n\n\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n\n\t\t// init Centripetal / Chordal Catmull-Rom\n\t\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t// safety check for repeated points\n\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t} else if ( this.curveType === 'catmullrom' ) {\n\n\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n\n\t}\n\n\tpoint.set(\n\t\tpx.calc( weight ),\n\t\tpy.calc( weight ),\n\t\tpz.calc( weight )\n\t);\n\n\treturn point;\n\n};\n\nCatmullRomCurve3.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.points = [];\n\n\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\tvar point = source.points[ i ];\n\n\t\tthis.points.push( point.clone() );\n\n\t}\n\n\tthis.closed = source.closed;\n\tthis.curveType = source.curveType;\n\tthis.tension = source.tension;\n\n\treturn this;\n\n};\n\nCatmullRomCurve3.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.points = [];\n\n\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\tvar point = this.points[ i ];\n\t\tdata.points.push( point.toArray() );\n\n\t}\n\n\tdata.closed = this.closed;\n\tdata.curveType = this.curveType;\n\tdata.tension = this.tension;\n\n\treturn data;\n\n};\n\nCatmullRomCurve3.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.points = [];\n\n\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\tvar point = json.points[ i ];\n\t\tthis.points.push( new Vector3().fromArray( point ) );\n\n\t}\n\n\tthis.closed = json.closed;\n\tthis.curveType = json.curveType;\n\tthis.tension = json.tension;\n\n\treturn this;\n\n};\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n *\n * Bezier Curves formulas obtained from\n * http://en.wikipedia.org/wiki/Bézier_curve\n */\n\nfunction CatmullRom( t, p0, p1, p2, p3 ) {\n\n\tvar v0 = ( p2 - p0 ) * 0.5;\n\tvar v1 = ( p3 - p1 ) * 0.5;\n\tvar t2 = t * t;\n\tvar t3 = t * t2;\n\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n}\n\n//\n\nfunction QuadraticBezierP0( t, p ) {\n\n\tvar k = 1 - t;\n\treturn k * k * p;\n\n}\n\nfunction QuadraticBezierP1( t, p ) {\n\n\treturn 2 * ( 1 - t ) * t * p;\n\n}\n\nfunction QuadraticBezierP2( t, p ) {\n\n\treturn t * t * p;\n\n}\n\nfunction QuadraticBezier( t, p0, p1, p2 ) {\n\n\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n\t\tQuadraticBezierP2( t, p2 );\n\n}\n\n//\n\nfunction CubicBezierP0( t, p ) {\n\n\tvar k = 1 - t;\n\treturn k * k * k * p;\n\n}\n\nfunction CubicBezierP1( t, p ) {\n\n\tvar k = 1 - t;\n\treturn 3 * k * k * t * p;\n\n}\n\nfunction CubicBezierP2( t, p ) {\n\n\treturn 3 * ( 1 - t ) * t * t * p;\n\n}\n\nfunction CubicBezierP3( t, p ) {\n\n\treturn t * t * t * p;\n\n}\n\nfunction CubicBezier( t, p0, p1, p2, p3 ) {\n\n\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n\t\tCubicBezierP3( t, p3 );\n\n}\n\nfunction CubicBezierCurve( v0, v1, v2, v3 ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'CubicBezierCurve';\n\n\tthis.v0 = v0 || new Vector2();\n\tthis.v1 = v1 || new Vector2();\n\tthis.v2 = v2 || new Vector2();\n\tthis.v3 = v3 || new Vector2();\n\n}\n\nCubicBezierCurve.prototype = Object.create( Curve.prototype );\nCubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\nCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\nCubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector2();\n\n\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\tpoint.set(\n\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\n\t);\n\n\treturn point;\n\n};\n\nCubicBezierCurve.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.v0.copy( source.v0 );\n\tthis.v1.copy( source.v1 );\n\tthis.v2.copy( source.v2 );\n\tthis.v3.copy( source.v3 );\n\n\treturn this;\n\n};\n\nCubicBezierCurve.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.v0 = this.v0.toArray();\n\tdata.v1 = this.v1.toArray();\n\tdata.v2 = this.v2.toArray();\n\tdata.v3 = this.v3.toArray();\n\n\treturn data;\n\n};\n\nCubicBezierCurve.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.v0.fromArray( json.v0 );\n\tthis.v1.fromArray( json.v1 );\n\tthis.v2.fromArray( json.v2 );\n\tthis.v3.fromArray( json.v3 );\n\n\treturn this;\n\n};\n\nfunction CubicBezierCurve3( v0, v1, v2, v3 ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'CubicBezierCurve3';\n\n\tthis.v0 = v0 || new Vector3();\n\tthis.v1 = v1 || new Vector3();\n\tthis.v2 = v2 || new Vector3();\n\tthis.v3 = v3 || new Vector3();\n\n}\n\nCubicBezierCurve3.prototype = Object.create( Curve.prototype );\nCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\n\nCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\nCubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector3();\n\n\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\tpoint.set(\n\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n\t);\n\n\treturn point;\n\n};\n\nCubicBezierCurve3.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.v0.copy( source.v0 );\n\tthis.v1.copy( source.v1 );\n\tthis.v2.copy( source.v2 );\n\tthis.v3.copy( source.v3 );\n\n\treturn this;\n\n};\n\nCubicBezierCurve3.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.v0 = this.v0.toArray();\n\tdata.v1 = this.v1.toArray();\n\tdata.v2 = this.v2.toArray();\n\tdata.v3 = this.v3.toArray();\n\n\treturn data;\n\n};\n\nCubicBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.v0.fromArray( json.v0 );\n\tthis.v1.fromArray( json.v1 );\n\tthis.v2.fromArray( json.v2 );\n\tthis.v3.fromArray( json.v3 );\n\n\treturn this;\n\n};\n\nfunction LineCurve( v1, v2 ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'LineCurve';\n\n\tthis.v1 = v1 || new Vector2();\n\tthis.v2 = v2 || new Vector2();\n\n}\n\nLineCurve.prototype = Object.create( Curve.prototype );\nLineCurve.prototype.constructor = LineCurve;\n\nLineCurve.prototype.isLineCurve = true;\n\nLineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector2();\n\n\tif ( t === 1 ) {\n\n\t\tpoint.copy( this.v2 );\n\n\t} else {\n\n\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t}\n\n\treturn point;\n\n};\n\n// Line curve is linear, so we can overwrite default getPointAt\n\nLineCurve.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\treturn this.getPoint( u, optionalTarget );\n\n};\n\nLineCurve.prototype.getTangent = function ( /* t */ ) {\n\n\tvar tangent = this.v2.clone().sub( this.v1 );\n\n\treturn tangent.normalize();\n\n};\n\nLineCurve.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.v1.copy( source.v1 );\n\tthis.v2.copy( source.v2 );\n\n\treturn this;\n\n};\n\nLineCurve.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.v1 = this.v1.toArray();\n\tdata.v2 = this.v2.toArray();\n\n\treturn data;\n\n};\n\nLineCurve.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.v1.fromArray( json.v1 );\n\tthis.v2.fromArray( json.v2 );\n\n\treturn this;\n\n};\n\nfunction LineCurve3( v1, v2 ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'LineCurve3';\n\n\tthis.v1 = v1 || new Vector3();\n\tthis.v2 = v2 || new Vector3();\n\n}\n\nLineCurve3.prototype = Object.create( Curve.prototype );\nLineCurve3.prototype.constructor = LineCurve3;\n\nLineCurve3.prototype.isLineCurve3 = true;\n\nLineCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector3();\n\n\tif ( t === 1 ) {\n\n\t\tpoint.copy( this.v2 );\n\n\t} else {\n\n\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t}\n\n\treturn point;\n\n};\n\n// Line curve is linear, so we can overwrite default getPointAt\n\nLineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\treturn this.getPoint( u, optionalTarget );\n\n};\n\nLineCurve3.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.v1.copy( source.v1 );\n\tthis.v2.copy( source.v2 );\n\n\treturn this;\n\n};\n\nLineCurve3.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.v1 = this.v1.toArray();\n\tdata.v2 = this.v2.toArray();\n\n\treturn data;\n\n};\n\nLineCurve3.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.v1.fromArray( json.v1 );\n\tthis.v2.fromArray( json.v2 );\n\n\treturn this;\n\n};\n\nfunction QuadraticBezierCurve( v0, v1, v2 ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'QuadraticBezierCurve';\n\n\tthis.v0 = v0 || new Vector2();\n\tthis.v1 = v1 || new Vector2();\n\tthis.v2 = v2 || new Vector2();\n\n}\n\nQuadraticBezierCurve.prototype = Object.create( Curve.prototype );\nQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\nQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\nQuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector2();\n\n\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\tpoint.set(\n\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\n\t);\n\n\treturn point;\n\n};\n\nQuadraticBezierCurve.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.v0.copy( source.v0 );\n\tthis.v1.copy( source.v1 );\n\tthis.v2.copy( source.v2 );\n\n\treturn this;\n\n};\n\nQuadraticBezierCurve.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.v0 = this.v0.toArray();\n\tdata.v1 = this.v1.toArray();\n\tdata.v2 = this.v2.toArray();\n\n\treturn data;\n\n};\n\nQuadraticBezierCurve.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.v0.fromArray( json.v0 );\n\tthis.v1.fromArray( json.v1 );\n\tthis.v2.fromArray( json.v2 );\n\n\treturn this;\n\n};\n\nfunction QuadraticBezierCurve3( v0, v1, v2 ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'QuadraticBezierCurve3';\n\n\tthis.v0 = v0 || new Vector3();\n\tthis.v1 = v1 || new Vector3();\n\tthis.v2 = v2 || new Vector3();\n\n}\n\nQuadraticBezierCurve3.prototype = Object.create( Curve.prototype );\nQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\n\nQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\nQuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector3();\n\n\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\tpoint.set(\n\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\n\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\n\t);\n\n\treturn point;\n\n};\n\nQuadraticBezierCurve3.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.v0.copy( source.v0 );\n\tthis.v1.copy( source.v1 );\n\tthis.v2.copy( source.v2 );\n\n\treturn this;\n\n};\n\nQuadraticBezierCurve3.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.v0 = this.v0.toArray();\n\tdata.v1 = this.v1.toArray();\n\tdata.v2 = this.v2.toArray();\n\n\treturn data;\n\n};\n\nQuadraticBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.v0.fromArray( json.v0 );\n\tthis.v1.fromArray( json.v1 );\n\tthis.v2.fromArray( json.v2 );\n\n\treturn this;\n\n};\n\nfunction SplineCurve( points /* array of Vector2 */ ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'SplineCurve';\n\n\tthis.points = points || [];\n\n}\n\nSplineCurve.prototype = Object.create( Curve.prototype );\nSplineCurve.prototype.constructor = SplineCurve;\n\nSplineCurve.prototype.isSplineCurve = true;\n\nSplineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector2();\n\n\tvar points = this.points;\n\tvar p = ( points.length - 1 ) * t;\n\n\tvar intPoint = Math.floor( p );\n\tvar weight = p - intPoint;\n\n\tvar p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\tvar p1 = points[ intPoint ];\n\tvar p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\tvar p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\tpoint.set(\n\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n\t);\n\n\treturn point;\n\n};\n\nSplineCurve.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.points = [];\n\n\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\tvar point = source.points[ i ];\n\n\t\tthis.points.push( point.clone() );\n\n\t}\n\n\treturn this;\n\n};\n\nSplineCurve.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.points = [];\n\n\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\tvar point = this.points[ i ];\n\t\tdata.points.push( point.toArray() );\n\n\t}\n\n\treturn data;\n\n};\n\nSplineCurve.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.points = [];\n\n\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\tvar point = json.points[ i ];\n\t\tthis.points.push( new Vector2().fromArray( point ) );\n\n\t}\n\n\treturn this;\n\n};\n\n\n\nvar Curves = Object.freeze({\n\tArcCurve: ArcCurve,\n\tCatmullRomCurve3: CatmullRomCurve3,\n\tCubicBezierCurve: CubicBezierCurve,\n\tCubicBezierCurve3: CubicBezierCurve3,\n\tEllipseCurve: EllipseCurve,\n\tLineCurve: LineCurve,\n\tLineCurve3: LineCurve3,\n\tQuadraticBezierCurve: QuadraticBezierCurve,\n\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\tSplineCurve: SplineCurve\n});\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n *\n **/\n\n/**************************************************************\n *\tCurved Path - a curve path is simply a array of connected\n *  curves, but retains the api of a curve\n **************************************************************/\n\nfunction CurvePath() {\n\n\tCurve.call( this );\n\n\tthis.type = 'CurvePath';\n\n\tthis.curves = [];\n\tthis.autoClose = false; // Automatically closes the path\n\n}\n\nCurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\n\n\tconstructor: CurvePath,\n\n\tadd: function ( curve ) {\n\n\t\tthis.curves.push( curve );\n\n\t},\n\n\tclosePath: function () {\n\n\t\t// Add a line curve if start and end of lines are not connected\n\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n\t\t}\n\n\t},\n\n\t// To get accurate point with reference to\n\t// entire path distance at time t,\n\t// following has to be done:\n\n\t// 1. Length of each sub path have to be known\n\t// 2. Locate and identify type of curve\n\t// 3. Get t for the curve\n\t// 4. Return curve.getPointAt(t')\n\n\tgetPoint: function ( t ) {\n\n\t\tvar d = t * this.getLength();\n\t\tvar curveLengths = this.getCurveLengths();\n\t\tvar i = 0;\n\n\t\t// To think about boundaries points.\n\n\t\twhile ( i < curveLengths.length ) {\n\n\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\tvar diff = curveLengths[ i ] - d;\n\t\t\t\tvar curve = this.curves[ i ];\n\n\t\t\t\tvar segmentLength = curve.getLength();\n\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\treturn curve.getPointAt( u );\n\n\t\t\t}\n\n\t\t\ti ++;\n\n\t\t}\n\n\t\treturn null;\n\n\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t},\n\n\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t// getPoint() depends on getLength\n\n\tgetLength: function () {\n\n\t\tvar lens = this.getCurveLengths();\n\t\treturn lens[ lens.length - 1 ];\n\n\t},\n\n\t// cacheLengths must be recalculated.\n\tupdateArcLengths: function () {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.cacheLengths = null;\n\t\tthis.getCurveLengths();\n\n\t},\n\n\t// Compute lengths and cache them\n\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\tgetCurveLengths: function () {\n\n\t\t// We use cache values if curves and cache array are same length\n\n\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\treturn this.cacheLengths;\n\n\t\t}\n\n\t\t// Get length of sub-curve\n\t\t// Push sums into cached array\n\n\t\tvar lengths = [], sums = 0;\n\n\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tsums += this.curves[ i ].getLength();\n\t\t\tlengths.push( sums );\n\n\t\t}\n\n\t\tthis.cacheLengths = lengths;\n\n\t\treturn lengths;\n\n\t},\n\n\tgetSpacedPoints: function ( divisions ) {\n\n\t\tif ( divisions === undefined ) divisions = 40;\n\n\t\tvar points = [];\n\n\t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\n\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t}\n\n\t\tif ( this.autoClose ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t},\n\n\tgetPoints: function ( divisions ) {\n\n\t\tdivisions = divisions || 12;\n\n\t\tvar points = [], last;\n\n\t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\tvar curve = curves[ i ];\n\t\t\tvar resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2\n\t\t\t\t: ( curve && curve.isLineCurve ) ? 1\n\t\t\t\t\t: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length\n\t\t\t\t\t\t: divisions;\n\n\t\t\tvar pts = curve.getPoints( resolution );\n\n\t\t\tfor ( var j = 0; j < pts.length; j ++ ) {\n\n\t\t\t\tvar point = pts[ j ];\n\n\t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\tpoints.push( point );\n\t\t\t\tlast = point;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.curves = [];\n\n\t\tfor ( var i = 0, l = source.curves.length; i < l; i ++ ) {\n\n\t\t\tvar curve = source.curves[ i ];\n\n\t\t\tthis.curves.push( curve.clone() );\n\n\t\t}\n\n\t\tthis.autoClose = source.autoClose;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.autoClose = this.autoClose;\n\t\tdata.curves = [];\n\n\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tvar curve = this.curves[ i ];\n\t\t\tdata.curves.push( curve.toJSON() );\n\n\t\t}\n\n\t\treturn data;\n\n\t},\n\n\tfromJSON: function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.autoClose = json.autoClose;\n\t\tthis.curves = [];\n\n\t\tfor ( var i = 0, l = json.curves.length; i < l; i ++ ) {\n\n\t\t\tvar curve = json.curves[ i ];\n\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Creates free form 2d path using series of points, lines or curves.\n **/\n\nfunction Path( points ) {\n\n\tCurvePath.call( this );\n\n\tthis.type = 'Path';\n\n\tthis.currentPoint = new Vector2();\n\n\tif ( points ) {\n\n\t\tthis.setFromPoints( points );\n\n\t}\n\n}\n\nPath.prototype = Object.assign( Object.create( CurvePath.prototype ), {\n\n\tconstructor: Path,\n\n\tsetFromPoints: function ( points ) {\n\n\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\n\n\t\tfor ( var i = 1, l = points.length; i < l; i ++ ) {\n\n\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\n\n\t\t}\n\n\t},\n\n\tmoveTo: function ( x, y ) {\n\n\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t},\n\n\tlineTo: function ( x, y ) {\n\n\t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( x, y );\n\n\t},\n\n\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\tvar curve = new QuadraticBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\tnew Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t},\n\n\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tvar curve = new CubicBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\tnew Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t},\n\n\tsplineThru: function ( pts /*Array of Vector*/ ) {\n\n\t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\tvar curve = new SplineCurve( npts );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t},\n\n\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tvar x0 = this.currentPoint.x;\n\t\tvar y0 = this.currentPoint.y;\n\n\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t},\n\n\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t},\n\n\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tvar x0 = this.currentPoint.x;\n\t\tvar y0 = this.currentPoint.y;\n\n\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t},\n\n\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t// if a previous curve is present, attempt to join\n\t\t\tvar firstPoint = curve.getPoint( 0 );\n\n\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.curves.push( curve );\n\n\t\tvar lastPoint = curve.getPoint( 1 );\n\t\tthis.currentPoint.copy( lastPoint );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tCurvePath.prototype.copy.call( this, source );\n\n\t\tthis.currentPoint.copy( source.currentPoint );\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = CurvePath.prototype.toJSON.call( this );\n\n\t\tdata.currentPoint = this.currentPoint.toArray();\n\n\t\treturn data;\n\n\t},\n\n\tfromJSON: function ( json ) {\n\n\t\tCurvePath.prototype.fromJSON.call( this, json );\n\n\t\tthis.currentPoint.fromArray( json.currentPoint );\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Defines a 2d shape plane using paths.\n **/\n\n// STEP 1 Create a path.\n// STEP 2 Turn path into shape.\n// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n// STEP 3a - Extract points from each shape, turn to vertices\n// STEP 3b - Triangulate each shape, add faces.\n\nfunction Shape( points ) {\n\n\tPath.call( this, points );\n\n\tthis.uuid = _Math.generateUUID();\n\n\tthis.type = 'Shape';\n\n\tthis.holes = [];\n\n}\n\nShape.prototype = Object.assign( Object.create( Path.prototype ), {\n\n\tconstructor: Shape,\n\n\tgetPointsHoles: function ( divisions ) {\n\n\t\tvar holesPts = [];\n\n\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t}\n\n\t\treturn holesPts;\n\n\t},\n\n\t// get points of shape and holes (keypoints based on segments parameter)\n\n\textractPoints: function ( divisions ) {\n\n\t\treturn {\n\n\t\t\tshape: this.getPoints( divisions ),\n\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t};\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tPath.prototype.copy.call( this, source );\n\n\t\tthis.holes = [];\n\n\t\tfor ( var i = 0, l = source.holes.length; i < l; i ++ ) {\n\n\t\t\tvar hole = source.holes[ i ];\n\n\t\t\tthis.holes.push( hole.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = Path.prototype.toJSON.call( this );\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.holes = [];\n\n\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tvar hole = this.holes[ i ];\n\t\t\tdata.holes.push( hole.toJSON() );\n\n\t\t}\n\n\t\treturn data;\n\n\t},\n\n\tfromJSON: function ( json ) {\n\n\t\tPath.prototype.fromJSON.call( this, json );\n\n\t\tthis.uuid = json.uuid;\n\t\tthis.holes = [];\n\n\t\tfor ( var i = 0, l = json.holes.length; i < l; i ++ ) {\n\n\t\t\tvar hole = json.holes[ i ];\n\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction Light( color, intensity ) {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Light';\n\n\tthis.color = new Color( color );\n\tthis.intensity = intensity !== undefined ? intensity : 1;\n\n\tthis.receiveShadow = undefined;\n\n}\n\nLight.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Light,\n\n\tisLight: true,\n\n\tcopy: function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.intensity = source.intensity;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.color = this.color.getHex();\n\t\tdata.object.intensity = this.intensity;\n\n\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n\t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\n\t\treturn data;\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction HemisphereLight( skyColor, groundColor, intensity ) {\n\n\tLight.call( this, skyColor, intensity );\n\n\tthis.type = 'HemisphereLight';\n\n\tthis.castShadow = undefined;\n\n\tthis.position.copy( Object3D.DefaultUp );\n\tthis.updateMatrix();\n\n\tthis.groundColor = new Color( groundColor );\n\n}\n\nHemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\tconstructor: HemisphereLight,\n\n\tisHemisphereLight: true,\n\n\tcopy: function ( source ) {\n\n\t\tLight.prototype.copy.call( this, source );\n\n\t\tthis.groundColor.copy( source.groundColor );\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction LightShadow( camera ) {\n\n\tthis.camera = camera;\n\n\tthis.bias = 0;\n\tthis.radius = 1;\n\n\tthis.mapSize = new Vector2( 512, 512 );\n\n\tthis.map = null;\n\tthis.matrix = new Matrix4();\n\n}\n\nObject.assign( LightShadow.prototype, {\n\n\tcopy: function ( source ) {\n\n\t\tthis.camera = source.camera.clone();\n\n\t\tthis.bias = source.bias;\n\t\tthis.radius = source.radius;\n\n\t\tthis.mapSize.copy( source.mapSize );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar object = {};\n\n\t\tif ( this.bias !== 0 ) object.bias = this.bias;\n\t\tif ( this.radius !== 1 ) object.radius = this.radius;\n\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\n\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\tdelete object.camera.matrix;\n\n\t\treturn object;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction SpotLightShadow() {\n\n\tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n}\n\nSpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\tconstructor: SpotLightShadow,\n\n\tisSpotLightShadow: true,\n\n\tupdate: function ( light ) {\n\n\t\tvar camera = this.camera;\n\n\t\tvar fov = _Math.RAD2DEG * 2 * light.angle;\n\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\tvar far = light.distance || camera.far;\n\n\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\tcamera.fov = fov;\n\t\t\tcamera.aspect = aspect;\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction SpotLight( color, intensity, distance, angle, penumbra, decay ) {\n\n\tLight.call( this, color, intensity );\n\n\tthis.type = 'SpotLight';\n\n\tthis.position.copy( Object3D.DefaultUp );\n\tthis.updateMatrix();\n\n\tthis.target = new Object3D();\n\n\tObject.defineProperty( this, 'power', {\n\t\tget: function () {\n\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\treturn this.intensity * Math.PI;\n\n\t\t},\n\t\tset: function ( power ) {\n\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\tthis.intensity = power / Math.PI;\n\n\t\t}\n\t} );\n\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\tthis.shadow = new SpotLightShadow();\n\n}\n\nSpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\tconstructor: SpotLight,\n\n\tisSpotLight: true,\n\n\tcopy: function ( source ) {\n\n\t\tLight.prototype.copy.call( this, source );\n\n\t\tthis.distance = source.distance;\n\t\tthis.angle = source.angle;\n\t\tthis.penumbra = source.penumbra;\n\t\tthis.decay = source.decay;\n\n\t\tthis.target = source.target.clone();\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\n\nfunction PointLight( color, intensity, distance, decay ) {\n\n\tLight.call( this, color, intensity );\n\n\tthis.type = 'PointLight';\n\n\tObject.defineProperty( this, 'power', {\n\t\tget: function () {\n\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\treturn this.intensity * 4 * Math.PI;\n\n\t\t},\n\t\tset: function ( power ) {\n\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\tthis.intensity = power / ( 4 * Math.PI );\n\n\t\t}\n\t} );\n\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\tthis.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n}\n\nPointLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\tconstructor: PointLight,\n\n\tisPointLight: true,\n\n\tcopy: function ( source ) {\n\n\t\tLight.prototype.copy.call( this, source );\n\n\t\tthis.distance = source.distance;\n\t\tthis.decay = source.decay;\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction DirectionalLightShadow( ) {\n\n\tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n}\n\nDirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\tconstructor: DirectionalLightShadow\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction DirectionalLight( color, intensity ) {\n\n\tLight.call( this, color, intensity );\n\n\tthis.type = 'DirectionalLight';\n\n\tthis.position.copy( Object3D.DefaultUp );\n\tthis.updateMatrix();\n\n\tthis.target = new Object3D();\n\n\tthis.shadow = new DirectionalLightShadow();\n\n}\n\nDirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\tconstructor: DirectionalLight,\n\n\tisDirectionalLight: true,\n\n\tcopy: function ( source ) {\n\n\t\tLight.prototype.copy.call( this, source );\n\n\t\tthis.target = source.target.clone();\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction AmbientLight( color, intensity ) {\n\n\tLight.call( this, color, intensity );\n\n\tthis.type = 'AmbientLight';\n\n\tthis.castShadow = undefined;\n\n}\n\nAmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\tconstructor: AmbientLight,\n\n\tisAmbientLight: true\n\n} );\n\n/**\n * @author abelnation / http://github.com/abelnation\n */\n\nfunction RectAreaLight( color, intensity, width, height ) {\n\n\tLight.call( this, color, intensity );\n\n\tthis.type = 'RectAreaLight';\n\n\tthis.width = ( width !== undefined ) ? width : 10;\n\tthis.height = ( height !== undefined ) ? height : 10;\n\n}\n\nRectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\tconstructor: RectAreaLight,\n\n\tisRectAreaLight: true,\n\n\tcopy: function ( source ) {\n\n\t\tLight.prototype.copy.call( this, source );\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = Light.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.width = this.width;\n\t\tdata.object.height = this.height;\n\n\t\treturn data;\n\n\t}\n\n} );\n\n/**\n *\n * A Track that interpolates Strings\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction StringKeyframeTrack( name, times, values, interpolation ) {\n\n\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n}\n\nStringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\tconstructor: StringKeyframeTrack,\n\n\tValueTypeName: 'string',\n\tValueBufferType: Array,\n\n\tDefaultInterpolation: InterpolateDiscrete,\n\n\tInterpolantFactoryMethodLinear: undefined,\n\n\tInterpolantFactoryMethodSmooth: undefined\n\n} );\n\n/**\n *\n * A Track of Boolean keyframe values.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction BooleanKeyframeTrack( name, times, values ) {\n\n\tKeyframeTrack.call( this, name, times, values );\n\n}\n\nBooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\tconstructor: BooleanKeyframeTrack,\n\n\tValueTypeName: 'bool',\n\tValueBufferType: Array,\n\n\tDefaultInterpolation: InterpolateDiscrete,\n\n\tInterpolantFactoryMethodLinear: undefined,\n\tInterpolantFactoryMethodSmooth: undefined\n\n\t// Note: Actually this track could have a optimized / compressed\n\t// representation of a single value and a custom interpolant that\n\t// computes \"firstValue ^ isOdd( index )\".\n\n} );\n\n/**\n * Abstract base class of interpolants over parametric samples.\n *\n * The parameter domain is one dimensional, typically the time or a path\n * along a curve defined by the data.\n *\n * The sample values can have any dimensionality and derived classes may\n * apply special interpretations to the data.\n *\n * This class provides the interval seek in a Template Method, deferring\n * the actual interpolation to derived classes.\n *\n * Time complexity is O(1) for linear access crossing at most two points\n * and O(log N) for random access, where N is the number of positions.\n *\n * References:\n *\n * \t\thttp://www.oodesign.com/template-method-pattern.html\n *\n * @author tschw\n */\n\nfunction Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tthis.parameterPositions = parameterPositions;\n\tthis._cachedIndex = 0;\n\n\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\tthis.sampleValues = sampleValues;\n\tthis.valueSize = sampleSize;\n\n}\n\nObject.assign( Interpolant.prototype, {\n\n\tevaluate: function ( t ) {\n\n\t\tvar pp = this.parameterPositions,\n\t\t\ti1 = this._cachedIndex,\n\n\t\t\tt1 = pp[ i1 ],\n\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\tvalidate_interval: {\n\n\t\t\tseek: {\n\n\t\t\t\tvar right;\n\n\t\t\t\tlinear_scan: {\n\n\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t//- slower code:\n\t\t\t\t\t//-\n\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ; ) {\n\n\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\n\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t//- slower code:\n\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\tvar t1global = pp[ 1 ];\n\n\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ; ) {\n\n\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t} // linear scan\n\n\t\t\t\t// binary search\n\n\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tt1 = pp[ i1 ];\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t// check boundary cases, again\n\n\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n\t\t\t\t}\n\n\t\t\t} // seek\n\n\t\t\tthis._cachedIndex = i1;\n\n\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t} // validate_interval\n\n\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t},\n\n\tsettings: null, // optional, subclass-specific settings structure\n\t// Note: The indirection allows central control of many interpolants.\n\n\t// --- Protected interface\n\n\tDefaultSettings_: {},\n\n\tgetSettings_: function () {\n\n\t\treturn this.settings || this.DefaultSettings_;\n\n\t},\n\n\tcopySampleValue_: function ( index ) {\n\n\t\t// copies a sample value to the result buffer\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = index * stride;\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t},\n\n\t// Template methods for derived classes:\n\n\tinterpolate_: function ( /* i1, t0, t, t1 */ ) {\n\n\t\tthrow new Error( 'call to abstract method' );\n\t\t// implementations shall return this.resultBuffer\n\n\t},\n\n\tintervalChanged_: function ( /* i1, t0, t1 */ ) {\n\n\t\t// empty\n\n\t}\n\n} );\n\n//!\\ DECLARE ALIAS AFTER assign prototype !\nObject.assign( Interpolant.prototype, {\n\n\t//( 0, t, t0 ), returns this.resultBuffer\n\tbeforeStart_: Interpolant.prototype.copySampleValue_,\n\n\t//( N-1, tN-1, t ), returns this.resultBuffer\n\tafterEnd_: Interpolant.prototype.copySampleValue_,\n\n} );\n\n/**\n * Spherical linear unit quaternion interpolant.\n *\n * @author tschw\n */\n\nfunction QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n}\n\nQuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\tconstructor: QuaternionLinearInterpolant,\n\n\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\toffset = i1 * stride,\n\n\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n} );\n\n/**\n *\n * A Track of quaternion keyframe values.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction QuaternionKeyframeTrack( name, times, values, interpolation ) {\n\n\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n}\n\nQuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\tconstructor: QuaternionKeyframeTrack,\n\n\tValueTypeName: 'quaternion',\n\n\t// ValueBufferType is inherited\n\n\tDefaultInterpolation: InterpolateLinear,\n\n\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n} );\n\n/**\n *\n * A Track of keyframe values that represent color.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction ColorKeyframeTrack( name, times, values, interpolation ) {\n\n\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n}\n\nColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\tconstructor: ColorKeyframeTrack,\n\n\tValueTypeName: 'color'\n\n\t// ValueBufferType is inherited\n\n\t// DefaultInterpolation is inherited\n\n\t// Note: Very basic implementation and nothing special yet.\n\t// However, this is the place for color space parameterization.\n\n} );\n\n/**\n *\n * A Track of numeric keyframe values.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction NumberKeyframeTrack( name, times, values, interpolation ) {\n\n\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n}\n\nNumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\tconstructor: NumberKeyframeTrack,\n\n\tValueTypeName: 'number'\n\n\t// ValueBufferType is inherited\n\n\t// DefaultInterpolation is inherited\n\n} );\n\n/**\n * Fast and simple cubic spline interpolant.\n *\n * It was derived from a Hermitian construction setting the first derivative\n * at each sample position to the linear slope between neighboring positions\n * over their parameter interval.\n *\n * @author tschw\n */\n\nfunction CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\tthis._weightPrev = - 0;\n\tthis._offsetPrev = - 0;\n\tthis._weightNext = - 0;\n\tthis._offsetNext = - 0;\n\n}\n\nCubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\tconstructor: CubicInterpolant,\n\n\tDefaultSettings_: {\n\n\t\tendingStart: ZeroCurvatureEnding,\n\t\tendingEnd: ZeroCurvatureEnding\n\n\t},\n\n\tintervalChanged_: function ( i1, t0, t1 ) {\n\n\t\tvar pp = this.parameterPositions,\n\t\t\tiPrev = i1 - 2,\n\t\t\tiNext = i1 + 1,\n\n\t\t\ttPrev = pp[ iPrev ],\n\t\t\ttNext = pp[ iNext ];\n\n\t\tif ( tPrev === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = t1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tNext === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\tiNext = i1;\n\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiNext = 1;\n\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\ttNext = t0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t\t\tstride = this.valueSize;\n\n\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\tthis._offsetPrev = iPrev * stride;\n\t\tthis._offsetNext = iNext * stride;\n\n\t},\n\n\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tpp = p * p,\n\t\t\tppp = pp * p;\n\n\t\t// evaluate polynomials\n\n\t\tvar sP = - wP * ppp + 2 * wP * pp - wP * p;\n\t\tvar s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\n\t\tvar s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\n\t\tvar sN = wN * ppp - wN * pp;\n\n\t\t// combine data linearly\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n} );\n\n/**\n * @author tschw\n */\n\nfunction LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n}\n\nLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\tconstructor: LinearInterpolant,\n\n\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\toffset1 = i1 * stride,\n\t\t\toffset0 = offset1 - stride,\n\n\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tweight0 = 1 - weight1;\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n} );\n\n/**\n *\n * Interpolant that evaluates to the sample value at the position preceeding\n * the parameter.\n *\n * @author tschw\n */\n\nfunction DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n}\n\nDiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\tconstructor: DiscreteInterpolant,\n\n\tinterpolate_: function ( i1 /*, t0, t, t1 */ ) {\n\n\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t}\n\n} );\n\n/**\n * @author tschw\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n */\n\nvar AnimationUtils = {\n\n\t// same as Array.prototype.slice, but also works on typed arrays\n\tarraySlice: function ( array, from, to ) {\n\n\t\tif ( AnimationUtils.isTypedArray( array ) ) {\n\n\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\n\n\t\t}\n\n\t\treturn array.slice( from, to );\n\n\t},\n\n\t// converts an array to a specific type\n\tconvertArray: function ( array, type, forceClone ) {\n\n\t\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t\t\t! forceClone && array.constructor === type ) return array;\n\n\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\t\treturn new type( array ); // create typed array\n\n\t\t}\n\n\t\treturn Array.prototype.slice.call( array ); // create Array\n\n\t},\n\n\tisTypedArray: function ( object ) {\n\n\t\treturn ArrayBuffer.isView( object ) &&\n\t\t\t\t! ( object instanceof DataView );\n\n\t},\n\n\t// returns an array by which times and values can be sorted\n\tgetKeyframeOrder: function ( times ) {\n\n\t\tfunction compareTime( i, j ) {\n\n\t\t\treturn times[ i ] - times[ j ];\n\n\t\t}\n\n\t\tvar n = times.length;\n\t\tvar result = new Array( n );\n\t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\n\n\t\tresult.sort( compareTime );\n\n\t\treturn result;\n\n\t},\n\n\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\tsortedArray: function ( values, stride, order ) {\n\n\t\tvar nValues = values.length;\n\t\tvar result = new values.constructor( nValues );\n\n\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\t\tvar srcOffset = order[ i ] * stride;\n\n\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn result;\n\n\t},\n\n\t// function for parsing AOS keyframe formats\n\tflattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {\n\n\t\tvar i = 1, key = jsonKeys[ 0 ];\n\n\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t}\n\n\t\tif ( key === undefined ) return; // no data\n\n\t\tvar value = key[ valuePropertyName ];\n\t\tif ( value === undefined ) return; // no data\n\n\t\tif ( Array.isArray( value ) ) {\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t} else if ( value.toArray !== undefined ) {\n\n\t\t\t// ...assume THREE.Math-ish\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t} else {\n\n\t\t\t// otherwise push as-is\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalues.push( value );\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t}\n\n\t}\n\n};\n\n/**\n *\n * A timed sequence of keyframes for a specific property.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction KeyframeTrack( name, times, values, interpolation ) {\n\n\tif ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );\n\tif ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );\n\n\tthis.name = name;\n\n\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\n\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\n\n\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\tthis.validate();\n\tthis.optimize();\n\n}\n\n// Static methods:\n\nObject.assign( KeyframeTrack, {\n\n\t// Serialization (in static context, because of constructor invocation\n\t// and automatic invocation of .toJSON):\n\n\tparse: function ( json ) {\n\n\t\tif ( json.type === undefined ) {\n\n\t\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\n\n\t\t}\n\n\t\tvar trackType = KeyframeTrack._getTrackTypeForValueTypeName( json.type );\n\n\t\tif ( json.times === undefined ) {\n\n\t\t\tvar times = [], values = [];\n\n\t\t\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\n\t\t}\n\n\t\t// derived classes can define a static parse method\n\t\tif ( trackType.parse !== undefined ) {\n\n\t\t\treturn trackType.parse( json );\n\n\t\t} else {\n\n\t\t\t// by default, we assume a constructor compatible with the base\n\t\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\n\n\t\t}\n\n\t},\n\n\ttoJSON: function ( track ) {\n\n\t\tvar trackType = track.constructor;\n\n\t\tvar json;\n\n\t\t// derived classes can define a static toJSON method\n\t\tif ( trackType.toJSON !== undefined ) {\n\n\t\t\tjson = trackType.toJSON( track );\n\n\t\t} else {\n\n\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\tjson = {\n\n\t\t\t\t'name': track.name,\n\t\t\t\t'times': AnimationUtils.convertArray( track.times, Array ),\n\t\t\t\t'values': AnimationUtils.convertArray( track.values, Array )\n\n\t\t\t};\n\n\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t}\n\n\t\t}\n\n\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\treturn json;\n\n\t},\n\n\t_getTrackTypeForValueTypeName: function ( typeName ) {\n\n\t\tswitch ( typeName.toLowerCase() ) {\n\n\t\t\tcase 'scalar':\n\t\t\tcase 'double':\n\t\t\tcase 'float':\n\t\t\tcase 'number':\n\t\t\tcase 'integer':\n\n\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\tcase 'vector':\n\t\t\tcase 'vector2':\n\t\t\tcase 'vector3':\n\t\t\tcase 'vector4':\n\n\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\tcase 'color':\n\n\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\tcase 'quaternion':\n\n\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\tcase 'bool':\n\t\t\tcase 'boolean':\n\n\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\tcase 'string':\n\n\t\t\t\treturn StringKeyframeTrack;\n\n\t\t}\n\n\t\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\n\n\t}\n\n} );\n\nObject.assign( KeyframeTrack.prototype, {\n\n\tconstructor: KeyframeTrack,\n\n\tTimeBufferType: Float32Array,\n\n\tValueBufferType: Float32Array,\n\n\tDefaultInterpolation: InterpolateLinear,\n\n\tInterpolantFactoryMethodDiscrete: function ( result ) {\n\n\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tInterpolantFactoryMethodSmooth: function ( result ) {\n\n\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tsetInterpolation: function ( interpolation ) {\n\n\t\tvar factoryMethod;\n\n\t\tswitch ( interpolation ) {\n\n\t\t\tcase InterpolateDiscrete:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\tbreak;\n\n\t\t\tcase InterpolateLinear:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\tbreak;\n\n\t\t\tcase InterpolateSmooth:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( factoryMethod === undefined ) {\n\n\t\t\tvar message = \"unsupported interpolation for \" +\n\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\n\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.createInterpolant = factoryMethod;\n\n\t},\n\n\tgetInterpolation: function () {\n\n\t\tswitch ( this.createInterpolant ) {\n\n\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\treturn InterpolateLinear;\n\n\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\treturn InterpolateSmooth;\n\n\t\t}\n\n\t},\n\n\tgetValueSize: function () {\n\n\t\treturn this.values.length / this.times.length;\n\n\t},\n\n\t// move all keyframes either forwards or backwards in time\n\tshift: function ( timeOffset ) {\n\n\t\tif ( timeOffset !== 0.0 ) {\n\n\t\t\tvar times = this.times;\n\n\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\tscale: function ( timeScale ) {\n\n\t\tif ( timeScale !== 1.0 ) {\n\n\t\t\tvar times = this.times;\n\n\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\ttrim: function ( startTime, endTime ) {\n\n\t\tvar times = this.times,\n\t\t\tnKeys = times.length,\n\t\t\tfrom = 0,\n\t\t\tto = nKeys - 1;\n\n\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\n\n\t\t\t++ from;\n\n\t\t}\n\n\t\twhile ( to !== - 1 && times[ to ] > endTime ) {\n\n\t\t\t-- to;\n\n\t\t}\n\n\t\t++ to; // inclusive -> exclusive bound\n\n\t\tif ( from !== 0 || to !== nKeys ) {\n\n\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\tif ( from >= to ) to = Math.max( to, 1 ), from = to - 1;\n\n\t\t\tvar stride = this.getValueSize();\n\t\t\tthis.times = AnimationUtils.arraySlice( times, from, to );\n\t\t\tthis.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\tvalidate: function () {\n\n\t\tvar valid = true;\n\n\t\tvar valueSize = this.getValueSize();\n\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tvar times = this.times,\n\t\t\tvalues = this.values,\n\n\t\t\tnKeys = times.length;\n\n\t\tif ( nKeys === 0 ) {\n\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tvar prevTime = null;\n\n\t\tfor ( var i = 0; i !== nKeys; i ++ ) {\n\n\t\t\tvar currTime = times[ i ];\n\n\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tprevTime = currTime;\n\n\t\t}\n\n\t\tif ( values !== undefined ) {\n\n\t\t\tif ( AnimationUtils.isTypedArray( values ) ) {\n\n\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar value = values[ i ];\n\n\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\n\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn valid;\n\n\t},\n\n\t// removes equivalent sequential keys as common in morph target sequences\n\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\toptimize: function () {\n\n\t\tvar times = this.times,\n\t\t\tvalues = this.values,\n\t\t\tstride = this.getValueSize(),\n\n\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n\t\t\twriteIndex = 1,\n\t\t\tlastIndex = times.length - 1;\n\n\t\tfor ( var i = 1; i < lastIndex; ++ i ) {\n\n\t\t\tvar keep = false;\n\n\t\t\tvar time = times[ i ];\n\t\t\tvar timeNext = times[ i + 1 ];\n\n\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\n\t\t\t\tif ( ! smoothInterpolation ) {\n\n\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n\t\t\t\t\tvar offset = i * stride,\n\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tvar value = values[ offset + j ];\n\n\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tkeep = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// in-place compaction\n\n\t\t\tif ( keep ) {\n\n\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// flush last keyframe (compaction looks ahead)\n\n\t\tif ( lastIndex > 0 ) {\n\n\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n\t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\n\n\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t}\n\n\t\t\t++ writeIndex;\n\n\t\t}\n\n\t\tif ( writeIndex !== times.length ) {\n\n\t\t\tthis.times = AnimationUtils.arraySlice( times, 0, writeIndex );\n\t\t\tthis.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n *\n * A Track of vectored keyframe values.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction VectorKeyframeTrack( name, times, values, interpolation ) {\n\n\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n}\n\nVectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\tconstructor: VectorKeyframeTrack,\n\n\tValueTypeName: 'vector'\n\n\t// ValueBufferType is inherited\n\n\t// DefaultInterpolation is inherited\n\n} );\n\n/**\n *\n * Reusable set of Tracks that represent an animation.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n */\n\nfunction AnimationClip( name, duration, tracks ) {\n\n\tthis.name = name;\n\tthis.tracks = tracks;\n\tthis.duration = ( duration !== undefined ) ? duration : - 1;\n\n\tthis.uuid = _Math.generateUUID();\n\n\t// this means it should figure out its duration by scanning the tracks\n\tif ( this.duration < 0 ) {\n\n\t\tthis.resetDuration();\n\n\t}\n\n\tthis.optimize();\n\n}\n\nObject.assign( AnimationClip, {\n\n\tparse: function ( json ) {\n\n\t\tvar tracks = [],\n\t\t\tjsonTracks = json.tracks,\n\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t}\n\n\t\treturn new AnimationClip( json.name, json.duration, tracks );\n\n\t},\n\n\ttoJSON: function ( clip ) {\n\n\t\tvar tracks = [],\n\t\t\tclipTracks = clip.tracks;\n\n\t\tvar json = {\n\n\t\t\t'name': clip.name,\n\t\t\t'duration': clip.duration,\n\t\t\t'tracks': tracks\n\n\t\t};\n\n\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t}\n\n\t\treturn json;\n\n\t},\n\n\tCreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {\n\n\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\tvar tracks = [];\n\n\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\tvar times = [];\n\t\t\tvar values = [];\n\n\t\t\ttimes.push(\n\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\ti,\n\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\tvar order = AnimationUtils.getKeyframeOrder( times );\n\t\t\ttimes = AnimationUtils.sortedArray( times, 1, order );\n\t\t\tvalues = AnimationUtils.sortedArray( values, 1, order );\n\n\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t// last frame as well for perfect loop.\n\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t}\n\n\t\t\ttracks.push(\n\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\ttimes, values\n\t\t\t\t).scale( 1.0 / fps ) );\n\n\t\t}\n\n\t\treturn new AnimationClip( name, - 1, tracks );\n\n\t},\n\n\tfindByName: function ( objectOrClipArray, name ) {\n\n\t\tvar clipArray = objectOrClipArray;\n\n\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\tvar o = objectOrClipArray;\n\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t}\n\n\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\treturn clipArray[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t},\n\n\tCreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {\n\n\t\tvar animationToMorphTargets = {};\n\n\t\t// tested with https://regex101.com/ on trick sequences\n\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t// sort morph target names into animation groups based\n\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\tvar morphTarget = morphTargets[ i ];\n\t\t\tvar parts = morphTarget.name.match( pattern );\n\n\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\tvar name = parts[ 1 ];\n\n\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t}\n\n\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar clips = [];\n\n\t\tfor ( var name in animationToMorphTargets ) {\n\n\t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t}\n\n\t\treturn clips;\n\n\t},\n\n\t// parse the animation.hierarchy format\n\tparseAnimation: function ( animation, bones ) {\n\n\t\tif ( ! animation ) {\n\n\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tvar addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t// only return track if there are actually keys.\n\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\tAnimationUtils.flattenJSON( animationKeys, times, values, propertyName );\n\n\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tvar tracks = [];\n\n\t\tvar clipName = animation.name || 'default';\n\t\t// automatic length determination in AnimationClip.\n\t\tvar duration = animation.length || - 1;\n\t\tvar fps = animation.fps || 30;\n\n\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t// skip empty tracks\n\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\n\t\t\t// process morph targets\n\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\n\n\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\tvar morphTargetNames = {};\n\n\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\n\n\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t// the morphTarget is named.\n\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\n\t\t\t\t\tfor ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\tvar animationKey = animationKeys[ k ];\n\n\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t}\n\n\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n\t\t\t} else {\n\n\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tracks.length === 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tvar clip = new AnimationClip( clipName, duration, tracks );\n\n\t\treturn clip;\n\n\t}\n\n} );\n\nObject.assign( AnimationClip.prototype, {\n\n\tresetDuration: function () {\n\n\t\tvar tracks = this.tracks, duration = 0;\n\n\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\tvar track = this.tracks[ i ];\n\n\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\n\n\t\t}\n\n\t\tthis.duration = duration;\n\n\t},\n\n\ttrim: function () {\n\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\toptimize: function () {\n\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].optimize();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction MaterialLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\tthis.textures = {};\n\n}\n\nObject.assign( MaterialLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new FileLoader( scope.manager );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetTextures: function ( value ) {\n\n\t\tthis.textures = value;\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\tvar textures = this.textures;\n\n\t\tfunction getTexture( name ) {\n\n\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t}\n\n\t\t\treturn textures[ name ];\n\n\t\t}\n\n\t\tvar material = new Materials[ json.type ]();\n\n\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\tif ( json.color !== undefined ) material.color.setHex( json.color );\n\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\n\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\tif ( json.clearCoat !== undefined ) material.clearCoat = json.clearCoat;\n\t\tif ( json.clearCoatRoughness !== undefined ) material.clearCoatRoughness = json.clearCoatRoughness;\n\t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\n\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\n\t\tif ( json.fog !== undefined ) material.fog = json.fog;\n\t\tif ( json.flatShading !== undefined ) material.flatShading = json.flatShading;\n\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n\t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n\n\t\tif ( json.rotation !== undefined ) material.rotation = json.rotation;\n\n\t\tif ( json.linewidth !== 1 ) material.linewidth = json.linewidth;\n\t\tif ( json.dashSize !== undefined ) material.dashSize = json.dashSize;\n\t\tif ( json.gapSize !== undefined ) material.gapSize = json.gapSize;\n\t\tif ( json.scale !== undefined ) material.scale = json.scale;\n\n\t\tif ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;\n\t\tif ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\tif ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\n\t\tif ( json.skinning !== undefined ) material.skinning = json.skinning;\n\t\tif ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;\n\t\tif ( json.dithering !== undefined ) material.dithering = json.dithering;\n\n\t\tif ( json.visible !== undefined ) material.visible = json.visible;\n\t\tif ( json.userData !== undefined ) material.userData = json.userData;\n\n\t\t// Deprecated\n\n\t\tif ( json.shading !== undefined ) material.flatShading = json.shading === 1; // THREE.FlatShading\n\n\t\t// for PointsMaterial\n\n\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n\t\t// maps\n\n\t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\n\t\tif ( json.alphaMap !== undefined ) {\n\n\t\t\tmaterial.alphaMap = getTexture( json.alphaMap );\n\t\t\tmaterial.transparent = true;\n\n\t\t}\n\n\t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n\t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\tvar normalScale = json.normalScale;\n\n\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t}\n\n\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t}\n\n\t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\n\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n\t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\n\t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\n\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\n\t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n\t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n\t\tif ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );\n\n\t\treturn material;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction BufferGeometryLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n}\n\nObject.assign( BufferGeometryLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new FileLoader( scope.manager );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar index = json.data.index;\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n\t\t}\n\n\t\tvar attributes = json.data.attributes;\n\n\t\tfor ( var key in attributes ) {\n\n\t\t\tvar attribute = attributes[ key ];\n\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\n\t\t\tgeometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );\n\n\t\t}\n\n\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\tif ( groups !== undefined ) {\n\n\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\tvar center = new Vector3();\n\n\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t}\n\n\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n} );\n\nvar TYPED_ARRAYS = {\n\tInt8Array: Int8Array,\n\tUint8Array: Uint8Array,\n\t// Workaround for IE11 pre KB2929437. See #11440\n\tUint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,\n\tInt16Array: Int16Array,\n\tUint16Array: Uint16Array,\n\tInt32Array: Int32Array,\n\tUint32Array: Uint32Array,\n\tFloat32Array: Float32Array,\n\tFloat64Array: Float64Array\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction Loader() {}\n\nLoader.Handlers = {\n\n\thandlers: [],\n\n\tadd: function ( regex, loader ) {\n\n\t\tthis.handlers.push( regex, loader );\n\n\t},\n\n\tget: function ( file ) {\n\n\t\tvar handlers = this.handlers;\n\n\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\tvar regex = handlers[ i ];\n\t\t\tvar loader = handlers[ i + 1 ];\n\n\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\treturn loader;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n};\n\nObject.assign( Loader.prototype, {\n\n\tcrossOrigin: undefined,\n\n\tonLoadStart: function () {},\n\n\tonLoadProgress: function () {},\n\n\tonLoadComplete: function () {},\n\n\tinitMaterials: function ( materials, texturePath, crossOrigin ) {\n\n\t\tvar array = [];\n\n\t\tfor ( var i = 0; i < materials.length; ++ i ) {\n\n\t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\n\n\t\t}\n\n\t\treturn array;\n\n\t},\n\n\tcreateMaterial: ( function () {\n\n\t\tvar BlendingMode = {\n\t\t\tNoBlending: NoBlending,\n\t\t\tNormalBlending: NormalBlending,\n\t\t\tAdditiveBlending: AdditiveBlending,\n\t\t\tSubtractiveBlending: SubtractiveBlending,\n\t\t\tMultiplyBlending: MultiplyBlending,\n\t\t\tCustomBlending: CustomBlending\n\t\t};\n\n\t\tvar color = new Color();\n\t\tvar textureLoader = new TextureLoader();\n\t\tvar materialLoader = new MaterialLoader();\n\n\t\treturn function createMaterial( m, texturePath, crossOrigin ) {\n\n\t\t\t// convert from old material format\n\n\t\t\tvar textures = {};\n\n\t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\n\n\t\t\t\tvar fullPath = texturePath + path;\n\t\t\t\tvar loader = Loader.Handlers.get( fullPath );\n\n\t\t\t\tvar texture;\n\n\t\t\t\tif ( loader !== null ) {\n\n\t\t\t\t\ttexture = loader.load( fullPath );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\n\t\t\t\t\ttexture = textureLoader.load( fullPath );\n\n\t\t\t\t}\n\n\t\t\t\tif ( repeat !== undefined ) {\n\n\t\t\t\t\ttexture.repeat.fromArray( repeat );\n\n\t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;\n\t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;\n\n\t\t\t\t}\n\n\t\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\t\ttexture.offset.fromArray( offset );\n\n\t\t\t\t}\n\n\t\t\t\tif ( wrap !== undefined ) {\n\n\t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;\n\t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;\n\n\t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;\n\t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;\n\n\t\t\t\t}\n\n\t\t\t\tif ( anisotropy !== undefined ) {\n\n\t\t\t\t\ttexture.anisotropy = anisotropy;\n\n\t\t\t\t}\n\n\t\t\t\tvar uuid = _Math.generateUUID();\n\n\t\t\t\ttextures[ uuid ] = texture;\n\n\t\t\t\treturn uuid;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar json = {\n\t\t\t\tuuid: _Math.generateUUID(),\n\t\t\t\ttype: 'MeshLambertMaterial'\n\t\t\t};\n\n\t\t\tfor ( var name in m ) {\n\n\t\t\t\tvar value = m[ name ];\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'DbgColor':\n\t\t\t\t\tcase 'DbgIndex':\n\t\t\t\t\tcase 'opticalDensity':\n\t\t\t\t\tcase 'illumination':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'DbgName':\n\t\t\t\t\t\tjson.name = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'blending':\n\t\t\t\t\t\tjson.blending = BlendingMode[ value ];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorAmbient':\n\t\t\t\t\tcase 'mapAmbient':\n\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorDiffuse':\n\t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorSpecular':\n\t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorEmissive':\n\t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'specularCoef':\n\t\t\t\t\t\tjson.shininess = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'shading':\n\t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\n\t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\n\t\t\t\t\t\tif ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapDiffuse':\n\t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapDiffuseRepeat':\n\t\t\t\t\tcase 'mapDiffuseOffset':\n\t\t\t\t\tcase 'mapDiffuseWrap':\n\t\t\t\t\tcase 'mapDiffuseAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapEmissive':\n\t\t\t\t\t\tjson.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapEmissiveRepeat':\n\t\t\t\t\tcase 'mapEmissiveOffset':\n\t\t\t\t\tcase 'mapEmissiveWrap':\n\t\t\t\t\tcase 'mapEmissiveAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapLight':\n\t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapLightRepeat':\n\t\t\t\t\tcase 'mapLightOffset':\n\t\t\t\t\tcase 'mapLightWrap':\n\t\t\t\t\tcase 'mapLightAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAO':\n\t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAORepeat':\n\t\t\t\t\tcase 'mapAOOffset':\n\t\t\t\t\tcase 'mapAOWrap':\n\t\t\t\t\tcase 'mapAOAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapBump':\n\t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapBumpScale':\n\t\t\t\t\t\tjson.bumpScale = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapBumpRepeat':\n\t\t\t\t\tcase 'mapBumpOffset':\n\t\t\t\t\tcase 'mapBumpWrap':\n\t\t\t\t\tcase 'mapBumpAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapNormal':\n\t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapNormalFactor':\n\t\t\t\t\t\tjson.normalScale = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapNormalRepeat':\n\t\t\t\t\tcase 'mapNormalOffset':\n\t\t\t\t\tcase 'mapNormalWrap':\n\t\t\t\t\tcase 'mapNormalAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapSpecular':\n\t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapSpecularRepeat':\n\t\t\t\t\tcase 'mapSpecularOffset':\n\t\t\t\t\tcase 'mapSpecularWrap':\n\t\t\t\t\tcase 'mapSpecularAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapMetalness':\n\t\t\t\t\t\tjson.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapMetalnessRepeat':\n\t\t\t\t\tcase 'mapMetalnessOffset':\n\t\t\t\t\tcase 'mapMetalnessWrap':\n\t\t\t\t\tcase 'mapMetalnessAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapRoughness':\n\t\t\t\t\t\tjson.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapRoughnessRepeat':\n\t\t\t\t\tcase 'mapRoughnessOffset':\n\t\t\t\t\tcase 'mapRoughnessWrap':\n\t\t\t\t\tcase 'mapRoughnessAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAlpha':\n\t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAlphaRepeat':\n\t\t\t\t\tcase 'mapAlphaOffset':\n\t\t\t\t\tcase 'mapAlphaWrap':\n\t\t\t\t\tcase 'mapAlphaAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'flipSided':\n\t\t\t\t\t\tjson.side = BackSide;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'doubleSided':\n\t\t\t\t\t\tjson.side = DoubleSide;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'transparency':\n\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\n\t\t\t\t\t\tjson.opacity = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'depthTest':\n\t\t\t\t\tcase 'depthWrite':\n\t\t\t\t\tcase 'colorWrite':\n\t\t\t\t\tcase 'opacity':\n\t\t\t\t\tcase 'reflectivity':\n\t\t\t\t\tcase 'transparent':\n\t\t\t\t\tcase 'visible':\n\t\t\t\t\tcase 'wireframe':\n\t\t\t\t\t\tjson[ name ] = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'vertexColors':\n\t\t\t\t\t\tif ( value === true ) json.vertexColors = VertexColors;\n\t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = FaceColors;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\n\t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\n\n\t\t\tif ( json.opacity < 1 ) json.transparent = true;\n\n\t\t\tmaterialLoader.setTextures( textures );\n\n\t\t\treturn materialLoader.parse( json );\n\n\t\t};\n\n\t} )()\n\n} );\n\n/**\n * @author Don McCurdy / https://www.donmccurdy.com\n */\n\nvar LoaderUtils = {\n\n\tdecodeText: function ( array ) {\n\n\t\tif ( typeof TextDecoder !== 'undefined' ) {\n\n\t\t\treturn new TextDecoder().decode( array );\n\n\t\t}\n\n\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\t\tvar s = '';\n\n\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t// Implicitly assumes little-endian.\n\t\t\ts += String.fromCharCode( array[ i ] );\n\n\t\t}\n\n\t\t// Merges multi-byte utf-8 characters.\n\t\treturn decodeURIComponent( escape( s ) );\n\n\t},\n\n\textractUrlBase: function ( url ) {\n\n\t\tvar parts = url.split( '/' );\n\n\t\tif ( parts.length === 1 ) return './';\n\n\t\tparts.pop();\n\n\t\treturn parts.join( '/' ) + '/';\n\n\t}\n\n};\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction JSONLoader( manager ) {\n\n\tif ( typeof manager === 'boolean' ) {\n\n\t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\n\t\tmanager = undefined;\n\n\t}\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\tthis.withCredentials = false;\n\n}\n\nObject.assign( JSONLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar texturePath = this.texturePath && ( typeof this.texturePath === 'string' ) ? this.texturePath : LoaderUtils.extractUrlBase( url );\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tvar json = JSON.parse( text );\n\t\t\tvar metadata = json.metadata;\n\n\t\t\tif ( metadata !== undefined ) {\n\n\t\t\t\tvar type = metadata.type;\n\n\t\t\t\tif ( type !== undefined ) {\n\n\t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar object = scope.parse( json, texturePath );\n\t\t\tonLoad( object.geometry, object.materials );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetTexturePath: function ( value ) {\n\n\t\tthis.texturePath = value;\n\n\t},\n\n\tparse: ( function () {\n\n\t\tfunction parseModel( json, geometry ) {\n\n\t\t\tfunction isBitSet( value, position ) {\n\n\t\t\t\treturn value & ( 1 << position );\n\n\t\t\t}\n\n\t\t\tvar i, j, fi,\n\n\t\t\t\toffset, zLength,\n\n\t\t\t\tcolorIndex, normalIndex, uvIndex, materialIndex,\n\n\t\t\t\ttype,\n\t\t\t\tisQuad,\n\t\t\t\thasMaterial,\n\t\t\t\thasFaceVertexUv,\n\t\t\t\thasFaceNormal, hasFaceVertexNormal,\n\t\t\t\thasFaceColor, hasFaceVertexColor,\n\n\t\t\t\tvertex, face, faceA, faceB, hex, normal,\n\n\t\t\t\tuvLayer, uv, u, v,\n\n\t\t\t\tfaces = json.faces,\n\t\t\t\tvertices = json.vertices,\n\t\t\t\tnormals = json.normals,\n\t\t\t\tcolors = json.colors,\n\n\t\t\t\tscale = json.scale,\n\n\t\t\t\tnUvLayers = 0;\n\n\n\t\t\tif ( json.uvs !== undefined ) {\n\n\t\t\t\t// disregard empty arrays\n\n\t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\n\n\t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\toffset = 0;\n\t\t\tzLength = vertices.length;\n\n\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\tvertex = new Vector3();\n\n\t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\n\t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\n\t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\n\n\t\t\t\tgeometry.vertices.push( vertex );\n\n\t\t\t}\n\n\t\t\toffset = 0;\n\t\t\tzLength = faces.length;\n\n\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\ttype = faces[ offset ++ ];\n\n\t\t\t\tisQuad = isBitSet( type, 0 );\n\t\t\t\thasMaterial = isBitSet( type, 1 );\n\t\t\t\thasFaceVertexUv = isBitSet( type, 3 );\n\t\t\t\thasFaceNormal = isBitSet( type, 4 );\n\t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\n\t\t\t\thasFaceColor = isBitSet( type, 6 );\n\t\t\t\thasFaceVertexColor = isBitSet( type, 7 );\n\n\t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\n\t\t\t\tif ( isQuad ) {\n\n\t\t\t\t\tfaceA = new Face3();\n\t\t\t\t\tfaceA.a = faces[ offset ];\n\t\t\t\t\tfaceA.b = faces[ offset + 1 ];\n\t\t\t\t\tfaceA.c = faces[ offset + 3 ];\n\n\t\t\t\t\tfaceB = new Face3();\n\t\t\t\t\tfaceB.a = faces[ offset + 1 ];\n\t\t\t\t\tfaceB.b = faces[ offset + 2 ];\n\t\t\t\t\tfaceB.c = faces[ offset + 3 ];\n\n\t\t\t\t\toffset += 4;\n\n\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\tfaceA.materialIndex = materialIndex;\n\t\t\t\t\t\tfaceB.materialIndex = materialIndex;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\n\n\t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\n\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\n\t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\n\t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\tfaceA.normal.set(\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tnormal = new Vector3(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\n\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\n\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\tfaceA.color.setHex( hex );\n\t\t\t\t\t\tfaceB.color.setHex( hex );\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );\n\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.faces.push( faceA );\n\t\t\t\t\tgeometry.faces.push( faceB );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface = new Face3();\n\t\t\t\t\tface.a = faces[ offset ++ ];\n\t\t\t\t\tface.b = faces[ offset ++ ];\n\t\t\t\t\tface.c = faces[ offset ++ ];\n\n\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\tface.materialIndex = materialIndex;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\n\t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\tface.normal.set(\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tnormal = new Vector3(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tface.vertexNormals.push( normal );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tface.vertexColors.push( new Color( colors[ colorIndex ] ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.faces.push( face );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseSkin( json, geometry ) {\n\n\t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\n\n\t\t\tif ( json.skinWeights ) {\n\n\t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\tvar x = json.skinWeights[ i ];\n\t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\n\t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\n\t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\n\n\t\t\t\t\tgeometry.skinWeights.push( new Vector4( x, y, z, w ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.skinIndices ) {\n\n\t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\tvar a = json.skinIndices[ i ];\n\t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\n\t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\n\t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\n\n\t\t\t\t\tgeometry.skinIndices.push( new Vector4( a, b, c, d ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry.bones = json.bones;\n\n\t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\n\n\t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\n\t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseMorphing( json, geometry ) {\n\n\t\t\tvar scale = json.scale;\n\n\t\t\tif ( json.morphTargets !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\tgeometry.morphTargets[ i ] = {};\n\t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\n\t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\n\n\t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\n\t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\n\n\t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\n\n\t\t\t\t\t\tvar vertex = new Vector3();\n\t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\n\t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\n\t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\n\n\t\t\t\t\t\tdstVertices.push( vertex );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\n\n\t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\n\n\t\t\t\tvar faces = geometry.faces;\n\t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\n\n\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseAnimations( json, geometry ) {\n\n\t\t\tvar outputAnimations = [];\n\n\t\t\t// parse old style Bone/Hierarchy animations\n\t\t\tvar animations = [];\n\n\t\t\tif ( json.animation !== undefined ) {\n\n\t\t\t\tanimations.push( json.animation );\n\n\t\t\t}\n\n\t\t\tif ( json.animations !== undefined ) {\n\n\t\t\t\tif ( json.animations.length ) {\n\n\t\t\t\t\tanimations = animations.concat( json.animations );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tanimations.push( json.animations );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\n\n\t\t\t\tvar clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );\n\t\t\t\tif ( clip ) outputAnimations.push( clip );\n\n\t\t\t}\n\n\t\t\t// parse implicit morph animations\n\t\t\tif ( geometry.morphTargets ) {\n\n\t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n\t\t\t\tvar morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\n\t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\n\n\t\t\t}\n\n\t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\n\n\t\t}\n\n\t\treturn function parse( json, texturePath ) {\n\n\t\t\tif ( json.data !== undefined ) {\n\n\t\t\t\t// Geometry 4.0 spec\n\t\t\t\tjson = json.data;\n\n\t\t\t}\n\n\t\t\tif ( json.scale !== undefined ) {\n\n\t\t\t\tjson.scale = 1.0 / json.scale;\n\n\t\t\t} else {\n\n\t\t\t\tjson.scale = 1.0;\n\n\t\t\t}\n\n\t\t\tvar geometry = new Geometry();\n\n\t\t\tparseModel( json, geometry );\n\t\t\tparseSkin( json, geometry );\n\t\t\tparseMorphing( json, geometry );\n\t\t\tparseAnimations( json, geometry );\n\n\t\t\tgeometry.computeFaceNormals();\n\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\tif ( json.materials === undefined || json.materials.length === 0 ) {\n\n\t\t\t\treturn { geometry: geometry };\n\n\t\t\t} else {\n\n\t\t\t\tvar materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\n\n\t\t\t\treturn { geometry: geometry, materials: materials };\n\n\t\t\t}\n\n\t\t};\n\n\t} )()\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction ObjectLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\tthis.texturePath = '';\n\n}\n\nObject.assign( ObjectLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tif ( this.texturePath === '' ) {\n\n\t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\n\n\t\t}\n\n\t\tvar scope = this;\n\n\t\tvar loader = new FileLoader( scope.manager );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tvar json = null;\n\n\t\t\ttry {\n\n\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tif ( onError !== undefined ) onError( error );\n\n\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar metadata = json.metadata;\n\n\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url + '. Use THREE.JSONLoader instead.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tscope.parse( json, onLoad );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetTexturePath: function ( value ) {\n\n\t\tthis.texturePath = value;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\n\t},\n\n\tparse: function ( json, onLoad ) {\n\n\t\tvar shapes = this.parseShape( json.shapes );\n\t\tvar geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\tvar images = this.parseImages( json.images, function () {\n\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t} );\n\n\t\tvar textures = this.parseTextures( json.textures, images );\n\t\tvar materials = this.parseMaterials( json.materials, textures );\n\n\t\tvar object = this.parseObject( json.object, geometries, materials );\n\n\t\tif ( json.animations ) {\n\n\t\t\tobject.animations = this.parseAnimations( json.animations );\n\n\t\t}\n\n\t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t}\n\n\t\treturn object;\n\n\t},\n\n\tparseShape: function ( json ) {\n\n\t\tvar shapes = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar shape = new Shape().fromJSON( json[ i ] );\n\n\t\t\t\tshapes[ shape.uuid ] = shape;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn shapes;\n\n\t},\n\n\tparseGeometries: function ( json, shapes ) {\n\n\t\tvar geometries = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tvar geometryLoader = new JSONLoader();\n\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar geometry;\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\tcase 'PlaneBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.depth,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.depthSegments\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\tcase 'CircleBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\tcase 'CylinderBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.radiusTop,\n\t\t\t\t\t\t\tdata.radiusBottom,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\tcase 'ConeBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\tcase 'SphereBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\tdata.phiLength,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\tcase 'DodecahedronBufferGeometry':\n\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\tcase 'IcosahedronBufferGeometry':\n\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\tcase 'OctahedronBufferGeometry':\n\t\t\t\t\tcase 'TetrahedronGeometry':\n\t\t\t\t\tcase 'TetrahedronBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\tcase 'RingBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.innerRadius,\n\t\t\t\t\t\t\tdata.outerRadius,\n\t\t\t\t\t\t\tdata.thetaSegments,\n\t\t\t\t\t\t\tdata.phiSegments,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\tcase 'TorusBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\tdata.arc\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.p,\n\t\t\t\t\t\t\tdata.q\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\tcase 'LatheBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.points,\n\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\tdata.phiLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PolyhedronGeometry':\n\t\t\t\t\tcase 'PolyhedronBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tdata.vertices,\n\t\t\t\t\t\t\tdata.indices,\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.details\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ShapeGeometry':\n\t\t\t\t\tcase 'ShapeBufferGeometry':\n\n\t\t\t\t\t\tvar geometryShapes = [];\n\n\t\t\t\t\t\tfor ( var i = 0, l = data.shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ i ] ];\n\n\t\t\t\t\t\t\tgeometryShapes.push( shape );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\tgeometryShapes,\n\t\t\t\t\t\t\tdata.curveSegments\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'BufferGeometry':\n\n\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Geometry':\n\n\t\t\t\t\t\tgeometry = geometryLoader.parse( data, this.texturePath ).geometry;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\n\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn geometries;\n\n\t},\n\n\tparseMaterials: function ( json, textures ) {\n\n\t\tvar materials = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tvar loader = new MaterialLoader();\n\t\t\tloader.setTextures( textures );\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tif ( data.type === 'MultiMaterial' ) {\n\n\t\t\t\t\t// Deprecated\n\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor ( var j = 0; j < data.materials.length; j ++ ) {\n\n\t\t\t\t\t\tarray.push( loader.parse( data.materials[ j ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmaterials[ data.uuid ] = array;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterials[ data.uuid ] = loader.parse( data );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn materials;\n\n\t},\n\n\tparseAnimations: function ( json ) {\n\n\t\tvar animations = [];\n\n\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\tvar clip = AnimationClip.parse( json[ i ] );\n\n\t\t\tanimations.push( clip );\n\n\t\t}\n\n\t\treturn animations;\n\n\t},\n\n\tparseImages: function ( json, onLoad ) {\n\n\t\tvar scope = this;\n\t\tvar images = {};\n\n\t\tfunction loadImage( url ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn loader.load( url, function () {\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, undefined, function () {\n\n\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\tvar manager = new LoadingManager( onLoad );\n\n\t\t\tvar loader = new ImageLoader( manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar image = json[ i ];\n\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\n\n\t\t\t\timages[ image.uuid ] = loadImage( path );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn images;\n\n\t},\n\n\tparseTextures: function ( json, images ) {\n\n\t\tfunction parseConstant( value, type ) {\n\n\t\t\tif ( typeof value === 'number' ) return value;\n\n\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\treturn type[ value ];\n\n\t\t}\n\n\t\tvar textures = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t}\n\n\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t}\n\n\t\t\t\tvar texture = new Texture( images[ data.image ] );\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\n\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );\n\n\t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n\t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n\t\t\t\tif ( data.center !== undefined ) texture.center.fromArray( data.center );\n\t\t\t\tif ( data.rotation !== undefined ) texture.rotation = data.rotation;\n\n\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\n\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.format !== undefined ) texture.format = data.format;\n\n\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );\n\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );\n\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\n\t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\n\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn textures;\n\n\t},\n\n\tparseObject: function ( data, geometries, materials ) {\n\n\t\tvar object;\n\n\t\tfunction getGeometry( name ) {\n\n\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t}\n\n\t\t\treturn geometries[ name ];\n\n\t\t}\n\n\t\tfunction getMaterial( name ) {\n\n\t\t\tif ( name === undefined ) return undefined;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor ( var i = 0, l = name.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar uuid = name[ i ];\n\n\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tarray.push( materials[ uuid ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn array;\n\n\t\t\t}\n\n\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t}\n\n\t\t\treturn materials[ name ];\n\n\t\t}\n\n\t\tswitch ( data.type ) {\n\n\t\t\tcase 'Scene':\n\n\t\t\t\tobject = new Scene();\n\n\t\t\t\tif ( data.background !== undefined ) {\n\n\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n\t\t\t\t\t\tobject.background = new Color( data.background );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.fog !== undefined ) {\n\n\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'AmbientLight':\n\n\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'DirectionalLight':\n\n\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PointLight':\n\n\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'RectAreaLight':\n\n\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'SpotLight':\n\n\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'HemisphereLight':\n\n\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'SkinnedMesh':\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );\n\n\t\t\tcase 'Mesh':\n\n\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\tvar material = getMaterial( data.material );\n\n\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\n\n\t\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LOD':\n\n\t\t\t\tobject = new LOD();\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Line':\n\n\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LineLoop':\n\n\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LineSegments':\n\n\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PointCloud':\n\t\t\tcase 'Points':\n\n\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Sprite':\n\n\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Group':\n\n\t\t\t\tobject = new Group();\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tobject = new Object3D();\n\n\t\t}\n\n\t\tobject.uuid = data.uuid;\n\n\t\tif ( data.name !== undefined ) object.name = data.name;\n\t\tif ( data.matrix !== undefined ) {\n\n\t\t\tobject.matrix.fromArray( data.matrix );\n\t\t\tobject.matrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t} else {\n\n\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n\t\t}\n\n\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n\t\tif ( data.shadow ) {\n\n\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n\n\t\t}\n\n\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t\tif ( data.frustumCulled !== undefined ) object.frustumCulled = data.frustumCulled;\n\t\tif ( data.renderOrder !== undefined ) object.renderOrder = data.renderOrder;\n\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\n\t\tif ( data.children !== undefined ) {\n\n\t\t\tvar children = data.children;\n\n\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( data.type === 'LOD' ) {\n\n\t\t\tvar levels = data.levels;\n\n\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\tvar level = levels[ l ];\n\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\tobject.addLevel( child, level.distance );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn object;\n\n\t}\n\n} );\n\nvar TEXTURE_MAPPING = {\n\tUVMapping: UVMapping,\n\tCubeReflectionMapping: CubeReflectionMapping,\n\tCubeRefractionMapping: CubeRefractionMapping,\n\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\tSphericalReflectionMapping: SphericalReflectionMapping,\n\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\tCubeUVRefractionMapping: CubeUVRefractionMapping\n};\n\nvar TEXTURE_WRAPPING = {\n\tRepeatWrapping: RepeatWrapping,\n\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\tMirroredRepeatWrapping: MirroredRepeatWrapping\n};\n\nvar TEXTURE_FILTER = {\n\tNearestFilter: NearestFilter,\n\tNearestMipMapNearestFilter: NearestMipMapNearestFilter,\n\tNearestMipMapLinearFilter: NearestMipMapLinearFilter,\n\tLinearFilter: LinearFilter,\n\tLinearMipMapNearestFilter: LinearMipMapNearestFilter,\n\tLinearMipMapLinearFilter: LinearMipMapLinearFilter\n};\n\n/**\n * @author thespite / http://clicktorelease.com/\n */\n\nfunction ImageBitmapLoader( manager ) {\n\n\tif ( typeof createImageBitmap === 'undefined' ) {\n\n\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\n\n\t}\n\n\tif ( typeof fetch === 'undefined' ) {\n\n\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\n\n\t}\n\n\tthis.manager = manager !== undefined ? manager : DefaultLoadingManager;\n\tthis.options = undefined;\n\n}\n\nImageBitmapLoader.prototype = {\n\n\tconstructor: ImageBitmapLoader,\n\n\tsetOptions: function setOptions( options ) {\n\n\t\tthis.options = options;\n\n\t\treturn this;\n\n\t},\n\n\tload: function load( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\tvar scope = this;\n\n\t\tvar cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tfetch( url ).then( function ( res ) {\n\n\t\t\treturn res.blob();\n\n\t\t} ).then( function ( blob ) {\n\n\t\t\treturn createImageBitmap( blob, scope.options );\n\n\t\t} ).then( function ( imageBitmap ) {\n\n\t\t\tCache.add( url, imageBitmap );\n\n\t\t\tif ( onLoad ) onLoad( imageBitmap );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t} ).catch( function ( e ) {\n\n\t\t\tif ( onError ) onError( e );\n\n\t\t\tscope.manager.itemEnd( url );\n\t\t\tscope.manager.itemError( url );\n\n\t\t} );\n\n\t},\n\n\tsetCrossOrigin: function ( /* value */ ) {\n\n\t\treturn this;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n};\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n **/\n\nfunction ShapePath() {\n\n\tthis.type = 'ShapePath';\n\n\tthis.subPaths = [];\n\tthis.currentPath = null;\n\n}\n\nObject.assign( ShapePath.prototype, {\n\n\tmoveTo: function ( x, y ) {\n\n\t\tthis.currentPath = new Path();\n\t\tthis.subPaths.push( this.currentPath );\n\t\tthis.currentPath.moveTo( x, y );\n\n\t},\n\n\tlineTo: function ( x, y ) {\n\n\t\tthis.currentPath.lineTo( x, y );\n\n\t},\n\n\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\n\t},\n\n\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\n\t},\n\n\tsplineThru: function ( pts ) {\n\n\t\tthis.currentPath.splineThru( pts );\n\n\t},\n\n\ttoShapes: function ( isCCW, noHoles ) {\n\n\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\tvar shapes = [];\n\n\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\tvar tmpPath = inSubpaths[ i ];\n\n\t\t\t\tvar tmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\tvar polyLen = inPolygon.length;\n\n\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\tvar inside = false;\n\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\tvar edgeLowPt = inPolygon[ p ];\n\t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not parallel\n\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// parallel or collinear\n\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t\t\t\t\t// continue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn\tinside;\n\n\t\t}\n\n\t\tvar isClockWise = ShapeUtils.isClockWise;\n\n\t\tvar subPaths = this.subPaths;\n\t\tif ( subPaths.length === 0 ) return [];\n\n\t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\tvar solid, tmpPath, tmpShape, shapes = [];\n\n\t\tif ( subPaths.length === 1 ) {\n\n\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\ttmpShape = new Shape();\n\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\tshapes.push( tmpShape );\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\tvar betterShapeHoles = [];\n\t\tvar newShapes = [];\n\t\tvar newShapeHoles = [];\n\t\tvar mainIdx = 0;\n\t\tvar tmpPoints;\n\n\t\tnewShapes[ mainIdx ] = undefined;\n\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\ttmpPath = subPaths[ i ];\n\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\tif ( solid ) {\n\n\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t//console.log('cw', i);\n\n\t\t\t} else {\n\n\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t//console.log('ccw', i);\n\n\t\t\t}\n\n\t\t}\n\n\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\tif ( newShapes.length > 1 ) {\n\n\t\t\tvar ambiguous = false;\n\t\t\tvar toChange = [];\n\n\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t}\n\n\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\n\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\tvar ho = sho[ hIdx ];\n\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// console.log(\"ambiguous: \", ambiguous);\n\t\t\tif ( toChange.length > 0 ) {\n\n\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar tmpHoles;\n\n\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\tshapes.push( tmpShape );\n\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//console.log(\"shape\", shapes);\n\n\t\treturn shapes;\n\n\t}\n\n} );\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Font( data ) {\n\n\tthis.type = 'Font';\n\n\tthis.data = data;\n\n}\n\nObject.assign( Font.prototype, {\n\n\tisFont: true,\n\n\tgenerateShapes: function ( text, size, divisions ) {\n\n\t\tif ( size === undefined ) size = 100;\n\t\tif ( divisions === undefined ) divisions = 4;\n\n\t\tvar shapes = [];\n\t\tvar paths = createPaths( text, size, divisions, this.data );\n\n\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n} );\n\nfunction createPaths( text, size, divisions, data ) {\n\n\tvar chars = String( text ).split( '' );\n\tvar scale = size / data.resolution;\n\tvar line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\tvar paths = [];\n\n\tvar offsetX = 0, offsetY = 0;\n\n\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n\t\tvar char = chars[ i ];\n\n\t\tif ( char === '\\n' ) {\n\n\t\t\toffsetX = 0;\n\t\t\toffsetY -= line_height;\n\n\t\t} else {\n\n\t\t\tvar ret = createPath( char, divisions, scale, offsetX, offsetY, data );\n\t\t\toffsetX += ret.offsetX;\n\t\t\tpaths.push( ret.path );\n\n\t\t}\n\n\t}\n\n\treturn paths;\n\n}\n\nfunction createPath( char, divisions, scale, offsetX, offsetY, data ) {\n\n\tvar glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\n\n\tif ( ! glyph ) return;\n\n\tvar path = new ShapePath();\n\n\tvar x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\tif ( glyph.o ) {\n\n\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n\t\t\tvar action = outline[ i ++ ];\n\n\t\t\tswitch ( action ) {\n\n\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn { offsetX: glyph.ha * scale, path: path };\n\n}\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction FontLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n}\n\nObject.assign( FontLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tvar json;\n\n\t\t\ttry {\n\n\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n\t\t\t}\n\n\t\t\tvar font = scope.parse( json );\n\n\t\t\tif ( onLoad ) onLoad( font );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\treturn new Font( json );\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar context;\n\nvar AudioContext = {\n\n\tgetContext: function () {\n\n\t\tif ( context === undefined ) {\n\n\t\t\tcontext = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t}\n\n\t\treturn context;\n\n\t},\n\n\tsetContext: function ( value ) {\n\n\t\tcontext = value;\n\n\t}\n\n};\n\n/**\n * @author Reece Aaron Lecrivain / http://reecenotes.com/\n */\n\nfunction AudioLoader( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n}\n\nObject.assign( AudioLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tvar context = AudioContext.getContext();\n\n\t\t\tcontext.decodeAudioData( buffer, function ( audioBuffer ) {\n\n\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t} );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction StereoCamera() {\n\n\tthis.type = 'StereoCamera';\n\n\tthis.aspect = 1;\n\n\tthis.eyeSep = 0.064;\n\n\tthis.cameraL = new PerspectiveCamera();\n\tthis.cameraL.layers.enable( 1 );\n\tthis.cameraL.matrixAutoUpdate = false;\n\n\tthis.cameraR = new PerspectiveCamera();\n\tthis.cameraR.layers.enable( 2 );\n\tthis.cameraR.matrixAutoUpdate = false;\n\n}\n\nObject.assign( StereoCamera.prototype, {\n\n\tupdate: ( function () {\n\n\t\tvar instance, focus, fov, aspect, near, far, zoom, eyeSep;\n\n\t\tvar eyeRight = new Matrix4();\n\t\tvar eyeLeft = new Matrix4();\n\n\t\treturn function update( camera ) {\n\n\t\t\tvar needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||\n\t\t\t\t\t\t\t\t\t\t\t\taspect !== camera.aspect * this.aspect || near !== camera.near ||\n\t\t\t\t\t\t\t\t\t\t\t\tfar !== camera.far || zoom !== camera.zoom || eyeSep !== this.eyeSep;\n\n\t\t\tif ( needsUpdate ) {\n\n\t\t\t\tinstance = this;\n\t\t\t\tfocus = camera.focus;\n\t\t\t\tfov = camera.fov;\n\t\t\t\taspect = camera.aspect * this.aspect;\n\t\t\t\tnear = camera.near;\n\t\t\t\tfar = camera.far;\n\t\t\t\tzoom = camera.zoom;\n\n\t\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\teyeSep = this.eyeSep / 2;\n\t\t\t\tvar eyeSepOnProjection = eyeSep * near / focus;\n\t\t\t\tvar ymax = ( near * Math.tan( _Math.DEG2RAD * fov * 0.5 ) ) / zoom;\n\t\t\t\tvar xmin, xmax;\n\n\t\t\t\t// translate xOffset\n\n\t\t\t\teyeLeft.elements[ 12 ] = - eyeSep;\n\t\t\t\teyeRight.elements[ 12 ] = eyeSep;\n\n\t\t\t\t// for left eye\n\n\t\t\t\txmin = - ymax * aspect + eyeSepOnProjection;\n\t\t\t\txmax = ymax * aspect + eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t// for right eye\n\n\t\t\t\txmin = - ymax * aspect - eyeSepOnProjection;\n\t\t\t\txmax = ymax * aspect - eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t}\n\n\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\n\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\n\n\t\t};\n\n\t} )()\n\n} );\n\n/**\n * Camera for rendering cube maps\n *\t- renders scene into axis-aligned cube\n *\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction CubeCamera( near, far, cubeResolution ) {\n\n\tObject3D.call( this );\n\n\tthis.type = 'CubeCamera';\n\n\tvar fov = 90, aspect = 1;\n\n\tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\tcameraPX.up.set( 0, - 1, 0 );\n\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n\tthis.add( cameraPX );\n\n\tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\tcameraNX.up.set( 0, - 1, 0 );\n\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n\tthis.add( cameraNX );\n\n\tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\tcameraPY.up.set( 0, 0, 1 );\n\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n\tthis.add( cameraPY );\n\n\tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\tcameraNY.up.set( 0, 0, - 1 );\n\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n\tthis.add( cameraNY );\n\n\tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\tcameraPZ.up.set( 0, - 1, 0 );\n\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n\tthis.add( cameraPZ );\n\n\tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\tcameraNZ.up.set( 0, - 1, 0 );\n\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n\tthis.add( cameraNZ );\n\n\tvar options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\n\n\tthis.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\n\tthis.renderTarget.texture.name = \"CubeCamera\";\n\n\tthis.update = function ( renderer, scene ) {\n\n\t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n\t\tvar renderTarget = this.renderTarget;\n\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\trenderTarget.activeCubeFace = 0;\n\t\trenderer.render( scene, cameraPX, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 1;\n\t\trenderer.render( scene, cameraNX, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 2;\n\t\trenderer.render( scene, cameraPY, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 3;\n\t\trenderer.render( scene, cameraNY, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 4;\n\t\trenderer.render( scene, cameraPZ, renderTarget );\n\n\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\trenderTarget.activeCubeFace = 5;\n\t\trenderer.render( scene, cameraNZ, renderTarget );\n\n\t\trenderer.setRenderTarget( null );\n\n\t};\n\n\tthis.clear = function ( renderer, color, depth, stencil ) {\n\n\t\tvar renderTarget = this.renderTarget;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\trenderTarget.activeCubeFace = i;\n\t\t\trenderer.setRenderTarget( renderTarget );\n\n\t\t\trenderer.clear( color, depth, stencil );\n\n\t\t}\n\n\t\trenderer.setRenderTarget( null );\n\n\t};\n\n}\n\nCubeCamera.prototype = Object.create( Object3D.prototype );\nCubeCamera.prototype.constructor = CubeCamera;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction AudioListener() {\n\n\tObject3D.call( this );\n\n\tthis.type = 'AudioListener';\n\n\tthis.context = AudioContext.getContext();\n\n\tthis.gain = this.context.createGain();\n\tthis.gain.connect( this.context.destination );\n\n\tthis.filter = null;\n\n}\n\nAudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: AudioListener,\n\n\tgetInput: function () {\n\n\t\treturn this.gain;\n\n\t},\n\n\tremoveFilter: function ( ) {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\tthis.gain.connect( this.context.destination );\n\t\t\tthis.filter = null;\n\n\t\t}\n\n\t},\n\n\tgetFilter: function () {\n\n\t\treturn this.filter;\n\n\t},\n\n\tsetFilter: function ( value ) {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t} else {\n\n\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t}\n\n\t\tthis.filter = value;\n\t\tthis.gain.connect( this.filter );\n\t\tthis.filter.connect( this.context.destination );\n\n\t},\n\n\tgetMasterVolume: function () {\n\n\t\treturn this.gain.gain.value;\n\n\t},\n\n\tsetMasterVolume: function ( value ) {\n\n\t\tthis.gain.gain.value = value;\n\n\t},\n\n\tupdateMatrixWorld: ( function () {\n\n\t\tvar position = new Vector3();\n\t\tvar quaternion = new Quaternion();\n\t\tvar scale = new Vector3();\n\n\t\tvar orientation = new Vector3();\n\n\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tvar listener = this.context.listener;\n\t\t\tvar up = this.up;\n\n\t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\n\t\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t\t\tif ( listener.positionX ) {\n\n\t\t\t\tlistener.positionX.setValueAtTime( position.x, this.context.currentTime );\n\t\t\t\tlistener.positionY.setValueAtTime( position.y, this.context.currentTime );\n\t\t\t\tlistener.positionZ.setValueAtTime( position.z, this.context.currentTime );\n\t\t\t\tlistener.forwardX.setValueAtTime( orientation.x, this.context.currentTime );\n\t\t\t\tlistener.forwardY.setValueAtTime( orientation.y, this.context.currentTime );\n\t\t\t\tlistener.forwardZ.setValueAtTime( orientation.z, this.context.currentTime );\n\t\t\t\tlistener.upX.setValueAtTime( up.x, this.context.currentTime );\n\t\t\t\tlistener.upY.setValueAtTime( up.y, this.context.currentTime );\n\t\t\t\tlistener.upZ.setValueAtTime( up.z, this.context.currentTime );\n\n\t\t\t} else {\n\n\t\t\t\tlistener.setPosition( position.x, position.y, position.z );\n\t\t\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\n\n\t\t\t}\n\n\t\t};\n\n\t} )()\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Reece Aaron Lecrivain / http://reecenotes.com/\n */\n\nfunction Audio( listener ) {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Audio';\n\n\tthis.context = listener.context;\n\n\tthis.gain = this.context.createGain();\n\tthis.gain.connect( listener.getInput() );\n\n\tthis.autoplay = false;\n\n\tthis.buffer = null;\n\tthis.loop = false;\n\tthis.startTime = 0;\n\tthis.offset = 0;\n\tthis.playbackRate = 1;\n\tthis.isPlaying = false;\n\tthis.hasPlaybackControl = true;\n\tthis.sourceType = 'empty';\n\n\tthis.filters = [];\n\n}\n\nAudio.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Audio,\n\n\tgetOutput: function () {\n\n\t\treturn this.gain;\n\n\t},\n\n\tsetNodeSource: function ( audioNode ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'audioNode';\n\t\tthis.source = audioNode;\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t},\n\n\tsetBuffer: function ( audioBuffer ) {\n\n\t\tthis.buffer = audioBuffer;\n\t\tthis.sourceType = 'buffer';\n\n\t\tif ( this.autoplay ) this.play();\n\n\t\treturn this;\n\n\t},\n\n\tplay: function () {\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar source = this.context.createBufferSource();\n\n\t\tsource.buffer = this.buffer;\n\t\tsource.loop = this.loop;\n\t\tsource.onended = this.onEnded.bind( this );\n\t\tsource.playbackRate.setValueAtTime( this.playbackRate, this.startTime );\n\t\tthis.startTime = this.context.currentTime;\n\t\tsource.start( this.startTime, this.offset );\n\n\t\tthis.isPlaying = true;\n\n\t\tthis.source = source;\n\n\t\treturn this.connect();\n\n\t},\n\n\tpause: function () {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.stop();\n\t\t\tthis.offset += ( this.context.currentTime - this.startTime ) * this.playbackRate;\n\t\t\tthis.isPlaying = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tstop: function () {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.source.stop();\n\t\tthis.offset = 0;\n\t\tthis.isPlaying = false;\n\n\t\treturn this;\n\n\t},\n\n\tconnect: function () {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tdisconnect: function () {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetFilters: function () {\n\n\t\treturn this.filters;\n\n\t},\n\n\tsetFilters: function ( value ) {\n\n\t\tif ( ! value ) value = [];\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.disconnect();\n\t\t\tthis.filters = value;\n\t\t\tthis.connect();\n\n\t\t} else {\n\n\t\t\tthis.filters = value;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetFilter: function () {\n\n\t\treturn this.getFilters()[ 0 ];\n\n\t},\n\n\tsetFilter: function ( filter ) {\n\n\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t},\n\n\tsetPlaybackRate: function ( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.playbackRate = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.playbackRate.setValueAtTime( this.playbackRate, this.context.currentTime );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetPlaybackRate: function () {\n\n\t\treturn this.playbackRate;\n\n\t},\n\n\tonEnded: function () {\n\n\t\tthis.isPlaying = false;\n\n\t},\n\n\tgetLoop: function () {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn this.loop;\n\n\t},\n\n\tsetLoop: function ( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.loop = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.loop = this.loop;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetVolume: function () {\n\n\t\treturn this.gain.gain.value;\n\n\t},\n\n\tsetVolume: function ( value ) {\n\n\t\tthis.gain.gain.value = value;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction PositionalAudio( listener ) {\n\n\tAudio.call( this, listener );\n\n\tthis.panner = this.context.createPanner();\n\tthis.panner.connect( this.gain );\n\n}\n\nPositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\n\n\tconstructor: PositionalAudio,\n\n\tgetOutput: function () {\n\n\t\treturn this.panner;\n\n\t},\n\n\tgetRefDistance: function () {\n\n\t\treturn this.panner.refDistance;\n\n\t},\n\n\tsetRefDistance: function ( value ) {\n\n\t\tthis.panner.refDistance = value;\n\n\t},\n\n\tgetRolloffFactor: function () {\n\n\t\treturn this.panner.rolloffFactor;\n\n\t},\n\n\tsetRolloffFactor: function ( value ) {\n\n\t\tthis.panner.rolloffFactor = value;\n\n\t},\n\n\tgetDistanceModel: function () {\n\n\t\treturn this.panner.distanceModel;\n\n\t},\n\n\tsetDistanceModel: function ( value ) {\n\n\t\tthis.panner.distanceModel = value;\n\n\t},\n\n\tgetMaxDistance: function () {\n\n\t\treturn this.panner.maxDistance;\n\n\t},\n\n\tsetMaxDistance: function ( value ) {\n\n\t\tthis.panner.maxDistance = value;\n\n\t},\n\n\tupdateMatrixWorld: ( function () {\n\n\t\tvar position = new Vector3();\n\n\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\n\t\t};\n\n\t} )()\n\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction AudioAnalyser( audio, fftSize ) {\n\n\tthis.analyser = audio.context.createAnalyser();\n\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\taudio.getOutput().connect( this.analyser );\n\n}\n\nObject.assign( AudioAnalyser.prototype, {\n\n\tgetFrequencyData: function () {\n\n\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\treturn this.data;\n\n\t},\n\n\tgetAverageFrequency: function () {\n\n\t\tvar value = 0, data = this.getFrequencyData();\n\n\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\tvalue += data[ i ];\n\n\t\t}\n\n\t\treturn value / data.length;\n\n\t}\n\n} );\n\n/**\n *\n * Buffered scene graph property that allows weighted accumulation.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction PropertyMixer( binding, typeName, valueSize ) {\n\n\tthis.binding = binding;\n\tthis.valueSize = valueSize;\n\n\tvar bufferType = Float64Array,\n\t\tmixFunction;\n\n\tswitch ( typeName ) {\n\n\t\tcase 'quaternion':\n\t\t\tmixFunction = this._slerp;\n\t\t\tbreak;\n\n\t\tcase 'string':\n\t\tcase 'bool':\n\t\t\tbufferType = Array;\n\t\t\tmixFunction = this._select;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tmixFunction = this._lerp;\n\n\t}\n\n\tthis.buffer = new bufferType( valueSize * 4 );\n\t// layout: [ incoming | accu0 | accu1 | orig ]\n\t//\n\t// interpolators can use .buffer as their .result\n\t// the data then goes to 'incoming'\n\t//\n\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t// the cumulative result and are compared to detect\n\t// changes\n\t//\n\t// 'orig' stores the original state of the property\n\n\tthis._mixBufferRegion = mixFunction;\n\n\tthis.cumulativeWeight = 0;\n\n\tthis.useCount = 0;\n\tthis.referenceCount = 0;\n\n}\n\nObject.assign( PropertyMixer.prototype, {\n\n\t// accumulate data in the 'incoming' region into 'accu<i>'\n\taccumulate: function ( accuIndex, weight ) {\n\n\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t// the weight and shouldn't have made the call in the first place\n\n\t\tvar buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\tcurrentWeight = this.cumulativeWeight;\n\n\t\tif ( currentWeight === 0 ) {\n\n\t\t\t// accuN := incoming * weight\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t}\n\n\t\t\tcurrentWeight = weight;\n\n\t\t} else {\n\n\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\tcurrentWeight += weight;\n\t\t\tvar mix = weight / currentWeight;\n\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t}\n\n\t\tthis.cumulativeWeight = currentWeight;\n\n\t},\n\n\t// apply the state of 'accu<i>' to the binding when accus differ\n\tapply: function ( accuIndex ) {\n\n\t\tvar stride = this.valueSize,\n\t\t\tbuffer = this.buffer,\n\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\tweight = this.cumulativeWeight,\n\n\t\t\tbinding = this.binding;\n\n\t\tthis.cumulativeWeight = 0;\n\n\t\tif ( weight < 1 ) {\n\n\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\tvar originalValueOffset = stride * 3;\n\n\t\t\tthis._mixBufferRegion(\n\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t}\n\n\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t// remember the state of the bound property and copy it to both accus\n\tsaveOriginalState: function () {\n\n\t\tvar binding = this.binding;\n\n\t\tvar buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\n\t\t\toriginalValueOffset = stride * 3;\n\n\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t}\n\n\t\tthis.cumulativeWeight = 0;\n\n\t},\n\n\t// apply the state previously taken via 'saveOriginalState' to the binding\n\trestoreOriginalState: function () {\n\n\t\tvar originalValueOffset = this.valueSize * 3;\n\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t},\n\n\n\t// mix functions\n\n\t_select: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tif ( t >= 0.5 ) {\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_slerp: function ( buffer, dstOffset, srcOffset, t ) {\n\n\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\n\n\t},\n\n\t_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tvar s = 1 - t;\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tvar j = dstOffset + i;\n\n\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t}\n\n\t}\n\n} );\n\n/**\n *\n * A reference to a real property in the scene graph.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\n// Characters [].:/ are reserved for track binding syntax.\nvar RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n\nfunction Composite( targetGroup, path, optionalParsedPath ) {\n\n\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\n\n\tthis._targetGroup = targetGroup;\n\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n}\n\nObject.assign( Composite.prototype, {\n\n\tgetValue: function ( array, offset ) {\n\n\t\tthis.bind(); // bind all binding\n\n\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t// and only call .getValue on the first\n\t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\n\t},\n\n\tsetValue: function ( array, offset ) {\n\n\t\tvar bindings = this._bindings;\n\n\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t  n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t}\n\n\t},\n\n\tbind: function () {\n\n\t\tvar bindings = this._bindings;\n\n\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t  n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].bind();\n\n\t\t}\n\n\t},\n\n\tunbind: function () {\n\n\t\tvar bindings = this._bindings;\n\n\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t  n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].unbind();\n\n\t\t}\n\n\t}\n\n} );\n\n\nfunction PropertyBinding( rootNode, path, parsedPath ) {\n\n\tthis.path = path;\n\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\n\n\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;\n\n\tthis.rootNode = rootNode;\n\n}\n\nObject.assign( PropertyBinding, {\n\n\tComposite: Composite,\n\n\tcreate: function ( root, path, parsedPath ) {\n\n\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\n\n\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\n\t\t} else {\n\n\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t}\n\n\t},\n\n\t/**\n\t * Replaces spaces with underscores and removes unsupported characters from\n\t * node names, to ensure compatibility with parseTrackName().\n\t *\n\t * @param  {string} name Node name to be sanitized.\n\t * @return {string}\n\t */\n\tsanitizeNodeName: ( function () {\n\n\t\tvar reservedRe = new RegExp( '[' + RESERVED_CHARS_RE + ']', 'g' );\n\n\t\treturn function sanitizeNodeName( name ) {\n\n\t\t\treturn name.replace( /\\s/g, '_' ).replace( reservedRe, '' );\n\n\t\t};\n\n\t}() ),\n\n\tparseTrackName: function () {\n\n\t\t// Attempts to allow node names from any language. ES5's `\\w` regexp matches\n\t\t// only latin characters, and the unicode \\p{L} is not yet supported. So\n\t\t// instead, we exclude reserved characters and match everything else.\n\t\tvar wordChar = '[^' + RESERVED_CHARS_RE + ']';\n\t\tvar wordCharOrDot = '[^' + RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\n\n\t\t// Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t\t// be matched to parse the rest of the track name.\n\t\tvar directoryRe = /((?:WC+[\\/:])*)/.source.replace( 'WC', wordChar );\n\n\t\t// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\t\tvar nodeRe = /(WCOD+)?/.source.replace( 'WCOD', wordCharOrDot );\n\n\t\t// Object on target node, and accessor. May not contain reserved\n\t\t// characters. Accessor may contain any character except closing bracket.\n\t\tvar objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', wordChar );\n\n\t\t// Property and accessor. May not contain reserved characters. Accessor may\n\t\t// contain any non-bracket characters.\n\t\tvar propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', wordChar );\n\n\t\tvar trackRe = new RegExp( ''\n\t\t\t+ '^'\n\t\t\t+ directoryRe\n\t\t\t+ nodeRe\n\t\t\t+ objectRe\n\t\t\t+ propertyRe\n\t\t\t+ '$'\n\t\t);\n\n\t\tvar supportedObjectNames = [ 'material', 'materials', 'bones' ];\n\n\t\treturn function parseTrackName( trackName ) {\n\n\t\t\tvar matches = trackRe.exec( trackName );\n\n\t\t\tif ( ! matches ) {\n\n\t\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\n\n\t\t\t}\n\n\t\t\tvar results = {\n\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\tnodeName: matches[ 2 ],\n\t\t\t\tobjectName: matches[ 3 ],\n\t\t\t\tobjectIndex: matches[ 4 ],\n\t\t\t\tpropertyName: matches[ 5 ], // required\n\t\t\t\tpropertyIndex: matches[ 6 ]\n\t\t\t};\n\n\t\t\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\n\n\t\t\tif ( lastDot !== undefined && lastDot !== - 1 ) {\n\n\t\t\t\tvar objectName = results.nodeName.substring( lastDot + 1 );\n\n\t\t\t\t// Object names must be checked against a whitelist. Otherwise, there\n\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t// include '.' characters).\n\t\t\t\tif ( supportedObjectNames.indexOf( objectName ) !== - 1 ) {\n\n\t\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\n\t\t\t\t\tresults.objectName = objectName;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\n\n\t\t\t}\n\n\t\t\treturn results;\n\n\t\t};\n\n\t}(),\n\n\tfindNode: function ( root, nodeName ) {\n\n\t\tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\treturn root;\n\n\t\t}\n\n\t\t// search into skeleton bones.\n\t\tif ( root.skeleton ) {\n\n\t\t\tvar bone = root.skeleton.getBoneByName( nodeName );\n\n\t\t\tif ( bone !== undefined ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// search into node subtree.\n\t\tif ( root.children ) {\n\n\t\t\tvar searchNodeSubtree = function ( children ) {\n\n\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\tvar childNode = children[ i ];\n\n\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\tif ( result ) return result;\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t};\n\n\t\t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\tif ( subTreeNode ) {\n\n\t\t\t\treturn subTreeNode;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n} );\n\nObject.assign( PropertyBinding.prototype, { // prototype, continued\n\n\t// these are used to \"bind\" a nonexistent property\n\t_getValue_unavailable: function () {},\n\t_setValue_unavailable: function () {},\n\n\tBindingType: {\n\t\tDirect: 0,\n\t\tEntireArray: 1,\n\t\tArrayElement: 2,\n\t\tHasFromToArray: 3\n\t},\n\n\tVersioning: {\n\t\tNone: 0,\n\t\tNeedsUpdate: 1,\n\t\tMatrixWorldNeedsUpdate: 2\n\t},\n\n\tGetterByBindingType: [\n\n\t\tfunction getValue_direct( buffer, offset ) {\n\n\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\n\t\t},\n\n\t\tfunction getValue_array( buffer, offset ) {\n\n\t\t\tvar source = this.resolvedProperty;\n\n\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t\t}\n\n\t\t},\n\n\t\tfunction getValue_arrayElement( buffer, offset ) {\n\n\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t\t},\n\n\t\tfunction getValue_toArray( buffer, offset ) {\n\n\t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t\t}\n\n\t],\n\n\tSetterByBindingTypeAndVersioning: [\n\n\t\t[\n\t\t\t// Direct\n\n\t\t\tfunction setValue_direct( buffer, offset ) {\n\n\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\n\t\t\t},\n\n\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t], [\n\n\t\t\t// EntireArray\n\n\t\t\tfunction setValue_array( buffer, offset ) {\n\n\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t}\n\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t}\n\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t], [\n\n\t\t\t// ArrayElement\n\n\t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t\t\t},\n\n\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t], [\n\n\t\t\t// HasToFromArray\n\n\t\t\tfunction setValue_fromArray( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t\t\t},\n\n\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t]\n\n\t],\n\n\tgetValue: function getValue_unbound( targetArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.getValue( targetArray, offset );\n\n\t\t// Note: This class uses a State pattern on a per-method basis:\n\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t// prototype version of these methods with one that represents\n\t\t// the bound state. When the property is not found, the methods\n\t\t// become no-ops.\n\n\t},\n\n\tsetValue: function getValue_unbound( sourceArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.setValue( sourceArray, offset );\n\n\t},\n\n\t// create getter / setter pair for a property in the scene graph\n\tbind: function () {\n\n\t\tvar targetObject = this.node,\n\t\t\tparsedPath = this.parsedPath,\n\n\t\t\tobjectName = parsedPath.objectName,\n\t\t\tpropertyName = parsedPath.propertyName,\n\t\t\tpropertyIndex = parsedPath.propertyIndex;\n\n\t\tif ( ! targetObject ) {\n\n\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n\t\t\tthis.node = targetObject;\n\n\t\t}\n\n\t\t// set fail state so we can just 'return' on error\n\t\tthis.getValue = this._getValue_unavailable;\n\t\tthis.setValue = this._setValue_unavailable;\n\n\t\t// ensure there is a value node\n\t\tif ( ! targetObject ) {\n\n\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( objectName ) {\n\n\t\t\tvar objectIndex = parsedPath.objectIndex;\n\n\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\tswitch ( objectName ) {\n\n\t\t\t\tcase 'materials':\n\n\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'bones':\n\n\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t}\n\n\n\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// resolve property\n\t\tvar nodeProperty = targetObject[ propertyName ];\n\n\t\tif ( nodeProperty === undefined ) {\n\n\t\t\tvar nodeName = parsedPath.nodeName;\n\n\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\n\t\t\treturn;\n\n\t\t}\n\n\t\t// determine versioning scheme\n\t\tvar versioning = this.Versioning.None;\n\n\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\tversioning = this.Versioning.NeedsUpdate;\n\t\t\tthis.targetObject = targetObject;\n\n\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t\t\tthis.targetObject = targetObject;\n\n\t\t}\n\n\t\t// determine how the property gets bound\n\t\tvar bindingType = this.BindingType.Direct;\n\n\t\tif ( propertyIndex !== undefined ) {\n\n\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\n\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( targetObject.geometry.isBufferGeometry ) {\n\n\t\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {\n\n\t\t\t\t\t\tif ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\n\t\t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\n\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else if ( Array.isArray( nodeProperty ) ) {\n\n\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else {\n\n\t\t\tthis.propertyName = propertyName;\n\n\t\t}\n\n\t\t// select getter / setter\n\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t},\n\n\tunbind: function () {\n\n\t\tthis.node = null;\n\n\t\t// back to the prototype version of getValue / setValue\n\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\tthis.getValue = this._getValue_unbound;\n\t\tthis.setValue = this._setValue_unbound;\n\n\t}\n\n} );\n\n//!\\ DECLARE ALIAS AFTER assign prototype !\nObject.assign( PropertyBinding.prototype, {\n\n\t// initial state of these methods that calls 'bind'\n\t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t_setValue_unbound: PropertyBinding.prototype.setValue,\n\n} );\n\n/**\n *\n * A group of objects that receives a shared animation state.\n *\n * Usage:\n *\n * \t-\tAdd objects you would otherwise pass as 'root' to the\n * \t\tconstructor or the .clipAction method of AnimationMixer.\n *\n * \t-\tInstead pass this object as 'root'.\n *\n * \t-\tYou can also add and remove objects later when the mixer\n * \t\tis running.\n *\n * Note:\n *\n *  \tObjects of this class appear as one object to the mixer,\n *  \tso cache control of the individual objects must be done\n *  \ton the group.\n *\n * Limitation:\n *\n * \t- \tThe animated properties must be compatible among the\n * \t\tall objects in the group.\n *\n *  -\tA single property can either be controlled through a\n *  \ttarget group or directly, but not both.\n *\n * @author tschw\n */\n\nfunction AnimationObjectGroup() {\n\n\tthis.uuid = _Math.generateUUID();\n\n\t// cached objects followed by the active ones\n\tthis._objects = Array.prototype.slice.call( arguments );\n\n\tthis.nCachedObjects_ = 0;\t\t\t// threshold\n\t// note: read by PropertyBinding.Composite\n\n\tvar indices = {};\n\tthis._indicesByUUID = indices;\t\t// for bookkeeping\n\n\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t}\n\n\tthis._paths = [];\t\t\t\t\t// inside: string\n\tthis._parsedPaths = [];\t\t\t\t// inside: { we don't care, here }\n\tthis._bindings = []; \t\t\t\t// inside: Array< PropertyBinding >\n\tthis._bindingsIndicesByPath = {}; \t// inside: indices in these arrays\n\n\tvar scope = this;\n\n\tthis.stats = {\n\n\t\tobjects: {\n\t\t\tget total() {\n\n\t\t\t\treturn scope._objects.length;\n\n\t\t\t},\n\t\t\tget inUse() {\n\n\t\t\t\treturn this.total - scope.nCachedObjects_;\n\n\t\t\t}\n\t\t},\n\t\tget bindingsPerObject() {\n\n\t\t\treturn scope._bindings.length;\n\n\t\t}\n\n\t};\n\n}\n\nObject.assign( AnimationObjectGroup.prototype, {\n\n\tisAnimationObjectGroup: true,\n\n\tadd: function () {\n\n\t\tvar objects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tpaths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length,\n\t\t\tknownObject = undefined;\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tvar object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index === undefined ) {\n\n\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\tindex = nObjects ++;\n\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\tobjects.push( object );\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t}\n\n\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\tknownObject = objects[ index ];\n\n\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t} else if ( objects[ index ] !== knownObject ) {\n\n\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n\t\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\n\n\t\t\t} // else the object is already where we want it to be\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t},\n\n\tremove: function () {\n\n\t\tvar objects = this._objects,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tvar object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t},\n\n\t// remove & forget\n\tuncache: function () {\n\n\t\tvar objects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tvar object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\tvar lastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} // cached or active\n\n\t\t\t} // if object is known\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t},\n\n\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\tsubscribe_: function ( path, parsedPath ) {\n\n\t\t// returns an array of bindings for the given path that is changed\n\t\t// according to the contained objects in the group\n\n\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\tindex = indicesByPath[ path ],\n\t\t\tbindings = this._bindings;\n\n\t\tif ( index !== undefined ) return bindings[ index ];\n\n\t\tvar paths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tobjects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\tindex = bindings.length;\n\n\t\tindicesByPath[ path ] = index;\n\n\t\tpaths.push( path );\n\t\tparsedPaths.push( parsedPath );\n\t\tbindings.push( bindingsForPath );\n\n\t\tfor ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\n\n\t\t\tvar object = objects[ i ];\n\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\n\n\t\t}\n\n\t\treturn bindingsForPath;\n\n\t},\n\n\tunsubscribe_: function ( path ) {\n\n\t\t// tells the group to forget about a property path and no longer\n\t\t// update the array previously obtained with 'subscribe_'\n\n\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\tindex = indicesByPath[ path ];\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tvar paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\tbindings[ index ] = lastBindings;\n\t\t\tbindings.pop();\n\n\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\tparsedPaths.pop();\n\n\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\tpaths.pop();\n\n\t\t}\n\n\t}\n\n} );\n\n/**\n *\n * Action provided by AnimationMixer for scheduling clip playback on specific\n * objects.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n *\n */\n\nfunction AnimationAction( mixer, clip, localRoot ) {\n\n\tthis._mixer = mixer;\n\tthis._clip = clip;\n\tthis._localRoot = localRoot || null;\n\n\tvar tracks = clip.tracks,\n\t\tnTracks = tracks.length,\n\t\tinterpolants = new Array( nTracks );\n\n\tvar interpolantSettings = {\n\t\tendingStart: ZeroCurvatureEnding,\n\t\tendingEnd: ZeroCurvatureEnding\n\t};\n\n\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t\tinterpolants[ i ] = interpolant;\n\t\tinterpolant.settings = interpolantSettings;\n\n\t}\n\n\tthis._interpolantSettings = interpolantSettings;\n\n\tthis._interpolants = interpolants;\t// bound by the mixer\n\n\t// inside: PropertyMixer (managed by the mixer)\n\tthis._propertyBindings = new Array( nTracks );\n\n\tthis._cacheIndex = null;\t\t\t// for the memory manager\n\tthis._byClipCacheIndex = null;\t\t// for the memory manager\n\n\tthis._timeScaleInterpolant = null;\n\tthis._weightInterpolant = null;\n\n\tthis.loop = LoopRepeat;\n\tthis._loopCount = - 1;\n\n\t// global mixer time when the action is to be started\n\t// it's set back to 'null' upon start of the action\n\tthis._startTime = null;\n\n\t// scaled local time of the action\n\t// gets clamped or wrapped to 0..clip.duration according to loop\n\tthis.time = 0;\n\n\tthis.timeScale = 1;\n\tthis._effectiveTimeScale = 1;\n\n\tthis.weight = 1;\n\tthis._effectiveWeight = 1;\n\n\tthis.repetitions = Infinity; \t\t// no. of repetitions when looping\n\n\tthis.paused = false;\t\t\t\t// true -> zero effective time scale\n\tthis.enabled = true;\t\t\t\t// false -> zero effective weight\n\n\tthis.clampWhenFinished \t= false;\t// keep feeding the last frame?\n\n\tthis.zeroSlopeAtStart \t= true;\t\t// for smooth interpolation w/o separate\n\tthis.zeroSlopeAtEnd\t\t= true;\t\t// clips for start, loop and end\n\n}\n\nObject.assign( AnimationAction.prototype, {\n\n\t// State & Scheduling\n\n\tplay: function () {\n\n\t\tthis._mixer._activateAction( this );\n\n\t\treturn this;\n\n\t},\n\n\tstop: function () {\n\n\t\tthis._mixer._deactivateAction( this );\n\n\t\treturn this.reset();\n\n\t},\n\n\treset: function () {\n\n\t\tthis.paused = false;\n\t\tthis.enabled = true;\n\n\t\tthis.time = 0;\t\t\t// restart clip\n\t\tthis._loopCount = - 1;\t// forget previous loops\n\t\tthis._startTime = null;\t// forget scheduling\n\n\t\treturn this.stopFading().stopWarping();\n\n\t},\n\n\tisRunning: function () {\n\n\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t},\n\n\t// return true when play has been called\n\tisScheduled: function () {\n\n\t\treturn this._mixer._isActiveAction( this );\n\n\t},\n\n\tstartAt: function ( time ) {\n\n\t\tthis._startTime = time;\n\n\t\treturn this;\n\n\t},\n\n\tsetLoop: function ( mode, repetitions ) {\n\n\t\tthis.loop = mode;\n\t\tthis.repetitions = repetitions;\n\n\t\treturn this;\n\n\t},\n\n\t// Weight\n\n\t// set the weight stopping any scheduled fading\n\t// although .enabled = false yields an effective weight of zero, this\n\t// method does *not* change .enabled, because it would be confusing\n\tsetEffectiveWeight: function ( weight ) {\n\n\t\tthis.weight = weight;\n\n\t\t// note: same logic as when updated at runtime\n\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\treturn this.stopFading();\n\n\t},\n\n\t// return the weight considering fading and .enabled\n\tgetEffectiveWeight: function () {\n\n\t\treturn this._effectiveWeight;\n\n\t},\n\n\tfadeIn: function ( duration ) {\n\n\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t},\n\n\tfadeOut: function ( duration ) {\n\n\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t},\n\n\tcrossFadeFrom: function ( fadeOutAction, duration, warp ) {\n\n\t\tfadeOutAction.fadeOut( duration );\n\t\tthis.fadeIn( duration );\n\n\t\tif ( warp ) {\n\n\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcrossFadeTo: function ( fadeInAction, duration, warp ) {\n\n\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t},\n\n\tstopFading: function () {\n\n\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\tif ( weightInterpolant !== null ) {\n\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// Time Scale Control\n\n\t// set the time scale stopping any scheduled warping\n\t// although .paused = true yields an effective time scale of zero, this\n\t// method does *not* change .paused, because it would be confusing\n\tsetEffectiveTimeScale: function ( timeScale ) {\n\n\t\tthis.timeScale = timeScale;\n\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\n\t\treturn this.stopWarping();\n\n\t},\n\n\t// return the time scale considering warping and .paused\n\tgetEffectiveTimeScale: function () {\n\n\t\treturn this._effectiveTimeScale;\n\n\t},\n\n\tsetDuration: function ( duration ) {\n\n\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\treturn this.stopWarping();\n\n\t},\n\n\tsyncWith: function ( action ) {\n\n\t\tthis.time = action.time;\n\t\tthis.timeScale = action.timeScale;\n\n\t\treturn this.stopWarping();\n\n\t},\n\n\thalt: function ( duration ) {\n\n\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t},\n\n\twarp: function ( startTimeScale, endTimeScale, duration ) {\n\n\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\tinterpolant = this._timeScaleInterpolant,\n\n\t\t\ttimeScale = this.timeScale;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t}\n\n\t\tvar times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\ttimes[ 1 ] = now + duration;\n\n\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\treturn this;\n\n\t},\n\n\tstopWarping: function () {\n\n\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// Object Accessors\n\n\tgetMixer: function () {\n\n\t\treturn this._mixer;\n\n\t},\n\n\tgetClip: function () {\n\n\t\treturn this._clip;\n\n\t},\n\n\tgetRoot: function () {\n\n\t\treturn this._localRoot || this._mixer._root;\n\n\t},\n\n\t// Interna\n\n\t_update: function ( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t// called by the mixer\n\n\t\tif ( ! this.enabled ) {\n\n\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\tthis._updateWeight( time );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar startTime = this._startTime;\n\n\t\tif ( startTime !== null ) {\n\n\t\t\t// check for scheduled start of action\n\n\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n\t\t\t}\n\n\t\t\t// start\n\n\t\t\tthis._startTime = null; // unschedule\n\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t}\n\n\t\t// apply time scale and advance time\n\n\t\tdeltaTime *= this._updateTimeScale( time );\n\t\tvar clipTime = this._updateTime( deltaTime );\n\n\t\t// note: _updateTime may disable the action resulting in\n\t\t// an effective weight of 0\n\n\t\tvar weight = this._updateWeight( time );\n\n\t\tif ( weight > 0 ) {\n\n\t\t\tvar interpolants = this._interpolants;\n\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_updateWeight: function ( time ) {\n\n\t\tvar weight = 0;\n\n\t\tif ( this.enabled ) {\n\n\t\t\tweight = this.weight;\n\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveWeight = weight;\n\t\treturn weight;\n\n\t},\n\n\t_updateTimeScale: function ( time ) {\n\n\t\tvar timeScale = 0;\n\n\t\tif ( ! this.paused ) {\n\n\t\t\ttimeScale = this.timeScale;\n\n\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveTimeScale = timeScale;\n\t\treturn timeScale;\n\n\t},\n\n\t_updateTime: function ( deltaTime ) {\n\n\t\tvar time = this.time + deltaTime;\n\n\t\tif ( deltaTime === 0 ) return time;\n\n\t\tvar duration = this._clip.duration,\n\n\t\t\tloop = this.loop,\n\t\t\tloopCount = this._loopCount;\n\n\t\tif ( loop === LoopOnce ) {\n\n\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tthis._loopCount = 0;\n\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t}\n\n\t\t\thandle_stop: {\n\n\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\ttime = duration;\n\n\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\ttime = 0;\n\n\t\t\t\t} else break handle_stop;\n\n\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\telse this.enabled = false;\n\n\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\tvar pingPong = ( loop === LoopPingPong );\n\n\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( time >= duration || time < 0 ) {\n\n\t\t\t\t// wrap around\n\n\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\tif ( pending <= 0 ) {\n\n\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// keep running\n\n\t\t\t\t\tif ( pending === 1 ) {\n\n\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\n\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\tthis.time = time;\n\t\t\t\treturn duration - time;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.time = time;\n\t\treturn time;\n\n\t},\n\n\t_setEndings: function ( atStart, atEnd, pingPong ) {\n\n\t\tvar settings = this._interpolantSettings;\n\n\t\tif ( pingPong ) {\n\n\t\t\tsettings.endingStart \t= ZeroSlopeEnding;\n\t\t\tsettings.endingEnd\t\t= ZeroSlopeEnding;\n\n\t\t} else {\n\n\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\tif ( atStart ) {\n\n\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t\tif ( atEnd ) {\n\n\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_scheduleFading: function ( duration, weightNow, weightThen ) {\n\n\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\tinterpolant = this._weightInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t}\n\n\t\tvar times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now; \t\t\t\tvalues[ 0 ] = weightNow;\n\t\ttimes[ 1 ] = now + duration;\tvalues[ 1 ] = weightThen;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n *\n * Player for AnimationClips.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nfunction AnimationMixer( root ) {\n\n\tthis._root = root;\n\tthis._initMemoryManager();\n\tthis._accuIndex = 0;\n\n\tthis.time = 0;\n\n\tthis.timeScale = 1.0;\n\n}\n\nAnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\tconstructor: AnimationMixer,\n\n\t_bindAction: function ( action, prototypeAction ) {\n\n\t\tvar root = action._localRoot || this._root,\n\t\t\ttracks = action._clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tbindings = action._propertyBindings,\n\t\t\tinterpolants = action._interpolants,\n\t\t\trootUuid = root.uuid,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingsByName === undefined ) {\n\n\t\t\tbindingsByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tvar track = tracks[ i ],\n\t\t\t\ttrackName = track.name,\n\t\t\t\tbinding = bindingsByName[ trackName ];\n\n\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t} else {\n\n\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar path = prototypeAction && prototypeAction.\n\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t++ binding.referenceCount;\n\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t}\n\n\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t}\n\n\t},\n\n\t_activateAction: function ( action ) {\n\n\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\tthis._bindAction( action,\n\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t}\n\n\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t// increment reference counts / sort out state\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._lendAction( action );\n\n\t\t}\n\n\t},\n\n\t_deactivateAction: function ( action ) {\n\n\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t// decrement reference counts / sort out state\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._takeBackAction( action );\n\n\t\t}\n\n\t},\n\n\t// Memory manager\n\n\t_initMemoryManager: function () {\n\n\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\tthis._nActiveActions = 0;\n\n\t\tthis._actionsByClip = {};\n\t\t// inside:\n\t\t// {\n\t\t// \t\tknownActions: Array< AnimationAction >\t- used as prototypes\n\t\t// \t\tactionByRoot: AnimationAction\t\t\t- lookup\n\t\t// }\n\n\n\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\tthis._nActiveBindings = 0;\n\n\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\tthis._controlInterpolants = []; // same game as above\n\t\tthis._nActiveControlInterpolants = 0;\n\n\t\tvar scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tactions: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._actions.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveActions;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tbindings: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._bindings.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveBindings;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tcontrolInterpolants: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._controlInterpolants.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t},\n\n\t// Memory management for AnimationAction objects\n\n\t_isActiveAction: function ( action ) {\n\n\t\tvar index = action._cacheIndex;\n\t\treturn index !== null && index < this._nActiveActions;\n\n\t},\n\n\t_addInactiveAction: function ( action, clipUuid, rootUuid ) {\n\n\t\tvar actions = this._actions,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip === undefined ) {\n\n\t\t\tactionsForClip = {\n\n\t\t\t\tknownActions: [ action ],\n\t\t\t\tactionByRoot: {}\n\n\t\t\t};\n\n\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t} else {\n\n\t\t\tvar knownActions = actionsForClip.knownActions;\n\n\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\tknownActions.push( action );\n\n\t\t}\n\n\t\taction._cacheIndex = actions.length;\n\t\tactions.push( action );\n\n\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t},\n\n\t_removeInactiveAction: function ( action ) {\n\n\t\tvar actions = this._actions,\n\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\tcacheIndex = action._cacheIndex;\n\n\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\tactions.pop();\n\n\t\taction._cacheIndex = null;\n\n\n\t\tvar clipUuid = action._clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\tlastKnownAction =\n\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\tknownActionsForClip.pop();\n\n\t\taction._byClipCacheIndex = null;\n\n\n\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\n\n\t\tdelete actionByRoot[ rootUuid ];\n\n\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t\tthis._removeInactiveBindingsForAction( action );\n\n\t},\n\n\t_removeInactiveBindingsForAction: function ( action ) {\n\n\t\tvar bindings = action._propertyBindings;\n\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tvar binding = bindings[ i ];\n\n\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_lendAction: function ( action ) {\n\n\t\t// [ active actions |  inactive actions  ]\n\t\t// [  active actions >| inactive actions ]\n\t\t//                 s        a\n\t\t//                  <-swap->\n\t\t//                 a        s\n\n\t\tvar actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\taction._cacheIndex = lastActiveIndex;\n\t\tactions[ lastActiveIndex ] = action;\n\n\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t},\n\n\t_takeBackAction: function ( action ) {\n\n\t\t// [  active actions  | inactive actions ]\n\t\t// [ active actions |< inactive actions  ]\n\t\t//        a        s\n\t\t//         <-swap->\n\t\t//        s        a\n\n\t\tvar actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\taction._cacheIndex = firstInactiveIndex;\n\t\tactions[ firstInactiveIndex ] = action;\n\n\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t},\n\n\t// Memory management for PropertyMixer objects\n\n\t_addInactiveBinding: function ( binding, rootUuid, trackName ) {\n\n\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\tbindings = this._bindings;\n\n\t\tif ( bindingByName === undefined ) {\n\n\t\t\tbindingByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t}\n\n\t\tbindingByName[ trackName ] = binding;\n\n\t\tbinding._cacheIndex = bindings.length;\n\t\tbindings.push( binding );\n\n\t},\n\n\t_removeInactiveBinding: function ( binding ) {\n\n\t\tvar bindings = this._bindings,\n\t\t\tpropBinding = binding.binding,\n\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\ttrackName = propBinding.path,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\tbindings.pop();\n\n\t\tdelete bindingByName[ trackName ];\n\n\t\tremove_empty_map: {\n\n\t\t\tfor ( var _ in bindingByName ) break remove_empty_map; // eslint-disable-line no-unused-vars\n\n\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t}\n\n\t},\n\n\t_lendBinding: function ( binding ) {\n\n\t\tvar bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\tbinding._cacheIndex = lastActiveIndex;\n\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t},\n\n\t_takeBackBinding: function ( binding ) {\n\n\t\tvar bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t},\n\n\n\t// Memory management of Interpolants for weight and time scale\n\n\t_lendControlInterpolant: function () {\n\n\t\tvar interpolants = this._controlInterpolants,\n\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n\t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\n\t\tif ( interpolant === undefined ) {\n\n\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t}\n\n\t\treturn interpolant;\n\n\t},\n\n\t_takeBackControlInterpolant: function ( interpolant ) {\n\n\t\tvar interpolants = this._controlInterpolants,\n\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t},\n\n\t_controlInterpolantsResultBuffer: new Float32Array( 1 ),\n\n\t// return an action for a clip optionally using a custom root target\n\t// object (this method allocates a lot of dynamic memory in case a\n\t// previously unknown clip/root combination is specified)\n\tclipAction: function ( clip, optionalRoot ) {\n\n\t\tvar root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid,\n\n\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n\t\t\tprototypeAction = null;\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\tvar existingAction =\n\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\tif ( existingAction !== undefined ) {\n\n\t\t\t\treturn existingAction;\n\n\t\t\t}\n\n\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t// the bindings again but can just copy\n\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t// also, take the clip from the prototype action\n\t\t\tif ( clipObject === null )\n\t\t\t\tclipObject = prototypeAction._clip;\n\n\t\t}\n\n\t\t// clip must be known when specified via string\n\t\tif ( clipObject === null ) return null;\n\n\t\t// allocate all resources required to run it\n\t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\n\n\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t// and make the action known to the memory manager\n\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\treturn newAction;\n\n\t},\n\n\t// get an existing action\n\texistingAction: function ( clip, optionalRoot ) {\n\n\t\tvar root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid,\n\n\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t}\n\n\t\treturn null;\n\n\t},\n\n\t// deactivates all previously scheduled actions\n\tstopAllAction: function () {\n\n\t\tvar actions = this._actions,\n\t\t\tnActions = this._nActiveActions,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = this._nActiveBindings;\n\n\t\tthis._nActiveActions = 0;\n\t\tthis._nActiveBindings = 0;\n\n\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\tactions[ i ].reset();\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\tbindings[ i ].useCount = 0;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// advance the time and update apply the animation\n\tupdate: function ( deltaTime ) {\n\n\t\tdeltaTime *= this.timeScale;\n\n\t\tvar actions = this._actions,\n\t\t\tnActions = this._nActiveActions,\n\n\t\t\ttime = this.time += deltaTime,\n\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t// run active actions\n\n\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\tvar action = actions[ i ];\n\n\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t}\n\n\t\t// update scene graph\n\n\t\tvar bindings = this._bindings,\n\t\t\tnBindings = this._nActiveBindings;\n\n\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// return this mixer's root target object\n\tgetRoot: function () {\n\n\t\treturn this._root;\n\n\t},\n\n\t// free all resources specific to a particular clip\n\tuncacheClip: function ( clip ) {\n\n\t\tvar actions = this._actions,\n\t\t\tclipUuid = clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t// iteration state and also require updating the state we can\n\t\t\t// just throw away\n\n\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\tvar action = actionsToRemove[ i ];\n\n\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\taction._cacheIndex = null;\n\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\tactions.pop();\n\n\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t}\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t},\n\n\t// free all resources specific to a particular root target object\n\tuncacheRoot: function ( root ) {\n\n\t\tvar rootUuid = root.uuid,\n\t\t\tactionsByClip = this._actionsByClip;\n\n\t\tfor ( var clipUuid in actionsByClip ) {\n\n\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\tif ( action !== undefined ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingByName !== undefined ) {\n\n\t\t\tfor ( var trackName in bindingByName ) {\n\n\t\t\t\tvar binding = bindingByName[ trackName ];\n\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t// remove a targeted clip from the cache\n\tuncacheAction: function ( clip, optionalRoot ) {\n\n\t\tvar action = this.existingAction( clip, optionalRoot );\n\n\t\tif ( action !== null ) {\n\n\t\t\tthis._deactivateAction( action );\n\t\t\tthis._removeInactiveAction( action );\n\n\t\t}\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Uniform( value ) {\n\n\tif ( typeof value === 'string' ) {\n\n\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t\tvalue = arguments[ 1 ];\n\n\t}\n\n\tthis.value = value;\n\n}\n\nUniform.prototype.clone = function () {\n\n\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\n\n};\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nfunction InstancedBufferGeometry() {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'InstancedBufferGeometry';\n\tthis.maxInstancedCount = undefined;\n\n}\n\nInstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {\n\n\tconstructor: InstancedBufferGeometry,\n\n\tisInstancedBufferGeometry: true,\n\n\tcopy: function ( source ) {\n\n\t\tBufferGeometry.prototype.copy.call( this, source );\n\n\t\tthis.maxInstancedCount = source.maxInstancedCount;\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n} );\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nfunction InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\n\n\tthis.data = interleavedBuffer;\n\tthis.itemSize = itemSize;\n\tthis.offset = offset;\n\n\tthis.normalized = normalized === true;\n\n}\n\nObject.defineProperties( InterleavedBufferAttribute.prototype, {\n\n\tcount: {\n\n\t\tget: function () {\n\n\t\t\treturn this.data.count;\n\n\t\t}\n\n\t},\n\n\tarray: {\n\n\t\tget: function () {\n\n\t\t\treturn this.data.array;\n\n\t\t}\n\n\t}\n\n} );\n\nObject.assign( InterleavedBufferAttribute.prototype, {\n\n\tisInterleavedBufferAttribute: true,\n\n\tsetX: function ( index, x ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( index, y ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( index, z ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetW: function ( index, w ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\treturn this;\n\n\t},\n\n\tgetX: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n\t},\n\n\tgetY: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t},\n\n\tgetZ: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t},\n\n\tgetW: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t},\n\n\tsetXY: function ( index, x, y ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZ: function ( index, x, y, z ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\t\tthis.data.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nfunction InterleavedBuffer( array, stride ) {\n\n\tthis.array = array;\n\tthis.stride = stride;\n\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\tthis.dynamic = false;\n\tthis.updateRange = { offset: 0, count: - 1 };\n\n\tthis.version = 0;\n\n}\n\nObject.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {\n\n\tset: function ( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n} );\n\nObject.assign( InterleavedBuffer.prototype, {\n\n\tisInterleavedBuffer: true,\n\n\tonUploadCallback: function () {},\n\n\tsetArray: function ( array ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.count = array !== undefined ? array.length / this.stride : 0;\n\t\tthis.array = array;\n\n\t},\n\n\tsetDynamic: function ( value ) {\n\n\t\tthis.dynamic = value;\n\n\t\treturn this;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.count = source.count;\n\t\tthis.stride = source.stride;\n\t\tthis.dynamic = source.dynamic;\n\n\t\treturn this;\n\n\t},\n\n\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.stride;\n\t\tindex2 *= attribute.stride;\n\n\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tset: function ( value, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tonUpload: function ( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nfunction InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\n\n\tInterleavedBuffer.call( this, array, stride );\n\n\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n}\n\nInstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {\n\n\tconstructor: InstancedInterleavedBuffer,\n\n\tisInstancedInterleavedBuffer: true,\n\n\tcopy: function ( source ) {\n\n\t\tInterleavedBuffer.prototype.copy.call( this, source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nfunction InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {\n\n\tBufferAttribute.call( this, array, itemSize );\n\n\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n}\n\nInstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {\n\n\tconstructor: InstancedBufferAttribute,\n\n\tisInstancedBufferAttribute: true,\n\n\tcopy: function ( source ) {\n\n\t\tBufferAttribute.prototype.copy.call( this, source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author bhouston / http://clara.io/\n * @author stephomi / http://stephaneginier.com/\n */\n\nfunction Raycaster( origin, direction, near, far ) {\n\n\tthis.ray = new Ray( origin, direction );\n\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\tthis.near = near || 0;\n\tthis.far = far || Infinity;\n\n\tthis.params = {\n\t\tMesh: {},\n\t\tLine: {},\n\t\tLOD: {},\n\t\tPoints: { threshold: 1 },\n\t\tSprite: {}\n\t};\n\n\tObject.defineProperties( this.params, {\n\t\tPointCloud: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t\t\t\treturn this.Points;\n\n\t\t\t}\n\t\t}\n\t} );\n\n}\n\nfunction ascSort( a, b ) {\n\n\treturn a.distance - b.distance;\n\n}\n\nfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\tif ( object.visible === false ) return;\n\n\tobject.raycast( raycaster, intersects );\n\n\tif ( recursive === true ) {\n\n\t\tvar children = object.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t}\n\n\t}\n\n}\n\nObject.assign( Raycaster.prototype, {\n\n\tlinePrecision: 1,\n\n\tset: function ( origin, direction ) {\n\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.ray.set( origin, direction );\n\n\t},\n\n\tsetFromCamera: function ( coords, camera ) {\n\n\t\tif ( ( camera && camera.isPerspectiveCamera ) ) {\n\n\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\n\t\t} else if ( ( camera && camera.isOrthographicCamera ) ) {\n\n\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n\t\t}\n\n\t},\n\n\tintersectObject: function ( object, recursive, optionalTarget ) {\n\n\t\tvar intersects = optionalTarget || [];\n\n\t\tintersectObject( object, this, intersects, recursive );\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t},\n\n\tintersectObjects: function ( objects, recursive, optionalTarget ) {\n\n\t\tvar intersects = optionalTarget || [];\n\n\t\tif ( Array.isArray( objects ) === false ) {\n\n\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t\t\treturn intersects;\n\n\t\t}\n\n\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t}\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction Clock( autoStart ) {\n\n\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n\tthis.startTime = 0;\n\tthis.oldTime = 0;\n\tthis.elapsedTime = 0;\n\n\tthis.running = false;\n\n}\n\nObject.assign( Clock.prototype, {\n\n\tstart: function () {\n\n\t\tthis.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\n\n\t\tthis.oldTime = this.startTime;\n\t\tthis.elapsedTime = 0;\n\t\tthis.running = true;\n\n\t},\n\n\tstop: function () {\n\n\t\tthis.getElapsedTime();\n\t\tthis.running = false;\n\t\tthis.autoStart = false;\n\n\t},\n\n\tgetElapsedTime: function () {\n\n\t\tthis.getDelta();\n\t\treturn this.elapsedTime;\n\n\t},\n\n\tgetDelta: function () {\n\n\t\tvar diff = 0;\n\n\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\tthis.start();\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tif ( this.running ) {\n\n\t\t\tvar newTime = ( typeof performance === 'undefined' ? Date : performance ).now();\n\n\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\tthis.oldTime = newTime;\n\n\t\t\tthis.elapsedTime += diff;\n\n\t\t}\n\n\t\treturn diff;\n\n\t}\n\n} );\n\n/**\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n *\n * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n *\n * The poles (phi) are at the positive and negative y axis.\n * The equator starts at positive z.\n */\n\nfunction Spherical( radius, phi, theta ) {\n\n\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\tthis.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole\n\tthis.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere\n\n\treturn this;\n\n}\n\nObject.assign( Spherical.prototype, {\n\n\tset: function ( radius, phi, theta ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi;\n\t\tthis.theta = theta;\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.phi = other.phi;\n\t\tthis.theta = other.theta;\n\n\t\treturn this;\n\n\t},\n\n\t// restrict phi to be betwee EPS and PI-EPS\n\tmakeSafe: function () {\n\n\t\tvar EPS = 0.000001;\n\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromVector3: function ( vec3 ) {\n\n\t\tthis.radius = vec3.length();\n\n\t\tif ( this.radius === 0 ) {\n\n\t\t\tthis.theta = 0;\n\t\t\tthis.phi = 0;\n\n\t\t} else {\n\n\t\t\tthis.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis\n\t\t\tthis.phi = Math.acos( _Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n *\n * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n *\n */\n\nfunction Cylindrical( radius, theta, y ) {\n\n\tthis.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane\n\tthis.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\tthis.y = ( y !== undefined ) ? y : 0; // height above the x-z plane\n\n\treturn this;\n\n}\n\nObject.assign( Cylindrical.prototype, {\n\n\tset: function ( radius, theta, y ) {\n\n\t\tthis.radius = radius;\n\t\tthis.theta = theta;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.theta = other.theta;\n\t\tthis.y = other.y;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromVector3: function ( vec3 ) {\n\n\t\tthis.radius = Math.sqrt( vec3.x * vec3.x + vec3.z * vec3.z );\n\t\tthis.theta = Math.atan2( vec3.x, vec3.z );\n\t\tthis.y = vec3.y;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/**\n * @author bhouston / http://clara.io\n */\n\nfunction Box2( min, max ) {\n\n\tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n\tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\n}\n\nObject.assign( Box2.prototype, {\n\n\tset: function ( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPoints: function ( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCenterAndSize: function () {\n\n\t\tvar v1 = new Vector2();\n\n\t\treturn function setFromCenterAndSize( center, size ) {\n\n\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tmakeEmpty: function () {\n\n\t\tthis.min.x = this.min.y = + Infinity;\n\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\treturn this;\n\n\t},\n\n\tisEmpty: function () {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t},\n\n\tgetCenter: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .getCenter() target is now required' );\n\t\t\ttarget = new Vector2();\n\n\t\t}\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t},\n\n\tgetSize: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .getSize() target is now required' );\n\t\t\ttarget = new Vector2();\n\n\t\t}\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t},\n\n\texpandByPoint: function ( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t},\n\n\texpandByVector: function ( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t},\n\n\texpandByScalar: function ( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\n\n\t},\n\n\tcontainsBox: function ( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t},\n\n\tgetParameter: function ( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .getParameter() target is now required' );\n\t\t\ttarget = new Vector2();\n\n\t\t}\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t);\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\t// using 4 splitting planes to rule out intersections\n\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\n\t},\n\n\tclampPoint: function ( point, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .clampPoint() target is now required' );\n\t\t\ttarget = new Vector2();\n\n\t\t}\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t},\n\n\tdistanceToPoint: function () {\n\n\t\tvar v1 = new Vector2();\n\n\t\treturn function distanceToPoint( point ) {\n\n\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t};\n\n\t}(),\n\n\tintersect: function ( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tunion: function ( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n} );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nfunction ImmediateRenderObject( material ) {\n\n\tObject3D.call( this );\n\n\tthis.material = material;\n\tthis.render = function ( /* renderCallback */ ) {};\n\n}\n\nImmediateRenderObject.prototype = Object.create( Object3D.prototype );\nImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\nImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction VertexNormalsHelper( object, size, hex, linewidth ) {\n\n\tthis.object = object;\n\n\tthis.size = ( size !== undefined ) ? size : 1;\n\n\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\n\n\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t//\n\n\tvar nNormals = 0;\n\n\tvar objGeometry = this.object.geometry;\n\n\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\tnNormals = objGeometry.faces.length * 3;\n\n\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\n\n\t\tnNormals = objGeometry.attributes.normal.count;\n\n\t}\n\n\t//\n\n\tvar geometry = new BufferGeometry();\n\n\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\n\n\tgeometry.addAttribute( 'position', positions );\n\n\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t//\n\n\tthis.matrixAutoUpdate = false;\n\n\tthis.update();\n\n}\n\nVertexNormalsHelper.prototype = Object.create( LineSegments.prototype );\nVertexNormalsHelper.prototype.constructor = VertexNormalsHelper;\n\nVertexNormalsHelper.prototype.update = ( function () {\n\n\tvar v1 = new Vector3();\n\tvar v2 = new Vector3();\n\tvar normalMatrix = new Matrix3();\n\n\treturn function update() {\n\n\t\tvar keys = [ 'a', 'b', 'c' ];\n\n\t\tthis.object.updateMatrixWorld( true );\n\n\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\tvar position = this.geometry.attributes.position;\n\n\t\t//\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\t\tvar vertices = objGeometry.vertices;\n\n\t\t\tvar faces = objGeometry.faces;\n\n\t\t\tvar idx = 0;\n\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\n\n\t\t\t\t\tvar normal = face.vertexNormals[ j ];\n\n\t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\n\n\t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\n\n\t\t\tvar objPos = objGeometry.attributes.position;\n\n\t\t\tvar objNorm = objGeometry.attributes.normal;\n\n\t\t\tvar idx = 0;\n\n\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\n\t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\n\n\t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\n\n\t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\n\n\t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tposition.needsUpdate = true;\n\n\t};\n\n}() );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction SpotLightHelper( light, color ) {\n\n\tObject3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.color = color;\n\n\tvar geometry = new BufferGeometry();\n\n\tvar positions = [\n\t\t0, 0, 0, \t0, 0, 1,\n\t\t0, 0, 0, \t1, 0, 1,\n\t\t0, 0, 0,\t- 1, 0, 1,\n\t\t0, 0, 0, \t0, 1, 1,\n\t\t0, 0, 0, \t0, - 1, 1\n\t];\n\n\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n\t\tpositions.push(\n\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t);\n\n\t}\n\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\tvar material = new LineBasicMaterial( { fog: false } );\n\n\tthis.cone = new LineSegments( geometry, material );\n\tthis.add( this.cone );\n\n\tthis.update();\n\n}\n\nSpotLightHelper.prototype = Object.create( Object3D.prototype );\nSpotLightHelper.prototype.constructor = SpotLightHelper;\n\nSpotLightHelper.prototype.dispose = function () {\n\n\tthis.cone.geometry.dispose();\n\tthis.cone.material.dispose();\n\n};\n\nSpotLightHelper.prototype.update = function () {\n\n\tvar vector = new Vector3();\n\tvar vector2 = new Vector3();\n\n\treturn function update() {\n\n\t\tthis.light.updateMatrixWorld();\n\n\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\tvector.setFromMatrixPosition( this.light.matrixWorld );\n\t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\tthis.cone.lookAt( vector2.sub( vector ) );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.cone.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.cone.material.color.copy( this.light.color );\n\n\t\t}\n\n\t};\n\n}();\n\n/**\n * @author Sean Griffin / http://twitter.com/sgrif\n * @author Michael Guerrero / http://realitymeltdown.com\n * @author mrdoob / http://mrdoob.com/\n * @author ikerr / http://verold.com\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nfunction getBoneList( object ) {\n\n\tvar boneList = [];\n\n\tif ( object && object.isBone ) {\n\n\t\tboneList.push( object );\n\n\t}\n\n\tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\n\n\t}\n\n\treturn boneList;\n\n}\n\nfunction SkeletonHelper( object ) {\n\n\tvar bones = getBoneList( object );\n\n\tvar geometry = new BufferGeometry();\n\n\tvar vertices = [];\n\tvar colors = [];\n\n\tvar color1 = new Color( 0, 0, 1 );\n\tvar color2 = new Color( 0, 1, 0 );\n\n\tfor ( var i = 0; i < bones.length; i ++ ) {\n\n\t\tvar bone = bones[ i ];\n\n\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tcolors.push( color1.r, color1.g, color1.b );\n\t\t\tcolors.push( color2.r, color2.g, color2.b );\n\n\t\t}\n\n\t}\n\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\tvar material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\n\tLineSegments.call( this, geometry, material );\n\n\tthis.root = object;\n\tthis.bones = bones;\n\n\tthis.matrix = object.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n}\n\nSkeletonHelper.prototype = Object.create( LineSegments.prototype );\nSkeletonHelper.prototype.constructor = SkeletonHelper;\n\nSkeletonHelper.prototype.updateMatrixWorld = function () {\n\n\tvar vector = new Vector3();\n\n\tvar boneMatrix = new Matrix4();\n\tvar matrixWorldInv = new Matrix4();\n\n\treturn function updateMatrixWorld( force ) {\n\n\t\tvar bones = this.bones;\n\n\t\tvar geometry = this.geometry;\n\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\tmatrixWorldInv.getInverse( this.root.matrixWorld );\n\n\t\tfor ( var i = 0, j = 0; i < bones.length; i ++ ) {\n\n\t\t\tvar bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\n\t\t\t\tvector.setFromMatrixPosition( boneMatrix );\n\t\t\t\tposition.setXYZ( j, vector.x, vector.y, vector.z );\n\n\t\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\tvector.setFromMatrixPosition( boneMatrix );\n\t\t\t\tposition.setXYZ( j + 1, vector.x, vector.y, vector.z );\n\n\t\t\t\tj += 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n}();\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction PointLightHelper( light, sphereSize, color ) {\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.color = color;\n\n\tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n\tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\n\tMesh.call( this, geometry, material );\n\n\tthis.matrix = this.light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.update();\n\n\n\t/*\n\tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\tvar d = light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\n\tthis.add( this.lightDistance );\n\t*/\n\n}\n\nPointLightHelper.prototype = Object.create( Mesh.prototype );\nPointLightHelper.prototype.constructor = PointLightHelper;\n\nPointLightHelper.prototype.dispose = function () {\n\n\tthis.geometry.dispose();\n\tthis.material.dispose();\n\n};\n\nPointLightHelper.prototype.update = function () {\n\n\tif ( this.color !== undefined ) {\n\n\t\tthis.material.color.set( this.color );\n\n\t} else {\n\n\t\tthis.material.color.copy( this.light.color );\n\n\t}\n\n\t/*\n\tvar d = this.light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.visible = true;\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\t*/\n\n};\n\n/**\n * @author abelnation / http://github.com/abelnation\n * @author Mugen87 / http://github.com/Mugen87\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction RectAreaLightHelper( light, color ) {\n\n\tObject3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.color = color;\n\n\tvar material = new LineBasicMaterial( { fog: false } );\n\n\tvar geometry = new BufferGeometry();\n\n\tgeometry.addAttribute( 'position', new BufferAttribute( new Float32Array( 5 * 3 ), 3 ) );\n\n\tthis.line = new Line( geometry, material );\n\tthis.add( this.line );\n\n\n\tthis.update();\n\n}\n\nRectAreaLightHelper.prototype = Object.create( Object3D.prototype );\nRectAreaLightHelper.prototype.constructor = RectAreaLightHelper;\n\nRectAreaLightHelper.prototype.dispose = function () {\n\n\tthis.children[ 0 ].geometry.dispose();\n\tthis.children[ 0 ].material.dispose();\n\n};\n\nRectAreaLightHelper.prototype.update = function () {\n\n\t// calculate new dimensions of the helper\n\n\tvar hx = this.light.width * 0.5;\n\tvar hy = this.light.height * 0.5;\n\n\tvar position = this.line.geometry.attributes.position;\n\tvar array = position.array;\n\n\t// update vertices\n\n\tarray[ 0 ] = hx; array[ 1 ] = - hy; array[ 2 ] = 0;\n\tarray[ 3 ] = hx; array[ 4 ] = hy; array[ 5 ] = 0;\n\tarray[ 6 ] = - hx; array[ 7 ] = hy; array[ 8 ] = 0;\n\tarray[ 9 ] = - hx; array[ 10 ] = - hy; array[ 11 ] = 0;\n\tarray[ 12 ] = hx; array[ 13 ] = - hy; array[ 14 ] = 0;\n\n\tposition.needsUpdate = true;\n\n\tif ( this.color !== undefined ) {\n\n\t\tthis.line.material.color.set( this.color );\n\n\t} else {\n\n\t\tthis.line.material.color.copy( this.light.color );\n\n\t}\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nfunction HemisphereLightHelper( light, size, color ) {\n\n\tObject3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.color = color;\n\n\tvar geometry = new OctahedronBufferGeometry( size );\n\tgeometry.rotateY( Math.PI * 0.5 );\n\n\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\tif ( this.color === undefined ) this.material.vertexColors = VertexColors;\n\n\tvar position = geometry.getAttribute( 'position' );\n\tvar colors = new Float32Array( position.count * 3 );\n\n\tgeometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\tthis.add( new Mesh( geometry, this.material ) );\n\n\tthis.update();\n\n}\n\nHemisphereLightHelper.prototype = Object.create( Object3D.prototype );\nHemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\nHemisphereLightHelper.prototype.dispose = function () {\n\n\tthis.children[ 0 ].geometry.dispose();\n\tthis.children[ 0 ].material.dispose();\n\n};\n\nHemisphereLightHelper.prototype.update = function () {\n\n\tvar vector = new Vector3();\n\n\tvar color1 = new Color();\n\tvar color2 = new Color();\n\n\treturn function update() {\n\n\t\tvar mesh = this.children[ 0 ];\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tvar colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t\tcolor1.copy( this.light.color );\n\t\t\tcolor2.copy( this.light.groundColor );\n\n\t\t\tfor ( var i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\t\tvar color = ( i < ( l / 2 ) ) ? color1 : color2;\n\n\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t\tcolors.needsUpdate = true;\n\n\t\t}\n\n\t\tmesh.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n\t};\n\n}();\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction GridHelper( size, divisions, color1, color2 ) {\n\n\tsize = size || 10;\n\tdivisions = divisions || 10;\n\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\tvar center = divisions / 2;\n\tvar step = size / divisions;\n\tvar halfSize = size / 2;\n\n\tvar vertices = [], colors = [];\n\n\tfor ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\tvar color = i === center ? color1 : color2;\n\n\t\tcolor.toArray( colors, j ); j += 3;\n\t\tcolor.toArray( colors, j ); j += 3;\n\t\tcolor.toArray( colors, j ); j += 3;\n\t\tcolor.toArray( colors, j ); j += 3;\n\n\t}\n\n\tvar geometry = new BufferGeometry();\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\tLineSegments.call( this, geometry, material );\n\n}\n\nGridHelper.prototype = Object.create( LineSegments.prototype );\nGridHelper.prototype.constructor = GridHelper;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / http://github.com/Mugen87\n * @author Hectate / http://www.github.com/Hectate\n */\n\nfunction PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {\n\n\tradius = radius || 10;\n\tradials = radials || 16;\n\tcircles = circles || 8;\n\tdivisions = divisions || 64;\n\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\tvar vertices = [];\n\tvar colors = [];\n\n\tvar x, z;\n\tvar v, i, j, r, color;\n\n\t// create the radials\n\n\tfor ( i = 0; i <= radials; i ++ ) {\n\n\t\tv = ( i / radials ) * ( Math.PI * 2 );\n\n\t\tx = Math.sin( v ) * radius;\n\t\tz = Math.cos( v ) * radius;\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tvertices.push( x, 0, z );\n\n\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\tcolors.push( color.r, color.g, color.b );\n\t\tcolors.push( color.r, color.g, color.b );\n\n\t}\n\n\t// create the circles\n\n\tfor ( i = 0; i <= circles; i ++ ) {\n\n\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\tr = radius - ( radius / circles * i );\n\n\t\tfor ( j = 0; j < divisions; j ++ ) {\n\n\t\t\t// first vertex\n\n\t\t\tv = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\tx = Math.sin( v ) * r;\n\t\t\tz = Math.cos( v ) * r;\n\n\t\t\tvertices.push( x, 0, z );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t// second vertex\n\n\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\tx = Math.sin( v ) * r;\n\t\t\tz = Math.cos( v ) * r;\n\n\t\t\tvertices.push( x, 0, z );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t}\n\n\t}\n\n\tvar geometry = new BufferGeometry();\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\tLineSegments.call( this, geometry, material );\n\n}\n\nPolarGridHelper.prototype = Object.create( LineSegments.prototype );\nPolarGridHelper.prototype.constructor = PolarGridHelper;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction FaceNormalsHelper( object, size, hex, linewidth ) {\n\n\t// FaceNormalsHelper only supports THREE.Geometry\n\n\tthis.object = object;\n\n\tthis.size = ( size !== undefined ) ? size : 1;\n\n\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t//\n\n\tvar nNormals = 0;\n\n\tvar objGeometry = this.object.geometry;\n\n\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\tnNormals = objGeometry.faces.length;\n\n\t} else {\n\n\t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\n\n\t}\n\n\t//\n\n\tvar geometry = new BufferGeometry();\n\n\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\n\n\tgeometry.addAttribute( 'position', positions );\n\n\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t//\n\n\tthis.matrixAutoUpdate = false;\n\tthis.update();\n\n}\n\nFaceNormalsHelper.prototype = Object.create( LineSegments.prototype );\nFaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\n\nFaceNormalsHelper.prototype.update = ( function () {\n\n\tvar v1 = new Vector3();\n\tvar v2 = new Vector3();\n\tvar normalMatrix = new Matrix3();\n\n\treturn function update() {\n\n\t\tthis.object.updateMatrixWorld( true );\n\n\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\tvar position = this.geometry.attributes.position;\n\n\t\t//\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tvar vertices = objGeometry.vertices;\n\n\t\tvar faces = objGeometry.faces;\n\n\t\tvar idx = 0;\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tvar normal = face.normal;\n\n\t\t\tv1.copy( vertices[ face.a ] )\n\t\t\t\t.add( vertices[ face.b ] )\n\t\t\t\t.add( vertices[ face.c ] )\n\t\t\t\t.divideScalar( 3 )\n\t\t\t\t.applyMatrix4( matrixWorld );\n\n\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\tidx = idx + 1;\n\n\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\tidx = idx + 1;\n\n\t\t}\n\n\t\tposition.needsUpdate = true;\n\n\t};\n\n}() );\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction DirectionalLightHelper( light, size, color ) {\n\n\tObject3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.color = color;\n\n\tif ( size === undefined ) size = 1;\n\n\tvar geometry = new BufferGeometry();\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( [\n\t\t- size, size, 0,\n\t\tsize, size, 0,\n\t\tsize, - size, 0,\n\t\t- size, - size, 0,\n\t\t- size, size, 0\n\t], 3 ) );\n\n\tvar material = new LineBasicMaterial( { fog: false } );\n\n\tthis.lightPlane = new Line( geometry, material );\n\tthis.add( this.lightPlane );\n\n\tgeometry = new BufferGeometry();\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\tthis.targetLine = new Line( geometry, material );\n\tthis.add( this.targetLine );\n\n\tthis.update();\n\n}\n\nDirectionalLightHelper.prototype = Object.create( Object3D.prototype );\nDirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\nDirectionalLightHelper.prototype.dispose = function () {\n\n\tthis.lightPlane.geometry.dispose();\n\tthis.lightPlane.material.dispose();\n\tthis.targetLine.geometry.dispose();\n\tthis.targetLine.material.dispose();\n\n};\n\nDirectionalLightHelper.prototype.update = function () {\n\n\tvar v1 = new Vector3();\n\tvar v2 = new Vector3();\n\tvar v3 = new Vector3();\n\n\treturn function update() {\n\n\t\tv1.setFromMatrixPosition( this.light.matrixWorld );\n\t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\tv3.subVectors( v2, v1 );\n\n\t\tthis.lightPlane.lookAt( v3 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.lightPlane.material.color.set( this.color );\n\t\t\tthis.targetLine.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.lightPlane.material.color.copy( this.light.color );\n\t\t\tthis.targetLine.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\tthis.targetLine.lookAt( v3 );\n\t\tthis.targetLine.scale.z = v3.length();\n\n\t};\n\n}();\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author Mugen87 / https://github.com/Mugen87\n *\n *\t- shows frustum, line of sight and up of the camera\n *\t- suitable for fast updates\n * \t- based on frustum visualization in lightgl.js shadowmap example\n *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n */\n\nfunction CameraHelper( camera ) {\n\n\tvar geometry = new BufferGeometry();\n\tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );\n\n\tvar vertices = [];\n\tvar colors = [];\n\n\tvar pointMap = {};\n\n\t// colors\n\n\tvar colorFrustum = new Color( 0xffaa00 );\n\tvar colorCone = new Color( 0xff0000 );\n\tvar colorUp = new Color( 0x00aaff );\n\tvar colorTarget = new Color( 0xffffff );\n\tvar colorCross = new Color( 0x333333 );\n\n\t// near\n\n\taddLine( 'n1', 'n2', colorFrustum );\n\taddLine( 'n2', 'n4', colorFrustum );\n\taddLine( 'n4', 'n3', colorFrustum );\n\taddLine( 'n3', 'n1', colorFrustum );\n\n\t// far\n\n\taddLine( 'f1', 'f2', colorFrustum );\n\taddLine( 'f2', 'f4', colorFrustum );\n\taddLine( 'f4', 'f3', colorFrustum );\n\taddLine( 'f3', 'f1', colorFrustum );\n\n\t// sides\n\n\taddLine( 'n1', 'f1', colorFrustum );\n\taddLine( 'n2', 'f2', colorFrustum );\n\taddLine( 'n3', 'f3', colorFrustum );\n\taddLine( 'n4', 'f4', colorFrustum );\n\n\t// cone\n\n\taddLine( 'p', 'n1', colorCone );\n\taddLine( 'p', 'n2', colorCone );\n\taddLine( 'p', 'n3', colorCone );\n\taddLine( 'p', 'n4', colorCone );\n\n\t// up\n\n\taddLine( 'u1', 'u2', colorUp );\n\taddLine( 'u2', 'u3', colorUp );\n\taddLine( 'u3', 'u1', colorUp );\n\n\t// target\n\n\taddLine( 'c', 't', colorTarget );\n\taddLine( 'p', 'c', colorCross );\n\n\t// cross\n\n\taddLine( 'cn1', 'cn2', colorCross );\n\taddLine( 'cn3', 'cn4', colorCross );\n\n\taddLine( 'cf1', 'cf2', colorCross );\n\taddLine( 'cf3', 'cf4', colorCross );\n\n\tfunction addLine( a, b, color ) {\n\n\t\taddPoint( a, color );\n\t\taddPoint( b, color );\n\n\t}\n\n\tfunction addPoint( id, color ) {\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tcolors.push( color.r, color.g, color.b );\n\n\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\tpointMap[ id ] = [];\n\n\t\t}\n\n\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\n\n\t}\n\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\tLineSegments.call( this, geometry, material );\n\n\tthis.camera = camera;\n\tif ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\n\tthis.matrix = camera.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.pointMap = pointMap;\n\n\tthis.update();\n\n}\n\nCameraHelper.prototype = Object.create( LineSegments.prototype );\nCameraHelper.prototype.constructor = CameraHelper;\n\nCameraHelper.prototype.update = function () {\n\n\tvar geometry, pointMap;\n\n\tvar vector = new Vector3();\n\tvar camera = new Camera();\n\n\tfunction setPoint( point, x, y, z ) {\n\n\t\tvector.set( x, y, z ).unproject( camera );\n\n\t\tvar points = pointMap[ point ];\n\n\t\tif ( points !== undefined ) {\n\n\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tposition.setXYZ( points[ i ], vector.x, vector.y, vector.z );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn function update() {\n\n\t\tgeometry = this.geometry;\n\t\tpointMap = this.pointMap;\n\n\t\tvar w = 1, h = 1;\n\n\t\t// we need just camera projection matrix\n\t\t// world matrix must be identity\n\n\t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\n\n\t\t// center / target\n\n\t\tsetPoint( 'c', 0, 0, - 1 );\n\t\tsetPoint( 't', 0, 0, 1 );\n\n\t\t// near\n\n\t\tsetPoint( 'n1', - w, - h, - 1 );\n\t\tsetPoint( 'n2', w, - h, - 1 );\n\t\tsetPoint( 'n3', - w, h, - 1 );\n\t\tsetPoint( 'n4', w, h, - 1 );\n\n\t\t// far\n\n\t\tsetPoint( 'f1', - w, - h, 1 );\n\t\tsetPoint( 'f2', w, - h, 1 );\n\t\tsetPoint( 'f3', - w, h, 1 );\n\t\tsetPoint( 'f4', w, h, 1 );\n\n\t\t// up\n\n\t\tsetPoint( 'u1', w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u2', - w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u3', 0, h * 2, - 1 );\n\n\t\t// cross\n\n\t\tsetPoint( 'cf1', - w, 0, 1 );\n\t\tsetPoint( 'cf2', w, 0, 1 );\n\t\tsetPoint( 'cf3', 0, - h, 1 );\n\t\tsetPoint( 'cf4', 0, h, 1 );\n\n\t\tsetPoint( 'cn1', - w, 0, - 1 );\n\t\tsetPoint( 'cn2', w, 0, - 1 );\n\t\tsetPoint( 'cn3', 0, - h, - 1 );\n\t\tsetPoint( 'cn4', 0, h, - 1 );\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t};\n\n}();\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / http://github.com/Mugen87\n */\n\nfunction BoxHelper( object, color ) {\n\n\tthis.object = object;\n\n\tif ( color === undefined ) color = 0xffff00;\n\n\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\tvar positions = new Float32Array( 8 * 3 );\n\n\tvar geometry = new BufferGeometry();\n\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\tgeometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\tthis.matrixAutoUpdate = false;\n\n\tthis.update();\n\n}\n\nBoxHelper.prototype = Object.create( LineSegments.prototype );\nBoxHelper.prototype.constructor = BoxHelper;\n\nBoxHelper.prototype.update = ( function () {\n\n\tvar box = new Box3();\n\n\treturn function update( object ) {\n\n\t\tif ( object !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\n\n\t\t}\n\n\t\tif ( this.object !== undefined ) {\n\n\t\t\tbox.setFromObject( this.object );\n\n\t\t}\n\n\t\tif ( box.isEmpty() ) return;\n\n\t\tvar min = box.min;\n\t\tvar max = box.max;\n\n\t\t/*\n\t\t  5____4\n\t\t1/___0/|\n\t\t| 6__|_7\n\t\t2/___3/\n\n\t\t0: max.x, max.y, max.z\n\t\t1: min.x, max.y, max.z\n\t\t2: min.x, min.y, max.z\n\t\t3: max.x, min.y, max.z\n\t\t4: max.x, max.y, min.z\n\t\t5: min.x, max.y, min.z\n\t\t6: min.x, min.y, min.z\n\t\t7: max.x, min.y, min.z\n\t\t*/\n\n\t\tvar position = this.geometry.attributes.position;\n\t\tvar array = position.array;\n\n\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\n\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\n\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\n\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\tposition.needsUpdate = true;\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t};\n\n} )();\n\nBoxHelper.prototype.setFromObject = function ( object ) {\n\n\tthis.object = object;\n\tthis.update();\n\n\treturn this;\n\n};\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction Box3Helper( box, hex ) {\n\n\tthis.type = 'Box3Helper';\n\n\tthis.box = box;\n\n\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\n\tvar positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\n\n\tvar geometry = new BufferGeometry();\n\n\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\tthis.geometry.computeBoundingSphere();\n\n}\n\nBox3Helper.prototype = Object.create( LineSegments.prototype );\nBox3Helper.prototype.constructor = Box3Helper;\n\nBox3Helper.prototype.updateMatrixWorld = function ( force ) {\n\n\tvar box = this.box;\n\n\tif ( box.isEmpty() ) return;\n\n\tbox.getCenter( this.position );\n\n\tbox.getSize( this.scale );\n\n\tthis.scale.multiplyScalar( 0.5 );\n\n\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n};\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction PlaneHelper( plane, size, hex ) {\n\n\tthis.type = 'PlaneHelper';\n\n\tthis.plane = plane;\n\n\tthis.size = ( size === undefined ) ? 1 : size;\n\n\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\tvar positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];\n\n\tvar geometry = new BufferGeometry();\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\tgeometry.computeBoundingSphere();\n\n\tLine.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\t//\n\n\tvar positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];\n\n\tvar geometry2 = new BufferGeometry();\n\tgeometry2.addAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\tgeometry2.computeBoundingSphere();\n\n\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false } ) ) );\n\n}\n\nPlaneHelper.prototype = Object.create( Line.prototype );\nPlaneHelper.prototype.constructor = PlaneHelper;\n\nPlaneHelper.prototype.updateMatrixWorld = function ( force ) {\n\n\tvar scale = - this.plane.constant;\n\n\tif ( Math.abs( scale ) < 1e-8 ) scale = 1e-8; // sign does not matter\n\n\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, scale );\n\n\tthis.lookAt( this.plane.normal );\n\n\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n};\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n * @author zz85 / http://github.com/zz85\n * @author bhouston / http://clara.io\n *\n * Creates an arrow for visualizing directions\n *\n * Parameters:\n *  dir - Vector3\n *  origin - Vector3\n *  length - Number\n *  color - color in hex value\n *  headLength - Number\n *  headWidth - Number\n */\n\nvar lineGeometry;\nvar coneGeometry;\n\nfunction ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n\t// dir is assumed to be normalized\n\n\tObject3D.call( this );\n\n\tif ( color === undefined ) color = 0xffff00;\n\tif ( length === undefined ) length = 1;\n\tif ( headLength === undefined ) headLength = 0.2 * length;\n\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\tif ( lineGeometry === undefined ) {\n\n\t\tlineGeometry = new BufferGeometry();\n\t\tlineGeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\tconeGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\t\tconeGeometry.translate( 0, - 0.5, 0 );\n\n\t}\n\n\tthis.position.copy( origin );\n\n\tthis.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );\n\tthis.line.matrixAutoUpdate = false;\n\tthis.add( this.line );\n\n\tthis.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );\n\tthis.cone.matrixAutoUpdate = false;\n\tthis.add( this.cone );\n\n\tthis.setDirection( dir );\n\tthis.setLength( length, headLength, headWidth );\n\n}\n\nArrowHelper.prototype = Object.create( Object3D.prototype );\nArrowHelper.prototype.constructor = ArrowHelper;\n\nArrowHelper.prototype.setDirection = ( function () {\n\n\tvar axis = new Vector3();\n\tvar radians;\n\n\treturn function setDirection( dir ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t} else {\n\n\t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\tradians = Math.acos( dir.y );\n\n\t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\n\n\t\t}\n\n\t};\n\n}() );\n\nArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n\tif ( headLength === undefined ) headLength = 0.2 * length;\n\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\n\tthis.line.updateMatrix();\n\n\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\tthis.cone.position.y = length;\n\tthis.cone.updateMatrix();\n\n};\n\nArrowHelper.prototype.setColor = function ( color ) {\n\n\tthis.line.material.color.copy( color );\n\tthis.cone.material.color.copy( color );\n\n};\n\n/**\n * @author sroucheray / http://sroucheray.org/\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction AxesHelper( size ) {\n\n\tsize = size || 1;\n\n\tvar vertices = [\n\t\t0, 0, 0,\tsize, 0, 0,\n\t\t0, 0, 0,\t0, size, 0,\n\t\t0, 0, 0,\t0, 0, size\n\t];\n\n\tvar colors = [\n\t\t1, 0, 0,\t1, 0.6, 0,\n\t\t0, 1, 0,\t0.6, 1, 0,\n\t\t0, 0, 1,\t0, 0.6, 1\n\t];\n\n\tvar geometry = new BufferGeometry();\n\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\tLineSegments.call( this, geometry, material );\n\n}\n\nAxesHelper.prototype = Object.create( LineSegments.prototype );\nAxesHelper.prototype.constructor = AxesHelper;\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction Face4( a, b, c, d, normal, color, materialIndex ) {\n\n\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\treturn new Face3( a, b, c, normal, color, materialIndex );\n\n}\n\nvar LineStrip = 0;\n\nvar LinePieces = 1;\n\nfunction MeshFaceMaterial( materials ) {\n\n\tconsole.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );\n\treturn materials;\n\n}\n\nfunction MultiMaterial( materials ) {\n\n\tif ( materials === undefined ) materials = [];\n\n\tconsole.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );\n\tmaterials.isMultiMaterial = true;\n\tmaterials.materials = materials;\n\tmaterials.clone = function () {\n\n\t\treturn materials.slice();\n\n\t};\n\treturn materials;\n\n}\n\nfunction PointCloud( geometry, material ) {\n\n\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\treturn new Points( geometry, material );\n\n}\n\nfunction Particle( material ) {\n\n\tconsole.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );\n\treturn new Sprite( material );\n\n}\n\nfunction ParticleSystem( geometry, material ) {\n\n\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\treturn new Points( geometry, material );\n\n}\n\nfunction PointCloudMaterial( parameters ) {\n\n\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\treturn new PointsMaterial( parameters );\n\n}\n\nfunction ParticleBasicMaterial( parameters ) {\n\n\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\treturn new PointsMaterial( parameters );\n\n}\n\nfunction ParticleSystemMaterial( parameters ) {\n\n\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\treturn new PointsMaterial( parameters );\n\n}\n\nfunction Vertex( x, y, z ) {\n\n\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\treturn new Vector3( x, y, z );\n\n}\n\n//\n\nfunction DynamicBufferAttribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\n\treturn new BufferAttribute( array, itemSize ).setDynamic( true );\n\n}\n\nfunction Int8Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );\n\treturn new Int8BufferAttribute( array, itemSize );\n\n}\n\nfunction Uint8Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );\n\treturn new Uint8BufferAttribute( array, itemSize );\n\n}\n\nfunction Uint8ClampedAttribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );\n\treturn new Uint8ClampedBufferAttribute( array, itemSize );\n\n}\n\nfunction Int16Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );\n\treturn new Int16BufferAttribute( array, itemSize );\n\n}\n\nfunction Uint16Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );\n\treturn new Uint16BufferAttribute( array, itemSize );\n\n}\n\nfunction Int32Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );\n\treturn new Int32BufferAttribute( array, itemSize );\n\n}\n\nfunction Uint32Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );\n\treturn new Uint32BufferAttribute( array, itemSize );\n\n}\n\nfunction Float32Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );\n\treturn new Float32BufferAttribute( array, itemSize );\n\n}\n\nfunction Float64Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );\n\treturn new Float64BufferAttribute( array, itemSize );\n\n}\n\n//\n\nCurve.create = function ( construct, getPoint ) {\n\n\tconsole.log( 'THREE.Curve.create() has been deprecated' );\n\n\tconstruct.prototype = Object.create( Curve.prototype );\n\tconstruct.prototype.constructor = construct;\n\tconstruct.prototype.getPoint = getPoint;\n\n\treturn construct;\n\n};\n\n//\n\nObject.assign( CurvePath.prototype, {\n\n\tcreatePointsGeometry: function ( divisions ) {\n\n\t\tconsole.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t// generate geometry from path points (for Line or Points objects)\n\n\t\tvar pts = this.getPoints( divisions );\n\t\treturn this.createGeometry( pts );\n\n\t},\n\n\tcreateSpacedPointsGeometry: function ( divisions ) {\n\n\t\tconsole.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t// generate geometry from equidistant sampling along the path\n\n\t\tvar pts = this.getSpacedPoints( divisions );\n\t\treturn this.createGeometry( pts );\n\n\t},\n\n\tcreateGeometry: function ( points ) {\n\n\t\tconsole.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\tvar geometry = new Geometry();\n\n\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tvar point = points[ i ];\n\t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n} );\n\n//\n\nObject.assign( Path.prototype, {\n\n\tfromPoints: function ( points ) {\n\n\t\tconsole.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );\n\t\tthis.setFromPoints( points );\n\n\t}\n\n} );\n\n//\n\nfunction ClosedSplineCurve3( points ) {\n\n\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\tCatmullRomCurve3.call( this, points );\n\tthis.type = 'catmullrom';\n\tthis.closed = true;\n\n}\n\nClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n//\n\nfunction SplineCurve3( points ) {\n\n\tconsole.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\tCatmullRomCurve3.call( this, points );\n\tthis.type = 'catmullrom';\n\n}\n\nSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n//\n\nfunction Spline( points ) {\n\n\tconsole.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );\n\n\tCatmullRomCurve3.call( this, points );\n\tthis.type = 'catmullrom';\n\n}\n\nSpline.prototype = Object.create( CatmullRomCurve3.prototype );\n\nObject.assign( Spline.prototype, {\n\n\tinitFromArray: function ( /* a */ ) {\n\n\t\tconsole.error( 'THREE.Spline: .initFromArray() has been removed.' );\n\n\t},\n\tgetControlPointsArray: function ( /* optionalTarget */ ) {\n\n\t\tconsole.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );\n\n\t},\n\treparametrizeByArcLength: function ( /* samplingCoef */ ) {\n\n\t\tconsole.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );\n\n\t}\n\n} );\n\n//\n\nfunction AxisHelper( size ) {\n\n\tconsole.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );\n\treturn new AxesHelper( size );\n\n}\n\nfunction BoundingBoxHelper( object, color ) {\n\n\tconsole.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );\n\treturn new BoxHelper( object, color );\n\n}\n\nfunction EdgesHelper( object, hex ) {\n\n\tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n\treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n}\n\nGridHelper.prototype.setColors = function () {\n\n\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n};\n\nSkeletonHelper.prototype.update = function () {\n\n\tconsole.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );\n\n};\n\nfunction WireframeHelper( object, hex ) {\n\n\tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n\treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n}\n\n//\n\nObject.assign( Loader.prototype, {\n\n\textractUrlBase: function ( url ) {\n\n\t\tconsole.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );\n\t\treturn LoaderUtils.extractUrlBase( url );\n\n\t}\n\n} );\n\nfunction XHRLoader( manager ) {\n\n\tconsole.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );\n\treturn new FileLoader( manager );\n\n}\n\nfunction BinaryTextureLoader( manager ) {\n\n\tconsole.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );\n\treturn new DataTextureLoader( manager );\n\n}\n\n//\n\nObject.assign( Box2.prototype, {\n\n\tcenter: function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n\t\treturn this.getCenter( optionalTarget );\n\n\t},\n\tempty: function () {\n\n\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t\treturn this.isEmpty();\n\n\t},\n\tisIntersectionBox: function ( box ) {\n\n\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\treturn this.intersectsBox( box );\n\n\t},\n\tsize: function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n\t\treturn this.getSize( optionalTarget );\n\n\t}\n} );\n\nObject.assign( Box3.prototype, {\n\n\tcenter: function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n\t\treturn this.getCenter( optionalTarget );\n\n\t},\n\tempty: function () {\n\n\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t\treturn this.isEmpty();\n\n\t},\n\tisIntersectionBox: function ( box ) {\n\n\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\treturn this.intersectsBox( box );\n\n\t},\n\tisIntersectionSphere: function ( sphere ) {\n\n\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\treturn this.intersectsSphere( sphere );\n\n\t},\n\tsize: function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n\t\treturn this.getSize( optionalTarget );\n\n\t}\n} );\n\nLine3.prototype.center = function ( optionalTarget ) {\n\n\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n\treturn this.getCenter( optionalTarget );\n\n};\n\nObject.assign( _Math, {\n\n\trandom16: function () {\n\n\t\tconsole.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );\n\t\treturn Math.random();\n\n\t},\n\n\tnearestPowerOfTwo: function ( value ) {\n\n\t\tconsole.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );\n\t\treturn _Math.floorPowerOfTwo( value );\n\n\t},\n\n\tnextPowerOfTwo: function ( value ) {\n\n\t\tconsole.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );\n\t\treturn _Math.ceilPowerOfTwo( value );\n\n\t}\n\n} );\n\nObject.assign( Matrix3.prototype, {\n\n\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\treturn this.toArray( array, offset );\n\n\t},\n\tmultiplyVector3: function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t\treturn vector.applyMatrix3( this );\n\n\t},\n\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\tconsole.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );\n\n\t},\n\tapplyToBuffer: function ( buffer /*, offset, length */ ) {\n\n\t\tconsole.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\n\t\treturn this.applyToBufferAttribute( buffer );\n\n\t},\n\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\tconsole.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );\n\n\t}\n\n} );\n\nObject.assign( Matrix4.prototype, {\n\n\textractPosition: function ( m ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t\treturn this.copyPosition( m );\n\n\t},\n\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\tconsole.warn( \"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\treturn this.toArray( array, offset );\n\n\t},\n\tgetPosition: function () {\n\n\t\tvar v1;\n\n\t\treturn function getPosition() {\n\n\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\t\t\treturn v1.setFromMatrixColumn( this, 3 );\n\n\t\t};\n\n\t}(),\n\tsetRotationFromQuaternion: function ( q ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t\treturn this.makeRotationFromQuaternion( q );\n\n\t},\n\tmultiplyToArray: function () {\n\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );\n\n\t},\n\tmultiplyVector3: function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\treturn vector.applyMatrix4( this );\n\n\t},\n\tmultiplyVector4: function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\treturn vector.applyMatrix4( this );\n\n\t},\n\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\tconsole.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );\n\n\t},\n\trotateAxis: function ( v ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t\tv.transformDirection( this );\n\n\t},\n\tcrossVector: function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\treturn vector.applyMatrix4( this );\n\n\t},\n\ttranslate: function () {\n\n\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\n\t},\n\trotateX: function () {\n\n\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\n\t},\n\trotateY: function () {\n\n\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\n\t},\n\trotateZ: function () {\n\n\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\n\t},\n\trotateByAxis: function () {\n\n\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\n\t},\n\tapplyToBuffer: function ( buffer /*, offset, length */ ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\n\t\treturn this.applyToBufferAttribute( buffer );\n\n\t},\n\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\tconsole.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );\n\n\t},\n\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );\n\t\treturn this.makePerspective( left, right, top, bottom, near, far );\n\n\t}\n\n} );\n\nPlane.prototype.isIntersectionLine = function ( line ) {\n\n\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\treturn this.intersectsLine( line );\n\n};\n\nQuaternion.prototype.multiplyVector3 = function ( vector ) {\n\n\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\treturn vector.applyQuaternion( this );\n\n};\n\nObject.assign( Ray.prototype, {\n\n\tisIntersectionBox: function ( box ) {\n\n\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\treturn this.intersectsBox( box );\n\n\t},\n\tisIntersectionPlane: function ( plane ) {\n\n\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t\treturn this.intersectsPlane( plane );\n\n\t},\n\tisIntersectionSphere: function ( sphere ) {\n\n\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\treturn this.intersectsSphere( sphere );\n\n\t}\n\n} );\n\nObject.assign( Triangle.prototype, {\n\n\tarea: function () {\n\n\t\tconsole.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );\n\t\treturn this.getArea();\n\n\t},\n\tbarycoordFromPoint: function ( point, target ) {\n\n\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\t\treturn this.getBarycoord( point, target );\n\n\t},\n\tmidpoint: function ( target ) {\n\n\t\tconsole.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );\n\t\treturn this.getMidpoint( target );\n\n\t},\n\tnormal: function ( target ) {\n\n\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\t\treturn this.getNormal( target );\n\n\t},\n\tplane: function ( target ) {\n\n\t\tconsole.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );\n\t\treturn this.getPlane( target );\n\n\t}\n\n} );\n\nObject.assign( Triangle, {\n\n\tbarycoordFromPoint: function ( point, a, b, c, target ) {\n\n\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\t\treturn Triangle.getBarycoord( point, a, b, c, target );\n\n\t},\n\tnormal: function ( a, b, c, target ) {\n\n\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\t\treturn Triangle.getNormal( a, b, c, target );\n\n\t}\n\n} );\n\nObject.assign( Shape.prototype, {\n\n\textractAllPoints: function ( divisions ) {\n\n\t\tconsole.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );\n\t\treturn this.extractPoints( divisions );\n\n\t},\n\textrude: function ( options ) {\n\n\t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n\t\treturn new ExtrudeGeometry( this, options );\n\n\t},\n\tmakeGeometry: function ( options ) {\n\n\t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n\t\treturn new ShapeGeometry( this, options );\n\n\t}\n\n} );\n\nObject.assign( Vector2.prototype, {\n\n\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\tconsole.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t},\n\tdistanceToManhattan: function ( v ) {\n\n\t\tconsole.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\treturn this.manhattanDistanceTo( v );\n\n\t},\n\tlengthManhattan: function () {\n\n\t\tconsole.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\treturn this.manhattanLength();\n\n\t}\n\n} );\n\nObject.assign( Vector3.prototype, {\n\n\tsetEulerFromRotationMatrix: function () {\n\n\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\n\t},\n\tsetEulerFromQuaternion: function () {\n\n\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\n\t},\n\tgetPositionFromMatrix: function ( m ) {\n\n\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t\treturn this.setFromMatrixPosition( m );\n\n\t},\n\tgetScaleFromMatrix: function ( m ) {\n\n\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t\treturn this.setFromMatrixScale( m );\n\n\t},\n\tgetColumnFromMatrix: function ( index, matrix ) {\n\n\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t\treturn this.setFromMatrixColumn( matrix, index );\n\n\t},\n\tapplyProjection: function ( m ) {\n\n\t\tconsole.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );\n\t\treturn this.applyMatrix4( m );\n\n\t},\n\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\tconsole.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t},\n\tdistanceToManhattan: function ( v ) {\n\n\t\tconsole.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\treturn this.manhattanDistanceTo( v );\n\n\t},\n\tlengthManhattan: function () {\n\n\t\tconsole.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\treturn this.manhattanLength();\n\n\t}\n\n} );\n\nObject.assign( Vector4.prototype, {\n\n\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\tconsole.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t},\n\tlengthManhattan: function () {\n\n\t\tconsole.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\treturn this.manhattanLength();\n\n\t}\n\n} );\n\n//\n\nObject.assign( Geometry.prototype, {\n\n\tcomputeTangents: function () {\n\n\t\tconsole.error( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n\t},\n\tcomputeLineDistances: function () {\n\n\t\tconsole.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );\n\n\t}\n\n} );\n\nObject.assign( Object3D.prototype, {\n\n\tgetChildByName: function ( name ) {\n\n\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t\treturn this.getObjectByName( name );\n\n\t},\n\trenderDepth: function () {\n\n\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\n\t},\n\ttranslate: function ( distance, axis ) {\n\n\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t\treturn this.translateOnAxis( axis, distance );\n\n\t},\n\tgetWorldRotation: function () {\n\n\t\tconsole.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );\n\n\t}\n\n} );\n\nObject.defineProperties( Object3D.prototype, {\n\n\teulerOrder: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\treturn this.rotation.order;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\tthis.rotation.order = value;\n\n\t\t}\n\t},\n\tuseQuaternion: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t}\n\t}\n\n} );\n\nObject.defineProperties( LOD.prototype, {\n\n\tobjects: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t\t\treturn this.levels;\n\n\t\t}\n\t}\n\n} );\n\nObject.defineProperty( Skeleton.prototype, 'useVertexTexture', {\n\n\tget: function () {\n\n\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t},\n\tset: function () {\n\n\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t}\n\n} );\n\nObject.defineProperty( Curve.prototype, '__arcLengthDivisions', {\n\n\tget: function () {\n\n\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\treturn this.arcLengthDivisions;\n\n\t},\n\tset: function ( value ) {\n\n\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\tthis.arcLengthDivisions = value;\n\n\t}\n\n} );\n\n//\n\nPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\n\tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n\tthis.setFocalLength( focalLength );\n\n};\n\n//\n\nObject.defineProperties( Light.prototype, {\n\tonlyShadow: {\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\n\t\t}\n\t},\n\tshadowCameraFov: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\tthis.shadow.camera.fov = value;\n\n\t\t}\n\t},\n\tshadowCameraLeft: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\tthis.shadow.camera.left = value;\n\n\t\t}\n\t},\n\tshadowCameraRight: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\tthis.shadow.camera.right = value;\n\n\t\t}\n\t},\n\tshadowCameraTop: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\tthis.shadow.camera.top = value;\n\n\t\t}\n\t},\n\tshadowCameraBottom: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\tthis.shadow.camera.bottom = value;\n\n\t\t}\n\t},\n\tshadowCameraNear: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\tthis.shadow.camera.near = value;\n\n\t\t}\n\t},\n\tshadowCameraFar: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\tthis.shadow.camera.far = value;\n\n\t\t}\n\t},\n\tshadowCameraVisible: {\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\n\t\t}\n\t},\n\tshadowBias: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\tthis.shadow.bias = value;\n\n\t\t}\n\t},\n\tshadowDarkness: {\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\n\t\t}\n\t},\n\tshadowMapWidth: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\tthis.shadow.mapSize.width = value;\n\n\t\t}\n\t},\n\tshadowMapHeight: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\tthis.shadow.mapSize.height = value;\n\n\t\t}\n\t}\n} );\n\n//\n\nObject.defineProperties( BufferAttribute.prototype, {\n\n\tlength: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );\n\t\t\treturn this.array.length;\n\n\t\t}\n\t},\n\tcopyIndicesArray: function ( /* indices */ ) {\n\n\t\tconsole.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );\n\n\t}\n\n} );\n\nObject.assign( BufferGeometry.prototype, {\n\n\taddIndex: function ( index ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t\tthis.setIndex( index );\n\n\t},\n\taddDrawCall: function ( start, count, indexOffset ) {\n\n\t\tif ( indexOffset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\n\t\t}\n\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t\tthis.addGroup( start, count );\n\n\t},\n\tclearDrawCalls: function () {\n\n\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t\tthis.clearGroups();\n\n\t},\n\tcomputeTangents: function () {\n\n\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\n\t},\n\tcomputeOffsets: function () {\n\n\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\n\t}\n\n} );\n\nObject.defineProperties( BufferGeometry.prototype, {\n\n\tdrawcalls: {\n\t\tget: function () {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\treturn this.groups;\n\n\t\t}\n\t},\n\toffsets: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\treturn this.groups;\n\n\t\t}\n\t}\n\n} );\n\n//\n\nObject.defineProperties( Uniform.prototype, {\n\n\tdynamic: {\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );\n\n\t\t}\n\t},\n\tonUpdate: {\n\t\tvalue: function () {\n\n\t\t\tconsole.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\n\t\t\treturn this;\n\n\t\t}\n\t}\n\n} );\n\n//\n\nObject.defineProperties( Material.prototype, {\n\n\twrapAround: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t}\n\t},\n\twrapRGB: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .wrapRGB has been removed.' );\n\t\t\treturn new Color();\n\n\t\t}\n\t},\n\n\tshading: {\n\t\tget: function () {\n\n\t\t\tconsole.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\tthis.flatShading = ( value === FlatShading );\n\n\t\t}\n\t}\n\n} );\n\nObject.defineProperties( MeshPhongMaterial.prototype, {\n\n\tmetal: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t\t\treturn false;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\n\t\t}\n\t}\n\n} );\n\nObject.defineProperties( ShaderMaterial.prototype, {\n\n\tderivatives: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\treturn this.extensions.derivatives;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\tthis.extensions.derivatives = value;\n\n\t\t}\n\t}\n\n} );\n\n//\n\nObject.assign( WebGLRenderer.prototype, {\n\n\tgetCurrentRenderTarget: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );\n\t\treturn this.getRenderTarget();\n\n\t},\n\n\tgetMaxAnisotropy: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );\n\t\treturn this.capabilities.getMaxAnisotropy();\n\n\t},\n\n\tgetPrecision: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );\n\t\treturn this.capabilities.precision;\n\n\t},\n\n\tresetGLState: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );\n\t\treturn this.state.reset();\n\n\t},\n\n\tsupportsFloatTextures: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t\treturn this.extensions.get( 'OES_texture_float' );\n\n\t},\n\tsupportsHalfFloatTextures: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t\treturn this.extensions.get( 'OES_texture_half_float' );\n\n\t},\n\tsupportsStandardDerivatives: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\n\t},\n\tsupportsCompressedTextureS3TC: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t},\n\tsupportsCompressedTexturePVRTC: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t},\n\tsupportsBlendMinMax: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\n\t},\n\tsupportsVertexTextures: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );\n\t\treturn this.capabilities.vertexTextures;\n\n\t},\n\tsupportsInstancedArrays: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\n\t},\n\tenableScissorTest: function ( boolean ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t\tthis.setScissorTest( boolean );\n\n\t},\n\tinitMaterial: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\n\t},\n\taddPrePlugin: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\n\t},\n\taddPostPlugin: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\n\t},\n\tupdateShadowMap: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\n\t},\n\tsetFaceCulling: function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );\n\n\t}\n\n} );\n\nObject.defineProperties( WebGLRenderer.prototype, {\n\n\tshadowMapEnabled: {\n\t\tget: function () {\n\n\t\t\treturn this.shadowMap.enabled;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\tthis.shadowMap.enabled = value;\n\n\t\t}\n\t},\n\tshadowMapType: {\n\t\tget: function () {\n\n\t\t\treturn this.shadowMap.type;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\tthis.shadowMap.type = value;\n\n\t\t}\n\t},\n\tshadowMapCullFace: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\treturn undefined;\n\n\t\t},\n\t\tset: function ( /* value */ ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t}\n\t}\n} );\n\nObject.defineProperties( WebGLShadowMap.prototype, {\n\n\tcullFace: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\treturn undefined;\n\n\t\t},\n\t\tset: function ( /* cullFace */ ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t}\n\t},\n\trenderReverseSided: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\t\t\treturn undefined;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t}\n\t},\n\trenderSingleSided: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\t\t\treturn undefined;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t}\n\t}\n\n} );\n\n//\n\nObject.defineProperties( WebGLRenderTarget.prototype, {\n\n\twrapS: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\treturn this.texture.wrapS;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\tthis.texture.wrapS = value;\n\n\t\t}\n\t},\n\twrapT: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\treturn this.texture.wrapT;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\tthis.texture.wrapT = value;\n\n\t\t}\n\t},\n\tmagFilter: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\treturn this.texture.magFilter;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\tthis.texture.magFilter = value;\n\n\t\t}\n\t},\n\tminFilter: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\treturn this.texture.minFilter;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\tthis.texture.minFilter = value;\n\n\t\t}\n\t},\n\tanisotropy: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\treturn this.texture.anisotropy;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\tthis.texture.anisotropy = value;\n\n\t\t}\n\t},\n\toffset: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\treturn this.texture.offset;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\tthis.texture.offset = value;\n\n\t\t}\n\t},\n\trepeat: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\treturn this.texture.repeat;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\tthis.texture.repeat = value;\n\n\t\t}\n\t},\n\tformat: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\treturn this.texture.format;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\tthis.texture.format = value;\n\n\t\t}\n\t},\n\ttype: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\treturn this.texture.type;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\tthis.texture.type = value;\n\n\t\t}\n\t},\n\tgenerateMipmaps: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\treturn this.texture.generateMipmaps;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\tthis.texture.generateMipmaps = value;\n\n\t\t}\n\t}\n\n} );\n\n//\n\nObject.defineProperties( WebVRManager.prototype, {\n\n\tstanding: {\n\t\tset: function ( /* value */ ) {\n\n\t\t\tconsole.warn( 'THREE.WebVRManager: .standing has been removed.' );\n\n\t\t}\n\t}\n\n} );\n\n//\n\nAudio.prototype.load = function ( file ) {\n\n\tconsole.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );\n\tvar scope = this;\n\tvar audioLoader = new AudioLoader();\n\taudioLoader.load( file, function ( buffer ) {\n\n\t\tscope.setBuffer( buffer );\n\n\t} );\n\treturn this;\n\n};\n\nAudioAnalyser.prototype.getData = function () {\n\n\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\treturn this.getFrequencyData();\n\n};\n\n//\n\nCubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {\n\n\tconsole.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );\n\treturn this.update( renderer, scene );\n\n};\n\n//\n\nvar GeometryUtils = {\n\n\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\t\tvar matrix;\n\n\t\tif ( geometry2.isMesh ) {\n\n\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n\t\t\tmatrix = geometry2.matrix;\n\t\t\tgeometry2 = geometry2.geometry;\n\n\t\t}\n\n\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n\t},\n\n\tcenter: function ( geometry ) {\n\n\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t\treturn geometry.center();\n\n\t}\n\n};\n\nvar ImageUtils = {\n\n\tcrossOrigin: undefined,\n\n\tloadTexture: function ( url, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n\t\tvar loader = new TextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n\t\tif ( mapping ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t},\n\n\tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n\t\tvar loader = new CubeTextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n\t\tif ( mapping ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t},\n\n\tloadCompressedTexture: function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n\t},\n\n\tloadCompressedTextureCube: function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n\t}\n\n};\n\n//\n\nfunction Projector() {\n\n\tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\n\n\tthis.projectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\tvector.project( camera );\n\n\t};\n\n\tthis.unprojectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\tvector.unproject( camera );\n\n\t};\n\n\tthis.pickingRay = function () {\n\n\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n\t};\n\n}\n\n//\n\nfunction CanvasRenderer() {\n\n\tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\n\n\tthis.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\tthis.clear = function () {};\n\tthis.render = function () {};\n\tthis.setClearColor = function () {};\n\tthis.setSize = function () {};\n\n}\n\n//\n\nvar SceneUtils = {\n\n\tcreateMultiMaterialObject: function ( /* geometry, materials */ ) {\n\n\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\n\n\t},\n\n\tdetach: function ( /* child, parent, scene */ ) {\n\n\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\n\n\t},\n\n\tattach: function ( /* child, scene, parent */ ) {\n\n\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\n\n\t}\n\n};\n\n//\n\nfunction LensFlare() {\n\n\tconsole.error( 'THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js' );\n\n}\n\nexport { WebGLRenderTargetCube, WebGLRenderTarget, WebGLRenderer, ShaderLib, UniformsLib, UniformsUtils, ShaderChunk, FogExp2, Fog, Scene, Sprite, LOD, SkinnedMesh, Skeleton, Bone, Mesh, LineSegments, LineLoop, Line, Points, Group, VideoTexture, DataTexture, CompressedTexture, CubeTexture, CanvasTexture, DepthTexture, Texture, CompressedTextureLoader, DataTextureLoader, CubeTextureLoader, TextureLoader, ObjectLoader, MaterialLoader, BufferGeometryLoader, DefaultLoadingManager, LoadingManager, JSONLoader, ImageLoader, ImageBitmapLoader, FontLoader, FileLoader, Loader, LoaderUtils, Cache, AudioLoader, SpotLightShadow, SpotLight, PointLight, RectAreaLight, HemisphereLight, DirectionalLightShadow, DirectionalLight, AmbientLight, LightShadow, Light, StereoCamera, PerspectiveCamera, OrthographicCamera, CubeCamera, ArrayCamera, Camera, AudioListener, PositionalAudio, AudioContext, AudioAnalyser, Audio, VectorKeyframeTrack, StringKeyframeTrack, QuaternionKeyframeTrack, NumberKeyframeTrack, ColorKeyframeTrack, BooleanKeyframeTrack, PropertyMixer, PropertyBinding, KeyframeTrack, AnimationUtils, AnimationObjectGroup, AnimationMixer, AnimationClip, Uniform, InstancedBufferGeometry, BufferGeometry, Geometry, InterleavedBufferAttribute, InstancedInterleavedBuffer, InterleavedBuffer, InstancedBufferAttribute, Face3, Object3D, Raycaster, Layers, EventDispatcher, Clock, QuaternionLinearInterpolant, LinearInterpolant, DiscreteInterpolant, CubicInterpolant, Interpolant, Triangle, _Math as Math, Spherical, Cylindrical, Plane, Frustum, Sphere, Ray, Matrix4, Matrix3, Box3, Box2, Line3, Euler, Vector4, Vector3, Vector2, Quaternion, Color, ImmediateRenderObject, VertexNormalsHelper, SpotLightHelper, SkeletonHelper, PointLightHelper, RectAreaLightHelper, HemisphereLightHelper, GridHelper, PolarGridHelper, FaceNormalsHelper, DirectionalLightHelper, CameraHelper, BoxHelper, Box3Helper, PlaneHelper, ArrowHelper, AxesHelper, Shape, Path, ShapePath, Font, CurvePath, Curve, ShapeUtils, WebGLUtils, WireframeGeometry, ParametricGeometry, ParametricBufferGeometry, TetrahedronGeometry, TetrahedronBufferGeometry, OctahedronGeometry, OctahedronBufferGeometry, IcosahedronGeometry, IcosahedronBufferGeometry, DodecahedronGeometry, DodecahedronBufferGeometry, PolyhedronGeometry, PolyhedronBufferGeometry, TubeGeometry, TubeBufferGeometry, TorusKnotGeometry, TorusKnotBufferGeometry, TorusGeometry, TorusBufferGeometry, TextGeometry, TextBufferGeometry, SphereGeometry, SphereBufferGeometry, RingGeometry, RingBufferGeometry, PlaneGeometry, PlaneBufferGeometry, LatheGeometry, LatheBufferGeometry, ShapeGeometry, ShapeBufferGeometry, ExtrudeGeometry, ExtrudeBufferGeometry, EdgesGeometry, ConeGeometry, ConeBufferGeometry, CylinderGeometry, CylinderBufferGeometry, CircleGeometry, CircleBufferGeometry, BoxGeometry, BoxBufferGeometry, ShadowMaterial, SpriteMaterial, RawShaderMaterial, ShaderMaterial, PointsMaterial, MeshPhysicalMaterial, MeshStandardMaterial, MeshPhongMaterial, MeshToonMaterial, MeshNormalMaterial, MeshLambertMaterial, MeshDepthMaterial, MeshDistanceMaterial, MeshBasicMaterial, LineDashedMaterial, LineBasicMaterial, Material, Float64BufferAttribute, Float32BufferAttribute, Uint32BufferAttribute, Int32BufferAttribute, Uint16BufferAttribute, Int16BufferAttribute, Uint8ClampedBufferAttribute, Uint8BufferAttribute, Int8BufferAttribute, BufferAttribute, ArcCurve, CatmullRomCurve3, CubicBezierCurve, CubicBezierCurve3, EllipseCurve, LineCurve, LineCurve3, QuadraticBezierCurve, QuadraticBezierCurve3, SplineCurve, REVISION, MOUSE, CullFaceNone, CullFaceBack, CullFaceFront, CullFaceFrontBack, FrontFaceDirectionCW, FrontFaceDirectionCCW, BasicShadowMap, PCFShadowMap, PCFSoftShadowMap, FrontSide, BackSide, DoubleSide, FlatShading, SmoothShading, NoColors, FaceColors, VertexColors, NoBlending, NormalBlending, AdditiveBlending, SubtractiveBlending, MultiplyBlending, CustomBlending, AddEquation, SubtractEquation, ReverseSubtractEquation, MinEquation, MaxEquation, ZeroFactor, OneFactor, SrcColorFactor, OneMinusSrcColorFactor, SrcAlphaFactor, OneMinusSrcAlphaFactor, DstAlphaFactor, OneMinusDstAlphaFactor, DstColorFactor, OneMinusDstColorFactor, SrcAlphaSaturateFactor, NeverDepth, AlwaysDepth, LessDepth, LessEqualDepth, EqualDepth, GreaterEqualDepth, GreaterDepth, NotEqualDepth, MultiplyOperation, MixOperation, AddOperation, NoToneMapping, LinearToneMapping, ReinhardToneMapping, Uncharted2ToneMapping, CineonToneMapping, UVMapping, CubeReflectionMapping, CubeRefractionMapping, EquirectangularReflectionMapping, EquirectangularRefractionMapping, SphericalReflectionMapping, CubeUVReflectionMapping, CubeUVRefractionMapping, RepeatWrapping, ClampToEdgeWrapping, MirroredRepeatWrapping, NearestFilter, NearestMipMapNearestFilter, NearestMipMapLinearFilter, LinearFilter, LinearMipMapNearestFilter, LinearMipMapLinearFilter, UnsignedByteType, ByteType, ShortType, UnsignedShortType, IntType, UnsignedIntType, FloatType, HalfFloatType, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedShort565Type, UnsignedInt248Type, AlphaFormat, RGBFormat, RGBAFormat, LuminanceFormat, LuminanceAlphaFormat, RGBEFormat, DepthFormat, DepthStencilFormat, RGB_S3TC_DXT1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGB_PVRTC_4BPPV1_Format, RGB_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_PVRTC_2BPPV1_Format, RGB_ETC1_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_10x10_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, LoopOnce, LoopRepeat, LoopPingPong, InterpolateDiscrete, InterpolateLinear, InterpolateSmooth, ZeroCurvatureEnding, ZeroSlopeEnding, WrapAroundEnding, TrianglesDrawMode, TriangleStripDrawMode, TriangleFanDrawMode, LinearEncoding, sRGBEncoding, GammaEncoding, RGBEEncoding, LogLuvEncoding, RGBM7Encoding, RGBM16Encoding, RGBDEncoding, BasicDepthPacking, RGBADepthPacking, BoxGeometry as CubeGeometry, Face4, LineStrip, LinePieces, MeshFaceMaterial, MultiMaterial, PointCloud, Particle, ParticleSystem, PointCloudMaterial, ParticleBasicMaterial, ParticleSystemMaterial, Vertex, DynamicBufferAttribute, Int8Attribute, Uint8Attribute, Uint8ClampedAttribute, Int16Attribute, Uint16Attribute, Int32Attribute, Uint32Attribute, Float32Attribute, Float64Attribute, ClosedSplineCurve3, SplineCurve3, Spline, AxisHelper, BoundingBoxHelper, EdgesHelper, WireframeHelper, XHRLoader, BinaryTextureLoader, GeometryUtils, ImageUtils, Projector, CanvasRenderer, SceneUtils, LensFlare };\n","import {WebGLRenderer, OrthographicCamera, Scene, Vector3} from 'three';\nimport {EffectComposer, RenderPass, ShaderPass, BleachBypassShader, VerticalBlurShader} from 'three-addons';\n\nimport SeedScene from './objects/Scene';\n\nconst {innerHeight, innerWidth} = window;\n\n\nconst scene = new Scene();\nconst camera = new OrthographicCamera(innerWidth / -2, innerWidth / 2, innerHeight / 2, innerHeight / - 2, -50, 50);\ncamera.zoom = 2;\nconst renderer = new WebGLRenderer({antialias: true});\nconst seedScene = new SeedScene();\n\n// scene\nscene.add(seedScene);\n\n// camera\ncamera.position.set(0,1.5,-20);\ncamera.lookAt(new Vector3(0,0,0));\n\n// renderer\nrenderer.setPixelRatio(window.devicePixelRatio);\nrenderer.setClearColor(0x7ec0ee, 1);\nrenderer.shadowMap.enabled = true;\n\n// composer\nconst composer = new EffectComposer(renderer);\ncomposer.addPass( new RenderPass(scene, camera));\n\nconst bleachPass = new ShaderPass(BleachBypassShader);\nbleachPass.renderToScreen = true;\nbleachPass.enabled = false;\ncomposer.addPass(bleachPass);\n\nconst blurPass = new ShaderPass(VerticalBlurShader);\nblurPass.renderToScreen = true;\nblurPass.enabled = false;\ncomposer.addPass(blurPass);\n\n// render loop\nconst onAnimationFrameHandler = (timeStamp) => {\n  if (seedScene.playing && seedScene.checkForLose() || seedScene.lose) {\n    bleachPass.enabled = true;\n    composer.render();\n\n    seedScene.playing = false;\n    loseBlock.style.display = 'block';\n  } else if (Math.abs(seedScene.speed) < 0.01 && seedScene.checkForWin()) {\n    blurPass.enabled = true;\n    composer.render();\n\n    seedScene.speed = 0;\n    seedScene.playing = false;\n    winBlock.style.display = 'block';\n  } else {\n    renderer.render(scene, camera);\n  }\n  seedScene.update && seedScene.update(timeStamp);\n  window.requestAnimationFrame(onAnimationFrameHandler);\n};\nwindow.requestAnimationFrame(onAnimationFrameHandler);\n\n// resize\nconst windowResizeHandler = () => {\n  const { innerHeight, innerWidth } = window;\n  renderer.setSize(innerWidth, innerHeight);\n  camera.aspect = innerWidth / innerHeight;\n  camera.updateProjectionMatrix();\n};\nwindowResizeHandler();\nwindow.addEventListener('resize', windowResizeHandler);\n\n// dom\ndocument.body.style.margin = 0;\ndocument.body.style.overflow = 'hidden';\ndocument.body.appendChild(renderer.domElement);\n\nconst overlayCss = `\n  display: none;\n  position: absolute;\n  bottom: 45%;\n  width: 100%;\n  text-align: center;\n  font-size: 36px;\n  color: white;\n`;\n\nconst winBlock = document.createElement('div');\nwinBlock.innerText = 'Congratulations, this game is yours!';\nwinBlock.style.cssText = overlayCss;\ndocument.body.appendChild(winBlock);\n\nconst loseBlock = document.createElement('div');\nloseBlock.innerText = 'Sorry but you are lose ;(';\nloseBlock.style.cssText = overlayCss;\ndocument.body.appendChild(loseBlock);\n\n\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.THREE_ADDONS=t():e.THREE_ADDONS=t()}(this,function(){return function(e){function t(i){if(r[i])return r[i].exports;var n=r[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,t),n.l=!0,n.exports}var r={};return t.m=e,t.c=r,t.d=function(e,r,i){t.o(e,r)||Object.defineProperty(e,r,{configurable:!1,enumerable:!0,get:i})},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,\"a\",r),r},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p=\"\",t(t.s=1)}([function(e,t,r){\"use strict\";function i(){}function n(e,t){this.x=e||0,this.y=t||0}function o(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error(\"THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.\")}function a(e,t,r,i){this._x=e||0,this._y=t||0,this._z=r||0,this._w=void 0!==i?i:1}function s(e,t,r){this.x=e||0,this.y=t||0,this.z=r||0}function c(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error(\"THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.\")}function l(e,t,r,i,o,a,s,u,h,d){Object.defineProperty(this,\"id\",{value:Bs++}),this.uuid=zs.generateUUID(),this.name=\"\",this.image=void 0!==e?e:l.DEFAULT_IMAGE,this.mipmaps=[],this.mapping=void 0!==t?t:l.DEFAULT_MAPPING,this.wrapS=void 0!==r?r:La,this.wrapT=void 0!==i?i:La,this.magFilter=void 0!==o?o:Ua,this.minFilter=void 0!==a?a:Oa,this.anisotropy=void 0!==h?h:1,this.format=void 0!==s?s:Ja,this.type=void 0!==u?u:Na,this.offset=new n(0,0),this.repeat=new n(1,1),this.center=new n(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new c,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=void 0!==d?d:Cs,this.version=0,this.onUpdate=null}function u(e,t,r,i){this.x=e||0,this.y=t||0,this.z=r||0,this.w=void 0!==i?i:1}function h(e,t,r){this.width=e,this.height=t,this.scissor=new u(0,0,e,t),this.scissorTest=!1,this.viewport=new u(0,0,e,t),r=r||{},void 0===r.minFilter&&(r.minFilter=Ua),this.texture=new l(void 0,void 0,r.wrapS,r.wrapT,r.magFilter,r.minFilter,r.format,r.type,r.anisotropy,r.encoding),this.depthBuffer=void 0===r.depthBuffer||r.depthBuffer,this.stencilBuffer=void 0===r.stencilBuffer||r.stencilBuffer,this.depthTexture=void 0!==r.depthTexture?r.depthTexture:null}function d(e,t,r){h.call(this,e,t,r),this.activeCubeFace=0,this.activeMipMapLevel=0}function p(e,t,r,i,n,o,a,s,c,u,h,d){l.call(this,null,o,a,s,c,u,i,n,h,d),this.image={data:e,width:t,height:r},this.magFilter=void 0!==c?c:Ra,this.minFilter=void 0!==u?u:Ra,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}function f(e,t){this.min=void 0!==e?e:new s(1/0,1/0,1/0),this.max=void 0!==t?t:new s(-1/0,-1/0,-1/0)}function m(e,t){this.center=void 0!==e?e:new s,this.radius=void 0!==t?t:0}function v(e,t){this.normal=void 0!==e?e:new s(1,0,0),this.constant=void 0!==t?t:0}function g(e,t,r,i,n,o){this.planes=[void 0!==e?e:new v,void 0!==t?t:new v,void 0!==r?r:new v,void 0!==i?i:new v,void 0!==n?n:new v,void 0!==o?o:new v]}function y(e,t,r){return void 0===t&&void 0===r?this.set(e):this.setRGB(e,t,r)}function x(e){function t(t,r){var i=t.array,n=t.dynamic?e.DYNAMIC_DRAW:e.STATIC_DRAW,o=e.createBuffer();e.bindBuffer(r,o),e.bufferData(r,i,n),t.onUploadCallback();var a=e.FLOAT;return i instanceof Float32Array?a=e.FLOAT:i instanceof Float64Array?console.warn(\"THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.\"):i instanceof Uint16Array?a=e.UNSIGNED_SHORT:i instanceof Int16Array?a=e.SHORT:i instanceof Uint32Array?a=e.UNSIGNED_INT:i instanceof Int32Array?a=e.INT:i instanceof Int8Array?a=e.BYTE:i instanceof Uint8Array&&(a=e.UNSIGNED_BYTE),{buffer:o,type:a,bytesPerElement:i.BYTES_PER_ELEMENT,version:t.version}}function r(t,r,i){var n=r.array,o=r.updateRange;e.bindBuffer(i,t),!1===r.dynamic?e.bufferData(i,n,e.STATIC_DRAW):-1===o.count?e.bufferSubData(i,0,n):0===o.count?console.error(\"THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.\"):(e.bufferSubData(i,o.offset*n.BYTES_PER_ELEMENT,n.subarray(o.offset,o.offset+o.count)),o.count=-1)}function i(e){return e.isInterleavedBufferAttribute&&(e=e.data),a.get(e)}function n(t){t.isInterleavedBufferAttribute&&(t=t.data);var r=a.get(t);r&&(e.deleteBuffer(r.buffer),a.delete(t))}function o(e,i){e.isInterleavedBufferAttribute&&(e=e.data);var n=a.get(e);void 0===n?a.set(e,t(e,i)):n.version<e.version&&(r(n.buffer,e,i),n.version=e.version)}var a=new WeakMap;return{get:i,remove:n,update:o}}function _(e,t,r,i){this._x=e||0,this._y=t||0,this._z=r||0,this._order=i||_.DefaultOrder}function b(){this.mask=1}function w(){function e(){n.setFromEuler(i,!1)}function t(){i.setFromQuaternion(n,void 0,!1)}Object.defineProperty(this,\"id\",{value:Ws++}),this.uuid=zs.generateUUID(),this.name=\"\",this.type=\"Object3D\",this.parent=null,this.children=[],this.up=w.DefaultUp.clone();var r=new s,i=new _,n=new a,l=new s(1,1,1);i.onChange(e),n.onChange(t),Object.defineProperties(this,{position:{enumerable:!0,value:r},rotation:{enumerable:!0,value:i},quaternion:{enumerable:!0,value:n},scale:{enumerable:!0,value:l},modelViewMatrix:{value:new o},normalMatrix:{value:new c}}),this.matrix=new o,this.matrixWorld=new o,this.matrixAutoUpdate=w.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new b,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.userData={}}function M(){w.call(this),this.type=\"Camera\",this.matrixWorldInverse=new o,this.projectionMatrix=new o}function E(e,t,r,i,n,o){M.call(this),this.type=\"OrthographicCamera\",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=r,this.bottom=i,this.near=void 0!==n?n:.1,this.far=void 0!==o?o:2e3,this.updateProjectionMatrix()}function S(e,t,r,i,n,o){this.a=e,this.b=t,this.c=r,this.normal=i&&i.isVector3?i:new s,this.vertexNormals=Array.isArray(i)?i:[],this.color=n&&n.isColor?n:new y,this.vertexColors=Array.isArray(n)?n:[],this.materialIndex=void 0!==o?o:0}function T(){Object.defineProperty(this,\"id\",{value:Xs+=2}),this.uuid=zs.generateUUID(),this.name=\"\",this.type=\"Geometry\",this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.elementsNeedUpdate=!1,this.verticesNeedUpdate=!1,this.uvsNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.lineDistancesNeedUpdate=!1,this.groupsNeedUpdate=!1}function A(e,t,r){if(Array.isArray(e))throw new TypeError(\"THREE.BufferAttribute: array should be a Typed Array.\");this.name=\"\",this.array=e,this.itemSize=t,this.count=void 0!==e?e.length/t:0,this.normalized=!0===r,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0}function L(e,t,r){A.call(this,new Int8Array(e),t,r)}function C(e,t,r){A.call(this,new Uint8Array(e),t,r)}function R(e,t,r){A.call(this,new Uint8ClampedArray(e),t,r)}function P(e,t,r){A.call(this,new Int16Array(e),t,r)}function D(e,t,r){A.call(this,new Uint16Array(e),t,r)}function U(e,t,r){A.call(this,new Int32Array(e),t,r)}function I(e,t,r){A.call(this,new Uint32Array(e),t,r)}function O(e,t,r){A.call(this,new Float32Array(e),t,r)}function N(e,t,r){A.call(this,new Float64Array(e),t,r)}function F(){this.vertices=[],this.normals=[],this.colors=[],this.uvs=[],this.uvs2=[],this.groups=[],this.morphTargets={},this.skinWeights=[],this.skinIndices=[],this.boundingBox=null,this.boundingSphere=null,this.verticesNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.groupsNeedUpdate=!1}function z(e){if(0===e.length)return-1/0;for(var t=e[0],r=1,i=e.length;r<i;++r)e[r]>t&&(t=e[r]);return t}function B(){Object.defineProperty(this,\"id\",{value:qs+=2}),this.uuid=zs.generateUUID(),this.name=\"\",this.type=\"BufferGeometry\",this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0}}function G(e,t,r,i,n,o){T.call(this),this.type=\"BoxGeometry\",this.parameters={width:e,height:t,depth:r,widthSegments:i,heightSegments:n,depthSegments:o},this.fromBufferGeometry(new H(e,t,r,i,n,o)),this.mergeVertices()}function H(e,t,r,i,n,o){function a(e,t,r,i,n,o,a,m,v,g,y){var x,_,b=o/v,w=a/g,M=o/2,E=a/2,S=m/2,T=v+1,A=g+1,L=0,C=0,R=new s;for(_=0;_<A;_++){var P=_*w-E;for(x=0;x<T;x++){var D=x*b-M;R[e]=D*i,R[t]=P*n,R[r]=S,u.push(R.x,R.y,R.z),R[e]=0,R[t]=0,R[r]=m>0?1:-1,h.push(R.x,R.y,R.z),d.push(x/v),d.push(1-_/g),L+=1}}for(_=0;_<g;_++)for(x=0;x<v;x++){var U=p+x+T*_,I=p+x+T*(_+1),O=p+(x+1)+T*(_+1),N=p+(x+1)+T*_;l.push(U,I,N),l.push(I,O,N),C+=6}c.addGroup(f,C,y),f+=C,p+=L}B.call(this),this.type=\"BoxBufferGeometry\",this.parameters={width:e,height:t,depth:r,widthSegments:i,heightSegments:n,depthSegments:o};var c=this;e=e||1,t=t||1,r=r||1,i=Math.floor(i)||1,n=Math.floor(n)||1,o=Math.floor(o)||1;var l=[],u=[],h=[],d=[],p=0,f=0;a(\"z\",\"y\",\"x\",-1,-1,r,t,e,o,n,0),a(\"z\",\"y\",\"x\",1,-1,r,t,-e,o,n,1),a(\"x\",\"z\",\"y\",1,1,e,r,t,i,o,2),a(\"x\",\"z\",\"y\",1,-1,e,r,-t,i,o,3),a(\"x\",\"y\",\"z\",1,-1,e,t,r,i,n,4),a(\"x\",\"y\",\"z\",-1,-1,e,t,-r,i,n,5),this.setIndex(l),this.addAttribute(\"position\",new O(u,3)),this.addAttribute(\"normal\",new O(h,3)),this.addAttribute(\"uv\",new O(d,2))}function j(e,t,r,i){T.call(this),this.type=\"PlaneGeometry\",this.parameters={width:e,height:t,widthSegments:r,heightSegments:i},this.fromBufferGeometry(new V(e,t,r,i)),this.mergeVertices()}function V(e,t,r,i){B.call(this),this.type=\"PlaneBufferGeometry\",this.parameters={width:e,height:t,widthSegments:r,heightSegments:i},e=e||1,t=t||1;var n,o,a=e/2,s=t/2,c=Math.floor(r)||1,l=Math.floor(i)||1,u=c+1,h=l+1,d=e/c,p=t/l,f=[],m=[],v=[],g=[];for(o=0;o<h;o++){var y=o*p-s;for(n=0;n<u;n++){var x=n*d-a;m.push(x,-y,0),v.push(0,0,1),g.push(n/c),g.push(1-o/l)}}for(o=0;o<l;o++)for(n=0;n<c;n++){var _=n+u*o,b=n+u*(o+1),w=n+1+u*(o+1),M=n+1+u*o;f.push(_,b,M),f.push(b,w,M)}this.setIndex(f),this.addAttribute(\"position\",new O(m,3)),this.addAttribute(\"normal\",new O(v,3)),this.addAttribute(\"uv\",new O(g,2))}function k(){Object.defineProperty(this,\"id\",{value:Ys++}),this.uuid=zs.generateUUID(),this.name=\"\",this.type=\"Material\",this.fog=!0,this.lights=!0,this.blending=Fo,this.side=Ro,this.flatShading=!1,this.vertexColors=Uo,this.opacity=1,this.transparent=!1,this.blendSrc=Ko,this.blendDst=Qo,this.blendEquation=jo,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=sa,this.depthTest=!0,this.depthWrite=!0,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaTest=0,this.premultipliedAlpha=!1,this.overdraw=0,this.visible=!0,this.userData={},this.needsUpdate=!0}function W(e){k.call(this),this.type=\"MeshBasicMaterial\",this.color=new y(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=da,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=\"round\",this.wireframeLinejoin=\"round\",this.skinning=!1,this.morphTargets=!1,this.lights=!1,this.setValues(e)}function X(e){k.call(this),this.type=\"ShaderMaterial\",this.defines={},this.uniforms={},this.vertexShader=\"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\",this.fragmentShader=\"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,void 0!==e&&(void 0!==e.attributes&&console.error(\"THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.\"),this.setValues(e))}function q(e,t){this.origin=void 0!==e?e:new s,this.direction=void 0!==t?t:new s}function Y(e,t){this.start=void 0!==e?e:new s,this.end=void 0!==t?t:new s}function Z(e,t,r){this.a=void 0!==e?e:new s,this.b=void 0!==t?t:new s,this.c=void 0!==r?r:new s}function J(e,t){w.call(this),this.type=\"Mesh\",this.geometry=void 0!==e?e:new B,this.material=void 0!==t?t:new W({color:16777215*Math.random()}),this.drawMode=Ts,this.updateMorphTargets()}function K(e,t,r,i){function n(t,i,n,h){var d=i.background;null===d?o(l,u):d&&d.isColor&&(o(d,1),h=!0),(e.autoClear||h)&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),d&&d.isCubeTexture?(void 0===c&&(c=new J(new H(1,1,1),new X({uniforms:ks.cube.uniforms,vertexShader:ks.cube.vertexShader,fragmentShader:ks.cube.fragmentShader,side:Po,depthTest:!0,depthWrite:!1,fog:!1})),c.geometry.removeAttribute(\"normal\"),c.geometry.removeAttribute(\"uv\"),c.onBeforeRender=function(e,t,r){this.matrixWorld.copyPosition(r.matrixWorld)},r.update(c.geometry)),c.material.uniforms.tCube.value=d,t.push(c,c.geometry,c.material,0,null)):d&&d.isTexture&&(void 0===a&&(a=new E(-1,1,1,-1,0,1),s=new J(new V(2,2),new W({depthTest:!1,depthWrite:!1,fog:!1})),r.update(s.geometry)),s.material.map=d,e.renderBufferDirect(a,null,s.geometry,s.material,s,null))}function o(e,r){t.buffers.color.setClear(e.r,e.g,e.b,r,i)}var a,s,c,l=new y(0),u=0;return{getClearColor:function(){return l},setClearColor:function(e,t){l.set(e),u=void 0!==t?t:1,o(l,u)},getClearAlpha:function(){return u},setClearAlpha:function(e){u=e,o(l,u)},render:n}}function Q(e,t,r){function i(e){a=e}function n(t,i){e.drawArrays(a,t,i),r.update(i,a)}function o(e,i,n){var o=t.get(\"ANGLE_instanced_arrays\");if(null===o)return void console.error(\"THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.\");var s=e.attributes.position;s.isInterleavedBufferAttribute?(n=s.data.count,o.drawArraysInstancedANGLE(a,0,n,e.maxInstancedCount)):o.drawArraysInstancedANGLE(a,i,n,e.maxInstancedCount),r.update(n,a,e.maxInstancedCount)}var a;this.setMode=i,this.render=n,this.renderInstances=o}function $(e,t,r){function i(){if(void 0!==o)return o;var r=t.get(\"EXT_texture_filter_anisotropic\");return o=null!==r?e.getParameter(r.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}function n(t){if(\"highp\"===t){if(e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.HIGH_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.HIGH_FLOAT).precision>0)return\"highp\";t=\"mediump\"}return\"mediump\"===t&&e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.MEDIUM_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.MEDIUM_FLOAT).precision>0?\"mediump\":\"lowp\"}var o,a=void 0!==r.precision?r.precision:\"highp\",s=n(a);s!==a&&(console.warn(\"THREE.WebGLRenderer:\",a,\"not supported, using\",s,\"instead.\"),a=s);var c=!0===r.logarithmicDepthBuffer,l=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),u=e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS),h=e.getParameter(e.MAX_TEXTURE_SIZE),d=e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE),p=e.getParameter(e.MAX_VERTEX_ATTRIBS),f=e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS),m=e.getParameter(e.MAX_VARYING_VECTORS),v=e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS),g=u>0,y=!!t.get(\"OES_texture_float\");return{getMaxAnisotropy:i,getMaxPrecision:n,precision:a,logarithmicDepthBuffer:c,maxTextures:l,maxVertexTextures:u,maxTextureSize:h,maxCubemapSize:d,maxAttributes:p,maxVertexUniforms:f,maxVaryings:m,maxFragmentUniforms:v,vertexTextures:g,floatFragmentTextures:y,floatVertexTextures:g&&y}}function ee(){function e(){u.value!==i&&(u.value=i,u.needsUpdate=n>0),r.numPlanes=n,r.numIntersection=0}function t(e,t,i,n){var o=null!==e?e.length:0,a=null;if(0!==o){if(a=u.value,!0!==n||null===a){var c=i+4*o,h=t.matrixWorldInverse;l.getNormalMatrix(h),(null===a||a.length<c)&&(a=new Float32Array(c));for(var d=0,p=i;d!==o;++d,p+=4)s.copy(e[d]).applyMatrix4(h,l),s.normal.toArray(a,p),a[p+3]=s.constant}u.value=a,u.needsUpdate=!0}return r.numPlanes=o,a}var r=this,i=null,n=0,o=!1,a=!1,s=new v,l=new c,u={value:null,needsUpdate:!1};this.uniform=u,this.numPlanes=0,this.numIntersection=0,this.init=function(e,r,a){var s=0!==e.length||r||0!==n||o;return o=r,i=t(e,a,0),n=e.length,s},this.beginShadows=function(){a=!0,t(null)},this.endShadows=function(){a=!1,e()},this.setState=function(r,s,c,l,h,d){if(!o||null===r||0===r.length||a&&!c)a?t(null):e();else{var p=a?0:n,f=4*p,m=h.clippingState||null;u.value=m,m=t(r,l,f,d);for(var v=0;v!==f;++v)m[v]=i[v];h.clippingState=m,this.numIntersection=s?this.numPlanes:0,this.numPlanes+=p}}}function te(e){var t={};return{get:function(r){if(void 0!==t[r])return t[r];var i;switch(r){case\"WEBGL_depth_texture\":i=e.getExtension(\"WEBGL_depth_texture\")||e.getExtension(\"MOZ_WEBGL_depth_texture\")||e.getExtension(\"WEBKIT_WEBGL_depth_texture\");break;case\"EXT_texture_filter_anisotropic\":i=e.getExtension(\"EXT_texture_filter_anisotropic\")||e.getExtension(\"MOZ_EXT_texture_filter_anisotropic\")||e.getExtension(\"WEBKIT_EXT_texture_filter_anisotropic\");break;case\"WEBGL_compressed_texture_s3tc\":i=e.getExtension(\"WEBGL_compressed_texture_s3tc\")||e.getExtension(\"MOZ_WEBGL_compressed_texture_s3tc\")||e.getExtension(\"WEBKIT_WEBGL_compressed_texture_s3tc\");break;case\"WEBGL_compressed_texture_pvrtc\":i=e.getExtension(\"WEBGL_compressed_texture_pvrtc\")||e.getExtension(\"WEBKIT_WEBGL_compressed_texture_pvrtc\");break;default:i=e.getExtension(r)}return null===i&&console.warn(\"THREE.WebGLRenderer: \"+r+\" extension not supported.\"),t[r]=i,i}}}function re(e,t,r){function i(e){var n=e.target,o=s[n.id];null!==o.index&&t.remove(o.index);for(var a in o.attributes)t.remove(o.attributes[a]);n.removeEventListener(\"dispose\",i),delete s[n.id];var l=c[n.id];l&&(t.remove(l),delete c[n.id]),l=c[o.id],l&&(t.remove(l),delete c[o.id]),r.memory.geometries--}function n(e,t){var n=s[t.id];return n||(t.addEventListener(\"dispose\",i),t.isBufferGeometry?n=t:t.isGeometry&&(void 0===t._bufferGeometry&&(t._bufferGeometry=(new B).setFromObject(e)),n=t._bufferGeometry),s[t.id]=n,r.memory.geometries++,n)}function o(r){var i=r.index,n=r.attributes;null!==i&&t.update(i,e.ELEMENT_ARRAY_BUFFER);for(var o in n)t.update(n[o],e.ARRAY_BUFFER);var a=r.morphAttributes;for(var o in a)for(var s=a[o],c=0,l=s.length;c<l;c++)t.update(s[c],e.ARRAY_BUFFER)}function a(r){var i=c[r.id];if(i)return i;var n=[],o=r.index,a=r.attributes;if(null!==o)for(var s=o.array,l=0,u=s.length;l<u;l+=3){var h=s[l+0],d=s[l+1],p=s[l+2];n.push(h,d,d,p,p,h)}else for(var s=a.position.array,l=0,u=s.length/3-1;l<u;l+=3){var h=l+0,d=l+1,p=l+2;n.push(h,d,d,p,p,h)}return i=new(z(n)>65535?I:D)(n,1),t.update(i,e.ELEMENT_ARRAY_BUFFER),c[r.id]=i,i}var s={},c={};return{get:n,update:o,getWireframeAttribute:a}}function ie(e,t,r){function i(e){s=e}function n(e){c=e.type,l=e.bytesPerElement}function o(t,i){e.drawElements(s,i,c,t*l),r.update(i,s)}function a(e,i,n){var o=t.get(\"ANGLE_instanced_arrays\");if(null===o)return void console.error(\"THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.\");o.drawElementsInstancedANGLE(s,n,c,i*l,e.maxInstancedCount),r.update(n,s,e.maxInstancedCount)}var s,c,l;this.setMode=i,this.setIndex=n,this.render=o,this.renderInstances=a}function ne(e){function t(t,r,i){switch(i=i||1,n.calls++,r){case e.TRIANGLES:n.triangles+=i*(t/3);break;case e.TRIANGLE_STRIP:case e.TRIANGLE_FAN:n.triangles+=i*(t-2);break;case e.LINES:n.lines+=i*(t/2);break;case e.LINE_STRIP:n.lines+=i*(t-1);break;case e.LINE_LOOP:n.lines+=i*t;break;case e.POINTS:n.points+=i*t;break;default:console.error(\"THREE.WebGLInfo: Unknown draw mode:\",r)}}function r(){n.frame++,n.calls=0,n.triangles=0,n.points=0,n.lines=0}var i={geometries:0,textures:0},n={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:i,render:n,programs:null,autoReset:!0,reset:r,update:t}}function oe(e,t){return Math.abs(t[1])-Math.abs(e[1])}function ae(e){function t(t,n,o,a){var s=t.morphTargetInfluences,c=s.length,l=r[n.id];if(void 0===l){l=[];for(var u=0;u<c;u++)l[u]=[u,0];r[n.id]=l}for(var h=o.morphTargets&&n.morphAttributes.position,d=o.morphNormals&&n.morphAttributes.normal,u=0;u<c;u++){var p=l[u];0!==p[1]&&(h&&n.removeAttribute(\"morphTarget\"+u),d&&n.removeAttribute(\"morphNormal\"+u))}for(var u=0;u<c;u++){var p=l[u];p[0]=u,p[1]=s[u]}l.sort(oe);for(var u=0;u<8;u++){var p=l[u];if(p){var f=p[0],m=p[1];if(m){h&&n.addAttribute(\"morphTarget\"+u,h[f]),d&&n.addAttribute(\"morphNormal\"+u,d[f]),i[u]=m;continue}}i[u]=0}a.getUniforms().setValue(e,\"morphTargetInfluences\",i)}var r={},i=new Float32Array(8);return{update:t}}function se(e,t){function r(r){var i=t.render.frame,o=r.geometry,a=e.get(r,o);return n[a.id]!==i&&(o.isGeometry&&a.updateFromObject(r),e.update(a),n[a.id]=i),a}function i(){n={}}var n={};return{update:r,dispose:i}}function ce(e,t,r,i,n,o,a,s,c,u){e=void 0!==e?e:[],t=void 0!==t?t:_a,l.call(this,e,t,r,i,n,o,a,s,c,u),this.flipY=!1}function le(){this.seq=[],this.map={}}function ue(e,t,r){var i=e[0];if(i<=0||i>0)return e;var n=t*r,o=Ks[n];if(void 0===o&&(o=new Float32Array(n),Ks[n]=o),0!==t){i.toArray(o,0);for(var a=1,s=0;a!==t;++a)s+=r,e[a].toArray(o,s)}return o}function he(e,t){var r=Qs[t];void 0===r&&(r=new Int32Array(t),Qs[t]=r);for(var i=0;i!==t;++i)r[i]=e.allocTextureUnit();return r}function de(e,t){e.uniform1f(this.addr,t)}function pe(e,t){e.uniform1i(this.addr,t)}function fe(e,t){void 0===t.x?e.uniform2fv(this.addr,t):e.uniform2f(this.addr,t.x,t.y)}function me(e,t){void 0!==t.x?e.uniform3f(this.addr,t.x,t.y,t.z):void 0!==t.r?e.uniform3f(this.addr,t.r,t.g,t.b):e.uniform3fv(this.addr,t)}function ve(e,t){void 0===t.x?e.uniform4fv(this.addr,t):e.uniform4f(this.addr,t.x,t.y,t.z,t.w)}function ge(e,t){e.uniformMatrix2fv(this.addr,!1,t.elements||t)}function ye(e,t){void 0===t.elements?e.uniformMatrix3fv(this.addr,!1,t):(ec.set(t.elements),e.uniformMatrix3fv(this.addr,!1,ec))}function xe(e,t){void 0===t.elements?e.uniformMatrix4fv(this.addr,!1,t):($s.set(t.elements),e.uniformMatrix4fv(this.addr,!1,$s))}function _e(e,t,r){var i=r.allocTextureUnit();e.uniform1i(this.addr,i),r.setTexture2D(t||Zs,i)}function be(e,t,r){var i=r.allocTextureUnit();e.uniform1i(this.addr,i),r.setTextureCube(t||Js,i)}function we(e,t){e.uniform2iv(this.addr,t)}function Me(e,t){e.uniform3iv(this.addr,t)}function Ee(e,t){e.uniform4iv(this.addr,t)}function Se(e){switch(e){case 5126:return de;case 35664:return fe;case 35665:return me;case 35666:return ve;case 35674:return ge;case 35675:return ye;case 35676:return xe;case 35678:case 36198:return _e;case 35680:return be;case 5124:case 35670:return pe;case 35667:case 35671:return we;case 35668:case 35672:return Me;case 35669:case 35673:return Ee}}function Te(e,t){e.uniform1fv(this.addr,t)}function Ae(e,t){e.uniform1iv(this.addr,t)}function Le(e,t){e.uniform2fv(this.addr,ue(t,this.size,2))}function Ce(e,t){e.uniform3fv(this.addr,ue(t,this.size,3))}function Re(e,t){e.uniform4fv(this.addr,ue(t,this.size,4))}function Pe(e,t){e.uniformMatrix2fv(this.addr,!1,ue(t,this.size,4))}function De(e,t){e.uniformMatrix3fv(this.addr,!1,ue(t,this.size,9))}function Ue(e,t){e.uniformMatrix4fv(this.addr,!1,ue(t,this.size,16))}function Ie(e,t,r){var i=t.length,n=he(r,i);e.uniform1iv(this.addr,n);for(var o=0;o!==i;++o)r.setTexture2D(t[o]||Zs,n[o])}function Oe(e,t,r){var i=t.length,n=he(r,i);e.uniform1iv(this.addr,n);for(var o=0;o!==i;++o)r.setTextureCube(t[o]||Js,n[o])}function Ne(e){switch(e){case 5126:return Te;case 35664:return Le;case 35665:return Ce;case 35666:return Re;case 35674:return Pe;case 35675:return De;case 35676:return Ue;case 35678:return Ie;case 35680:return Oe;case 5124:case 35670:return Ae;case 35667:case 35671:return we;case 35668:case 35672:return Me;case 35669:case 35673:return Ee}}function Fe(e,t,r){this.id=e,this.addr=r,this.setValue=Se(t.type)}function ze(e,t,r){this.id=e,this.addr=r,this.size=t.size,this.setValue=Ne(t.type)}function Be(e){this.id=e,le.call(this)}function Ge(e,t){e.seq.push(t),e.map[t.id]=t}function He(e,t,r){var i=e.name,n=i.length;for(tc.lastIndex=0;;){var o=tc.exec(i),a=tc.lastIndex,s=o[1],c=\"]\"===o[2],l=o[3];if(c&&(s|=0),void 0===l||\"[\"===l&&a+2===n){Ge(r,void 0===l?new Fe(s,e,t):new ze(s,e,t));break}var u=r.map,h=u[s];void 0===h&&(h=new Be(s),Ge(r,h)),r=h}}function je(e,t,r){le.call(this),this.renderer=r;for(var i=e.getProgramParameter(t,e.ACTIVE_UNIFORMS),n=0;n<i;++n){var o=e.getActiveUniform(t,n);He(o,e.getUniformLocation(t,o.name),this)}}function Ve(e){for(var t=e.split(\"\\n\"),r=0;r<t.length;r++)t[r]=r+1+\": \"+t[r];return t.join(\"\\n\")}function ke(e,t,r){var i=e.createShader(t);return e.shaderSource(i,r),e.compileShader(i),!1===e.getShaderParameter(i,e.COMPILE_STATUS)&&console.error(\"THREE.WebGLShader: Shader couldn't compile.\"),\"\"!==e.getShaderInfoLog(i)&&console.warn(\"THREE.WebGLShader: gl.getShaderInfoLog()\",t===e.VERTEX_SHADER?\"vertex\":\"fragment\",e.getShaderInfoLog(i),Ve(r)),i}function We(e){switch(e){case Cs:return[\"Linear\",\"( value )\"];case Rs:return[\"sRGB\",\"( value )\"];case Ds:return[\"RGBE\",\"( value )\"];case Us:return[\"RGBM\",\"( value, 7.0 )\"];case Is:return[\"RGBM\",\"( value, 16.0 )\"];case Os:return[\"RGBD\",\"( value, 256.0 )\"];case Ps:return[\"Gamma\",\"( value, float( GAMMA_FACTOR ) )\"];default:throw new Error(\"unsupported encoding: \"+e)}}function Xe(e,t){var r=We(t);return\"vec4 \"+e+\"( vec4 value ) { return \"+r[0]+\"ToLinear\"+r[1]+\"; }\"}function qe(e,t){var r=We(t);return\"vec4 \"+e+\"( vec4 value ) { return LinearTo\"+r[0]+r[1]+\"; }\"}function Ye(e,t){var r;switch(t){case va:r=\"Linear\";break;case ga:r=\"Reinhard\";break;case ya:r=\"Uncharted2\";break;case xa:r=\"OptimizedCineon\";break;default:throw new Error(\"unsupported toneMapping: \"+t)}return\"vec3 \"+e+\"( vec3 color ) { return \"+r+\"ToneMapping( color ); }\"}function Ze(e,t,r){return e=e||{},[e.derivatives||t.envMapCubeUV||t.bumpMap||t.normalMap||t.flatShading?\"#extension GL_OES_standard_derivatives : enable\":\"\",(e.fragDepth||t.logarithmicDepthBuffer)&&r.get(\"EXT_frag_depth\")?\"#extension GL_EXT_frag_depth : enable\":\"\",e.drawBuffers&&r.get(\"WEBGL_draw_buffers\")?\"#extension GL_EXT_draw_buffers : require\":\"\",(e.shaderTextureLOD||t.envMap)&&r.get(\"EXT_shader_texture_lod\")?\"#extension GL_EXT_shader_texture_lod : enable\":\"\"].filter(Qe).join(\"\\n\")}function Je(e){var t=[];for(var r in e){var i=e[r];!1!==i&&t.push(\"#define \"+r+\" \"+i)}return t.join(\"\\n\")}function Ke(e,t){for(var r={},i=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES),n=0;n<i;n++){var o=e.getActiveAttrib(t,n),a=o.name;r[a]=e.getAttribLocation(t,a)}return r}function Qe(e){return\"\"!==e}function $e(e,t){return e.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights)}function et(e,t){return e.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}function tt(e){function t(e,t){var r=Gs[t];if(void 0===r)throw new Error(\"Can not resolve #include <\"+t+\">\");return tt(r)}var r=/^[ \\t]*#include +<([\\w\\d.]+)>/gm;return e.replace(r,t)}function rt(e){function t(e,t,r,i){for(var n=\"\",o=parseInt(t);o<parseInt(r);o++)n+=i.replace(/\\[ i \\]/g,\"[ \"+o+\" ]\");return n}var r=/#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;return e.replace(r,t)}function it(e,t,r,i,n,o){var a=e.context,s=i.defines,c=n.vertexShader,l=n.fragmentShader,u=\"SHADOWMAP_TYPE_BASIC\";o.shadowMapType===Lo?u=\"SHADOWMAP_TYPE_PCF\":o.shadowMapType===Co&&(u=\"SHADOWMAP_TYPE_PCF_SOFT\");var h=\"ENVMAP_TYPE_CUBE\",d=\"ENVMAP_MODE_REFLECTION\",p=\"ENVMAP_BLENDING_MULTIPLY\";if(o.envMap){switch(i.envMap.mapping){case _a:case ba:h=\"ENVMAP_TYPE_CUBE\";break;case Sa:case Ta:h=\"ENVMAP_TYPE_CUBE_UV\";break;case wa:case Ma:h=\"ENVMAP_TYPE_EQUIREC\";break;case Ea:h=\"ENVMAP_TYPE_SPHERE\"}switch(i.envMap.mapping){case ba:case Ma:d=\"ENVMAP_MODE_REFRACTION\"}switch(i.combine){case da:p=\"ENVMAP_BLENDING_MULTIPLY\";break;case pa:p=\"ENVMAP_BLENDING_MIX\";break;case fa:p=\"ENVMAP_BLENDING_ADD\"}}var f,m,v=e.gammaFactor>0?e.gammaFactor:1,g=Ze(i.extensions,o,t),y=Je(s),x=a.createProgram();i.isRawShaderMaterial?(f=[y].filter(Qe).join(\"\\n\"),f.length>0&&(f+=\"\\n\"),m=[g,y].filter(Qe).join(\"\\n\"),m.length>0&&(m+=\"\\n\")):(f=[\"precision \"+o.precision+\" float;\",\"precision \"+o.precision+\" int;\",\"#define SHADER_NAME \"+n.name,y,o.supportsVertexTextures?\"#define VERTEX_TEXTURES\":\"\",\"#define GAMMA_FACTOR \"+v,\"#define MAX_BONES \"+o.maxBones,o.useFog&&o.fog?\"#define USE_FOG\":\"\",o.useFog&&o.fogExp?\"#define FOG_EXP2\":\"\",o.map?\"#define USE_MAP\":\"\",o.envMap?\"#define USE_ENVMAP\":\"\",o.envMap?\"#define \"+d:\"\",o.lightMap?\"#define USE_LIGHTMAP\":\"\",o.aoMap?\"#define USE_AOMAP\":\"\",o.emissiveMap?\"#define USE_EMISSIVEMAP\":\"\",o.bumpMap?\"#define USE_BUMPMAP\":\"\",o.normalMap?\"#define USE_NORMALMAP\":\"\",o.displacementMap&&o.supportsVertexTextures?\"#define USE_DISPLACEMENTMAP\":\"\",o.specularMap?\"#define USE_SPECULARMAP\":\"\",o.roughnessMap?\"#define USE_ROUGHNESSMAP\":\"\",o.metalnessMap?\"#define USE_METALNESSMAP\":\"\",o.alphaMap?\"#define USE_ALPHAMAP\":\"\",o.vertexColors?\"#define USE_COLOR\":\"\",o.flatShading?\"#define FLAT_SHADED\":\"\",o.skinning?\"#define USE_SKINNING\":\"\",o.useVertexTexture?\"#define BONE_TEXTURE\":\"\",o.morphTargets?\"#define USE_MORPHTARGETS\":\"\",o.morphNormals&&!1===o.flatShading?\"#define USE_MORPHNORMALS\":\"\",o.doubleSided?\"#define DOUBLE_SIDED\":\"\",o.flipSided?\"#define FLIP_SIDED\":\"\",o.shadowMapEnabled?\"#define USE_SHADOWMAP\":\"\",o.shadowMapEnabled?\"#define \"+u:\"\",o.sizeAttenuation?\"#define USE_SIZEATTENUATION\":\"\",o.logarithmicDepthBuffer?\"#define USE_LOGDEPTHBUF\":\"\",o.logarithmicDepthBuffer&&t.get(\"EXT_frag_depth\")?\"#define USE_LOGDEPTHBUF_EXT\":\"\",\"uniform mat4 modelMatrix;\",\"uniform mat4 modelViewMatrix;\",\"uniform mat4 projectionMatrix;\",\"uniform mat4 viewMatrix;\",\"uniform mat3 normalMatrix;\",\"uniform vec3 cameraPosition;\",\"attribute vec3 position;\",\"attribute vec3 normal;\",\"attribute vec2 uv;\",\"#ifdef USE_COLOR\",\"\\tattribute vec3 color;\",\"#endif\",\"#ifdef USE_MORPHTARGETS\",\"\\tattribute vec3 morphTarget0;\",\"\\tattribute vec3 morphTarget1;\",\"\\tattribute vec3 morphTarget2;\",\"\\tattribute vec3 morphTarget3;\",\"\\t#ifdef USE_MORPHNORMALS\",\"\\t\\tattribute vec3 morphNormal0;\",\"\\t\\tattribute vec3 morphNormal1;\",\"\\t\\tattribute vec3 morphNormal2;\",\"\\t\\tattribute vec3 morphNormal3;\",\"\\t#else\",\"\\t\\tattribute vec3 morphTarget4;\",\"\\t\\tattribute vec3 morphTarget5;\",\"\\t\\tattribute vec3 morphTarget6;\",\"\\t\\tattribute vec3 morphTarget7;\",\"\\t#endif\",\"#endif\",\"#ifdef USE_SKINNING\",\"\\tattribute vec4 skinIndex;\",\"\\tattribute vec4 skinWeight;\",\"#endif\",\"\\n\"].filter(Qe).join(\"\\n\"),m=[g,\"precision \"+o.precision+\" float;\",\"precision \"+o.precision+\" int;\",\"#define SHADER_NAME \"+n.name,y,o.alphaTest?\"#define ALPHATEST \"+o.alphaTest:\"\",\"#define GAMMA_FACTOR \"+v,o.useFog&&o.fog?\"#define USE_FOG\":\"\",o.useFog&&o.fogExp?\"#define FOG_EXP2\":\"\",o.map?\"#define USE_MAP\":\"\",o.envMap?\"#define USE_ENVMAP\":\"\",o.envMap?\"#define \"+h:\"\",o.envMap?\"#define \"+d:\"\",o.envMap?\"#define \"+p:\"\",o.lightMap?\"#define USE_LIGHTMAP\":\"\",o.aoMap?\"#define USE_AOMAP\":\"\",o.emissiveMap?\"#define USE_EMISSIVEMAP\":\"\",o.bumpMap?\"#define USE_BUMPMAP\":\"\",o.normalMap?\"#define USE_NORMALMAP\":\"\",o.specularMap?\"#define USE_SPECULARMAP\":\"\",o.roughnessMap?\"#define USE_ROUGHNESSMAP\":\"\",o.metalnessMap?\"#define USE_METALNESSMAP\":\"\",o.alphaMap?\"#define USE_ALPHAMAP\":\"\",o.vertexColors?\"#define USE_COLOR\":\"\",o.gradientMap?\"#define USE_GRADIENTMAP\":\"\",o.flatShading?\"#define FLAT_SHADED\":\"\",o.doubleSided?\"#define DOUBLE_SIDED\":\"\",o.flipSided?\"#define FLIP_SIDED\":\"\",o.shadowMapEnabled?\"#define USE_SHADOWMAP\":\"\",o.shadowMapEnabled?\"#define \"+u:\"\",o.premultipliedAlpha?\"#define PREMULTIPLIED_ALPHA\":\"\",o.physicallyCorrectLights?\"#define PHYSICALLY_CORRECT_LIGHTS\":\"\",o.logarithmicDepthBuffer?\"#define USE_LOGDEPTHBUF\":\"\",o.logarithmicDepthBuffer&&t.get(\"EXT_frag_depth\")?\"#define USE_LOGDEPTHBUF_EXT\":\"\",o.envMap&&t.get(\"EXT_shader_texture_lod\")?\"#define TEXTURE_LOD_EXT\":\"\",\"uniform mat4 viewMatrix;\",\"uniform vec3 cameraPosition;\",o.toneMapping!==ma?\"#define TONE_MAPPING\":\"\",o.toneMapping!==ma?Gs.tonemapping_pars_fragment:\"\",o.toneMapping!==ma?Ye(\"toneMapping\",o.toneMapping):\"\",o.dithering?\"#define DITHERING\":\"\",o.outputEncoding||o.mapEncoding||o.envMapEncoding||o.emissiveMapEncoding?Gs.encodings_pars_fragment:\"\",o.mapEncoding?Xe(\"mapTexelToLinear\",o.mapEncoding):\"\",o.envMapEncoding?Xe(\"envMapTexelToLinear\",o.envMapEncoding):\"\",o.emissiveMapEncoding?Xe(\"emissiveMapTexelToLinear\",o.emissiveMapEncoding):\"\",o.outputEncoding?qe(\"linearToOutputTexel\",o.outputEncoding):\"\",o.depthPacking?\"#define DEPTH_PACKING \"+i.depthPacking:\"\",\"\\n\"].filter(Qe).join(\"\\n\")),c=tt(c),c=$e(c,o),c=et(c,o),l=tt(l),l=$e(l,o),l=et(l,o),c=rt(c),l=rt(l);var _=f+c,b=m+l,w=ke(a,a.VERTEX_SHADER,_),M=ke(a,a.FRAGMENT_SHADER,b);a.attachShader(x,w),a.attachShader(x,M),void 0!==i.index0AttributeName?a.bindAttribLocation(x,0,i.index0AttributeName):!0===o.morphTargets&&a.bindAttribLocation(x,0,\"position\"),a.linkProgram(x);var E=a.getProgramInfoLog(x).trim(),S=a.getShaderInfoLog(w).trim(),T=a.getShaderInfoLog(M).trim(),A=!0,L=!0;!1===a.getProgramParameter(x,a.LINK_STATUS)?(A=!1,console.error(\"THREE.WebGLProgram: shader error: \",a.getError(),\"gl.VALIDATE_STATUS\",a.getProgramParameter(x,a.VALIDATE_STATUS),\"gl.getProgramInfoLog\",E,S,T)):\"\"!==E?console.warn(\"THREE.WebGLProgram: gl.getProgramInfoLog()\",E):\"\"!==S&&\"\"!==T||(L=!1),L&&(this.diagnostics={runnable:A,material:i,programLog:E,vertexShader:{log:S,prefix:f},fragmentShader:{log:T,prefix:m}}),a.deleteShader(w),a.deleteShader(M);var C;this.getUniforms=function(){return void 0===C&&(C=new je(a,x,e)),C};var R;return this.getAttributes=function(){return void 0===R&&(R=Ke(a,x)),R},this.destroy=function(){a.deleteProgram(x),this.program=void 0},Object.defineProperties(this,{uniforms:{get:function(){return console.warn(\"THREE.WebGLProgram: .uniforms is now .getUniforms().\"),this.getUniforms()}},attributes:{get:function(){return console.warn(\"THREE.WebGLProgram: .attributes is now .getAttributes().\"),this.getAttributes()}}}),this.name=n.name,this.id=rc++,this.code=r,this.usedTimes=1,this.program=x,this.vertexShader=w,this.fragmentShader=M,this}function nt(e,t,r){function i(e){var t=e.skeleton,i=t.bones;if(r.floatVertexTextures)return 1024;var n=r.maxVertexUniforms,o=Math.floor((n-20)/4),a=Math.min(o,i.length);return a<i.length?(console.warn(\"THREE.WebGLRenderer: Skeleton has \"+i.length+\" bones. This GPU supports \"+a+\".\"),0):a}function n(e,t){var r;return e?e.isTexture?r=e.encoding:e.isWebGLRenderTarget&&(console.warn(\"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\"),r=e.texture.encoding):r=Cs,r===Cs&&t&&(r=Ps),r}var o=[],a={MeshDepthMaterial:\"depth\",MeshDistanceMaterial:\"distanceRGBA\",MeshNormalMaterial:\"normal\",MeshBasicMaterial:\"basic\",MeshLambertMaterial:\"lambert\",MeshPhongMaterial:\"phong\",MeshToonMaterial:\"phong\",MeshStandardMaterial:\"physical\",MeshPhysicalMaterial:\"physical\",LineBasicMaterial:\"basic\",LineDashedMaterial:\"dashed\",PointsMaterial:\"points\",ShadowMaterial:\"shadow\"},s=[\"precision\",\"supportsVertexTextures\",\"map\",\"mapEncoding\",\"envMap\",\"envMapMode\",\"envMapEncoding\",\"lightMap\",\"aoMap\",\"emissiveMap\",\"emissiveMapEncoding\",\"bumpMap\",\"normalMap\",\"displacementMap\",\"specularMap\",\"roughnessMap\",\"metalnessMap\",\"gradientMap\",\"alphaMap\",\"combine\",\"vertexColors\",\"fog\",\"useFog\",\"fogExp\",\"flatShading\",\"sizeAttenuation\",\"logarithmicDepthBuffer\",\"skinning\",\"maxBones\",\"useVertexTexture\",\"morphTargets\",\"morphNormals\",\"maxMorphTargets\",\"maxMorphNormals\",\"premultipliedAlpha\",\"numDirLights\",\"numPointLights\",\"numSpotLights\",\"numHemiLights\",\"numRectAreaLights\",\"shadowMapEnabled\",\"shadowMapType\",\"toneMapping\",\"physicallyCorrectLights\",\"alphaTest\",\"doubleSided\",\"flipSided\",\"numClippingPlanes\",\"numClipIntersection\",\"depthPacking\",\"dithering\"];this.getParameters=function(t,o,s,c,l,u,h){var d=a[t.type],p=h.isSkinnedMesh?i(h):0,f=r.precision;null!==t.precision&&(f=r.getMaxPrecision(t.precision))!==t.precision&&console.warn(\"THREE.WebGLProgram.getParameters:\",t.precision,\"not supported, using\",f,\"instead.\");var m=e.getRenderTarget();return{shaderID:d,precision:f,supportsVertexTextures:r.vertexTextures,outputEncoding:n(m?m.texture:null,e.gammaOutput),map:!!t.map,mapEncoding:n(t.map,e.gammaInput),envMap:!!t.envMap,envMapMode:t.envMap&&t.envMap.mapping,envMapEncoding:n(t.envMap,e.gammaInput),envMapCubeUV:!!t.envMap&&(t.envMap.mapping===Sa||t.envMap.mapping===Ta),lightMap:!!t.lightMap,aoMap:!!t.aoMap,emissiveMap:!!t.emissiveMap,emissiveMapEncoding:n(t.emissiveMap,e.gammaInput),bumpMap:!!t.bumpMap,normalMap:!!t.normalMap,displacementMap:!!t.displacementMap,roughnessMap:!!t.roughnessMap,metalnessMap:!!t.metalnessMap,specularMap:!!t.specularMap,alphaMap:!!t.alphaMap,gradientMap:!!t.gradientMap,combine:t.combine,vertexColors:t.vertexColors,fog:!!c,useFog:t.fog,fogExp:c&&c.isFogExp2,flatShading:t.flatShading,sizeAttenuation:t.sizeAttenuation,logarithmicDepthBuffer:r.logarithmicDepthBuffer,skinning:t.skinning&&p>0,maxBones:p,useVertexTexture:r.floatVertexTextures,morphTargets:t.morphTargets,morphNormals:t.morphNormals,maxMorphTargets:e.maxMorphTargets,maxMorphNormals:e.maxMorphNormals,numDirLights:o.directional.length,numPointLights:o.point.length,numSpotLights:o.spot.length,numRectAreaLights:o.rectArea.length,numHemiLights:o.hemi.length,numClippingPlanes:l,numClipIntersection:u,dithering:t.dithering,shadowMapEnabled:e.shadowMap.enabled&&h.receiveShadow&&s.length>0,shadowMapType:e.shadowMap.type,toneMapping:e.toneMapping,physicallyCorrectLights:e.physicallyCorrectLights,premultipliedAlpha:t.premultipliedAlpha,alphaTest:t.alphaTest,doubleSided:t.side===Do,flipSided:t.side===Po,depthPacking:void 0!==t.depthPacking&&t.depthPacking}},this.getProgramCode=function(t,r){var i=[];if(r.shaderID?i.push(r.shaderID):(i.push(t.fragmentShader),i.push(t.vertexShader)),void 0!==t.defines)for(var n in t.defines)i.push(n),i.push(t.defines[n]);for(var o=0;o<s.length;o++)i.push(r[s[o]]);return i.push(t.onBeforeCompile.toString()),i.push(e.gammaOutput),i.join()},this.acquireProgram=function(r,i,n,a){for(var s,c=0,l=o.length;c<l;c++){var u=o[c];if(u.code===a){s=u,++s.usedTimes;break}}return void 0===s&&(s=new it(e,t,a,r,i,n),o.push(s)),s},this.releaseProgram=function(e){if(0==--e.usedTimes){var t=o.indexOf(e);o[t]=o[o.length-1],o.pop(),e.destroy()}},this.programs=o}function ot(){function e(e){var t=n.get(e);return void 0===t&&(t={},n.set(e,t)),t}function t(e){n.delete(e)}function r(e,t,r){n.get(e)[t]=r}function i(){n=new WeakMap}var n=new WeakMap;return{get:e,remove:t,update:r,dispose:i}}function at(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.program&&t.program&&e.program!==t.program?e.program.id-t.program.id:e.material.id!==t.material.id?e.material.id-t.material.id:e.z!==t.z?e.z-t.z:e.id-t.id}function st(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function ct(){function e(){n=0,o.length=0,a.length=0}function t(e,t,r,s,c){var l=i[n];void 0===l?(l={id:e.id,object:e,geometry:t,material:r,program:r.program,renderOrder:e.renderOrder,z:s,group:c},i[n]=l):(l.id=e.id,l.object=e,l.geometry=t,l.material=r,l.program=r.program,l.renderOrder=e.renderOrder,l.z=s,l.group=c),(!0===r.transparent?a:o).push(l),n++}function r(){o.length>1&&o.sort(at),a.length>1&&a.sort(st)}var i=[],n=0,o=[],a=[];return{opaque:o,transparent:a,init:e,push:t,sort:r}}function lt(){function e(e,t){var i=e.id+\",\"+t.id,n=r[i];return void 0===n&&(n=new ct,r[i]=n),n}function t(){r={}}var r={};return{get:e,dispose:t}}function ut(){var e={};return{get:function(t){if(void 0!==e[t.id])return e[t.id];var r;switch(t.type){case\"DirectionalLight\":r={direction:new s,color:new y,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new n};break;case\"SpotLight\":r={position:new s,direction:new s,color:new y,distance:0,coneCos:0,penumbraCos:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new n};break;case\"PointLight\":r={position:new s,color:new y,distance:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new n,shadowCameraNear:1,shadowCameraFar:1e3};break;case\"HemisphereLight\":r={direction:new s,skyColor:new y,groundColor:new y};break;case\"RectAreaLight\":r={color:new y,position:new s,halfWidth:new s,halfHeight:new s}}return e[t.id]=r,r}}}function ht(){function e(e,o,s){for(var c=0,l=0,u=0,h=0,d=0,p=0,f=0,m=0,v=s.matrixWorldInverse,g=0,y=e.length;g<y;g++){var x=e[g],_=x.color,b=x.intensity,w=x.distance,M=x.shadow&&x.shadow.map?x.shadow.map.texture:null;if(x.isAmbientLight)c+=_.r*b,l+=_.g*b,u+=_.b*b;else if(x.isDirectionalLight){var E=t.get(x);if(E.color.copy(x.color).multiplyScalar(x.intensity),E.direction.setFromMatrixPosition(x.matrixWorld),i.setFromMatrixPosition(x.target.matrixWorld),E.direction.sub(i),E.direction.transformDirection(v),E.shadow=x.castShadow,x.castShadow){var S=x.shadow;E.shadowBias=S.bias,E.shadowRadius=S.radius,E.shadowMapSize=S.mapSize}r.directionalShadowMap[h]=M,r.directionalShadowMatrix[h]=x.shadow.matrix,r.directional[h]=E,h++}else if(x.isSpotLight){var E=t.get(x);if(E.position.setFromMatrixPosition(x.matrixWorld),E.position.applyMatrix4(v),E.color.copy(_).multiplyScalar(b),E.distance=w,E.direction.setFromMatrixPosition(x.matrixWorld),i.setFromMatrixPosition(x.target.matrixWorld),E.direction.sub(i),E.direction.transformDirection(v),E.coneCos=Math.cos(x.angle),E.penumbraCos=Math.cos(x.angle*(1-x.penumbra)),E.decay=0===x.distance?0:x.decay,E.shadow=x.castShadow,x.castShadow){var S=x.shadow;E.shadowBias=S.bias,E.shadowRadius=S.radius,E.shadowMapSize=S.mapSize}r.spotShadowMap[p]=M,r.spotShadowMatrix[p]=x.shadow.matrix,r.spot[p]=E,p++}else if(x.isRectAreaLight){var E=t.get(x);E.color.copy(_).multiplyScalar(b),E.position.setFromMatrixPosition(x.matrixWorld),E.position.applyMatrix4(v),a.identity(),n.copy(x.matrixWorld),n.premultiply(v),a.extractRotation(n),E.halfWidth.set(.5*x.width,0,0),E.halfHeight.set(0,.5*x.height,0),E.halfWidth.applyMatrix4(a),E.halfHeight.applyMatrix4(a),r.rectArea[f]=E,f++}else if(x.isPointLight){var E=t.get(x);if(E.position.setFromMatrixPosition(x.matrixWorld),E.position.applyMatrix4(v),E.color.copy(x.color).multiplyScalar(x.intensity),E.distance=x.distance,E.decay=0===x.distance?0:x.decay,E.shadow=x.castShadow,x.castShadow){var S=x.shadow;E.shadowBias=S.bias,E.shadowRadius=S.radius,E.shadowMapSize=S.mapSize,E.shadowCameraNear=S.camera.near,E.shadowCameraFar=S.camera.far}r.pointShadowMap[d]=M,r.pointShadowMatrix[d]=x.shadow.matrix,r.point[d]=E,d++}else if(x.isHemisphereLight){var E=t.get(x);E.direction.setFromMatrixPosition(x.matrixWorld),E.direction.transformDirection(v),E.direction.normalize(),E.skyColor.copy(x.color).multiplyScalar(b),E.groundColor.copy(x.groundColor).multiplyScalar(b),r.hemi[m]=E,m++}}r.ambient[0]=c,r.ambient[1]=l,r.ambient[2]=u,r.directional.length=h,r.spot.length=p,r.rectArea.length=f,r.point.length=d,r.hemi.length=m,r.hash=r.id+\",\"+h+\",\"+d+\",\"+p+\",\"+f+\",\"+m+\",\"+o.length}var t=new ut,r={id:ic++,hash:\"\",ambient:[0,0,0],directional:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],point:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]},i=new s,n=new o,a=new o;return{setup:e,state:r}}function dt(){function e(){a.length=0,s.length=0,c.length=0}function t(e){a.push(e)}function r(e){s.push(e)}function i(e){c.push(e)}function n(e){o.setup(a,s,e)}var o=new ht,a=[],s=[],c=[];return{init:e,state:{lightsArray:a,shadowsArray:s,spritesArray:c,lights:o},setupLights:n,pushLight:t,pushShadow:r,pushSprite:i}}function pt(){function e(e,t){var i=e.id+\",\"+t.id,n=r[i];return void 0===n&&(n=new dt,r[i]=n),n}function t(){r={}}var r={};return{get:e,dispose:t}}function ft(e){k.call(this),this.type=\"MeshDepthMaterial\",this.depthPacking=Ns,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.setValues(e)}function mt(e){k.call(this),this.type=\"MeshDistanceMaterial\",this.referencePosition=new s,this.nearDistance=1,this.farDistance=1e3,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.lights=!1,this.setValues(e)}function vt(e,t,r){function i(t,r,i,n,o,a){var s=t.geometry,c=null,l=_,u=t.customDepthMaterial;if(i&&(l=b,u=t.customDistanceMaterial),u)c=u;else{var h=!1;r.morphTargets&&(s&&s.isBufferGeometry?h=s.morphAttributes&&s.morphAttributes.position&&s.morphAttributes.position.length>0:s&&s.isGeometry&&(h=s.morphTargets&&s.morphTargets.length>0)),t.isSkinnedMesh&&!1===r.skinning&&console.warn(\"THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:\",t);var d=t.isSkinnedMesh&&r.skinning,p=0;h&&(p|=v),d&&(p|=y),c=l[p]}if(e.localClippingEnabled&&!0===r.clipShadows&&0!==r.clippingPlanes.length){var f=c.uuid,m=r.uuid,g=w[f];void 0===g&&(g={},w[f]=g);var x=g[m];void 0===x&&(x=c.clone(),g[m]=x),c=x}return c.visible=r.visible,c.wireframe=r.wireframe,c.side=null!=r.shadowSide?r.shadowSide:M[r.side],c.clipShadows=r.clipShadows,c.clippingPlanes=r.clippingPlanes,c.clipIntersection=r.clipIntersection,c.wireframeLinewidth=r.wireframeLinewidth,c.linewidth=r.linewidth,i&&c.isMeshDistanceMaterial&&(c.referencePosition.copy(n),c.nearDistance=o,c.farDistance=a),c}function a(r,n,o,s){if(!1!==r.visible){if(r.layers.test(n.layers)&&(r.isMesh||r.isLine||r.isPoints)&&r.castShadow&&(!r.frustumCulled||c.intersectsObject(r))){r.modelViewMatrix.multiplyMatrices(o.matrixWorldInverse,r.matrixWorld);var l=t.update(r),u=r.material;if(Array.isArray(u))for(var h=l.groups,d=0,p=h.length;d<p;d++){var f=h[d],v=u[f.materialIndex];if(v&&v.visible){var g=i(r,v,s,m,o.near,o.far);e.renderBufferDirect(o,null,l,g,r,f)}}else if(u.visible){var g=i(r,u,s,m,o.near,o.far);e.renderBufferDirect(o,null,l,g,r,null)}}for(var y=r.children,x=0,_=y.length;x<_;x++)a(y[x],n,o,s)}}for(var c=new g,l=new o,d=new n,p=new n(r,r),f=new s,m=new s,v=1,y=2,x=1+(v|y),_=new Array(x),b=new Array(x),w={},M={0:Po,1:Ro,2:Do},E=[new s(1,0,0),new s(-1,0,0),new s(0,0,1),new s(0,0,-1),new s(0,1,0),new s(0,-1,0)],S=[new s(0,1,0),new s(0,1,0),new s(0,1,0),new s(0,1,0),new s(0,0,1),new s(0,0,-1)],T=[new u,new u,new u,new u,new u,new u],A=0;A!==x;++A){var L=0!=(A&v),C=0!=(A&y),R=new ft({depthPacking:Fs,morphTargets:L,skinning:C});_[A]=R;var P=new mt({morphTargets:L,skinning:C});b[A]=P}var D=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=Lo,this.render=function(t,r,i){if(!1!==D.enabled&&(!1!==D.autoUpdate||!1!==D.needsUpdate)&&0!==t.length){var n=e.context,o=e.state;o.disable(n.BLEND),o.buffers.color.setClear(1,1,1,1),o.buffers.depth.setTest(!0),o.setScissorTest(!1);for(var s,u=0,v=t.length;u<v;u++){var g=t[u],y=g.shadow,x=g&&g.isPointLight;if(void 0!==y){var _=y.camera;if(d.copy(y.mapSize),d.min(p),x){var b=d.x,w=d.y;T[0].set(2*b,w,b,w),T[1].set(0,w,b,w),T[2].set(3*b,w,b,w),T[3].set(b,w,b,w),T[4].set(3*b,0,b,w),T[5].set(b,0,b,w),d.x*=4,d.y*=2}if(null===y.map){var M={minFilter:Ra,magFilter:Ra,format:Ja};y.map=new h(d.x,d.y,M),y.map.texture.name=g.name+\".shadowMap\",_.updateProjectionMatrix()}y.isSpotLightShadow&&y.update(g);var A=y.map,L=y.matrix;m.setFromMatrixPosition(g.matrixWorld),_.position.copy(m),x?(s=6,L.makeTranslation(-m.x,-m.y,-m.z)):(s=1,f.setFromMatrixPosition(g.target.matrixWorld),_.lookAt(f),_.updateMatrixWorld(),L.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),L.multiply(_.projectionMatrix),L.multiply(_.matrixWorldInverse)),e.setRenderTarget(A),e.clear();for(var C=0;C<s;C++){if(x){f.copy(_.position),f.add(E[C]),_.up.copy(S[C]),_.lookAt(f),_.updateMatrixWorld();var R=T[C];o.viewport(R)}l.multiplyMatrices(_.projectionMatrix,_.matrixWorldInverse),c.setFromMatrix(l),a(r,i,_,x)}}else console.warn(\"THREE.WebGLShadowMap:\",g,\"has no shadow.\")}D.needsUpdate=!1}}}function gt(e,t,r,i,n,o,a,s,c){l.call(this,e,t,r,i,n,o,a,s,c),this.needsUpdate=!0}function yt(e,t,r,i,n){function o(){var e=new Float32Array([-.5,-.5,0,0,.5,-.5,1,0,.5,.5,1,1,-.5,.5,0,1]),r=new Uint16Array([0,1,2,0,2,3]);u=t.createBuffer(),h=t.createBuffer(),t.bindBuffer(t.ARRAY_BUFFER,u),t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,h),t.bufferData(t.ELEMENT_ARRAY_BUFFER,r,t.STATIC_DRAW),d=c(),p={position:t.getAttribLocation(d,\"position\"),uv:t.getAttribLocation(d,\"uv\")},f={uvOffset:t.getUniformLocation(d,\"uvOffset\"),uvScale:t.getUniformLocation(d,\"uvScale\"),rotation:t.getUniformLocation(d,\"rotation\"),center:t.getUniformLocation(d,\"center\"),scale:t.getUniformLocation(d,\"scale\"),color:t.getUniformLocation(d,\"color\"),map:t.getUniformLocation(d,\"map\"),opacity:t.getUniformLocation(d,\"opacity\"),modelViewMatrix:t.getUniformLocation(d,\"modelViewMatrix\"),projectionMatrix:t.getUniformLocation(d,\"projectionMatrix\"),fogType:t.getUniformLocation(d,\"fogType\"),fogDensity:t.getUniformLocation(d,\"fogDensity\"),fogNear:t.getUniformLocation(d,\"fogNear\"),fogFar:t.getUniformLocation(d,\"fogFar\"),fogColor:t.getUniformLocation(d,\"fogColor\"),fogDepth:t.getUniformLocation(d,\"fogDepth\"),alphaTest:t.getUniformLocation(d,\"alphaTest\")};var i=document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"canvas\");i.width=8,i.height=8;var n=i.getContext(\"2d\");n.fillStyle=\"white\",n.fillRect(0,0,8,8),m=new gt(i)}function c(){var e=t.createProgram(),r=t.createShader(t.VERTEX_SHADER),i=t.createShader(t.FRAGMENT_SHADER);return t.shaderSource(r,[\"precision \"+n.precision+\" float;\",\"#define SHADER_NAME SpriteMaterial\",\"uniform mat4 modelViewMatrix;\",\"uniform mat4 projectionMatrix;\",\"uniform float rotation;\",\"uniform vec2 center;\",\"uniform vec2 scale;\",\"uniform vec2 uvOffset;\",\"uniform vec2 uvScale;\",\"attribute vec2 position;\",\"attribute vec2 uv;\",\"varying vec2 vUV;\",\"varying float fogDepth;\",\"void main() {\",\"\\tvUV = uvOffset + uv * uvScale;\",\"\\tvec2 alignedPosition = ( position - center ) * scale;\",\"\\tvec2 rotatedPosition;\",\"\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\",\"\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\",\"\\tvec4 mvPosition;\",\"\\tmvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\",\"\\tmvPosition.xy += rotatedPosition;\",\"\\tgl_Position = projectionMatrix * mvPosition;\",\"\\tfogDepth = - mvPosition.z;\",\"}\"].join(\"\\n\")),t.shaderSource(i,[\"precision \"+n.precision+\" float;\",\"#define SHADER_NAME SpriteMaterial\",\"uniform vec3 color;\",\"uniform sampler2D map;\",\"uniform float opacity;\",\"uniform int fogType;\",\"uniform vec3 fogColor;\",\"uniform float fogDensity;\",\"uniform float fogNear;\",\"uniform float fogFar;\",\"uniform float alphaTest;\",\"varying vec2 vUV;\",\"varying float fogDepth;\",\"void main() {\",\"\\tvec4 texture = texture2D( map, vUV );\",\"\\tgl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\",\"\\tif ( gl_FragColor.a < alphaTest ) discard;\",\"\\tif ( fogType > 0 ) {\",\"\\t\\tfloat fogFactor = 0.0;\",\"\\t\\tif ( fogType == 1 ) {\",\"\\t\\t\\tfogFactor = smoothstep( fogNear, fogFar, fogDepth );\",\"\\t\\t} else {\",\"\\t\\t\\tconst float LOG2 = 1.442695;\",\"\\t\\t\\tfogFactor = exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 );\",\"\\t\\t\\tfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\",\"\\t\\t}\",\"\\t\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\",\"\\t}\",\"}\"].join(\"\\n\")),t.compileShader(r),t.compileShader(i),t.attachShader(e,r),t.attachShader(e,i),t.linkProgram(e),e}function l(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:t.id-e.id}var u,h,d,p,f,m,v=new s,g=new a,y=new s;this.render=function(n,a,s){if(0!==n.length){void 0===d&&o(),r.useProgram(d),r.initAttributes(),r.enableAttribute(p.position),r.enableAttribute(p.uv),r.disableUnusedAttributes(),r.disable(t.CULL_FACE),r.enable(t.BLEND),t.bindBuffer(t.ARRAY_BUFFER,u),t.vertexAttribPointer(p.position,2,t.FLOAT,!1,16,0),t.vertexAttribPointer(p.uv,2,t.FLOAT,!1,16,8),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,h),t.uniformMatrix4fv(f.projectionMatrix,!1,s.projectionMatrix.elements),r.activeTexture(t.TEXTURE0),t.uniform1i(f.map,0);var c=0,x=0,_=a.fog;_?(t.uniform3f(f.fogColor,_.color.r,_.color.g,_.color.b),_.isFog?(t.uniform1f(f.fogNear,_.near),t.uniform1f(f.fogFar,_.far),t.uniform1i(f.fogType,1),c=1,x=1):_.isFogExp2&&(t.uniform1f(f.fogDensity,_.density),t.uniform1i(f.fogType,2),c=2,x=2)):(t.uniform1i(f.fogType,0),c=0,x=0);for(var b=0,w=n.length;b<w;b++){var M=n[b];M.modelViewMatrix.multiplyMatrices(s.matrixWorldInverse,M.matrixWorld),M.z=-M.modelViewMatrix.elements[14]}n.sort(l);for(var E=[],S=[],b=0,w=n.length;b<w;b++){var M=n[b],T=M.material;if(!1!==T.visible){M.onBeforeRender(e,a,s,void 0,T,void 0),t.uniform1f(f.alphaTest,T.alphaTest),t.uniformMatrix4fv(f.modelViewMatrix,!1,M.modelViewMatrix.elements),M.matrixWorld.decompose(v,g,y),E[0]=y.x,E[1]=y.y,S[0]=M.center.x-.5,S[1]=M.center.y-.5;var A=0;a.fog&&T.fog&&(A=x),c!==A&&(t.uniform1i(f.fogType,A),c=A),null!==T.map?(t.uniform2f(f.uvOffset,T.map.offset.x,T.map.offset.y),t.uniform2f(f.uvScale,T.map.repeat.x,T.map.repeat.y)):(t.uniform2f(f.uvOffset,0,0),t.uniform2f(f.uvScale,1,1)),t.uniform1f(f.opacity,T.opacity),t.uniform3f(f.color,T.color.r,T.color.g,T.color.b),t.uniform1f(f.rotation,T.rotation),t.uniform2fv(f.center,S),t.uniform2fv(f.scale,E),r.setBlending(T.blending,T.blendEquation,T.blendSrc,T.blendDst,T.blendEquationAlpha,T.blendSrcAlpha,T.blendDstAlpha,T.premultipliedAlpha),r.buffers.depth.setTest(T.depthTest),r.buffers.depth.setMask(T.depthWrite),r.buffers.color.setMask(T.colorWrite),i.setTexture2D(T.map||m,0),t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0),M.onAfterRender(e,a,s,void 0,T,void 0)}}r.enable(t.CULL_FACE),r.reset()}}}function xt(e,t,r){function i(){var t=!1,r=new u,i=null,n=new u(0,0,0,0);return{setMask:function(r){i===r||t||(e.colorMask(r,r,r,r),i=r)},setLocked:function(e){t=e},setClear:function(t,i,o,a,s){!0===s&&(t*=a,i*=a,o*=a),r.set(t,i,o,a),!1===n.equals(r)&&(e.clearColor(t,i,o,a),n.copy(r))},reset:function(){t=!1,i=null,n.set(-1,0,0,0)}}}function n(){var t=!1,r=null,i=null,n=null;return{setTest:function(t){t?d(e.DEPTH_TEST):p(e.DEPTH_TEST)},setMask:function(i){r===i||t||(e.depthMask(i),r=i)},setFunc:function(t){if(i!==t){if(t)switch(t){case na:e.depthFunc(e.NEVER);break;case oa:e.depthFunc(e.ALWAYS);break;case aa:e.depthFunc(e.LESS);break;case sa:e.depthFunc(e.LEQUAL);break;case ca:e.depthFunc(e.EQUAL);break;case la:e.depthFunc(e.GEQUAL);break;case ua:e.depthFunc(e.GREATER);break;case ha:e.depthFunc(e.NOTEQUAL);break;default:e.depthFunc(e.LEQUAL)}else e.depthFunc(e.LEQUAL);i=t}},setLocked:function(e){t=e},setClear:function(t){n!==t&&(e.clearDepth(t),n=t)},reset:function(){t=!1,r=null,i=null,n=null}}}function o(){var t=!1,r=null,i=null,n=null,o=null,a=null,s=null,c=null,l=null;return{setTest:function(t){t?d(e.STENCIL_TEST):p(e.STENCIL_TEST)},setMask:function(i){r===i||t||(e.stencilMask(i),r=i)},setFunc:function(t,r,a){i===t&&n===r&&o===a||(e.stencilFunc(t,r,a),i=t,n=r,o=a)},setOp:function(t,r,i){a===t&&s===r&&c===i||(e.stencilOp(t,r,i),a=t,s=r,c=i)},setLocked:function(e){t=e},setClear:function(t){l!==t&&(e.clearStencil(t),l=t)},reset:function(){t=!1,r=null,i=null,n=null,o=null,a=null,s=null,c=null,l=null}}}function a(t,r,i){var n=new Uint8Array(4),o=e.createTexture();e.bindTexture(t,o),e.texParameteri(t,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(t,e.TEXTURE_MAG_FILTER,e.NEAREST);for(var a=0;a<i;a++)e.texImage2D(r+a,0,e.RGBA,1,1,0,e.RGBA,e.UNSIGNED_BYTE,n);return o}function s(){for(var e=0,t=I.length;e<t;e++)I[e]=0}function c(r){if(I[r]=1,0===O[r]&&(e.enableVertexAttribArray(r),O[r]=1),0!==N[r]){t.get(\"ANGLE_instanced_arrays\").vertexAttribDivisorANGLE(r,0),N[r]=0}}function l(r,i){if(I[r]=1,0===O[r]&&(e.enableVertexAttribArray(r),O[r]=1),N[r]!==i){t.get(\"ANGLE_instanced_arrays\").vertexAttribDivisorANGLE(r,i),N[r]=i}}function h(){for(var t=0,r=O.length;t!==r;++t)O[t]!==I[t]&&(e.disableVertexAttribArray(t),O[t]=0)}function d(t){!0!==F[t]&&(e.enable(t),F[t]=!0)}function p(t){!1!==F[t]&&(e.disable(t),F[t]=!1)}function f(){if(null===z&&(z=[],t.get(\"WEBGL_compressed_texture_pvrtc\")||t.get(\"WEBGL_compressed_texture_s3tc\")||t.get(\"WEBGL_compressed_texture_etc1\")||t.get(\"WEBGL_compressed_texture_astc\")))for(var r=e.getParameter(e.COMPRESSED_TEXTURE_FORMATS),i=0;i<r.length;i++)z.push(r[i]);return z}function m(t){return B!==t&&(e.useProgram(t),B=t,!0)}function v(t,i,n,o,a,s,c,l){if(t!==No?d(e.BLEND):p(e.BLEND),t!==Ho){if(t!==G||l!==q)switch(t){case zo:l?(e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.ONE,e.ONE,e.ONE,e.ONE)):(e.blendEquation(e.FUNC_ADD),e.blendFunc(e.SRC_ALPHA,e.ONE));break;case Bo:l?(e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.ZERO,e.ZERO,e.ONE_MINUS_SRC_COLOR,e.ONE_MINUS_SRC_ALPHA)):(e.blendEquation(e.FUNC_ADD),e.blendFunc(e.ZERO,e.ONE_MINUS_SRC_COLOR));break;case Go:l?(e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.ZERO,e.SRC_COLOR,e.ZERO,e.SRC_ALPHA)):(e.blendEquation(e.FUNC_ADD),e.blendFunc(e.ZERO,e.SRC_COLOR));break;default:l?(e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.ONE,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA)):(e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA))}H=null,j=null,V=null,k=null,W=null,X=null}else a=a||i,s=s||n,c=c||o,i===H&&a===k||(e.blendEquationSeparate(r.convert(i),r.convert(a)),H=i,k=a),n===j&&o===V&&s===W&&c===X||(e.blendFuncSeparate(r.convert(n),r.convert(o),r.convert(s),r.convert(c)),j=n,V=o,W=s,X=c);G=t,q=l}function g(t,r){t.side===Do?p(e.CULL_FACE):d(e.CULL_FACE);var i=t.side===Po;r&&(i=!i),y(i),!0===t.transparent?v(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.premultipliedAlpha):v(No),P.setFunc(t.depthFunc),P.setTest(t.depthTest),P.setMask(t.depthWrite),R.setMask(t.colorWrite),b(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits)}function y(t){Y!==t&&(t?e.frontFace(e.CW):e.frontFace(e.CCW),Y=t)}function x(t){t!==So?(d(e.CULL_FACE),t!==Z&&(t===To?e.cullFace(e.BACK):t===Ao?e.cullFace(e.FRONT):e.cullFace(e.FRONT_AND_BACK))):p(e.CULL_FACE),Z=t}function _(t){t!==J&&(ee&&e.lineWidth(t),J=t)}function b(t,r,i){t?(d(e.POLYGON_OFFSET_FILL),K===r&&Q===i||(e.polygonOffset(r,i),K=r,Q=i)):p(e.POLYGON_OFFSET_FILL)}function w(t){t?d(e.SCISSOR_TEST):p(e.SCISSOR_TEST)}function M(t){void 0===t&&(t=e.TEXTURE0+$-1),ie!==t&&(e.activeTexture(t),ie=t)}function E(t,r){null===ie&&M();var i=ne[ie];void 0===i&&(i={type:void 0,texture:void 0},ne[ie]=i),i.type===t&&i.texture===r||(e.bindTexture(t,r||se[t]),i.type=t,i.texture=r)}function S(){try{e.compressedTexImage2D.apply(e,arguments)}catch(e){console.error(\"THREE.WebGLState:\",e)}}function T(){try{e.texImage2D.apply(e,arguments)}catch(e){console.error(\"THREE.WebGLState:\",e)}}function A(t){!1===oe.equals(t)&&(e.scissor(t.x,t.y,t.z,t.w),oe.copy(t))}function L(t){!1===ae.equals(t)&&(e.viewport(t.x,t.y,t.z,t.w),ae.copy(t))}function C(){for(var t=0;t<O.length;t++)1===O[t]&&(e.disableVertexAttribArray(t),O[t]=0);F={},z=null,ie=null,ne={},B=null,G=null,Y=null,Z=null,R.reset(),P.reset(),D.reset()}var R=new i,P=new n,D=new o,U=e.getParameter(e.MAX_VERTEX_ATTRIBS),I=new Uint8Array(U),O=new Uint8Array(U),N=new Uint8Array(U),F={},z=null,B=null,G=null,H=null,j=null,V=null,k=null,W=null,X=null,q=!1,Y=null,Z=null,J=null,K=null,Q=null,$=e.getParameter(e.MAX_COMBINED_TEXTURE_IMAGE_UNITS),ee=!1,te=0,re=e.getParameter(e.VERSION);-1!==re.indexOf(\"WebGL\")?(te=parseFloat(/^WebGL\\ ([0-9])/.exec(re)[1]),ee=te>=1):-1!==re.indexOf(\"OpenGL ES\")&&(te=parseFloat(/^OpenGL\\ ES\\ ([0-9])/.exec(re)[1]),ee=te>=2);var ie=null,ne={},oe=new u,ae=new u,se={};return se[e.TEXTURE_2D]=a(e.TEXTURE_2D,e.TEXTURE_2D,1),se[e.TEXTURE_CUBE_MAP]=a(e.TEXTURE_CUBE_MAP,e.TEXTURE_CUBE_MAP_POSITIVE_X,6),R.setClear(0,0,0,1),P.setClear(1),D.setClear(0),d(e.DEPTH_TEST),P.setFunc(sa),y(!1),x(To),d(e.CULL_FACE),d(e.BLEND),v(Fo),{buffers:{color:R,depth:P,stencil:D},initAttributes:s,enableAttribute:c,enableAttributeAndDivisor:l,disableUnusedAttributes:h,enable:d,disable:p,getCompressedTextureFormats:f,useProgram:m,setBlending:v,setMaterial:g,setFlipSided:y,setCullFace:x,setLineWidth:_,setPolygonOffset:b,setScissorTest:w,activeTexture:M,bindTexture:E,compressedTexImage2D:S,texImage2D:T,scissor:A,viewport:L,reset:C}}function _t(e,t,r,i,n,o,a){function s(e,t){if(e.width>t||e.height>t){if(\"data\"in e)return void console.warn(\"THREE.WebGLRenderer: image in DataTexture is too big (\"+e.width+\"x\"+e.height+\").\");var r=t/Math.max(e.width,e.height),i=document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"canvas\");i.width=Math.floor(e.width*r),i.height=Math.floor(e.height*r);return i.getContext(\"2d\").drawImage(e,0,0,e.width,e.height,0,0,i.width,i.height),console.warn(\"THREE.WebGLRenderer: image is too big (\"+e.width+\"x\"+e.height+\"). Resized to \"+i.width+\"x\"+i.height,e),i}return e}function c(e){return zs.isPowerOfTwo(e.width)&&zs.isPowerOfTwo(e.height)}function l(e){if(e instanceof HTMLImageElement||e instanceof HTMLCanvasElement||e instanceof ImageBitmap){void 0===R&&(R=document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"canvas\")),R.width=zs.floorPowerOfTwo(e.width),R.height=zs.floorPowerOfTwo(e.height);return R.getContext(\"2d\").drawImage(e,0,0,R.width,R.height),console.warn(\"THREE.WebGLRenderer: image is not power of two (\"+e.width+\"x\"+e.height+\"). Resized to \"+R.width+\"x\"+R.height,e),R}return e}function u(e){return e.wrapS!==La||e.wrapT!==La||e.minFilter!==Ra&&e.minFilter!==Ua}function h(e,t){return e.generateMipmaps&&t&&e.minFilter!==Ra&&e.minFilter!==Ua}function d(t,r,n,o){e.generateMipmap(t),i.get(r).__maxMipLevel=Math.log(Math.max(n,o))*Math.LOG2E}function p(t){return t===Ra||t===Pa||t===Da?e.NEAREST:e.LINEAR}function f(e){var t=e.target;t.removeEventListener(\"dispose\",f),v(t),t.isVideoTexture&&delete D[t.id],a.memory.textures--}function m(e){var t=e.target;t.removeEventListener(\"dispose\",m),g(t),a.memory.textures--}function v(t){var r=i.get(t);if(t.image&&r.__image__webglTextureCube)e.deleteTexture(r.__image__webglTextureCube);else{if(void 0===r.__webglInit)return;e.deleteTexture(r.__webglTexture)}i.remove(t)}function g(t){var r=i.get(t),n=i.get(t.texture);if(t){if(void 0!==n.__webglTexture&&e.deleteTexture(n.__webglTexture),t.depthTexture&&t.depthTexture.dispose(),t.isWebGLRenderTargetCube)for(var o=0;o<6;o++)e.deleteFramebuffer(r.__webglFramebuffer[o]),r.__webglDepthbuffer&&e.deleteRenderbuffer(r.__webglDepthbuffer[o]);else e.deleteFramebuffer(r.__webglFramebuffer),r.__webglDepthbuffer&&e.deleteRenderbuffer(r.__webglDepthbuffer);i.remove(t.texture),i.remove(t)}}function y(t,n){var o=i.get(t);if(t.isVideoTexture&&C(t),t.version>0&&o.__version!==t.version){var a=t.image;if(void 0===a)console.warn(\"THREE.WebGLRenderer: Texture marked for update but image is undefined\",t);else{if(!1!==a.complete)return void w(o,t,n);console.warn(\"THREE.WebGLRenderer: Texture marked for update but image is incomplete\",t)}}r.activeTexture(e.TEXTURE0+n),r.bindTexture(e.TEXTURE_2D,o.__webglTexture)}function x(t,l){var u=i.get(t);if(6===t.image.length)if(t.version>0&&u.__version!==t.version){u.__image__webglTextureCube||(t.addEventListener(\"dispose\",f),u.__image__webglTextureCube=e.createTexture(),a.memory.textures++),r.activeTexture(e.TEXTURE0+l),r.bindTexture(e.TEXTURE_CUBE_MAP,u.__image__webglTextureCube),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,t.flipY);for(var p=t&&t.isCompressedTexture,m=t.image[0]&&t.image[0].isDataTexture,v=[],g=0;g<6;g++)v[g]=p||m?m?t.image[g].image:t.image[g]:s(t.image[g],n.maxCubemapSize);var y=v[0],x=c(y),_=o.convert(t.format),w=o.convert(t.type);b(e.TEXTURE_CUBE_MAP,t,x);for(var g=0;g<6;g++)if(p)for(var M,E=v[g].mipmaps,S=0,T=E.length;S<T;S++)M=E[S],t.format!==Ja&&t.format!==Za?r.getCompressedTextureFormats().indexOf(_)>-1?r.compressedTexImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+g,S,_,M.width,M.height,0,M.data):console.warn(\"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\"):r.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+g,S,_,M.width,M.height,0,_,w,M.data);else m?r.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+g,0,_,v[g].width,v[g].height,0,_,w,v[g].data):r.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+g,0,_,_,w,v[g]);u.__maxMipLevel=p?E.length-1:0,h(t,x)&&d(e.TEXTURE_CUBE_MAP,t,y.width,y.height),u.__version=t.version,t.onUpdate&&t.onUpdate(t)}else r.activeTexture(e.TEXTURE0+l),r.bindTexture(e.TEXTURE_CUBE_MAP,u.__image__webglTextureCube)}function _(t,n){r.activeTexture(e.TEXTURE0+n),r.bindTexture(e.TEXTURE_CUBE_MAP,i.get(t).__webglTexture)}function b(r,a,s){var c;if(s?(e.texParameteri(r,e.TEXTURE_WRAP_S,o.convert(a.wrapS)),e.texParameteri(r,e.TEXTURE_WRAP_T,o.convert(a.wrapT)),e.texParameteri(r,e.TEXTURE_MAG_FILTER,o.convert(a.magFilter)),e.texParameteri(r,e.TEXTURE_MIN_FILTER,o.convert(a.minFilter))):(e.texParameteri(r,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(r,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),a.wrapS===La&&a.wrapT===La||console.warn(\"THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.\",a),e.texParameteri(r,e.TEXTURE_MAG_FILTER,p(a.magFilter)),e.texParameteri(r,e.TEXTURE_MIN_FILTER,p(a.minFilter)),a.minFilter!==Ra&&a.minFilter!==Ua&&console.warn(\"THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.\",a)),c=t.get(\"EXT_texture_filter_anisotropic\")){if(a.type===ja&&null===t.get(\"OES_texture_float_linear\"))return;if(a.type===Va&&null===t.get(\"OES_texture_half_float_linear\"))return;(a.anisotropy>1||i.get(a).__currentAnisotropy)&&(e.texParameterf(r,c.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(a.anisotropy,n.getMaxAnisotropy())),i.get(a).__currentAnisotropy=a.anisotropy)}}function w(t,i,p){void 0===t.__webglInit&&(t.__webglInit=!0,i.addEventListener(\"dispose\",f),t.__webglTexture=e.createTexture(),a.memory.textures++),r.activeTexture(e.TEXTURE0+p),r.bindTexture(e.TEXTURE_2D,t.__webglTexture),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,i.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,i.premultiplyAlpha),e.pixelStorei(e.UNPACK_ALIGNMENT,i.unpackAlignment);var m=s(i.image,n.maxTextureSize);u(i)&&!1===c(m)&&(m=l(m));var v=c(m),g=o.convert(i.format),y=o.convert(i.type);b(e.TEXTURE_2D,i,v);var x,_=i.mipmaps;if(i.isDepthTexture){var w=e.DEPTH_COMPONENT;if(i.type===ja){if(!P)throw new Error(\"Float Depth Texture only supported in WebGL2.0\");w=e.DEPTH_COMPONENT32F}else P&&(w=e.DEPTH_COMPONENT16);i.format===$a&&w===e.DEPTH_COMPONENT&&i.type!==Ba&&i.type!==Ha&&(console.warn(\"THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.\"),i.type=Ba,y=o.convert(i.type)),i.format===es&&(w=e.DEPTH_STENCIL,i.type!==qa&&(console.warn(\"THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.\"),i.type=qa,y=o.convert(i.type))),r.texImage2D(e.TEXTURE_2D,0,w,m.width,m.height,0,g,y,null)}else if(i.isDataTexture)if(_.length>0&&v){for(var M=0,E=_.length;M<E;M++)x=_[M],r.texImage2D(e.TEXTURE_2D,M,g,x.width,x.height,0,g,y,x.data);i.generateMipmaps=!1,t.__maxMipLevel=_.length-1}else r.texImage2D(e.TEXTURE_2D,0,g,m.width,m.height,0,g,y,m.data),t.__maxMipLevel=0;else if(i.isCompressedTexture){for(var M=0,E=_.length;M<E;M++)x=_[M],i.format!==Ja&&i.format!==Za?r.getCompressedTextureFormats().indexOf(g)>-1?r.compressedTexImage2D(e.TEXTURE_2D,M,g,x.width,x.height,0,x.data):console.warn(\"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\"):r.texImage2D(e.TEXTURE_2D,M,g,x.width,x.height,0,g,y,x.data);t.__maxMipLevel=_.length-1}else if(_.length>0&&v){for(var M=0,E=_.length;M<E;M++)x=_[M],r.texImage2D(e.TEXTURE_2D,M,g,g,y,x);i.generateMipmaps=!1,t.__maxMipLevel=_.length-1}else r.texImage2D(e.TEXTURE_2D,0,g,g,y,m),t.__maxMipLevel=0;h(i,v)&&d(e.TEXTURE_2D,i,m.width,m.height),t.__version=i.version,i.onUpdate&&i.onUpdate(i)}function M(t,n,a,s){var c=o.convert(n.texture.format),l=o.convert(n.texture.type);r.texImage2D(s,0,c,n.width,n.height,0,c,l,null),e.bindFramebuffer(e.FRAMEBUFFER,t),e.framebufferTexture2D(e.FRAMEBUFFER,a,s,i.get(n.texture).__webglTexture,0),e.bindFramebuffer(e.FRAMEBUFFER,null)}function E(t,r){e.bindRenderbuffer(e.RENDERBUFFER,t),r.depthBuffer&&!r.stencilBuffer?(e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_COMPONENT16,r.width,r.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.RENDERBUFFER,t)):r.depthBuffer&&r.stencilBuffer?(e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_STENCIL,r.width,r.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.RENDERBUFFER,t)):e.renderbufferStorage(e.RENDERBUFFER,e.RGBA4,r.width,r.height),e.bindRenderbuffer(e.RENDERBUFFER,null)}function S(t,r){if(r&&r.isWebGLRenderTargetCube)throw new Error(\"Depth Texture with cube render targets is not supported\");if(e.bindFramebuffer(e.FRAMEBUFFER,t),!r.depthTexture||!r.depthTexture.isDepthTexture)throw new Error(\"renderTarget.depthTexture must be an instance of THREE.DepthTexture\");i.get(r.depthTexture).__webglTexture&&r.depthTexture.image.width===r.width&&r.depthTexture.image.height===r.height||(r.depthTexture.image.width=r.width,r.depthTexture.image.height=r.height,r.depthTexture.needsUpdate=!0),y(r.depthTexture,0);var n=i.get(r.depthTexture).__webglTexture;if(r.depthTexture.format===$a)e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,n,0);else{if(r.depthTexture.format!==es)throw new Error(\"Unknown depthTexture format\");e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.TEXTURE_2D,n,0)}}function T(t){var r=i.get(t),n=!0===t.isWebGLRenderTargetCube;if(t.depthTexture){if(n)throw new Error(\"target.depthTexture not supported in Cube render targets\");S(r.__webglFramebuffer,t)}else if(n){r.__webglDepthbuffer=[];for(var o=0;o<6;o++)e.bindFramebuffer(e.FRAMEBUFFER,r.__webglFramebuffer[o]),r.__webglDepthbuffer[o]=e.createRenderbuffer(),E(r.__webglDepthbuffer[o],t)}else e.bindFramebuffer(e.FRAMEBUFFER,r.__webglFramebuffer),r.__webglDepthbuffer=e.createRenderbuffer(),E(r.__webglDepthbuffer,t);e.bindFramebuffer(e.FRAMEBUFFER,null)}function A(t){var n=i.get(t),o=i.get(t.texture);t.addEventListener(\"dispose\",m),o.__webglTexture=e.createTexture(),a.memory.textures++;var s=!0===t.isWebGLRenderTargetCube,l=c(t);if(s){n.__webglFramebuffer=[];for(var u=0;u<6;u++)n.__webglFramebuffer[u]=e.createFramebuffer()}else n.__webglFramebuffer=e.createFramebuffer();if(s){r.bindTexture(e.TEXTURE_CUBE_MAP,o.__webglTexture),b(e.TEXTURE_CUBE_MAP,t.texture,l);for(var u=0;u<6;u++)M(n.__webglFramebuffer[u],t,e.COLOR_ATTACHMENT0,e.TEXTURE_CUBE_MAP_POSITIVE_X+u);h(t.texture,l)&&d(e.TEXTURE_CUBE_MAP,t.texture,t.width,t.height),r.bindTexture(e.TEXTURE_CUBE_MAP,null)}else r.bindTexture(e.TEXTURE_2D,o.__webglTexture),b(e.TEXTURE_2D,t.texture,l),M(n.__webglFramebuffer,t,e.COLOR_ATTACHMENT0,e.TEXTURE_2D),h(t.texture,l)&&d(e.TEXTURE_2D,t.texture,t.width,t.height),r.bindTexture(e.TEXTURE_2D,null);t.depthBuffer&&T(t)}function L(t){var n=t.texture;if(h(n,c(t))){var o=t.isWebGLRenderTargetCube?e.TEXTURE_CUBE_MAP:e.TEXTURE_2D,a=i.get(n).__webglTexture;r.bindTexture(o,a),d(o,n,t.width,t.height),r.bindTexture(o,null)}}function C(e){var t=e.id,r=a.render.frame;D[t]!==r&&(D[t]=r,e.update())}var R,P=\"undefined\"!=typeof WebGL2RenderingContext&&e instanceof WebGL2RenderingContext,D={};this.setTexture2D=y,this.setTextureCube=x,this.setTextureCubeDynamic=_,this.setupRenderTarget=A,this.updateRenderTargetMipmap=L}function bt(e,t){function r(r){var i;if(r===Aa)return e.REPEAT;if(r===La)return e.CLAMP_TO_EDGE;if(r===Ca)return e.MIRRORED_REPEAT;if(r===Ra)return e.NEAREST;if(r===Pa)return e.NEAREST_MIPMAP_NEAREST;if(r===Da)return e.NEAREST_MIPMAP_LINEAR;if(r===Ua)return e.LINEAR;if(r===Ia)return e.LINEAR_MIPMAP_NEAREST;if(r===Oa)return e.LINEAR_MIPMAP_LINEAR;if(r===Na)return e.UNSIGNED_BYTE;if(r===ka)return e.UNSIGNED_SHORT_4_4_4_4;if(r===Wa)return e.UNSIGNED_SHORT_5_5_5_1;if(r===Xa)return e.UNSIGNED_SHORT_5_6_5;if(r===Fa)return e.BYTE;if(r===za)return e.SHORT;if(r===Ba)return e.UNSIGNED_SHORT;if(r===Ga)return e.INT;if(r===Ha)return e.UNSIGNED_INT;if(r===ja)return e.FLOAT;if(r===Va&&null!==(i=t.get(\"OES_texture_half_float\")))return i.HALF_FLOAT_OES;if(r===Ya)return e.ALPHA;if(r===Za)return e.RGB;if(r===Ja)return e.RGBA;if(r===Ka)return e.LUMINANCE;if(r===Qa)return e.LUMINANCE_ALPHA;if(r===$a)return e.DEPTH_COMPONENT;if(r===es)return e.DEPTH_STENCIL;if(r===jo)return e.FUNC_ADD;if(r===Vo)return e.FUNC_SUBTRACT;if(r===ko)return e.FUNC_REVERSE_SUBTRACT;if(r===qo)return e.ZERO;if(r===Yo)return e.ONE;if(r===Zo)return e.SRC_COLOR;if(r===Jo)return e.ONE_MINUS_SRC_COLOR;if(r===Ko)return e.SRC_ALPHA;if(r===Qo)return e.ONE_MINUS_SRC_ALPHA;if(r===$o)return e.DST_ALPHA;if(r===ea)return e.ONE_MINUS_DST_ALPHA;if(r===ta)return e.DST_COLOR;if(r===ra)return e.ONE_MINUS_DST_COLOR;if(r===ia)return e.SRC_ALPHA_SATURATE;if((r===ts||r===rs||r===is||r===ns)&&null!==(i=t.get(\"WEBGL_compressed_texture_s3tc\"))){if(r===ts)return i.COMPRESSED_RGB_S3TC_DXT1_EXT;if(r===rs)return i.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(r===is)return i.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(r===ns)return i.COMPRESSED_RGBA_S3TC_DXT5_EXT}if((r===os||r===as||r===ss||r===cs)&&null!==(i=t.get(\"WEBGL_compressed_texture_pvrtc\"))){if(r===os)return i.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(r===as)return i.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(r===ss)return i.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(r===cs)return i.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(r===ls&&null!==(i=t.get(\"WEBGL_compressed_texture_etc1\")))return i.COMPRESSED_RGB_ETC1_WEBGL;if((r===us||r===hs||r===ds||r===ps||r===fs||r===ms||r===vs||r===gs||r===ys||r===xs||r===_s||r===bs||r===ws||r===Ms)&&null!==(i=t.get(\"WEBGL_compressed_texture_astc\")))return r;if((r===Wo||r===Xo)&&null!==(i=t.get(\"EXT_blend_minmax\"))){if(r===Wo)return i.MIN_EXT;if(r===Xo)return i.MAX_EXT}return r===qa&&null!==(i=t.get(\"WEBGL_depth_texture\"))?i.UNSIGNED_INT_24_8_WEBGL:0}return{convert:r}}function wt(e,t,r,i){M.call(this),this.type=\"PerspectiveCamera\",this.fov=void 0!==e?e:50,this.zoom=1,this.near=void 0!==r?r:.1,this.far=void 0!==i?i:2e3,this.focus=10,this.aspect=void 0!==t?t:1,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}function Mt(e){wt.call(this),this.cameras=e||[]}function Et(e){function t(){return null!==n&&!0===n.isPresenting}function r(){if(t()){var r=n.getEyeParameters(\"left\"),o=r.renderWidth,a=r.renderHeight;_=e.getPixelRatio(),x=e.getSize(),e.setDrawingBufferSize(2*o,a,1)}else i.enabled&&e.setDrawingBufferSize(x.width,x.height,_)}var i=this,n=null,c=null,l=null,h=new o,d=new o;\"undefined\"!=typeof window&&\"VRFrameData\"in window&&(c=new window.VRFrameData,window.addEventListener(\"vrdisplaypresentchange\",r,!1));var p=new o,f=new a,m=new s,v=new wt;v.bounds=new u(0,0,.5,1),v.layers.enable(1);var g=new wt;g.bounds=new u(.5,0,.5,1),g.layers.enable(2);var y=new Mt([v,g]);y.layers.enable(1),y.layers.enable(2);var x,_;this.enabled=!1,this.userHeight=1.6,this.getDevice=function(){return n},this.setDevice=function(e){void 0!==e&&(n=e)},this.setPoseTarget=function(e){void 0!==e&&(l=e)},this.getCamera=function(e){if(null===n)return e;n.depthNear=e.near,n.depthFar=e.far,n.getFrameData(c);var t=n.stageParameters;t?h.fromArray(t.sittingToStandingTransform):h.makeTranslation(0,i.userHeight,0);var r=c.pose,o=null!==l?l:e;if(o.matrix.copy(h),o.matrix.decompose(o.position,o.quaternion,o.scale),null!==r.orientation&&(f.fromArray(r.orientation),o.quaternion.multiply(f)),null!==r.position&&(f.setFromRotationMatrix(h),m.fromArray(r.position),m.applyQuaternion(f),o.position.add(m)),o.updateMatrixWorld(),!1===n.isPresenting)return e;v.near=e.near,g.near=e.near,v.far=e.far,g.far=e.far,y.matrixWorld.copy(e.matrixWorld),y.matrixWorldInverse.copy(e.matrixWorldInverse),v.matrixWorldInverse.fromArray(c.leftViewMatrix),g.matrixWorldInverse.fromArray(c.rightViewMatrix),d.getInverse(h),v.matrixWorldInverse.multiply(d),g.matrixWorldInverse.multiply(d);var a=o.parent;null!==a&&(p.getInverse(a.matrixWorld),v.matrixWorldInverse.multiply(p),g.matrixWorldInverse.multiply(p)),v.matrixWorld.getInverse(v.matrixWorldInverse),g.matrixWorld.getInverse(g.matrixWorldInverse),v.projectionMatrix.fromArray(c.leftProjectionMatrix),g.projectionMatrix.fromArray(c.rightProjectionMatrix),y.projectionMatrix.copy(v.projectionMatrix);var s=n.getLayers();if(s.length){var u=s[0];null!==u.leftBounds&&4===u.leftBounds.length&&v.bounds.fromArray(u.leftBounds),null!==u.rightBounds&&4===u.rightBounds.length&&g.bounds.fromArray(u.rightBounds)}return y},this.getStandingMatrix=function(){return h},this.submitFrame=function(){t()&&n.submitFrame()},this.dispose=function(){\"undefined\"!=typeof window&&window.removeEventListener(\"vrdisplaypresentchange\",r)}}function St(e){function t(){return null===ue?we:1}function r(){Ue=new te(oe),Ue.get(\"WEBGL_depth_texture\"),Ue.get(\"OES_texture_float\"),Ue.get(\"OES_texture_float_linear\"),Ue.get(\"OES_texture_half_float\"),Ue.get(\"OES_texture_half_float_linear\"),Ue.get(\"OES_standard_derivatives\"),Ue.get(\"OES_element_index_uint\"),Ue.get(\"ANGLE_instanced_arrays\"),Ke=new bt(oe,Ue),Ie=new $(oe,Ue,e),Oe=new xt(oe,Ue,Ke),Oe.scissor(ge.copy(Ee).multiplyScalar(we)),Oe.viewport(ve.copy(Me).multiplyScalar(we)),Ne=new ne(oe),Fe=new ot,ze=new _t(oe,Ue,Oe,Fe,Ie,Ke,Ne),Be=new x(oe),Ge=new re(oe,Be,Ne),He=new se(Ge,Ne),qe=new ae(oe),Ve=new nt(ce,Ue,Ie),ke=new lt,We=new pt,Xe=new K(ce,Oe,Ge,X),Ye=new Q(oe,Ue,Ne),Ze=new ie(oe,Ue,Ne),Je=new yt(ce,oe,Oe,ze,Ie),Ne.programs=Ve.programs,ce.context=oe,ce.capabilities=Ie,ce.extensions=Ue,ce.properties=Fe,ce.renderLists=ke,ce.state=Oe,ce.info=Ne}function i(e){e.preventDefault(),console.log(\"THREE.WebGLRenderer: Context Lost.\"),le=!0}function n(){console.log(\"THREE.WebGLRenderer: Context Restored.\"),le=!1,r()}function a(e){var t=e.target;t.removeEventListener(\"dispose\",a),c(t)}function c(e){l(e),Fe.remove(e)}function l(e){var t=Fe.get(e).program;e.program=void 0,void 0!==t&&Ve.releaseProgram(t)}function h(e,t,r){e.render(function(e){ce.renderBufferImmediate(e,t,r)})}function d(e,t,r){if(r&&r.isInstancedBufferGeometry&&null===Ue.get(\"ANGLE_instanced_arrays\"))return void console.error(\"THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.\");Oe.initAttributes();var i=r.attributes,n=t.getAttributes(),o=e.defaultAttributeValues;for(var a in n){var s=n[a];if(s>=0){var c=i[a];if(void 0!==c){var l=c.normalized,u=c.itemSize,h=Be.get(c);if(void 0===h)continue;var d=h.buffer,p=h.type,f=h.bytesPerElement;if(c.isInterleavedBufferAttribute){var m=c.data,v=m.stride,g=c.offset;m&&m.isInstancedInterleavedBuffer?(Oe.enableAttributeAndDivisor(s,m.meshPerAttribute),void 0===r.maxInstancedCount&&(r.maxInstancedCount=m.meshPerAttribute*m.count)):Oe.enableAttribute(s),oe.bindBuffer(oe.ARRAY_BUFFER,d),oe.vertexAttribPointer(s,u,p,l,v*f,g*f)}else c.isInstancedBufferAttribute?(Oe.enableAttributeAndDivisor(s,c.meshPerAttribute),void 0===r.maxInstancedCount&&(r.maxInstancedCount=c.meshPerAttribute*c.count)):Oe.enableAttribute(s),oe.bindBuffer(oe.ARRAY_BUFFER,d),oe.vertexAttribPointer(s,u,p,l,0,0)}else if(void 0!==o){var y=o[a];if(void 0!==y)switch(y.length){case 2:oe.vertexAttrib2fv(s,y);break;case 3:oe.vertexAttrib3fv(s,y);break;case 4:oe.vertexAttrib4fv(s,y);break;default:oe.vertexAttrib1fv(s,y)}}}}Oe.disableUnusedAttributes()}function f(){et||(v(),et=!0)}function m(){et=!1}function v(){var e=Qe.getDevice();e&&e.isPresenting?e.requestAnimationFrame(y):window.requestAnimationFrame(y)}function y(e){!1!==et&&(tt(e),v())}function _(e,t,r){if(!1!==e.visible){if(e.layers.test(t.layers))if(e.isLight)J.pushLight(e),e.castShadow&&J.pushShadow(e);else if(e.isSprite)e.frustumCulled&&!Te.intersectsSprite(e)||J.pushSprite(e);else if(e.isImmediateRenderObject)r&&Pe.setFromMatrixPosition(e.matrixWorld).applyMatrix4(Re),Z.push(e,null,e.material,Pe.z,null);else if((e.isMesh||e.isLine||e.isPoints)&&(e.isSkinnedMesh&&e.skeleton.update(),!e.frustumCulled||Te.intersectsObject(e))){r&&Pe.setFromMatrixPosition(e.matrixWorld).applyMatrix4(Re);var i=He.update(e),n=e.material;if(Array.isArray(n))for(var o=i.groups,a=0,s=o.length;a<s;a++){var c=o[a],l=n[c.materialIndex];l&&l.visible&&Z.push(e,i,l,Pe.z,c)}else n.visible&&Z.push(e,i,n,Pe.z,null)}for(var u=e.children,a=0,s=u.length;a<s;a++)_(u[a],t,r)}}function b(e,t,r,i){for(var n=0,o=e.length;n<o;n++){var a=e[n],s=a.object,c=a.geometry,l=void 0===i?a.material:i,u=a.group;if(r.isArrayCamera){me=r;for(var h=r.cameras,d=0,p=h.length;d<p;d++){var f=h[d];if(s.layers.test(f.layers)){var m=f.bounds,v=m.x*_e,g=m.y*be,y=m.z*_e,x=m.w*be;Oe.viewport(ve.set(v,g,y,x).multiplyScalar(we)),w(s,t,f,c,l,u)}}}else me=null,w(s,t,r,c,l,u)}}function w(e,t,r,i,n,o){if(e.onBeforeRender(ce,t,r,i,n,o),J=We.get(t,me||r),e.modelViewMatrix.multiplyMatrices(r.matrixWorldInverse,e.matrixWorld),e.normalMatrix.getNormalMatrix(e.modelViewMatrix),e.isImmediateRenderObject){var a=e.isMesh&&e.matrixWorld.determinant()<0;Oe.setMaterial(n,a);var s=E(r,t.fog,n,e);pe=\"\",h(e,s,n)}else ce.renderBufferDirect(r,t.fog,i,n,e,o);e.onAfterRender(ce,t,r,i,n,o),J=We.get(t,me||r)}function M(e,t,r){var i=Fe.get(e),n=J.state.lights,o=J.state.shadowsArray,s=Ve.getParameters(e,n.state,o,t,Ae.numPlanes,Ae.numIntersection,r),c=Ve.getProgramCode(e,s),u=i.program,h=!0;if(void 0===u)e.addEventListener(\"dispose\",a);else if(u.code!==c)l(e);else if(i.lightsHash!==n.state.hash)Fe.update(e,\"lightsHash\",n.state.hash),h=!1;else{if(void 0!==s.shaderID)return;h=!1}if(h){if(s.shaderID){var d=ks[s.shaderID];i.shader={name:e.type,uniforms:Hs.clone(d.uniforms),vertexShader:d.vertexShader,fragmentShader:d.fragmentShader}}else i.shader={name:e.type,uniforms:e.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader};e.onBeforeCompile(i.shader,ce),u=Ve.acquireProgram(e,i.shader,s,c),i.program=u,e.program=u}var p=u.getAttributes();if(e.morphTargets){e.numSupportedMorphTargets=0;for(var f=0;f<ce.maxMorphTargets;f++)p[\"morphTarget\"+f]>=0&&e.numSupportedMorphTargets++}if(e.morphNormals){e.numSupportedMorphNormals=0;for(var f=0;f<ce.maxMorphNormals;f++)p[\"morphNormal\"+f]>=0&&e.numSupportedMorphNormals++}var m=i.shader.uniforms;(e.isShaderMaterial||e.isRawShaderMaterial)&&!0!==e.clipping||(i.numClippingPlanes=Ae.numPlanes,i.numIntersection=Ae.numIntersection,m.clippingPlanes=Ae.uniform),i.fog=t,i.lightsHash=n.state.hash,e.lights&&(m.ambientLightColor.value=n.state.ambient,m.directionalLights.value=n.state.directional,m.spotLights.value=n.state.spot,m.rectAreaLights.value=n.state.rectArea,m.pointLights.value=n.state.point,m.hemisphereLights.value=n.state.hemi,m.directionalShadowMap.value=n.state.directionalShadowMap,m.directionalShadowMatrix.value=n.state.directionalShadowMatrix,m.spotShadowMap.value=n.state.spotShadowMap,m.spotShadowMatrix.value=n.state.spotShadowMatrix,m.pointShadowMap.value=n.state.pointShadowMap,m.pointShadowMatrix.value=n.state.pointShadowMatrix);var v=i.program.getUniforms(),g=je.seqWithValue(v.seq,m);i.uniformsList=g}function E(e,t,r,i){xe=0;var n=Fe.get(r),o=J.state.lights;if(Le&&(Ce||e!==fe)){var a=e===fe&&r.id===de;Ae.setState(r.clippingPlanes,r.clipIntersection,r.clipShadows,e,n,a)}!1===r.needsUpdate&&(void 0===n.program?r.needsUpdate=!0:r.fog&&n.fog!==t?r.needsUpdate=!0:r.lights&&n.lightsHash!==o.state.hash?r.needsUpdate=!0:void 0===n.numClippingPlanes||n.numClippingPlanes===Ae.numPlanes&&n.numIntersection===Ae.numIntersection||(r.needsUpdate=!0)),r.needsUpdate&&(M(r,t,i),r.needsUpdate=!1);var s=!1,c=!1,l=!1,u=n.program,h=u.getUniforms(),d=n.shader.uniforms;if(Oe.useProgram(u.program)&&(s=!0,c=!0,l=!0),r.id!==de&&(de=r.id,c=!0),s||e!==fe){if(h.setValue(oe,\"projectionMatrix\",e.projectionMatrix),Ie.logarithmicDepthBuffer&&h.setValue(oe,\"logDepthBufFC\",2/(Math.log(e.far+1)/Math.LN2)),fe!==(me||e)&&(fe=me||e,c=!0,l=!0),r.isShaderMaterial||r.isMeshPhongMaterial||r.isMeshStandardMaterial||r.envMap){var f=h.map.cameraPosition;void 0!==f&&f.setValue(oe,Pe.setFromMatrixPosition(e.matrixWorld))}(r.isMeshPhongMaterial||r.isMeshLambertMaterial||r.isMeshBasicMaterial||r.isMeshStandardMaterial||r.isShaderMaterial||r.skinning)&&h.setValue(oe,\"viewMatrix\",e.matrixWorldInverse)}if(r.skinning){h.setOptional(oe,i,\"bindMatrix\"),h.setOptional(oe,i,\"bindMatrixInverse\");var m=i.skeleton;if(m){var v=m.bones;if(Ie.floatVertexTextures){if(void 0===m.boneTexture){var g=Math.sqrt(4*v.length);g=zs.ceilPowerOfTwo(g),g=Math.max(g,4);var y=new Float32Array(g*g*4);y.set(m.boneMatrices);var x=new p(y,g,g,Ja,ja);x.needsUpdate=!0,m.boneMatrices=y,m.boneTexture=x,m.boneTextureSize=g}h.setValue(oe,\"boneTexture\",m.boneTexture),h.setValue(oe,\"boneTextureSize\",m.boneTextureSize)}else h.setOptional(oe,m,\"boneMatrices\")}}return c&&(h.setValue(oe,\"toneMappingExposure\",ce.toneMappingExposure),h.setValue(oe,\"toneMappingWhitePoint\",ce.toneMappingWhitePoint),r.lights&&z(d,l),t&&r.fog&&C(d,t),r.isMeshBasicMaterial?S(d,r):r.isMeshLambertMaterial?(S(d,r),R(d,r)):r.isMeshPhongMaterial?(S(d,r),r.isMeshToonMaterial?D(d,r):P(d,r)):r.isMeshStandardMaterial?(S(d,r),r.isMeshPhysicalMaterial?I(d,r):U(d,r)):r.isMeshDepthMaterial?(S(d,r),O(d,r)):r.isMeshDistanceMaterial?(S(d,r),N(d,r)):r.isMeshNormalMaterial?(S(d,r),F(d,r)):r.isLineBasicMaterial?(T(d,r),r.isLineDashedMaterial&&A(d,r)):r.isPointsMaterial?L(d,r):r.isShadowMaterial&&(d.color.value=r.color,d.opacity.value=r.opacity),void 0!==d.ltc_1&&(d.ltc_1.value=Vs.LTC_1),void 0!==d.ltc_2&&(d.ltc_2.value=Vs.LTC_2),je.upload(oe,n.uniformsList,d,ce)),r.isShaderMaterial&&!0===r.uniformsNeedUpdate&&(je.upload(oe,n.uniformsList,d,ce),r.uniformsNeedUpdate=!1),h.setValue(oe,\"modelViewMatrix\",i.modelViewMatrix),h.setValue(oe,\"normalMatrix\",i.normalMatrix),h.setValue(oe,\"modelMatrix\",i.matrixWorld),u}function S(e,t){e.opacity.value=t.opacity,t.color&&(e.diffuse.value=t.color),t.emissive&&e.emissive.value.copy(t.emissive).multiplyScalar(t.emissiveIntensity),t.map&&(e.map.value=t.map),t.alphaMap&&(e.alphaMap.value=t.alphaMap),t.specularMap&&(e.specularMap.value=t.specularMap),t.envMap&&(e.envMap.value=t.envMap,e.flipEnvMap.value=t.envMap&&t.envMap.isCubeTexture?-1:1,e.reflectivity.value=t.reflectivity,e.refractionRatio.value=t.refractionRatio,e.maxMipLevel.value=Fe.get(t.envMap).__maxMipLevel),t.lightMap&&(e.lightMap.value=t.lightMap,e.lightMapIntensity.value=t.lightMapIntensity),t.aoMap&&(e.aoMap.value=t.aoMap,e.aoMapIntensity.value=t.aoMapIntensity);var r;t.map?r=t.map:t.specularMap?r=t.specularMap:t.displacementMap?r=t.displacementMap:t.normalMap?r=t.normalMap:t.bumpMap?r=t.bumpMap:t.roughnessMap?r=t.roughnessMap:t.metalnessMap?r=t.metalnessMap:t.alphaMap?r=t.alphaMap:t.emissiveMap&&(r=t.emissiveMap),void 0!==r&&(r.isWebGLRenderTarget&&(r=r.texture),!0===r.matrixAutoUpdate&&r.updateMatrix(),e.uvTransform.value.copy(r.matrix))}function T(e,t){e.diffuse.value=t.color,e.opacity.value=t.opacity}function A(e,t){e.dashSize.value=t.dashSize,e.totalSize.value=t.dashSize+t.gapSize,e.scale.value=t.scale}function L(e,t){e.diffuse.value=t.color,e.opacity.value=t.opacity,e.size.value=t.size*we,e.scale.value=.5*be,e.map.value=t.map,null!==t.map&&(!0===t.map.matrixAutoUpdate&&t.map.updateMatrix(),e.uvTransform.value.copy(t.map.matrix))}function C(e,t){e.fogColor.value=t.color,t.isFog?(e.fogNear.value=t.near,e.fogFar.value=t.far):t.isFogExp2&&(e.fogDensity.value=t.density)}function R(e,t){t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap)}function P(e,t){e.specular.value=t.specular,e.shininess.value=Math.max(t.shininess,1e-4),t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap),t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale),t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale)),t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}function D(e,t){P(e,t),t.gradientMap&&(e.gradientMap.value=t.gradientMap)}function U(e,t){e.roughness.value=t.roughness,e.metalness.value=t.metalness,t.roughnessMap&&(e.roughnessMap.value=t.roughnessMap),t.metalnessMap&&(e.metalnessMap.value=t.metalnessMap),t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap),t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale),t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale)),t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias),t.envMap&&(e.envMapIntensity.value=t.envMapIntensity)}function I(e,t){e.clearCoat.value=t.clearCoat,e.clearCoatRoughness.value=t.clearCoatRoughness,U(e,t)}function O(e,t){t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}function N(e,t){t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias),e.referencePosition.value.copy(t.referencePosition),e.nearDistance.value=t.nearDistance,e.farDistance.value=t.farDistance}function F(e,t){t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale),t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale)),t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}function z(e,t){e.ambientLightColor.needsUpdate=t,e.directionalLights.needsUpdate=t,e.pointLights.needsUpdate=t,e.spotLights.needsUpdate=t,e.rectAreaLights.needsUpdate=t,e.hemisphereLights.needsUpdate=t}function B(){var e=xe;return e>=Ie.maxTextures&&console.warn(\"THREE.WebGLRenderer: Trying to use \"+e+\" texture units while this GPU supports only \"+Ie.maxTextures),xe+=1,e}console.log(\"THREE.WebGLRenderer\",Mo),e=e||{};var G=void 0!==e.canvas?e.canvas:document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"canvas\"),H=void 0!==e.context?e.context:null,j=void 0!==e.alpha&&e.alpha,V=void 0===e.depth||e.depth,k=void 0===e.stencil||e.stencil,W=void 0!==e.antialias&&e.antialias,X=void 0===e.premultipliedAlpha||e.premultipliedAlpha,q=void 0!==e.preserveDrawingBuffer&&e.preserveDrawingBuffer,Y=void 0!==e.powerPreference?e.powerPreference:\"default\",Z=null,J=null;this.domElement=G,this.context=null,this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.gammaInput=!1,this.gammaOutput=!1,this.physicallyCorrectLights=!1,this.toneMapping=va,this.toneMappingExposure=1,this.toneMappingWhitePoint=1,this.maxMorphTargets=8,this.maxMorphNormals=4;var oe,ce=this,le=!1,ue=null,he=null,de=-1,pe=\"\",fe=null,me=null,ve=new u,ge=new u,ye=null,xe=0,_e=G.width,be=G.height,we=1,Me=new u(0,0,_e,be),Ee=new u(0,0,_e,be),Se=!1,Te=new g,Ae=new ee,Le=!1,Ce=!1,Re=new o,Pe=new s;try{var De={alpha:j,depth:V,stencil:k,antialias:W,premultipliedAlpha:X,preserveDrawingBuffer:q,powerPreference:Y};if(G.addEventListener(\"webglcontextlost\",i,!1),G.addEventListener(\"webglcontextrestored\",n,!1),null===(oe=H||G.getContext(\"webgl\",De)||G.getContext(\"experimental-webgl\",De)))throw null!==G.getContext(\"webgl\")?new Error(\"Error creating WebGL context with your selected attributes.\"):new Error(\"Error creating WebGL context.\");void 0===oe.getShaderPrecisionFormat&&(oe.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(e){console.error(\"THREE.WebGLRenderer: \"+e.message)}var Ue,Ie,Oe,Ne,Fe,ze,Be,Ge,He,Ve,ke,We,Xe,qe,Ye,Ze,Je,Ke;r();var Qe=new Et(ce);this.vr=Qe;var $e=new vt(ce,He,Ie.maxTextureSize);this.shadowMap=$e,this.getContext=function(){return oe},this.getContextAttributes=function(){return oe.getContextAttributes()},this.forceContextLoss=function(){var e=Ue.get(\"WEBGL_lose_context\");e&&e.loseContext()},this.forceContextRestore=function(){var e=Ue.get(\"WEBGL_lose_context\");e&&e.restoreContext()},this.getPixelRatio=function(){return we},this.setPixelRatio=function(e){void 0!==e&&(we=e,this.setSize(_e,be,!1))},this.getSize=function(){return{width:_e,height:be}},this.setSize=function(e,t,r){var i=Qe.getDevice();if(i&&i.isPresenting)return void console.warn(\"THREE.WebGLRenderer: Can't change size while VR device is presenting.\");_e=e,be=t,G.width=e*we,G.height=t*we,!1!==r&&(G.style.width=e+\"px\",G.style.height=t+\"px\"),this.setViewport(0,0,e,t)},this.getDrawingBufferSize=function(){return{width:_e*we,height:be*we}},this.setDrawingBufferSize=function(e,t,r){_e=e,be=t,we=r,G.width=e*r,G.height=t*r,this.setViewport(0,0,e,t)},this.getCurrentViewport=function(){return ve},this.setViewport=function(e,t,r,i){Me.set(e,be-t-i,r,i),Oe.viewport(ve.copy(Me).multiplyScalar(we))},this.setScissor=function(e,t,r,i){Ee.set(e,be-t-i,r,i),Oe.scissor(ge.copy(Ee).multiplyScalar(we))},this.setScissorTest=function(e){Oe.setScissorTest(Se=e)},this.getClearColor=function(){return Xe.getClearColor()},this.setClearColor=function(){Xe.setClearColor.apply(Xe,arguments)},this.getClearAlpha=function(){return Xe.getClearAlpha()},this.setClearAlpha=function(){Xe.setClearAlpha.apply(Xe,arguments)},this.clear=function(e,t,r){var i=0;(void 0===e||e)&&(i|=oe.COLOR_BUFFER_BIT),(void 0===t||t)&&(i|=oe.DEPTH_BUFFER_BIT),(void 0===r||r)&&(i|=oe.STENCIL_BUFFER_BIT),oe.clear(i)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.clearTarget=function(e,t,r,i){this.setRenderTarget(e),this.clear(t,r,i)},this.dispose=function(){G.removeEventListener(\"webglcontextlost\",i,!1),G.removeEventListener(\"webglcontextrestored\",n,!1),ke.dispose(),We.dispose(),Fe.dispose(),He.dispose(),Qe.dispose(),m()},this.renderBufferImmediate=function(e,t,r){Oe.initAttributes();var i=Fe.get(e);e.hasPositions&&!i.position&&(i.position=oe.createBuffer()),e.hasNormals&&!i.normal&&(i.normal=oe.createBuffer()),e.hasUvs&&!i.uv&&(i.uv=oe.createBuffer()),e.hasColors&&!i.color&&(i.color=oe.createBuffer());var n=t.getAttributes();if(e.hasPositions&&(oe.bindBuffer(oe.ARRAY_BUFFER,i.position),oe.bufferData(oe.ARRAY_BUFFER,e.positionArray,oe.DYNAMIC_DRAW),Oe.enableAttribute(n.position),oe.vertexAttribPointer(n.position,3,oe.FLOAT,!1,0,0)),e.hasNormals){if(oe.bindBuffer(oe.ARRAY_BUFFER,i.normal),!r.isMeshPhongMaterial&&!r.isMeshStandardMaterial&&!r.isMeshNormalMaterial&&!0===r.flatShading)for(var o=0,a=3*e.count;o<a;o+=9){var s=e.normalArray,c=(s[o+0]+s[o+3]+s[o+6])/3,l=(s[o+1]+s[o+4]+s[o+7])/3,u=(s[o+2]+s[o+5]+s[o+8])/3;s[o+0]=c,s[o+1]=l,s[o+2]=u,s[o+3]=c,s[o+4]=l,s[o+5]=u,s[o+6]=c,s[o+7]=l,s[o+8]=u}oe.bufferData(oe.ARRAY_BUFFER,e.normalArray,oe.DYNAMIC_DRAW),Oe.enableAttribute(n.normal),oe.vertexAttribPointer(n.normal,3,oe.FLOAT,!1,0,0)}e.hasUvs&&r.map&&(oe.bindBuffer(oe.ARRAY_BUFFER,i.uv),oe.bufferData(oe.ARRAY_BUFFER,e.uvArray,oe.DYNAMIC_DRAW),Oe.enableAttribute(n.uv),oe.vertexAttribPointer(n.uv,2,oe.FLOAT,!1,0,0)),e.hasColors&&r.vertexColors!==Uo&&(oe.bindBuffer(oe.ARRAY_BUFFER,i.color),oe.bufferData(oe.ARRAY_BUFFER,e.colorArray,oe.DYNAMIC_DRAW),Oe.enableAttribute(n.color),oe.vertexAttribPointer(n.color,3,oe.FLOAT,!1,0,0)),Oe.disableUnusedAttributes(),oe.drawArrays(oe.TRIANGLES,0,e.count),e.count=0},this.renderBufferDirect=function(e,r,i,n,o,a){var s=o.isMesh&&o.matrixWorld.determinant()<0;Oe.setMaterial(n,s);var c=E(e,r,n,o),l=i.id+\"_\"+c.id+\"_\"+(!0===n.wireframe),u=!1;l!==pe&&(pe=l,u=!0),o.morphTargetInfluences&&(qe.update(o,i,n,c),u=!0);var h=i.index,p=i.attributes.position,f=1;!0===n.wireframe&&(h=Ge.getWireframeAttribute(i),f=2);var m,v=Ye;null!==h&&(m=Be.get(h),v=Ze,v.setIndex(m)),u&&(d(n,c,i),null!==h&&oe.bindBuffer(oe.ELEMENT_ARRAY_BUFFER,m.buffer));var g=1/0;null!==h?g=h.count:void 0!==p&&(g=p.count);var y=i.drawRange.start*f,x=i.drawRange.count*f,_=null!==a?a.start*f:0,b=null!==a?a.count*f:1/0,w=Math.max(y,_),M=Math.min(g,y+x,_+b)-1,S=Math.max(0,M-w+1);if(0!==S){if(o.isMesh)if(!0===n.wireframe)Oe.setLineWidth(n.wireframeLinewidth*t()),v.setMode(oe.LINES);else switch(o.drawMode){case Ts:v.setMode(oe.TRIANGLES);break;case As:v.setMode(oe.TRIANGLE_STRIP);break;case Ls:v.setMode(oe.TRIANGLE_FAN)}else if(o.isLine){var T=n.linewidth;void 0===T&&(T=1),Oe.setLineWidth(T*t()),o.isLineSegments?v.setMode(oe.LINES):o.isLineLoop?v.setMode(oe.LINE_LOOP):v.setMode(oe.LINE_STRIP)}else o.isPoints&&v.setMode(oe.POINTS);i&&i.isInstancedBufferGeometry?i.maxInstancedCount>0&&v.renderInstances(i,w,S):v.render(w,S)}},this.compile=function(e,t){J=We.get(e,t),J.init(),e.traverse(function(e){e.isLight&&(J.pushLight(e),e.castShadow&&J.pushShadow(e))}),J.setupLights(t),e.traverse(function(t){if(t.material)if(Array.isArray(t.material))for(var r=0;r<t.material.length;r++)M(t.material[r],e.fog,t);else M(t.material,e.fog,t)})};var et=!1,tt=null;this.animate=function(e){tt=e,null!==tt?f():m()},this.render=function(e,t,r,i){if(!t||!t.isCamera)return void console.error(\"THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.\");if(!le){pe=\"\",de=-1,fe=null,!0===e.autoUpdate&&e.updateMatrixWorld(),null===t.parent&&t.updateMatrixWorld(),Qe.enabled&&(t=Qe.getCamera(t)),J=We.get(e,t),J.init(),e.onBeforeRender(ce,e,t,r),Re.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),Te.setFromMatrix(Re),Ce=this.localClippingEnabled,Le=Ae.init(this.clippingPlanes,Ce,t),Z=ke.get(e,t),Z.init(),_(e,t,ce.sortObjects),!0===ce.sortObjects&&Z.sort(),Le&&Ae.beginShadows();var n=J.state.shadowsArray;$e.render(n,e,t),J.setupLights(t),Le&&Ae.endShadows(),this.info.autoReset&&this.info.reset(),void 0===r&&(r=null),this.setRenderTarget(r),Xe.render(Z,e,t,i);var o=Z.opaque,a=Z.transparent;if(e.overrideMaterial){var s=e.overrideMaterial;o.length&&b(o,e,t,s),a.length&&b(a,e,t,s)}else o.length&&b(o,e,t),a.length&&b(a,e,t);var c=J.state.spritesArray;Je.render(c,e,t),r&&ze.updateRenderTargetMipmap(r),Oe.buffers.depth.setTest(!0),Oe.buffers.depth.setMask(!0),Oe.buffers.color.setMask(!0),Oe.setPolygonOffset(!1),e.onAfterRender(ce,e,t),Qe.enabled&&Qe.submitFrame(),Z=null,J=null}},this.allocTextureUnit=B,this.setTexture2D=function(){var e=!1;return function(t,r){t&&t.isWebGLRenderTarget&&(e||(console.warn(\"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\"),e=!0),t=t.texture),ze.setTexture2D(t,r)}}(),this.setTexture=function(){var e=!1;return function(t,r){e||(console.warn(\"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\"),e=!0),ze.setTexture2D(t,r)}}(),this.setTextureCube=function(){var e=!1;return function(t,r){t&&t.isWebGLRenderTargetCube&&(e||(console.warn(\"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\"),e=!0),t=t.texture),t&&t.isCubeTexture||Array.isArray(t.image)&&6===t.image.length?ze.setTextureCube(t,r):ze.setTextureCubeDynamic(t,r)}}(),this.getRenderTarget=function(){return ue},this.setRenderTarget=function(e){ue=e,e&&void 0===Fe.get(e).__webglFramebuffer&&ze.setupRenderTarget(e);var t=null,r=!1;if(e){var i=Fe.get(e).__webglFramebuffer;e.isWebGLRenderTargetCube?(t=i[e.activeCubeFace],r=!0):t=i,ve.copy(e.viewport),ge.copy(e.scissor),ye=e.scissorTest}else ve.copy(Me).multiplyScalar(we),ge.copy(Ee).multiplyScalar(we),ye=Se;if(he!==t&&(oe.bindFramebuffer(oe.FRAMEBUFFER,t),he=t),Oe.viewport(ve),Oe.scissor(ge),Oe.setScissorTest(ye),r){var n=Fe.get(e.texture);oe.framebufferTexture2D(oe.FRAMEBUFFER,oe.COLOR_ATTACHMENT0,oe.TEXTURE_CUBE_MAP_POSITIVE_X+e.activeCubeFace,n.__webglTexture,e.activeMipMapLevel)}},this.readRenderTargetPixels=function(e,t,r,i,n,o){if(!e||!e.isWebGLRenderTarget)return void console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.\");var a=Fe.get(e).__webglFramebuffer;if(a){var s=!1;a!==he&&(oe.bindFramebuffer(oe.FRAMEBUFFER,a),s=!0);try{var c=e.texture,l=c.format,u=c.type;if(l!==Ja&&Ke.convert(l)!==oe.getParameter(oe.IMPLEMENTATION_COLOR_READ_FORMAT))return void console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.\");if(!(u===Na||Ke.convert(u)===oe.getParameter(oe.IMPLEMENTATION_COLOR_READ_TYPE)||u===ja&&(Ue.get(\"OES_texture_float\")||Ue.get(\"WEBGL_color_buffer_float\"))||u===Va&&Ue.get(\"EXT_color_buffer_half_float\")))return void console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.\");oe.checkFramebufferStatus(oe.FRAMEBUFFER)===oe.FRAMEBUFFER_COMPLETE?t>=0&&t<=e.width-i&&r>=0&&r<=e.height-n&&oe.readPixels(t,r,i,n,Ke.convert(l),Ke.convert(u),o):console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.\")}finally{s&&oe.bindFramebuffer(oe.FRAMEBUFFER,he)}}},this.copyFramebufferToTexture=function(e,t,r){var i=t.image.width,n=t.image.height,o=Ke.convert(t.format);this.setTexture2D(t,0),oe.copyTexImage2D(oe.TEXTURE_2D,r||0,o,e.x,e.y,i,n,0)},this.copyTextureToTexture=function(e,t,r,i){var n=t.image.width,o=t.image.height,a=Ke.convert(r.format),s=Ke.convert(r.type),c=t.isDataTexture?t.image.data:t.image;this.setTexture2D(r,0),oe.texSubImage2D(oe.TEXTURE_2D,i||0,e.x,e.y,n,o,a,s,c)}}function Tt(e,t){this.name=\"\",this.color=new y(e),this.density=void 0!==t?t:25e-5}function At(e,t,r){this.name=\"\",this.color=new y(e),this.near=void 0!==t?t:1,this.far=void 0!==r?r:1e3}function Lt(){w.call(this),this.type=\"Scene\",this.background=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0}function Ct(e){k.call(this),this.type=\"SpriteMaterial\",this.color=new y(16777215),this.map=null,this.rotation=0,this.fog=!1,this.lights=!1,this.setValues(e)}function Rt(e){w.call(this),this.type=\"Sprite\",this.material=void 0!==e?e:new Ct,this.center=new n(.5,.5)}function Pt(){w.call(this),this.type=\"LOD\",Object.defineProperties(this,{levels:{enumerable:!0,value:[]}})}function Dt(e,t){if(e=e||[],this.bones=e.slice(0),this.boneMatrices=new Float32Array(16*this.bones.length),void 0===t)this.calculateInverses();else if(this.bones.length===t.length)this.boneInverses=t.slice(0);else{console.warn(\"THREE.Skeleton boneInverses is the wrong length.\"),this.boneInverses=[];for(var r=0,i=this.bones.length;r<i;r++)this.boneInverses.push(new o)}}function Ut(){w.call(this),this.type=\"Bone\"}function It(e,t){J.call(this,e,t),this.type=\"SkinnedMesh\",this.bindMode=\"attached\",this.bindMatrix=new o,this.bindMatrixInverse=new o;var r=this.initBones(),i=new Dt(r);this.bind(i,this.matrixWorld),this.normalizeSkinWeights()}function Ot(e){k.call(this),this.type=\"LineBasicMaterial\",this.color=new y(16777215),this.linewidth=1,this.linecap=\"round\",this.linejoin=\"round\",this.lights=!1,this.setValues(e)}function Nt(e,t,r){if(1===r)return console.warn(\"THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.\"),new Ft(e,t);w.call(this),this.type=\"Line\",this.geometry=void 0!==e?e:new B,this.material=void 0!==t?t:new Ot({color:16777215*Math.random()})}function Ft(e,t){Nt.call(this,e,t),this.type=\"LineSegments\"}function zt(e,t){Nt.call(this,e,t),this.type=\"LineLoop\"}function Bt(e){k.call(this),this.type=\"PointsMaterial\",this.color=new y(16777215),this.map=null,this.size=1,this.sizeAttenuation=!0,this.lights=!1,this.setValues(e)}function Gt(e,t){w.call(this),this.type=\"Points\",this.geometry=void 0!==e?e:new B,this.material=void 0!==t?t:new Bt({color:16777215*Math.random()})}function Ht(){w.call(this),this.type=\"Group\"}function jt(e,t,r,i,n,o,a,s,c){l.call(this,e,t,r,i,n,o,a,s,c),this.generateMipmaps=!1}function Vt(e,t,r,i,n,o,a,s,c,u,h,d){l.call(this,null,o,a,s,c,u,i,n,h,d),this.image={width:t,height:r},this.mipmaps=e,this.flipY=!1,this.generateMipmaps=!1}function kt(e,t,r,i,n,o,a,s,c,u){if((u=void 0!==u?u:$a)!==$a&&u!==es)throw new Error(\"DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat\");void 0===r&&u===$a&&(r=Ba),void 0===r&&u===es&&(r=qa),l.call(this,null,i,n,o,a,s,u,r,c),this.image={width:e,height:t},this.magFilter=void 0!==a?a:Ra,this.minFilter=void 0!==s?s:Ra,this.flipY=!1,this.generateMipmaps=!1}function Wt(e){B.call(this),this.type=\"WireframeGeometry\";var t,r,i,n,o,a,c,l,u,h,d=[],p=[0,0],f={},m=[\"a\",\"b\",\"c\"];if(e&&e.isGeometry){var v=e.faces;for(t=0,i=v.length;t<i;t++){var g=v[t];for(r=0;r<3;r++)c=g[m[r]],l=g[m[(r+1)%3]],p[0]=Math.min(c,l),p[1]=Math.max(c,l),u=p[0]+\",\"+p[1],void 0===f[u]&&(f[u]={index1:p[0],index2:p[1]})}for(u in f)a=f[u],h=e.vertices[a.index1],d.push(h.x,h.y,h.z),h=e.vertices[a.index2],d.push(h.x,h.y,h.z)}else if(e&&e.isBufferGeometry){var y,x,_,b,w,M,E,S;if(h=new s,null!==e.index){for(y=e.attributes.position,x=e.index,_=e.groups,0===_.length&&(_=[{start:0,count:x.count,materialIndex:0}]),n=0,o=_.length;n<o;++n)for(b=_[n],w=b.start,M=b.count,t=w,i=w+M;t<i;t+=3)for(r=0;r<3;r++)c=x.getX(t+r),l=x.getX(t+(r+1)%3),p[0]=Math.min(c,l),p[1]=Math.max(c,l),u=p[0]+\",\"+p[1],void 0===f[u]&&(f[u]={index1:p[0],index2:p[1]});for(u in f)a=f[u],h.fromBufferAttribute(y,a.index1),d.push(h.x,h.y,h.z),h.fromBufferAttribute(y,a.index2),d.push(h.x,h.y,h.z)}else for(y=e.attributes.position,t=0,i=y.count/3;t<i;t++)for(r=0;r<3;r++)E=3*t+r,h.fromBufferAttribute(y,E),d.push(h.x,h.y,h.z),S=3*t+(r+1)%3,h.fromBufferAttribute(y,S),d.push(h.x,h.y,h.z)}this.addAttribute(\"position\",new O(d,3))}function Xt(e,t,r){T.call(this),this.type=\"ParametricGeometry\",this.parameters={func:e,slices:t,stacks:r},this.fromBufferGeometry(new qt(e,t,r)),this.mergeVertices()}function qt(e,t,r){B.call(this),this.type=\"ParametricBufferGeometry\",this.parameters={func:e,slices:t,stacks:r};var i,n,o=[],a=[],c=[],l=[],u=new s,h=new s,d=new s,p=new s,f=new s,m=t+1;for(i=0;i<=r;i++){var v=i/r;for(n=0;n<=t;n++){var g=n/t;e(g,v,h),a.push(h.x,h.y,h.z),g-1e-5>=0?(e(g-1e-5,v,d),p.subVectors(h,d)):(e(g+1e-5,v,d),p.subVectors(d,h)),v-1e-5>=0?(e(g,v-1e-5,d),f.subVectors(h,d)):(e(g,v+1e-5,d),f.subVectors(d,h)),u.crossVectors(p,f).normalize(),c.push(u.x,u.y,u.z),l.push(g,v)}}for(i=0;i<r;i++)for(n=0;n<t;n++){var y=i*m+n,x=i*m+n+1,_=(i+1)*m+n+1,b=(i+1)*m+n;o.push(y,x,b),o.push(x,_,b)}this.setIndex(o),this.addAttribute(\"position\",new O(a,3)),this.addAttribute(\"normal\",new O(c,3)),this.addAttribute(\"uv\",new O(l,2))}function Yt(e,t,r,i){T.call(this),this.type=\"PolyhedronGeometry\",this.parameters={vertices:e,indices:t,radius:r,detail:i},this.fromBufferGeometry(new Zt(e,t,r,i)),this.mergeVertices()}function Zt(e,t,r,i){function o(e,t,r,i){var n,o,a=Math.pow(2,i),s=[];for(n=0;n<=a;n++){s[n]=[];var l=e.clone().lerp(r,n/a),u=t.clone().lerp(r,n/a),h=a-n;for(o=0;o<=h;o++)s[n][o]=0===o&&n===a?l:l.clone().lerp(u,o/h)}for(n=0;n<a;n++)for(o=0;o<2*(a-n)-1;o++){var d=Math.floor(o/2);o%2==0?(c(s[n][d+1]),c(s[n+1][d]),c(s[n][d])):(c(s[n][d+1]),c(s[n+1][d+1]),c(s[n+1][d]))}}function a(){for(var e=0;e<m.length;e+=6){var t=m[e+0],r=m[e+2],i=m[e+4],n=Math.max(t,r,i),o=Math.min(t,r,i);n>.9&&o<.1&&(t<.2&&(m[e+0]+=1),r<.2&&(m[e+2]+=1),i<.2&&(m[e+4]+=1))}}function c(e){f.push(e.x,e.y,e.z)}function l(t,r){var i=3*t;r.x=e[i+0],r.y=e[i+1],r.z=e[i+2]}function u(){for(var e=new s,t=new s,r=new s,i=new s,o=new n,a=new n,c=new n,l=0,u=0;l<f.length;l+=9,u+=6){e.set(f[l+0],f[l+1],f[l+2]),t.set(f[l+3],f[l+4],f[l+5]),r.set(f[l+6],f[l+7],f[l+8]),o.set(m[u+0],m[u+1]),a.set(m[u+2],m[u+3]),c.set(m[u+4],m[u+5]),i.copy(e).add(t).add(r).divideScalar(3);var p=d(i);h(o,u+0,e,p),h(a,u+2,t,p),h(c,u+4,r,p)}}function h(e,t,r,i){i<0&&1===e.x&&(m[t]=e.x-1),0===r.x&&0===r.z&&(m[t]=i/2/Math.PI+.5)}function d(e){return Math.atan2(e.z,-e.x)}function p(e){return Math.atan2(-e.y,Math.sqrt(e.x*e.x+e.z*e.z))}B.call(this),this.type=\"PolyhedronBufferGeometry\",this.parameters={vertices:e,indices:t,radius:r,detail:i},r=r||1,i=i||0;var f=[],m=[];!function(e){for(var r=new s,i=new s,n=new s,a=0;a<t.length;a+=3)l(t[a+0],r),l(t[a+1],i),l(t[a+2],n),o(r,i,n,e)}(i),function(e){for(var t=new s,r=0;r<f.length;r+=3)t.x=f[r+0],t.y=f[r+1],t.z=f[r+2],t.normalize().multiplyScalar(e),f[r+0]=t.x,f[r+1]=t.y,f[r+2]=t.z}(r),function(){for(var e=new s,t=0;t<f.length;t+=3){e.x=f[t+0],e.y=f[t+1],e.z=f[t+2];var r=d(e)/2/Math.PI+.5,i=p(e)/Math.PI+.5;m.push(r,1-i)}u(),a()}(),this.addAttribute(\"position\",new O(f,3)),this.addAttribute(\"normal\",new O(f.slice(),3)),this.addAttribute(\"uv\",new O(m,2)),0===i?this.computeVertexNormals():this.normalizeNormals()}function Jt(e,t){T.call(this),this.type=\"TetrahedronGeometry\",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new Kt(e,t)),this.mergeVertices()}function Kt(e,t){var r=[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],i=[2,1,0,0,3,2,1,3,0,2,3,1];Zt.call(this,r,i,e,t),this.type=\"TetrahedronBufferGeometry\",this.parameters={radius:e,detail:t}}function Qt(e,t){T.call(this),this.type=\"OctahedronGeometry\",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new $t(e,t)),this.mergeVertices()}function $t(e,t){var r=[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],i=[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2];Zt.call(this,r,i,e,t),this.type=\"OctahedronBufferGeometry\",this.parameters={radius:e,detail:t}}function er(e,t){T.call(this),this.type=\"IcosahedronGeometry\",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new tr(e,t)),this.mergeVertices()}function tr(e,t){var r=(1+Math.sqrt(5))/2,i=[-1,r,0,1,r,0,-1,-r,0,1,-r,0,0,-1,r,0,1,r,0,-1,-r,0,1,-r,r,0,-1,r,0,1,-r,0,-1,-r,0,1],n=[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];Zt.call(this,i,n,e,t),this.type=\"IcosahedronBufferGeometry\",this.parameters={radius:e,detail:t}}function rr(e,t){T.call(this),this.type=\"DodecahedronGeometry\",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new ir(e,t)),this.mergeVertices()}function ir(e,t){var r=(1+Math.sqrt(5))/2,i=1/r,n=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-i,-r,0,-i,r,0,i,-r,0,i,r,-i,-r,0,-i,r,0,i,-r,0,i,r,0,-r,0,-i,r,0,-i,-r,0,i,r,0,i],o=[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9];Zt.call(this,n,o,e,t),this.type=\"DodecahedronBufferGeometry\",this.parameters={radius:e,detail:t}}function nr(e,t,r,i,n,o){T.call(this),this.type=\"TubeGeometry\",this.parameters={path:e,tubularSegments:t,radius:r,radialSegments:i,closed:n},void 0!==o&&console.warn(\"THREE.TubeGeometry: taper has been removed.\");var a=new or(e,t,r,i,n);this.tangents=a.tangents,this.normals=a.normals,this.binormals=a.binormals,this.fromBufferGeometry(a),this.mergeVertices()}function or(e,t,r,i,o){function a(n){v=e.getPointAt(n/t,v);var o=u.normals[n],a=u.binormals[n];for(d=0;d<=i;d++){var s=d/i*Math.PI*2,c=Math.sin(s),l=-Math.cos(s);f.x=l*o.x+c*a.x,f.y=l*o.y+c*a.y,f.z=l*o.z+c*a.z,f.normalize(),y.push(f.x,f.y,f.z),p.x=v.x+r*f.x,p.y=v.y+r*f.y,p.z=v.z+r*f.z,g.push(p.x,p.y,p.z)}}function c(){for(d=1;d<=t;d++)for(h=1;h<=i;h++){var e=(i+1)*(d-1)+(h-1),r=(i+1)*d+(h-1),n=(i+1)*d+h,o=(i+1)*(d-1)+h;_.push(e,r,o),_.push(r,n,o)}}function l(){for(h=0;h<=t;h++)for(d=0;d<=i;d++)m.x=h/t,m.y=d/i,x.push(m.x,m.y)}B.call(this),this.type=\"TubeBufferGeometry\",this.parameters={path:e,tubularSegments:t,radius:r,radialSegments:i,closed:o},t=t||64,r=r||1,i=i||8,o=o||!1;var u=e.computeFrenetFrames(t,o);this.tangents=u.tangents,this.normals=u.normals,this.binormals=u.binormals;var h,d,p=new s,f=new s,m=new n,v=new s,g=[],y=[],x=[],_=[];!function(){for(h=0;h<t;h++)a(h);a(!1===o?t:0),l(),c()}(),this.setIndex(_),this.addAttribute(\"position\",new O(g,3)),this.addAttribute(\"normal\",new O(y,3)),this.addAttribute(\"uv\",new O(x,2))}function ar(e,t,r,i,n,o,a){T.call(this),this.type=\"TorusKnotGeometry\",this.parameters={radius:e,tube:t,tubularSegments:r,radialSegments:i,p:n,q:o},void 0!==a&&console.warn(\"THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.\"),this.fromBufferGeometry(new sr(e,t,r,i,n,o)),this.mergeVertices()}function sr(e,t,r,i,n,o){function a(e,t,r,i,n){var o=Math.cos(e),a=Math.sin(e),s=r/t*e,c=Math.cos(s);n.x=i*(2+c)*.5*o,n.y=i*(2+c)*a*.5,n.z=i*Math.sin(s)*.5}B.call(this),this.type=\"TorusKnotBufferGeometry\",this.parameters={radius:e,tube:t,tubularSegments:r,radialSegments:i,p:n,q:o},e=e||1,t=t||.4,r=Math.floor(r)||64,i=Math.floor(i)||8,n=n||2,o=o||3;var c,l,u=[],h=[],d=[],p=[],f=new s,m=new s,v=new s,g=new s,y=new s,x=new s,_=new s;for(c=0;c<=r;++c){var b=c/r*n*Math.PI*2;for(a(b,n,o,e,v),a(b+.01,n,o,e,g),x.subVectors(g,v),_.addVectors(g,v),y.crossVectors(x,_),_.crossVectors(y,x),y.normalize(),_.normalize(),l=0;l<=i;++l){var w=l/i*Math.PI*2,M=-t*Math.cos(w),E=t*Math.sin(w);f.x=v.x+(M*_.x+E*y.x),f.y=v.y+(M*_.y+E*y.y),f.z=v.z+(M*_.z+E*y.z),h.push(f.x,f.y,f.z),m.subVectors(f,v).normalize(),d.push(m.x,m.y,m.z),p.push(c/r),p.push(l/i)}}for(l=1;l<=r;l++)for(c=1;c<=i;c++){var S=(i+1)*(l-1)+(c-1),T=(i+1)*l+(c-1),A=(i+1)*l+c,L=(i+1)*(l-1)+c;u.push(S,T,L),u.push(T,A,L)}this.setIndex(u),this.addAttribute(\"position\",new O(h,3)),this.addAttribute(\"normal\",new O(d,3)),this.addAttribute(\"uv\",new O(p,2))}function cr(e,t,r,i,n){T.call(this),this.type=\"TorusGeometry\",this.parameters={radius:e,tube:t,radialSegments:r,tubularSegments:i,arc:n},this.fromBufferGeometry(new lr(e,t,r,i,n)),this.mergeVertices()}function lr(e,t,r,i,n){B.call(this),this.type=\"TorusBufferGeometry\",this.parameters={radius:e,tube:t,radialSegments:r,tubularSegments:i,arc:n},e=e||1,t=t||.4,r=Math.floor(r)||8,i=Math.floor(i)||6,n=n||2*Math.PI;var o,a,c=[],l=[],u=[],h=[],d=new s,p=new s,f=new s;for(o=0;o<=r;o++)for(a=0;a<=i;a++){var m=a/i*n,v=o/r*Math.PI*2;p.x=(e+t*Math.cos(v))*Math.cos(m),p.y=(e+t*Math.cos(v))*Math.sin(m),p.z=t*Math.sin(v),l.push(p.x,p.y,p.z),d.x=e*Math.cos(m),d.y=e*Math.sin(m),f.subVectors(p,d).normalize(),u.push(f.x,f.y,f.z),h.push(a/i),h.push(o/r)}for(o=1;o<=r;o++)for(a=1;a<=i;a++){var g=(i+1)*o+a-1,y=(i+1)*(o-1)+a-1,x=(i+1)*(o-1)+a,_=(i+1)*o+a;c.push(g,y,_),c.push(y,x,_)}this.setIndex(c),this.addAttribute(\"position\",new O(l,3)),this.addAttribute(\"normal\",new O(u,3)),this.addAttribute(\"uv\",new O(h,2))}function ur(e,t,r,i,n){var o,a;if(n===Fr(e,t,r,i)>0)for(o=t;o<r;o+=i)a=Ir(o,e[o],e[o+1],a);else for(o=r-i;o>=t;o-=i)a=Ir(o,e[o],e[o+1],a);return a&&Lr(a,a.next)&&(Or(a),a=a.next),a}function hr(e,t){if(!e)return e;t||(t=e);var r,i=e;do{if(r=!1,i.steiner||!Lr(i,i.next)&&0!==Ar(i.prev,i,i.next))i=i.next;else{if(Or(i),(i=t=i.prev)===i.next)break;r=!0}}while(r||i!==t);return t}function dr(e,t,r,i,n,o,a){if(e){!a&&o&&br(e,i,n,o);for(var s,c,l=e;e.prev!==e.next;)if(s=e.prev,c=e.next,o?fr(e,i,n,o):pr(e))t.push(s.i/r),t.push(e.i/r),t.push(c.i/r),Or(e),e=c.next,l=c.next;else if((e=c)===l){a?1===a?(e=mr(e,t,r),dr(e,t,r,i,n,o,2)):2===a&&vr(e,t,r,i,n,o):dr(hr(e),t,r,i,n,o,1);break}}}function pr(e){var t=e.prev,r=e,i=e.next;if(Ar(t,r,i)>=0)return!1;for(var n=e.next.next;n!==e.prev;){if(Sr(t.x,t.y,r.x,r.y,i.x,i.y,n.x,n.y)&&Ar(n.prev,n,n.next)>=0)return!1;n=n.next}return!0}function fr(e,t,r,i){var n=e.prev,o=e,a=e.next;if(Ar(n,o,a)>=0)return!1;for(var s=n.x<o.x?n.x<a.x?n.x:a.x:o.x<a.x?o.x:a.x,c=n.y<o.y?n.y<a.y?n.y:a.y:o.y<a.y?o.y:a.y,l=n.x>o.x?n.x>a.x?n.x:a.x:o.x>a.x?o.x:a.x,u=n.y>o.y?n.y>a.y?n.y:a.y:o.y>a.y?o.y:a.y,h=Mr(s,c,t,r,i),d=Mr(l,u,t,r,i),p=e.nextZ;p&&p.z<=d;){if(p!==e.prev&&p!==e.next&&Sr(n.x,n.y,o.x,o.y,a.x,a.y,p.x,p.y)&&Ar(p.prev,p,p.next)>=0)return!1;p=p.nextZ}for(p=e.prevZ;p&&p.z>=h;){if(p!==e.prev&&p!==e.next&&Sr(n.x,n.y,o.x,o.y,a.x,a.y,p.x,p.y)&&Ar(p.prev,p,p.next)>=0)return!1;p=p.prevZ}return!0}function mr(e,t,r){var i=e;do{var n=i.prev,o=i.next.next;!Lr(n,o)&&Cr(n,i,i.next,o)&&Pr(n,o)&&Pr(o,n)&&(t.push(n.i/r),t.push(i.i/r),t.push(o.i/r),Or(i),Or(i.next),i=e=o),i=i.next}while(i!==e);return i}function vr(e,t,r,i,n,o){var a=e;do{for(var s=a.next.next;s!==a.prev;){if(a.i!==s.i&&Tr(a,s)){var c=Ur(a,s);return a=hr(a,a.next),c=hr(c,c.next),dr(a,t,r,i,n,o),void dr(c,t,r,i,n,o)}s=s.next}a=a.next}while(a!==e)}function gr(e,t,r,i){var n,o,a,s,c,l=[];for(n=0,o=t.length;n<o;n++)a=t[n]*i,s=n<o-1?t[n+1]*i:e.length,c=ur(e,a,s,i,!1),c===c.next&&(c.steiner=!0),l.push(Er(c));for(l.sort(yr),n=0;n<l.length;n++)xr(l[n],r),r=hr(r,r.next);return r}function yr(e,t){return e.x-t.x}function xr(e,t){if(t=_r(e,t)){var r=Ur(t,e);hr(r,r.next)}}function _r(e,t){var r,i=t,n=e.x,o=e.y,a=-1/0;do{if(o<=i.y&&o>=i.next.y&&i.next.y!==i.y){var s=i.x+(o-i.y)*(i.next.x-i.x)/(i.next.y-i.y);if(s<=n&&s>a){if(a=s,s===n){if(o===i.y)return i;if(o===i.next.y)return i.next}r=i.x<i.next.x?i:i.next}}i=i.next}while(i!==t);if(!r)return null;if(n===a)return r.prev;var c,l=r,u=r.x,h=r.y,d=1/0;for(i=r.next;i!==l;)n>=i.x&&i.x>=u&&n!==i.x&&Sr(o<h?n:a,o,u,h,o<h?a:n,o,i.x,i.y)&&((c=Math.abs(o-i.y)/(n-i.x))<d||c===d&&i.x>r.x)&&Pr(i,e)&&(r=i,d=c),i=i.next;return r}function br(e,t,r,i){var n=e;do{null===n.z&&(n.z=Mr(n.x,n.y,t,r,i)),n.prevZ=n.prev,n.nextZ=n.next,n=n.next}while(n!==e);n.prevZ.nextZ=null,n.prevZ=null,wr(n)}function wr(e){var t,r,i,n,o,a,s,c,l=1;do{for(r=e,e=null,o=null,a=0;r;){for(a++,i=r,s=0,t=0;t<l&&(s++,i=i.nextZ);t++);for(c=l;s>0||c>0&&i;)0!==s&&(0===c||!i||r.z<=i.z)?(n=r,r=r.nextZ,s--):(n=i,i=i.nextZ,c--),o?o.nextZ=n:e=n,n.prevZ=o,o=n;r=i}o.nextZ=null,l*=2}while(a>1);return e}function Mr(e,t,r,i,n){return e=32767*(e-r)*n,t=32767*(t-i)*n,e=16711935&(e|e<<8),e=252645135&(e|e<<4),e=858993459&(e|e<<2),e=1431655765&(e|e<<1),t=16711935&(t|t<<8),t=252645135&(t|t<<4),t=858993459&(t|t<<2),t=1431655765&(t|t<<1),e|t<<1}function Er(e){var t=e,r=e;do{t.x<r.x&&(r=t),t=t.next}while(t!==e);return r}function Sr(e,t,r,i,n,o,a,s){return(n-a)*(t-s)-(e-a)*(o-s)>=0&&(e-a)*(i-s)-(r-a)*(t-s)>=0&&(r-a)*(o-s)-(n-a)*(i-s)>=0}function Tr(e,t){return e.next.i!==t.i&&e.prev.i!==t.i&&!Rr(e,t)&&Pr(e,t)&&Pr(t,e)&&Dr(e,t)}function Ar(e,t,r){return(t.y-e.y)*(r.x-t.x)-(t.x-e.x)*(r.y-t.y)}function Lr(e,t){return e.x===t.x&&e.y===t.y}function Cr(e,t,r,i){return!!(Lr(e,t)&&Lr(r,i)||Lr(e,i)&&Lr(r,t))||Ar(e,t,r)>0!=Ar(e,t,i)>0&&Ar(r,i,e)>0!=Ar(r,i,t)>0}function Rr(e,t){var r=e;do{if(r.i!==e.i&&r.next.i!==e.i&&r.i!==t.i&&r.next.i!==t.i&&Cr(r,r.next,e,t))return!0;r=r.next}while(r!==e);return!1}function Pr(e,t){return Ar(e.prev,e,e.next)<0?Ar(e,t,e.next)>=0&&Ar(e,e.prev,t)>=0:Ar(e,t,e.prev)<0||Ar(e,e.next,t)<0}function Dr(e,t){var r=e,i=!1,n=(e.x+t.x)/2,o=(e.y+t.y)/2;do{r.y>o!=r.next.y>o&&r.next.y!==r.y&&n<(r.next.x-r.x)*(o-r.y)/(r.next.y-r.y)+r.x&&(i=!i),r=r.next}while(r!==e);return i}function Ur(e,t){var r=new Nr(e.i,e.x,e.y),i=new Nr(t.i,t.x,t.y),n=e.next,o=t.prev;return e.next=t,t.prev=e,r.next=n,n.prev=r,i.next=r,r.prev=i,o.next=i,i.prev=o,i}function Ir(e,t,r,i){var n=new Nr(e,t,r);return i?(n.next=i.next,n.prev=i,i.next.prev=n,i.next=n):(n.prev=n,n.next=n),n}function Or(e){e.next.prev=e.prev,e.prev.next=e.next,e.prevZ&&(e.prevZ.nextZ=e.nextZ),e.nextZ&&(e.nextZ.prevZ=e.prevZ)}function Nr(e,t,r){this.i=e,this.x=t,this.y=r,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function Fr(e,t,r,i){for(var n=0,o=t,a=r-i;o<r;o+=i)n+=(e[a]-e[o])*(e[o+1]+e[a+1]),a=o;return n}function zr(e){var t=e.length;t>2&&e[t-1].equals(e[0])&&e.pop()}function Br(e,t){for(var r=0;r<t.length;r++)e.push(t[r].x),e.push(t[r].y)}function Gr(e,t){T.call(this),this.type=\"ExtrudeGeometry\",this.parameters={shapes:e,options:t},this.fromBufferGeometry(new Hr(e,t)),this.mergeVertices()}function Hr(e,t){B.call(this),this.type=\"ExtrudeBufferGeometry\",this.parameters={shapes:e,options:t},e=Array.isArray(e)?e:[e];for(var r=this,i=[],o=[],a=0,c=e.length;a<c;a++){var l=e[a];!function(e){function a(e,t,r){return t||console.error(\"THREE.ExtrudeGeometry: vec does not exist\"),t.clone().multiplyScalar(r).add(e)}function c(e,t,r){var i,o,a,s=e.x-t.x,c=e.y-t.y,l=r.x-e.x,u=r.y-e.y,h=s*s+c*c,d=s*u-c*l;if(Math.abs(d)>Number.EPSILON){var p=Math.sqrt(h),f=Math.sqrt(l*l+u*u),m=t.x-c/p,v=t.y+s/p,g=r.x-u/f,y=r.y+l/f,x=((g-m)*u-(y-v)*l)/(s*u-c*l);i=m+s*x-e.x,o=v+c*x-e.y;var _=i*i+o*o;if(_<=2)return new n(i,o);a=Math.sqrt(_/2)}else{var b=!1;s>Number.EPSILON?l>Number.EPSILON&&(b=!0):s<-Number.EPSILON?l<-Number.EPSILON&&(b=!0):Math.sign(c)===Math.sign(u)&&(b=!0),b?(i=-c,o=s,a=Math.sqrt(h)):(i=s,o=c,a=Math.sqrt(h/2))}return new n(i/a,o/a)}function l(e,t){var r,i;for(Y=e.length;--Y>=0;){r=Y,(i=Y-1)<0&&(i=e.length-1);var n=0,o=w+2*A;for(n=0;n<o;n++){var a=W*n,s=W*(n+1);d(t+r+a,t+i+a,t+i+s,t+r+s)}}}function u(e,t,r){_.push(e),_.push(t),_.push(r)}function h(e,t,n){p(e),p(t),p(n);var o=i.length/3,a=C.generateTopUV(r,i,o-3,o-2,o-1);f(a[0]),f(a[1]),f(a[2])}function d(e,t,n,o){p(e),p(t),p(o),p(t),p(n),p(o);var a=i.length/3,s=C.generateSideWallUV(r,i,a-6,a-3,a-2,a-1);f(s[0]),f(s[1]),f(s[3]),f(s[1]),f(s[2]),f(s[3])}function p(e){i.push(_[3*e+0]),i.push(_[3*e+1]),i.push(_[3*e+2])}function f(e){o.push(e.x),o.push(e.y)}var m,v,g,y,x,_=[],b=void 0!==t.curveSegments?t.curveSegments:12,w=void 0!==t.steps?t.steps:1,M=void 0!==t.amount?t.amount:100,E=void 0===t.bevelEnabled||t.bevelEnabled,S=void 0!==t.bevelThickness?t.bevelThickness:6,T=void 0!==t.bevelSize?t.bevelSize:S-2,A=void 0!==t.bevelSegments?t.bevelSegments:3,L=t.extrudePath,C=void 0!==t.UVGenerator?t.UVGenerator:ac,R=!1;L&&(m=L.getSpacedPoints(w),R=!0,E=!1,v=L.computeFrenetFrames(w,!1),g=new s,y=new s,x=new s),E||(A=0,S=0,T=0);var P,D,U,I=e.extractPoints(b),O=I.shape,N=I.holes;if(!oc.isClockWise(O))for(O=O.reverse(),D=0,U=N.length;D<U;D++)P=N[D],oc.isClockWise(P)&&(N[D]=P.reverse());var F=oc.triangulateShape(O,N),z=O;for(D=0,U=N.length;D<U;D++)P=N[D],O=O.concat(P);for(var B,G,H,j,V,k,W=O.length,X=F.length,q=[],Y=0,Z=z.length,J=Z-1,K=Y+1;Y<Z;Y++,J++,K++)J===Z&&(J=0),K===Z&&(K=0),q[Y]=c(z[Y],z[J],z[K]);var Q,$=[],ee=q.concat();for(D=0,U=N.length;D<U;D++){for(P=N[D],Q=[],Y=0,Z=P.length,J=Z-1,K=Y+1;Y<Z;Y++,J++,K++)J===Z&&(J=0),K===Z&&(K=0),Q[Y]=c(P[Y],P[J],P[K]);$.push(Q),ee=ee.concat(Q)}for(B=0;B<A;B++){for(H=B/A,j=S*Math.cos(H*Math.PI/2),G=T*Math.sin(H*Math.PI/2),Y=0,Z=z.length;Y<Z;Y++)V=a(z[Y],q[Y],G),u(V.x,V.y,-j);for(D=0,U=N.length;D<U;D++)for(P=N[D],Q=$[D],Y=0,Z=P.length;Y<Z;Y++)V=a(P[Y],Q[Y],G),u(V.x,V.y,-j)}for(G=T,Y=0;Y<W;Y++)V=E?a(O[Y],ee[Y],G):O[Y],R?(y.copy(v.normals[0]).multiplyScalar(V.x),g.copy(v.binormals[0]).multiplyScalar(V.y),x.copy(m[0]).add(y).add(g),u(x.x,x.y,x.z)):u(V.x,V.y,0);var te;for(te=1;te<=w;te++)for(Y=0;Y<W;Y++)V=E?a(O[Y],ee[Y],G):O[Y],R?(y.copy(v.normals[te]).multiplyScalar(V.x),g.copy(v.binormals[te]).multiplyScalar(V.y),x.copy(m[te]).add(y).add(g),u(x.x,x.y,x.z)):u(V.x,V.y,M/w*te);for(B=A-1;B>=0;B--){for(H=B/A,j=S*Math.cos(H*Math.PI/2),G=T*Math.sin(H*Math.PI/2),Y=0,Z=z.length;Y<Z;Y++)V=a(z[Y],q[Y],G),u(V.x,V.y,M+j);for(D=0,U=N.length;D<U;D++)for(P=N[D],Q=$[D],Y=0,Z=P.length;Y<Z;Y++)V=a(P[Y],Q[Y],G),R?u(V.x,V.y+m[w-1].y,m[w-1].x+j):u(V.x,V.y,M+j)}!function(){var e=i.length/3;if(E){var t=0,n=W*t;for(Y=0;Y<X;Y++)k=F[Y],h(k[2]+n,k[1]+n,k[0]+n);for(t=w+2*A,n=W*t,Y=0;Y<X;Y++)k=F[Y],h(k[0]+n,k[1]+n,k[2]+n)}else{for(Y=0;Y<X;Y++)k=F[Y],h(k[2],k[1],k[0]);for(Y=0;Y<X;Y++)k=F[Y],h(k[0]+W*w,k[1]+W*w,k[2]+W*w)}r.addGroup(e,i.length/3-e,0)}(),function(){var e=i.length/3,t=0;for(l(z,t),t+=z.length,D=0,U=N.length;D<U;D++)P=N[D],l(P,t),t+=P.length;r.addGroup(e,i.length/3-e,1)}()}(l)}this.addAttribute(\"position\",new O(i,3)),this.addAttribute(\"uv\",new O(o,2)),this.computeVertexNormals()}function jr(e,t){T.call(this),this.type=\"TextGeometry\",this.parameters={text:e,parameters:t},this.fromBufferGeometry(new Vr(e,t)),this.mergeVertices()}function Vr(e,t){t=t||{};var r=t.font;if(!r||!r.isFont)return console.error(\"THREE.TextGeometry: font parameter is not an instance of THREE.Font.\"),new T;var i=r.generateShapes(e,t.size,t.curveSegments);t.amount=void 0!==t.height?t.height:50,void 0===t.bevelThickness&&(t.bevelThickness=10),void 0===t.bevelSize&&(t.bevelSize=8),void 0===t.bevelEnabled&&(t.bevelEnabled=!1),Hr.call(this,i,t),this.type=\"TextBufferGeometry\"}function kr(e,t,r,i,n,o,a){T.call(this),this.type=\"SphereGeometry\",this.parameters={radius:e,widthSegments:t,heightSegments:r,phiStart:i,phiLength:n,thetaStart:o,thetaLength:a},this.fromBufferGeometry(new Wr(e,t,r,i,n,o,a)),this.mergeVertices()}function Wr(e,t,r,i,n,o,a){B.call(this),this.type=\"SphereBufferGeometry\",this.parameters={radius:e,widthSegments:t,heightSegments:r,phiStart:i,phiLength:n,thetaStart:o,thetaLength:a},e=e||1,t=Math.max(3,Math.floor(t)||8),r=Math.max(2,Math.floor(r)||6),i=void 0!==i?i:0,n=void 0!==n?n:2*Math.PI,o=void 0!==o?o:0,a=void 0!==a?a:Math.PI;var c,l,u=o+a,h=0,d=[],p=new s,f=new s,m=[],v=[],g=[],y=[];for(l=0;l<=r;l++){var x=[],_=l/r;for(c=0;c<=t;c++){var b=c/t;p.x=-e*Math.cos(i+b*n)*Math.sin(o+_*a),p.y=e*Math.cos(o+_*a),p.z=e*Math.sin(i+b*n)*Math.sin(o+_*a),v.push(p.x,p.y,p.z),f.set(p.x,p.y,p.z).normalize(),g.push(f.x,f.y,f.z),y.push(b,1-_),x.push(h++)}d.push(x)}for(l=0;l<r;l++)for(c=0;c<t;c++){var w=d[l][c+1],M=d[l][c],E=d[l+1][c],S=d[l+1][c+1];(0!==l||o>0)&&m.push(w,M,S),(l!==r-1||u<Math.PI)&&m.push(M,E,S)}this.setIndex(m),this.addAttribute(\"position\",new O(v,3)),this.addAttribute(\"normal\",new O(g,3)),this.addAttribute(\"uv\",new O(y,2))}function Xr(e,t,r,i,n,o){T.call(this),this.type=\"RingGeometry\",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:r,phiSegments:i,thetaStart:n,thetaLength:o},this.fromBufferGeometry(new qr(e,t,r,i,n,o)),this.mergeVertices()}function qr(e,t,r,i,o,a){B.call(this),this.type=\"RingBufferGeometry\",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:r,phiSegments:i,thetaStart:o,thetaLength:a},e=e||.5,t=t||1,o=void 0!==o?o:0,a=void 0!==a?a:2*Math.PI,r=void 0!==r?Math.max(3,r):8,i=void 0!==i?Math.max(1,i):1;var c,l,u,h=[],d=[],p=[],f=[],m=e,v=(t-e)/i,g=new s,y=new n;for(l=0;l<=i;l++){for(u=0;u<=r;u++)c=o+u/r*a,g.x=m*Math.cos(c),g.y=m*Math.sin(c),d.push(g.x,g.y,g.z),p.push(0,0,1),y.x=(g.x/t+1)/2,y.y=(g.y/t+1)/2,f.push(y.x,y.y);m+=v}for(l=0;l<i;l++){var x=l*(r+1);for(u=0;u<r;u++){c=u+x;var _=c,b=c+r+1,w=c+r+2,M=c+1;h.push(_,b,M),h.push(b,w,M)}}this.setIndex(h),this.addAttribute(\"position\",new O(d,3)),this.addAttribute(\"normal\",new O(p,3)),this.addAttribute(\"uv\",new O(f,2))}function Yr(e,t,r,i){T.call(this),this.type=\"LatheGeometry\",this.parameters={points:e,segments:t,phiStart:r,phiLength:i},this.fromBufferGeometry(new Zr(e,t,r,i)),this.mergeVertices()}function Zr(e,t,r,i){B.call(this),this.type=\"LatheBufferGeometry\",this.parameters={points:e,segments:t,phiStart:r,phiLength:i},t=Math.floor(t)||12,r=r||0,i=i||2*Math.PI,i=zs.clamp(i,0,2*Math.PI);var o,a,c,l=[],u=[],h=[],d=1/t,p=new s,f=new n;for(a=0;a<=t;a++){var m=r+a*d*i,v=Math.sin(m),g=Math.cos(m);for(c=0;c<=e.length-1;c++)p.x=e[c].x*v,p.y=e[c].y,p.z=e[c].x*g,u.push(p.x,p.y,p.z),f.x=a/t,f.y=c/(e.length-1),h.push(f.x,f.y)}for(a=0;a<t;a++)for(c=0;c<e.length-1;c++){o=c+a*e.length;var y=o,x=o+e.length,_=o+e.length+1,b=o+1;l.push(y,x,b),l.push(x,_,b)}if(this.setIndex(l),this.addAttribute(\"position\",new O(u,3)),this.addAttribute(\"uv\",new O(h,2)),this.computeVertexNormals(),i===2*Math.PI){var w=this.attributes.normal.array,M=new s,E=new s,S=new s;for(o=t*e.length*3,a=0,c=0;a<e.length;a++,c+=3)M.x=w[c+0],M.y=w[c+1],M.z=w[c+2],E.x=w[o+c+0],E.y=w[o+c+1],E.z=w[o+c+2],S.addVectors(M,E).normalize(),w[c+0]=w[o+c+0]=S.x,w[c+1]=w[o+c+1]=S.y,w[c+2]=w[o+c+2]=S.z}}function Jr(e,t){T.call(this),this.type=\"ShapeGeometry\",\"object\"==typeof t&&(console.warn(\"THREE.ShapeGeometry: Options parameter has been removed.\"),t=t.curveSegments),this.parameters={shapes:e,curveSegments:t},this.fromBufferGeometry(new Kr(e,t)),this.mergeVertices()}function Kr(e,t){function r(e){var r,s,l,u=n.length/3,h=e.extractPoints(t),d=h.shape,p=h.holes;if(!1===oc.isClockWise(d))for(d=d.reverse(),r=0,s=p.length;r<s;r++)l=p[r],!0===oc.isClockWise(l)&&(p[r]=l.reverse());var f=oc.triangulateShape(d,p);for(r=0,s=p.length;r<s;r++)l=p[r],d=d.concat(l);for(r=0,s=d.length;r<s;r++){var m=d[r];n.push(m.x,m.y,0),o.push(0,0,1),a.push(m.x,m.y)}for(r=0,s=f.length;r<s;r++){var v=f[r],g=v[0]+u,y=v[1]+u,x=v[2]+u;i.push(g,y,x),c+=3}}B.call(this),this.type=\"ShapeBufferGeometry\",this.parameters={shapes:e,curveSegments:t},t=t||12;var i=[],n=[],o=[],a=[],s=0,c=0;if(!1===Array.isArray(e))r(e);else for(var l=0;l<e.length;l++)r(e[l]),this.addGroup(s,c,l),s+=c,c=0;this.setIndex(i),this.addAttribute(\"position\",new O(n,3)),this.addAttribute(\"normal\",new O(o,3)),this.addAttribute(\"uv\",new O(a,2))}function Qr(e,t){if(t.shapes=[],Array.isArray(e))for(var r=0,i=e.length;r<i;r++){var n=e[r];t.shapes.push(n.uuid)}else t.shapes.push(e.uuid);return t}function $r(e,t){B.call(this),this.type=\"EdgesGeometry\",this.parameters={thresholdAngle:t},t=void 0!==t?t:1;var r,i,n,o,a=[],s=Math.cos(zs.DEG2RAD*t),c=[0,0],l={},u=[\"a\",\"b\",\"c\"];e.isBufferGeometry?(o=new T,o.fromBufferGeometry(e)):o=e.clone(),o.mergeVertices(),o.computeFaceNormals();for(var h=o.vertices,d=o.faces,p=0,f=d.length;p<f;p++)for(var m=d[p],v=0;v<3;v++)r=m[u[v]],i=m[u[(v+1)%3]],c[0]=Math.min(r,i),c[1]=Math.max(r,i),n=c[0]+\",\"+c[1],void 0===l[n]?l[n]={index1:c[0],index2:c[1],face1:p,face2:void 0}:l[n].face2=p;for(n in l){var g=l[n];if(void 0===g.face2||d[g.face1].normal.dot(d[g.face2].normal)<=s){var y=h[g.index1];a.push(y.x,y.y,y.z),y=h[g.index2],a.push(y.x,y.y,y.z)}}this.addAttribute(\"position\",new O(a,3))}function ei(e,t,r,i,n,o,a,s){T.call(this),this.type=\"CylinderGeometry\",this.parameters={radiusTop:e,radiusBottom:t,height:r,radialSegments:i,heightSegments:n,openEnded:o,thetaStart:a,thetaLength:s},this.fromBufferGeometry(new ti(e,t,r,i,n,o,a,s)),this.mergeVertices()}function ti(e,t,r,i,o,a,c,l){function u(r){var o,a,u,g=new n,_=new s,b=0,w=!0===r?e:t,M=!0===r?1:-1;for(a=v,o=1;o<=i;o++)p.push(0,y*M,0),f.push(0,M,0),m.push(.5,.5),v++;for(u=v,o=0;o<=i;o++){var E=o/i,S=E*l+c,T=Math.cos(S),A=Math.sin(S);_.x=w*A,_.y=y*M,_.z=w*T,p.push(_.x,_.y,_.z),f.push(0,M,0),g.x=.5*T+.5,g.y=.5*A*M+.5,m.push(g.x,g.y),v++}for(o=0;o<i;o++){var L=a+o,C=u+o;!0===r?d.push(C,C+1,L):d.push(C+1,C,L),b+=3}h.addGroup(x,b,!0===r?1:2),x+=b}B.call(this),this.type=\"CylinderBufferGeometry\",this.parameters={radiusTop:e,radiusBottom:t,height:r,radialSegments:i,heightSegments:o,openEnded:a,thetaStart:c,thetaLength:l};var h=this;e=void 0!==e?e:1,t=void 0!==t?t:1,r=r||1,i=Math.floor(i)||8,o=Math.floor(o)||1,a=void 0!==a&&a,c=void 0!==c?c:0,l=void 0!==l?l:2*Math.PI;var d=[],p=[],f=[],m=[],v=0,g=[],y=r/2,x=0;!function(){var n,a,u=new s,_=new s,b=0,w=(t-e)/r;for(a=0;a<=o;a++){var M=[],E=a/o,S=E*(t-e)+e;for(n=0;n<=i;n++){var T=n/i,A=T*l+c,L=Math.sin(A),C=Math.cos(A);_.x=S*L,_.y=-E*r+y,_.z=S*C,p.push(_.x,_.y,_.z),u.set(L,w,C).normalize(),f.push(u.x,u.y,u.z),m.push(T,1-E),M.push(v++)}g.push(M)}for(n=0;n<i;n++)for(a=0;a<o;a++){var R=g[a][n],P=g[a+1][n],D=g[a+1][n+1],U=g[a][n+1];d.push(R,P,U),d.push(P,D,U),b+=6}h.addGroup(x,b,0),x+=b}(),!1===a&&(e>0&&u(!0),t>0&&u(!1)),this.setIndex(d),this.addAttribute(\"position\",new O(p,3)),this.addAttribute(\"normal\",new O(f,3)),this.addAttribute(\"uv\",new O(m,2))}function ri(e,t,r,i,n,o,a){ei.call(this,0,e,t,r,i,n,o,a),this.type=\"ConeGeometry\",this.parameters={radius:e,height:t,radialSegments:r,heightSegments:i,openEnded:n,thetaStart:o,thetaLength:a}}function ii(e,t,r,i,n,o,a){ti.call(this,0,e,t,r,i,n,o,a),this.type=\"ConeBufferGeometry\",this.parameters={radius:e,height:t,radialSegments:r,heightSegments:i,openEnded:n,thetaStart:o,thetaLength:a}}function ni(e,t,r,i){T.call(this),this.type=\"CircleGeometry\",this.parameters={radius:e,segments:t,thetaStart:r,thetaLength:i},this.fromBufferGeometry(new oi(e,t,r,i)),this.mergeVertices()}function oi(e,t,r,i){B.call(this),this.type=\"CircleBufferGeometry\",this.parameters={radius:e,segments:t,thetaStart:r,thetaLength:i},e=e||1,t=void 0!==t?Math.max(3,t):8,r=void 0!==r?r:0,i=void 0!==i?i:2*Math.PI;var o,a,c=[],l=[],u=[],h=[],d=new s,p=new n;for(l.push(0,0,0),u.push(0,0,1),h.push(.5,.5),a=0,o=3;a<=t;a++,o+=3){var f=r+a/t*i;d.x=e*Math.cos(f),d.y=e*Math.sin(f),l.push(d.x,d.y,d.z),u.push(0,0,1),p.x=(l[o]/e+1)/2,p.y=(l[o+1]/e+1)/2,h.push(p.x,p.y)}for(o=1;o<=t;o++)c.push(o,o+1,0);this.setIndex(c),this.addAttribute(\"position\",new O(l,3)),this.addAttribute(\"normal\",new O(u,3)),this.addAttribute(\"uv\",new O(h,2))}function ai(e){k.call(this),this.type=\"ShadowMaterial\",this.color=new y(0),this.transparent=!0,this.setValues(e)}function si(e){X.call(this,e),this.type=\"RawShaderMaterial\"}function ci(e){k.call(this),this.defines={STANDARD:\"\"},this.type=\"MeshStandardMaterial\",this.color=new y(16777215),this.roughness=.5,this.metalness=.5,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new y(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalScale=new n(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=\"round\",this.wireframeLinejoin=\"round\",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function li(e){ci.call(this),this.defines={PHYSICAL:\"\"},this.type=\"MeshPhysicalMaterial\",this.reflectivity=.5,this.clearCoat=0,this.clearCoatRoughness=0,this.setValues(e)}function ui(e){k.call(this),this.type=\"MeshPhongMaterial\",this.color=new y(16777215),this.specular=new y(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new y(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalScale=new n(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=da,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=\"round\",this.wireframeLinejoin=\"round\",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function hi(e){ui.call(this),this.defines={TOON:\"\"},this.type=\"MeshToonMaterial\",this.gradientMap=null,this.setValues(e)}function di(e){k.call(this),this.type=\"MeshNormalMaterial\",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalScale=new n(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function pi(e){k.call(this),this.type=\"MeshLambertMaterial\",this.color=new y(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new y(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=da,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=\"round\",this.wireframeLinejoin=\"round\",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function fi(e){Ot.call(this),this.type=\"LineDashedMaterial\",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(e)}function mi(e,t,r){var i=this,n=!1,o=0,a=0,s=void 0;this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=r,this.itemStart=function(e){a++,!1===n&&void 0!==i.onStart&&i.onStart(e,o,a),n=!0},this.itemEnd=function(e){o++,void 0!==i.onProgress&&i.onProgress(e,o,a),o===a&&(n=!1,void 0!==i.onLoad&&i.onLoad())},this.itemError=function(e){void 0!==i.onError&&i.onError(e)},this.resolveURL=function(e){return s?s(e):e},this.setURLModifier=function(e){return s=e,this}}function vi(e){this.manager=void 0!==e?e:uc}function gi(e){this.manager=void 0!==e?e:uc,this._parser=null}function yi(e){this.manager=void 0!==e?e:uc,this._parser=null}function xi(e){this.manager=void 0!==e?e:uc}function _i(e){this.manager=void 0!==e?e:uc}function bi(e){this.manager=void 0!==e?e:uc}function wi(){this.type=\"Curve\",this.arcLengthDivisions=200}function Mi(e,t,r,i,n,o,a,s){wi.call(this),this.type=\"EllipseCurve\",this.aX=e||0,this.aY=t||0,this.xRadius=r||1,this.yRadius=i||1,this.aStartAngle=n||0,this.aEndAngle=o||2*Math.PI,this.aClockwise=a||!1,this.aRotation=s||0}function Ei(e,t,r,i,n,o){Mi.call(this,e,t,r,r,i,n,o),this.type=\"ArcCurve\"}function Si(){function e(e,o,a,s){t=e,r=a,i=-3*e+3*o-2*a-s,n=2*e-2*o+a+s}var t=0,r=0,i=0,n=0;return{initCatmullRom:function(t,r,i,n,o){e(r,i,o*(i-t),o*(n-r))},initNonuniformCatmullRom:function(t,r,i,n,o,a,s){var c=(r-t)/o-(i-t)/(o+a)+(i-r)/a,l=(i-r)/a-(n-r)/(a+s)+(n-i)/s;c*=a,l*=a,e(r,i,c,l)},calc:function(e){var o=e*e;return t+r*e+i*o+n*(o*e)}}}function Ti(e,t,r,i){wi.call(this),this.type=\"CatmullRomCurve3\",this.points=e||[],this.closed=t||!1,this.curveType=r||\"centripetal\",this.tension=i||.5}function Ai(e,t,r,i,n){var o=.5*(i-t),a=.5*(n-r),s=e*e;return(2*r-2*i+o+a)*(e*s)+(-3*r+3*i-2*o-a)*s+o*e+r}function Li(e,t){var r=1-e;return r*r*t}function Ci(e,t){return 2*(1-e)*e*t}function Ri(e,t){return e*e*t}function Pi(e,t,r,i){return Li(e,t)+Ci(e,r)+Ri(e,i)}function Di(e,t){var r=1-e;return r*r*r*t}function Ui(e,t){var r=1-e;return 3*r*r*e*t}function Ii(e,t){return 3*(1-e)*e*e*t}function Oi(e,t){return e*e*e*t}function Ni(e,t,r,i,n){return Di(e,t)+Ui(e,r)+Ii(e,i)+Oi(e,n)}function Fi(e,t,r,i){wi.call(this),this.type=\"CubicBezierCurve\",this.v0=e||new n,this.v1=t||new n,this.v2=r||new n,this.v3=i||new n}function zi(e,t,r,i){wi.call(this),this.type=\"CubicBezierCurve3\",this.v0=e||new s,this.v1=t||new s,this.v2=r||new s,this.v3=i||new s}function Bi(e,t){wi.call(this),this.type=\"LineCurve\",this.v1=e||new n,this.v2=t||new n}function Gi(e,t){wi.call(this),this.type=\"LineCurve3\",this.v1=e||new s,this.v2=t||new s}function Hi(e,t,r){wi.call(this),this.type=\"QuadraticBezierCurve\",this.v0=e||new n,this.v1=t||new n,this.v2=r||new n}function ji(e,t,r){wi.call(this),this.type=\"QuadraticBezierCurve3\",this.v0=e||new s,this.v1=t||new s,this.v2=r||new s}function Vi(e){wi.call(this),this.type=\"SplineCurve\",this.points=e||[]}function ki(){wi.call(this),this.type=\"CurvePath\",this.curves=[],this.autoClose=!1}function Wi(e){ki.call(this),this.type=\"Path\",this.currentPoint=new n,e&&this.setFromPoints(e)}function Xi(e){Wi.call(this,e),this.uuid=zs.generateUUID(),this.type=\"Shape\",this.holes=[]}function qi(e,t){w.call(this),this.type=\"Light\",this.color=new y(e),this.intensity=void 0!==t?t:1,this.receiveShadow=void 0}function Yi(e,t,r){qi.call(this,e,r),this.type=\"HemisphereLight\",this.castShadow=void 0,this.position.copy(w.DefaultUp),this.updateMatrix(),this.groundColor=new y(t)}function Zi(e){this.camera=e,this.bias=0,this.radius=1,this.mapSize=new n(512,512),this.map=null,this.matrix=new o}function Ji(){Zi.call(this,new wt(50,1,.5,500))}function Ki(e,t,r,i,n,o){qi.call(this,e,t),this.type=\"SpotLight\",this.position.copy(w.DefaultUp),this.updateMatrix(),this.target=new w,Object.defineProperty(this,\"power\",{get:function(){return this.intensity*Math.PI},set:function(e){this.intensity=e/Math.PI}}),this.distance=void 0!==r?r:0,this.angle=void 0!==i?i:Math.PI/3,this.penumbra=void 0!==n?n:0,this.decay=void 0!==o?o:1,this.shadow=new Ji}function Qi(e,t,r,i){qi.call(this,e,t),this.type=\"PointLight\",Object.defineProperty(this,\"power\",{get:function(){return 4*this.intensity*Math.PI},set:function(e){this.intensity=e/(4*Math.PI)}}),this.distance=void 0!==r?r:0,this.decay=void 0!==i?i:1,this.shadow=new Zi(new wt(90,1,.5,500))}function $i(){Zi.call(this,new E(-5,5,5,-5,.5,500))}function en(e,t){qi.call(this,e,t),this.type=\"DirectionalLight\",this.position.copy(w.DefaultUp),this.updateMatrix(),this.target=new w,this.shadow=new $i}function tn(e,t){qi.call(this,e,t),this.type=\"AmbientLight\",this.castShadow=void 0}function rn(e,t,r,i){qi.call(this,e,t),this.type=\"RectAreaLight\",this.width=void 0!==r?r:10,this.height=void 0!==i?i:10}function nn(e,t,r,i){fn.call(this,e,t,r,i)}function on(e,t,r){fn.call(this,e,t,r)}function an(e,t,r,i){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=void 0!==i?i:new t.constructor(r),this.sampleValues=t,this.valueSize=r}function sn(e,t,r,i){an.call(this,e,t,r,i)}function cn(e,t,r,i){fn.call(this,e,t,r,i)}function ln(e,t,r,i){fn.call(this,e,t,r,i)}function un(e,t,r,i){fn.call(this,e,t,r,i)}function hn(e,t,r,i){an.call(this,e,t,r,i),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0}function dn(e,t,r,i){an.call(this,e,t,r,i)}function pn(e,t,r,i){an.call(this,e,t,r,i)}function fn(e,t,r,i){if(void 0===e)throw new Error(\"THREE.KeyframeTrack: track name is undefined\");if(void 0===t||0===t.length)throw new Error(\"THREE.KeyframeTrack: no keyframes in track named \"+e);this.name=e,this.times=gc.convertArray(t,this.TimeBufferType),this.values=gc.convertArray(r,this.ValueBufferType),this.setInterpolation(i||this.DefaultInterpolation),this.validate(),this.optimize()}function mn(e,t,r,i){fn.call(this,e,t,r,i)}function vn(e,t,r){this.name=e,this.tracks=r,this.duration=void 0!==t?t:-1,this.uuid=zs.generateUUID(),this.duration<0&&this.resetDuration(),this.optimize()}function gn(e){this.manager=void 0!==e?e:uc,this.textures={}}function yn(e){this.manager=void 0!==e?e:uc}function xn(){}function _n(e){\"boolean\"==typeof e&&(console.warn(\"THREE.JSONLoader: showStatus parameter has been removed from constructor.\"),e=void 0),this.manager=void 0!==e?e:uc,this.withCredentials=!1}function bn(e){this.manager=void 0!==e?e:uc,this.texturePath=\"\"}function wn(e){\"undefined\"==typeof createImageBitmap&&console.warn(\"THREE.ImageBitmapLoader: createImageBitmap() not supported.\"),\"undefined\"==typeof fetch&&console.warn(\"THREE.ImageBitmapLoader: fetch() not supported.\"),this.manager=void 0!==e?e:uc,this.options=void 0}function Mn(){this.type=\"ShapePath\",this.color=new y,this.subPaths=[],this.currentPath=null}function En(e){this.type=\"Font\",this.data=e}function Sn(e,t,r,i){for(var n=String(e).split(\"\"),o=t/i.resolution,a=(i.boundingBox.yMax-i.boundingBox.yMin+i.underlineThickness)*o,s=[],c=0,l=0,u=0;u<n.length;u++){var h=n[u];if(\"\\n\"===h)c=0,l-=a;else{var d=Tn(h,r,o,c,l,i);c+=d.offsetX,s.push(d.path)}}return s}function Tn(e,t,r,i,n,o){var a=o.glyphs[e]||o.glyphs[\"?\"];if(a){var s,c,l,u,h,d,p,f,m=new Mn;if(a.o)for(var v=a._cachedOutline||(a._cachedOutline=a.o.split(\" \")),g=0,y=v.length;g<y;){var x=v[g++];switch(x){case\"m\":s=v[g++]*r+i,c=v[g++]*r+n,m.moveTo(s,c);break;case\"l\":s=v[g++]*r+i,c=v[g++]*r+n,m.lineTo(s,c);break;case\"q\":l=v[g++]*r+i,u=v[g++]*r+n,h=v[g++]*r+i,d=v[g++]*r+n,m.quadraticCurveTo(h,d,l,u);break;case\"b\":l=v[g++]*r+i,u=v[g++]*r+n,h=v[g++]*r+i,d=v[g++]*r+n,p=v[g++]*r+i,f=v[g++]*r+n,m.bezierCurveTo(h,d,p,f,l,u)}}return{offsetX:a.ha*r,path:m}}}function An(e){this.manager=void 0!==e?e:uc}function Ln(e){this.manager=void 0!==e?e:uc}function Cn(){this.type=\"StereoCamera\",this.aspect=1,this.eyeSep=.064,this.cameraL=new wt,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new wt,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1}function Rn(e,t,r){w.call(this),this.type=\"CubeCamera\";var i=new wt(90,1,e,t);i.up.set(0,-1,0),i.lookAt(new s(1,0,0)),this.add(i);var n=new wt(90,1,e,t);n.up.set(0,-1,0),n.lookAt(new s(-1,0,0)),this.add(n);var o=new wt(90,1,e,t);o.up.set(0,0,1),o.lookAt(new s(0,1,0)),this.add(o);var a=new wt(90,1,e,t);a.up.set(0,0,-1),a.lookAt(new s(0,-1,0)),this.add(a);var c=new wt(90,1,e,t);c.up.set(0,-1,0),c.lookAt(new s(0,0,1)),this.add(c);var l=new wt(90,1,e,t);l.up.set(0,-1,0),l.lookAt(new s(0,0,-1)),this.add(l);var u={format:Za,magFilter:Ua,minFilter:Ua};this.renderTarget=new d(r,r,u),this.renderTarget.texture.name=\"CubeCamera\",this.update=function(e,t){null===this.parent&&this.updateMatrixWorld();var r=this.renderTarget,s=r.texture.generateMipmaps;r.texture.generateMipmaps=!1,r.activeCubeFace=0,e.render(t,i,r),r.activeCubeFace=1,e.render(t,n,r),r.activeCubeFace=2,e.render(t,o,r),r.activeCubeFace=3,e.render(t,a,r),r.activeCubeFace=4,e.render(t,c,r),r.texture.generateMipmaps=s,r.activeCubeFace=5,e.render(t,l,r),e.setRenderTarget(null)},this.clear=function(e,t,r,i){for(var n=this.renderTarget,o=0;o<6;o++)n.activeCubeFace=o,e.setRenderTarget(n),e.clear(t,r,i);e.setRenderTarget(null)}}function Pn(){w.call(this),this.type=\"AudioListener\",this.context=Ec.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null}function Dn(e){w.call(this),this.type=\"Audio\",this.context=e.context,this.gain=this.context.createGain(),this.gain.connect(e.getInput()),this.autoplay=!1,this.buffer=null,this.loop=!1,this.startTime=0,this.offset=0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.sourceType=\"empty\",this.filters=[]}function Un(e){Dn.call(this,e),this.panner=this.context.createPanner(),this.panner.connect(this.gain)}function In(e,t){this.analyser=e.context.createAnalyser(),this.analyser.fftSize=void 0!==t?t:2048,this.data=new Uint8Array(this.analyser.frequencyBinCount),e.getOutput().connect(this.analyser)}function On(e,t,r){this.binding=e,this.valueSize=r;var i,n=Float64Array;switch(t){case\"quaternion\":i=this._slerp;break;case\"string\":case\"bool\":n=Array,i=this._select;break;default:i=this._lerp}this.buffer=new n(4*r),this._mixBufferRegion=i,this.cumulativeWeight=0,this.useCount=0,this.referenceCount=0}function Nn(e,t,r){var i=r||Fn.parseTrackName(t);this._targetGroup=e,this._bindings=e.subscribe_(t,i)}function Fn(e,t,r){this.path=t,this.parsedPath=r||Fn.parseTrackName(t),this.node=Fn.findNode(e,this.parsedPath.nodeName)||e,this.rootNode=e}function zn(){this.uuid=zs.generateUUID(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;var e={};this._indicesByUUID=e;for(var t=0,r=arguments.length;t!==r;++t)e[arguments[t].uuid]=t;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};var i=this;this.stats={objects:{get total(){return i._objects.length},get inUse(){return this.total-i.nCachedObjects_}},get bindingsPerObject(){return i._bindings.length}}}function Bn(e,t,r){this._mixer=e,this._clip=t,this._localRoot=r||null;for(var i=t.tracks,n=i.length,o=new Array(n),a={endingStart:Ss,endingEnd:Ss},s=0;s!==n;++s){var c=i[s].createInterpolant(null);o[s]=c,c.settings=a}this._interpolantSettings=a,this._interpolants=o,this._propertyBindings=new Array(n),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=Es,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}function Gn(e){this._root=e,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}function Hn(e){\"string\"==typeof e&&(console.warn(\"THREE.Uniform: Type parameter is no longer needed.\"),e=arguments[1]),this.value=e}function jn(){B.call(this),this.type=\"InstancedBufferGeometry\",this.maxInstancedCount=void 0}function Vn(e,t,r,i){this.data=e,this.itemSize=t,this.offset=r,this.normalized=!0===i}function kn(e,t){this.array=e,this.stride=t,this.count=void 0!==e?e.length/t:0,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0}function Wn(e,t,r){kn.call(this,e,t),this.meshPerAttribute=r||1}function Xn(e,t,r){A.call(this,e,t),this.meshPerAttribute=r||1}function qn(e,t,r,i){this.ray=new q(e,t),this.near=r||0,this.far=i||1/0,this.params={Mesh:{},Line:{},LOD:{},Points:{threshold:1},Sprite:{}},Object.defineProperties(this.params,{PointCloud:{get:function(){return console.warn(\"THREE.Raycaster: params.PointCloud has been renamed to params.Points.\"),this.Points}}})}function Yn(e,t){return e.distance-t.distance}function Zn(e,t,r,i){if(!1!==e.visible&&(e.raycast(t,r),!0===i))for(var n=e.children,o=0,a=n.length;o<a;o++)Zn(n[o],t,r,!0)}function Jn(e){this.autoStart=void 0===e||e,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}function Kn(e,t,r){return this.radius=void 0!==e?e:1,this.phi=void 0!==t?t:0,this.theta=void 0!==r?r:0,this}function Qn(e,t,r){return this.radius=void 0!==e?e:1,this.theta=void 0!==t?t:0,this.y=void 0!==r?r:0,this}function $n(e,t){this.min=void 0!==e?e:new n(1/0,1/0),this.max=void 0!==t?t:new n(-1/0,-1/0)}function eo(e){w.call(this),this.material=e,this.render=function(){}}function to(e,t,r,i){this.object=e,this.size=void 0!==t?t:1;var n=void 0!==r?r:16711680,o=void 0!==i?i:1,a=0,s=this.object.geometry;s&&s.isGeometry?a=3*s.faces.length:s&&s.isBufferGeometry&&(a=s.attributes.normal.count);var c=new B,l=new O(2*a*3,3);c.addAttribute(\"position\",l),Ft.call(this,c,new Ot({color:n,linewidth:o})),this.matrixAutoUpdate=!1,this.update()}function ro(e,t){w.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=t;for(var r=new B,i=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1],n=0,o=1;n<32;n++,o++){var a=n/32*Math.PI*2,s=o/32*Math.PI*2;i.push(Math.cos(a),Math.sin(a),1,Math.cos(s),Math.sin(s),1)}r.addAttribute(\"position\",new O(i,3));var c=new Ot({fog:!1});this.cone=new Ft(r,c),this.add(this.cone),this.update()}function io(e){var t=[];e&&e.isBone&&t.push(e);for(var r=0;r<e.children.length;r++)t.push.apply(t,io(e.children[r]));return t}function no(e){for(var t=io(e),r=new B,i=[],n=[],o=new y(0,0,1),a=new y(0,1,0),s=0;s<t.length;s++){var c=t[s];c.parent&&c.parent.isBone&&(i.push(0,0,0),i.push(0,0,0),n.push(o.r,o.g,o.b),n.push(a.r,a.g,a.b))}r.addAttribute(\"position\",new O(i,3)),r.addAttribute(\"color\",new O(n,3));var l=new Ot({vertexColors:Oo,depthTest:!1,depthWrite:!1,transparent:!0});Ft.call(this,r,l),this.root=e,this.bones=t,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1}function oo(e,t,r){this.light=e,this.light.updateMatrixWorld(),this.color=r;var i=new Wr(t,4,2),n=new W({wireframe:!0,fog:!1});J.call(this,i,n),this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}function ao(e,t){w.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=t;var r=new Ot({fog:!1}),i=new B;i.addAttribute(\"position\",new A(new Float32Array(15),3)),this.line=new Nt(i,r),this.add(this.line),this.update()}function so(e,t,r){w.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=r;var i=new $t(t);i.rotateY(.5*Math.PI),this.material=new W({wireframe:!0,fog:!1}),void 0===this.color&&(this.material.vertexColors=Oo);var n=i.getAttribute(\"position\"),o=new Float32Array(3*n.count);i.addAttribute(\"color\",new A(o,3)),this.add(new J(i,this.material)),this.update()}function co(e,t,r,i){e=e||10,t=t||10,r=new y(void 0!==r?r:4473924),i=new y(void 0!==i?i:8947848);for(var n=t/2,o=e/t,a=e/2,s=[],c=[],l=0,u=0,h=-a;l<=t;l++,h+=o){s.push(-a,0,h,a,0,h),s.push(h,0,-a,h,0,a);var d=l===n?r:i;d.toArray(c,u),u+=3,d.toArray(c,u),u+=3,d.toArray(c,u),u+=3,d.toArray(c,u),u+=3}var p=new B;p.addAttribute(\"position\",new O(s,3)),p.addAttribute(\"color\",new O(c,3));var f=new Ot({vertexColors:Oo});Ft.call(this,p,f)}function lo(e,t,r,i,n,o){e=e||10,t=t||16,r=r||8,i=i||64,n=new y(void 0!==n?n:4473924),o=new y(void 0!==o?o:8947848);var a,s,c,l,u,h,d,p=[],f=[];for(l=0;l<=t;l++)c=l/t*(2*Math.PI),a=Math.sin(c)*e,s=Math.cos(c)*e,p.push(0,0,0),p.push(a,0,s),d=1&l?n:o,f.push(d.r,d.g,d.b),f.push(d.r,d.g,d.b);for(l=0;l<=r;l++)for(d=1&l?n:o,h=e-e/r*l,u=0;u<i;u++)c=u/i*(2*Math.PI),a=Math.sin(c)*h,s=Math.cos(c)*h,p.push(a,0,s),f.push(d.r,d.g,d.b),c=(u+1)/i*(2*Math.PI),a=Math.sin(c)*h,s=Math.cos(c)*h,p.push(a,0,s),f.push(d.r,d.g,d.b);var m=new B;m.addAttribute(\"position\",new O(p,3)),m.addAttribute(\"color\",new O(f,3));var v=new Ot({vertexColors:Oo});Ft.call(this,m,v)}function uo(e,t,r,i){this.object=e,this.size=void 0!==t?t:1;var n=void 0!==r?r:16776960,o=void 0!==i?i:1,a=0,s=this.object.geometry;s&&s.isGeometry?a=s.faces.length:console.warn(\"THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.\");var c=new B,l=new O(2*a*3,3);c.addAttribute(\"position\",l),Ft.call(this,c,new Ot({color:n,linewidth:o})),this.matrixAutoUpdate=!1,this.update()}function ho(e,t,r){w.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=r,void 0===t&&(t=1);var i=new B;i.addAttribute(\"position\",new O([-t,t,0,t,t,0,t,-t,0,-t,-t,0,-t,t,0],3));var n=new Ot({fog:!1});this.lightPlane=new Nt(i,n),this.add(this.lightPlane),i=new B,i.addAttribute(\"position\",new O([0,0,0,0,0,1],3)),this.targetLine=new Nt(i,n),this.add(this.targetLine),this.update()}function po(e){function t(e,t,i){r(e,i),r(t,i)}function r(e,t){o.push(0,0,0),a.push(t.r,t.g,t.b),void 0===s[e]&&(s[e]=[]),s[e].push(o.length/3-1)}var i=new B,n=new Ot({color:16777215,vertexColors:Io}),o=[],a=[],s={},c=new y(16755200),l=new y(16711680),u=new y(43775),h=new y(16777215),d=new y(3355443);t(\"n1\",\"n2\",c),t(\"n2\",\"n4\",c),t(\"n4\",\"n3\",c),t(\"n3\",\"n1\",c),t(\"f1\",\"f2\",c),t(\"f2\",\"f4\",c),t(\"f4\",\"f3\",c),t(\"f3\",\"f1\",c),t(\"n1\",\"f1\",c),t(\"n2\",\"f2\",c),t(\"n3\",\"f3\",c),t(\"n4\",\"f4\",c),t(\"p\",\"n1\",l),t(\"p\",\"n2\",l),t(\"p\",\"n3\",l),t(\"p\",\"n4\",l),t(\"u1\",\"u2\",u),t(\"u2\",\"u3\",u),t(\"u3\",\"u1\",u),t(\"c\",\"t\",h),t(\"p\",\"c\",d),t(\"cn1\",\"cn2\",d),t(\"cn3\",\"cn4\",d),t(\"cf1\",\"cf2\",d),t(\"cf3\",\"cf4\",d),i.addAttribute(\"position\",new O(o,3)),i.addAttribute(\"color\",new O(a,3)),Ft.call(this,i,n),this.camera=e,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=s,this.update()}function fo(e,t){this.object=e,void 0===t&&(t=16776960);var r=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),i=new Float32Array(24),n=new B;n.setIndex(new A(r,1)),n.addAttribute(\"position\",new A(i,3)),Ft.call(this,n,new Ot({color:t})),this.matrixAutoUpdate=!1,this.update()}function mo(e,t){this.type=\"Box3Helper\",this.box=e;var r=void 0!==t?t:16776960,i=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),n=[1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],o=new B;o.setIndex(new A(i,1)),o.addAttribute(\"position\",new O(n,3)),Ft.call(this,o,new Ot({color:r})),this.geometry.computeBoundingSphere()}function vo(e,t,r){this.type=\"PlaneHelper\",this.plane=e,this.size=void 0===t?1:t;var i=void 0!==r?r:16776960,n=[1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0],o=new B;o.addAttribute(\"position\",new O(n,3)),o.computeBoundingSphere(),Nt.call(this,o,new Ot({color:i}));var a=[1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1],s=new B;s.addAttribute(\"position\",new O(a,3)),s.computeBoundingSphere(),this.add(new J(s,new W({color:i,opacity:.2,transparent:!0,depthWrite:!1})))}function go(e,t,r,i,n,o){w.call(this),void 0===i&&(i=16776960),void 0===r&&(r=1),void 0===n&&(n=.2*r),void 0===o&&(o=.2*n),void 0===Tc&&(Tc=new B,Tc.addAttribute(\"position\",new O([0,0,0,0,1,0],3)),Ac=new ti(0,.5,1,5,1),Ac.translate(0,-.5,0)),this.position.copy(t),this.line=new Nt(Tc,new Ot({color:i})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new J(Ac,new W({color:i})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(e),this.setLength(r,n,o)}function yo(e){e=e||1;var t=[0,0,0,e,0,0,0,0,0,0,e,0,0,0,0,0,0,e],r=[1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],i=new B;i.addAttribute(\"position\",new O(t,3)),i.addAttribute(\"color\",new O(r,3));var n=new Ot({vertexColors:Oo});Ft.call(this,i,n)}function xo(e){console.warn(\"THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.\"),Ti.call(this,e),this.type=\"catmullrom\",this.closed=!0}function _o(e){console.warn(\"THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.\"),Ti.call(this,e),this.type=\"catmullrom\"}function bo(e){console.warn(\"THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.\"),Ti.call(this,e),this.type=\"catmullrom\"}function wo(e){return console.warn(\"THREE.XHRLoader has been renamed to THREE.FileLoader.\"),new vi(e)}r.d(t,\"_53\",function(){return h}),r.d(t,\"_34\",function(){return ks}),r.d(t,\"_46\",function(){return Hs}),r.d(t,\"_33\",function(){return Gs}),r.d(t,\"_31\",function(){return Lt}),r.d(t,\"_3\",function(){return J}),r.d(t,\"u\",function(){return p}),r.d(t,\"_41\",function(){return l}),r.d(t,\"p\",function(){return gi}),r.d(t,\"_42\",function(){return bi}),r.d(t,\"v\",function(){return uc}),r.d(t,\"F\",function(){return vi}),r.d(t,\"W\",function(){return xn}),r.d(t,\"_16\",function(){return wt}),r.d(t,\"_14\",function(){return E}),r.d(t,\"k\",function(){return B}),r.d(t,\"N\",function(){return T}),r.d(t,\"E\",function(){return S}),r.d(t,\"_12\",function(){return w}),r.d(t,\"C\",function(){return i}),r.d(t,\"_2\",function(){return zs}),r.d(t,\"_39\",function(){return Kn}),r.d(t,\"_49\",function(){return s}),r.d(t,\"_48\",function(){return n}),r.d(t,\"_18\",function(){return a}),r.d(t,\"m\",function(){return y}),r.d(t,\"S\",function(){return eo}),r.d(t,\"_17\",function(){return V}),r.d(t,\"_35\",function(){return X}),r.d(t,\"_7\",function(){return ui}),r.d(t,\"_6\",function(){return pi}),r.d(t,\"_5\",function(){return ft}),r.d(t,\"_4\",function(){return W}),r.d(t,\"j\",function(){return A}),r.d(t,\"Y\",function(){return Eo}),r.d(t,\"L\",function(){return Ro}),r.d(t,\"_9\",function(){return No}),r.d(t,\"b\",function(){return zo}),r.d(t,\"_27\",function(){return Aa}),r.d(t,\"U\",function(){return Ua}),r.d(t,\"V\",function(){return Oa}),r.d(t,\"I\",function(){return ja}),r.d(t,\"_22\",function(){return Za}),r.d(t,\"_19\",function(){return Ja}),r.d(t,\"_25\",function(){return ts}),r.d(t,\"_20\",function(){return is}),r.d(t,\"_21\",function(){return ns}),r.d(t,\"_24\",function(){return ls}),r.d(t,\"_54\",function(){return wo}),void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52)),void 0===Number.isInteger&&(Number.isInteger=function(e){return\"number\"==typeof e&&isFinite(e)&&Math.floor(e)===e}),void 0===Math.sign&&(Math.sign=function(e){return e<0?-1:e>0?1:+e}),\"name\"in Function.prototype==!1&&Object.defineProperty(Function.prototype,\"name\",{get:function(){return this.toString().match(/^\\s*function\\s*([^\\(\\s]*)/)[1]}}),void 0===Object.assign&&function(){Object.assign=function(e){if(void 0===e||null===e)throw new TypeError(\"Cannot convert undefined or null to object\");for(var t=Object(e),r=1;r<arguments.length;r++){var i=arguments[r];if(void 0!==i&&null!==i)for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])}return t}}(),Object.assign(i.prototype,{addEventListener:function(e,t){void 0===this._listeners&&(this._listeners={});var r=this._listeners;void 0===r[e]&&(r[e]=[]),-1===r[e].indexOf(t)&&r[e].push(t)},hasEventListener:function(e,t){if(void 0===this._listeners)return!1;var r=this._listeners;return void 0!==r[e]&&-1!==r[e].indexOf(t)},removeEventListener:function(e,t){if(void 0!==this._listeners){var r=this._listeners,i=r[e];if(void 0!==i){var n=i.indexOf(t);-1!==n&&i.splice(n,1)}}},dispatchEvent:function(e){if(void 0!==this._listeners){var t=this._listeners,r=t[e.type];if(void 0!==r){e.target=this;for(var i=r.slice(0),n=0,o=i.length;n<o;n++)i[n].call(this,e)}}}});var Mo=\"92\",Eo={LEFT:0,MIDDLE:1,RIGHT:2},So=0,To=1,Ao=2,Lo=1,Co=2,Ro=0,Po=1,Do=2,Uo=0,Io=1,Oo=2,No=0,Fo=1,zo=2,Bo=3,Go=4,Ho=5,jo=100,Vo=101,ko=102,Wo=103,Xo=104,qo=200,Yo=201,Zo=202,Jo=203,Ko=204,Qo=205,$o=206,ea=207,ta=208,ra=209,ia=210,na=0,oa=1,aa=2,sa=3,ca=4,la=5,ua=6,ha=7,da=0,pa=1,fa=2,ma=0,va=1,ga=2,ya=3,xa=4,_a=301,ba=302,wa=303,Ma=304,Ea=305,Sa=306,Ta=307,Aa=1e3,La=1001,Ca=1002,Ra=1003,Pa=1004,Da=1005,Ua=1006,Ia=1007,Oa=1008,Na=1009,Fa=1010,za=1011,Ba=1012,Ga=1013,Ha=1014,ja=1015,Va=1016,ka=1017,Wa=1018,Xa=1019,qa=1020,Ya=1021,Za=1022,Ja=1023,Ka=1024,Qa=1025,$a=1026,es=1027,ts=33776,rs=33777,is=33778,ns=33779,os=35840,as=35841,ss=35842,cs=35843,ls=36196,us=37808,hs=37809,ds=37810,ps=37811,fs=37812,ms=37813,vs=37814,gs=37815,ys=37816,xs=37817,_s=37818,bs=37819,ws=37820,Ms=37821,Es=2201,Ss=2400,Ts=0,As=1,Ls=2,Cs=3e3,Rs=3001,Ps=3007,Ds=3002,Us=3004,Is=3005,Os=3006,Ns=3200,Fs=3201,zs={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){for(var e=[],t=0;t<256;t++)e[t]=(t<16?\"0\":\"\")+t.toString(16);return function(){var t=4294967295*Math.random()|0,r=4294967295*Math.random()|0,i=4294967295*Math.random()|0,n=4294967295*Math.random()|0;return(e[255&t]+e[t>>8&255]+e[t>>16&255]+e[t>>24&255]+\"-\"+e[255&r]+e[r>>8&255]+\"-\"+e[r>>16&15|64]+e[r>>24&255]+\"-\"+e[63&i|128]+e[i>>8&255]+\"-\"+e[i>>16&255]+e[i>>24&255]+e[255&n]+e[n>>8&255]+e[n>>16&255]+e[n>>24&255]).toUpperCase()}}(),clamp:function(e,t,r){return Math.max(t,Math.min(r,e))},euclideanModulo:function(e,t){return(e%t+t)%t},mapLinear:function(e,t,r,i,n){return i+(e-t)*(n-i)/(r-t)},lerp:function(e,t,r){return(1-r)*e+r*t},smoothstep:function(e,t,r){return e<=t?0:e>=r?1:(e=(e-t)/(r-t))*e*(3-2*e)},smootherstep:function(e,t,r){return e<=t?0:e>=r?1:(e=(e-t)/(r-t))*e*e*(e*(6*e-15)+10)},randInt:function(e,t){return e+Math.floor(Math.random()*(t-e+1))},randFloat:function(e,t){return e+Math.random()*(t-e)},randFloatSpread:function(e){return e*(.5-Math.random())},degToRad:function(e){return e*zs.DEG2RAD},radToDeg:function(e){return e*zs.RAD2DEG},isPowerOfTwo:function(e){return 0==(e&e-1)&&0!==e},ceilPowerOfTwo:function(e){return Math.pow(2,Math.ceil(Math.log(e)/Math.LN2))},floorPowerOfTwo:function(e){return Math.pow(2,Math.floor(Math.log(e)/Math.LN2))}};Object.defineProperties(n.prototype,{width:{get:function(){return this.x},set:function(e){this.x=e}},height:{get:function(){return this.y},set:function(e){this.y=e}}}),Object.assign(n.prototype,{isVector2:!0,set:function(e,t){return this.x=e,this.y=t,this},setScalar:function(e){return this.x=e,this.y=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setComponent:function(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error(\"index is out of range: \"+e)}return this},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error(\"index is out of range: \"+e)}},clone:function(){return new this.constructor(this.x,this.y)},copy:function(e){return this.x=e.x,this.y=e.y,this},add:function(e,t){return void 0!==t?(console.warn(\"THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.\"),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this)},addScalar:function(e){return this.x+=e,this.y+=e,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this},addScaledVector:function(e,t){return this.x+=e.x*t,this.y+=e.y*t,this},sub:function(e,t){return void 0!==t?(console.warn(\"THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.\"),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this)},subScalar:function(e){return this.x-=e,this.y-=e,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this},multiply:function(e){return this.x*=e.x,this.y*=e.y,this},multiplyScalar:function(e){return this.x*=e,this.y*=e,this},divide:function(e){return this.x/=e.x,this.y/=e.y,this},divideScalar:function(e){return this.multiplyScalar(1/e)},applyMatrix3:function(e){var t=this.x,r=this.y,i=e.elements;return this.x=i[0]*t+i[3]*r+i[6],this.y=i[1]*t+i[4]*r+i[7],this},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this},clamp:function(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this},clampScalar:function(){var e=new n,t=new n;return function(r,i){return e.set(r,r),t.set(i,i),this.clamp(e,t)}}(),clampLength:function(e,t){var r=this.length();return this.divideScalar(r||1).multiplyScalar(Math.max(e,Math.min(t,r)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this},negate:function(){return this.x=-this.x,this.y=-this.y,this},dot:function(e){return this.x*e.x+this.y*e.y},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)},normalize:function(){return this.divideScalar(this.length()||1)},angle:function(){var e=Math.atan2(this.y,this.x);return e<0&&(e+=2*Math.PI),e},distanceTo:function(e){return Math.sqrt(this.distanceToSquared(e))},distanceToSquared:function(e){var t=this.x-e.x,r=this.y-e.y;return t*t+r*r},manhattanDistanceTo:function(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)},setLength:function(e){return this.normalize().multiplyScalar(e)},lerp:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this},lerpVectors:function(e,t,r){return this.subVectors(t,e).multiplyScalar(r).add(e)},equals:function(e){return e.x===this.x&&e.y===this.y},fromArray:function(e,t){return void 0===t&&(t=0),this.x=e[t],this.y=e[t+1],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.x,e[t+1]=this.y,e},fromBufferAttribute:function(e,t,r){return void 0!==r&&console.warn(\"THREE.Vector2: offset has been removed from .fromBufferAttribute().\"),this.x=e.getX(t),this.y=e.getY(t),this},rotateAround:function(e,t){var r=Math.cos(t),i=Math.sin(t),n=this.x-e.x,o=this.y-e.y;return this.x=n*r-o*i+e.x,this.y=n*i+o*r+e.y,this}}),Object.assign(o.prototype,{isMatrix4:!0,set:function(e,t,r,i,n,o,a,s,c,l,u,h,d,p,f,m){var v=this.elements;return v[0]=e,v[4]=t,v[8]=r,v[12]=i,v[1]=n,v[5]=o,v[9]=a,v[13]=s,v[2]=c,v[6]=l,v[10]=u,v[14]=h,v[3]=d,v[7]=p,v[11]=f,v[15]=m,this},identity:function(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this},clone:function(){return(new o).fromArray(this.elements)},copy:function(e){var t=this.elements,r=e.elements;return t[0]=r[0],t[1]=r[1],t[2]=r[2],t[3]=r[3],t[4]=r[4],t[5]=r[5],t[6]=r[6],t[7]=r[7],t[8]=r[8],t[9]=r[9],t[10]=r[10],t[11]=r[11],t[12]=r[12],t[13]=r[13],t[14]=r[14],t[15]=r[15],this},copyPosition:function(e){var t=this.elements,r=e.elements;return t[12]=r[12],t[13]=r[13],t[14]=r[14],this},extractBasis:function(e,t,r){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),r.setFromMatrixColumn(this,2),this},makeBasis:function(e,t,r){return this.set(e.x,t.x,r.x,0,e.y,t.y,r.y,0,e.z,t.z,r.z,0,0,0,0,1),this},extractRotation:function(){var e=new s;return function(t){var r=this.elements,i=t.elements,n=1/e.setFromMatrixColumn(t,0).length(),o=1/e.setFromMatrixColumn(t,1).length(),a=1/e.setFromMatrixColumn(t,2).length();return r[0]=i[0]*n,r[1]=i[1]*n,r[2]=i[2]*n,r[4]=i[4]*o,r[5]=i[5]*o,r[6]=i[6]*o,r[8]=i[8]*a,r[9]=i[9]*a,r[10]=i[10]*a,this}}(),makeRotationFromEuler:function(e){e&&e.isEuler||console.error(\"THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.\");var t=this.elements,r=e.x,i=e.y,n=e.z,o=Math.cos(r),a=Math.sin(r),s=Math.cos(i),c=Math.sin(i),l=Math.cos(n),u=Math.sin(n);if(\"XYZ\"===e.order){var h=o*l,d=o*u,p=a*l,f=a*u;t[0]=s*l,t[4]=-s*u,t[8]=c,t[1]=d+p*c,t[5]=h-f*c,t[9]=-a*s,t[2]=f-h*c,t[6]=p+d*c,t[10]=o*s}else if(\"YXZ\"===e.order){var m=s*l,v=s*u,g=c*l,y=c*u;t[0]=m+y*a,t[4]=g*a-v,t[8]=o*c,t[1]=o*u,t[5]=o*l,t[9]=-a,t[2]=v*a-g,t[6]=y+m*a,t[10]=o*s}else if(\"ZXY\"===e.order){var m=s*l,v=s*u,g=c*l,y=c*u;t[0]=m-y*a,t[4]=-o*u,t[8]=g+v*a,t[1]=v+g*a,t[5]=o*l,t[9]=y-m*a,t[2]=-o*c,t[6]=a,t[10]=o*s}else if(\"ZYX\"===e.order){var h=o*l,d=o*u,p=a*l,f=a*u;t[0]=s*l,t[4]=p*c-d,t[8]=h*c+f,t[1]=s*u,t[5]=f*c+h,t[9]=d*c-p,t[2]=-c,t[6]=a*s,t[10]=o*s}else if(\"YZX\"===e.order){var x=o*s,_=o*c,b=a*s,w=a*c;t[0]=s*l,t[4]=w-x*u,t[8]=b*u+_,t[1]=u,t[5]=o*l,t[9]=-a*l,t[2]=-c*l,t[6]=_*u+b,t[10]=x-w*u}else if(\"XZY\"===e.order){var x=o*s,_=o*c,b=a*s,w=a*c;t[0]=s*l,t[4]=-u,t[8]=c*l,t[1]=x*u+w,t[5]=o*l,t[9]=_*u-b,t[2]=b*u-_,t[6]=a*l,t[10]=w*u+x}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this},makeRotationFromQuaternion:function(e){var t=this.elements,r=e._x,i=e._y,n=e._z,o=e._w,a=r+r,s=i+i,c=n+n,l=r*a,u=r*s,h=r*c,d=i*s,p=i*c,f=n*c,m=o*a,v=o*s,g=o*c;return t[0]=1-(d+f),t[4]=u-g,t[8]=h+v,t[1]=u+g,t[5]=1-(l+f),t[9]=p-m,t[2]=h-v,t[6]=p+m,t[10]=1-(l+d),t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this},lookAt:function(){var e=new s,t=new s,r=new s;return function(i,n,o){var a=this.elements;return r.subVectors(i,n),0===r.lengthSq()&&(r.z=1),r.normalize(),e.crossVectors(o,r),0===e.lengthSq()&&(1===Math.abs(o.z)?r.x+=1e-4:r.z+=1e-4,r.normalize(),e.crossVectors(o,r)),e.normalize(),t.crossVectors(r,e),a[0]=e.x,a[4]=t.x,a[8]=r.x,a[1]=e.y,a[5]=t.y,a[9]=r.y,a[2]=e.z,a[6]=t.z,a[10]=r.z,this}}(),multiply:function(e,t){return void 0!==t?(console.warn(\"THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.\"),this.multiplyMatrices(e,t)):this.multiplyMatrices(this,e)},premultiply:function(e){return this.multiplyMatrices(e,this)},multiplyMatrices:function(e,t){var r=e.elements,i=t.elements,n=this.elements,o=r[0],a=r[4],s=r[8],c=r[12],l=r[1],u=r[5],h=r[9],d=r[13],p=r[2],f=r[6],m=r[10],v=r[14],g=r[3],y=r[7],x=r[11],_=r[15],b=i[0],w=i[4],M=i[8],E=i[12],S=i[1],T=i[5],A=i[9],L=i[13],C=i[2],R=i[6],P=i[10],D=i[14],U=i[3],I=i[7],O=i[11],N=i[15];return n[0]=o*b+a*S+s*C+c*U,n[4]=o*w+a*T+s*R+c*I,n[8]=o*M+a*A+s*P+c*O,n[12]=o*E+a*L+s*D+c*N,n[1]=l*b+u*S+h*C+d*U,n[5]=l*w+u*T+h*R+d*I,n[9]=l*M+u*A+h*P+d*O,n[13]=l*E+u*L+h*D+d*N,n[2]=p*b+f*S+m*C+v*U,n[6]=p*w+f*T+m*R+v*I,n[10]=p*M+f*A+m*P+v*O,n[14]=p*E+f*L+m*D+v*N,n[3]=g*b+y*S+x*C+_*U,n[7]=g*w+y*T+x*R+_*I,n[11]=g*M+y*A+x*P+_*O,n[15]=g*E+y*L+x*D+_*N,this},multiplyScalar:function(e){var t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this},applyToBufferAttribute:function(){var e=new s;return function(t){for(var r=0,i=t.count;r<i;r++)e.x=t.getX(r),e.y=t.getY(r),e.z=t.getZ(r),e.applyMatrix4(this),t.setXYZ(r,e.x,e.y,e.z);return t}}(),determinant:function(){var e=this.elements,t=e[0],r=e[4],i=e[8],n=e[12],o=e[1],a=e[5],s=e[9],c=e[13],l=e[2],u=e[6],h=e[10],d=e[14];return e[3]*(+n*s*u-i*c*u-n*a*h+r*c*h+i*a*d-r*s*d)+e[7]*(+t*s*d-t*c*h+n*o*h-i*o*d+i*c*l-n*s*l)+e[11]*(+t*c*u-t*a*d-n*o*u+r*o*d+n*a*l-r*c*l)+e[15]*(-i*a*l-t*s*u+t*a*h+i*o*u-r*o*h+r*s*l)},transpose:function(){var e,t=this.elements;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this},setPosition:function(e){var t=this.elements;return t[12]=e.x,t[13]=e.y,t[14]=e.z,this},getInverse:function(e,t){var r=this.elements,i=e.elements,n=i[0],o=i[1],a=i[2],s=i[3],c=i[4],l=i[5],u=i[6],h=i[7],d=i[8],p=i[9],f=i[10],m=i[11],v=i[12],g=i[13],y=i[14],x=i[15],_=p*y*h-g*f*h+g*u*m-l*y*m-p*u*x+l*f*x,b=v*f*h-d*y*h-v*u*m+c*y*m+d*u*x-c*f*x,w=d*g*h-v*p*h+v*l*m-c*g*m-d*l*x+c*p*x,M=v*p*u-d*g*u-v*l*f+c*g*f+d*l*y-c*p*y,E=n*_+o*b+a*w+s*M;if(0===E){var S=\"THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0\";if(!0===t)throw new Error(S);return console.warn(S),this.identity()}var T=1/E;return r[0]=_*T,r[1]=(g*f*s-p*y*s-g*a*m+o*y*m+p*a*x-o*f*x)*T,r[2]=(l*y*s-g*u*s+g*a*h-o*y*h-l*a*x+o*u*x)*T,r[3]=(p*u*s-l*f*s-p*a*h+o*f*h+l*a*m-o*u*m)*T,r[4]=b*T,r[5]=(d*y*s-v*f*s+v*a*m-n*y*m-d*a*x+n*f*x)*T,r[6]=(v*u*s-c*y*s-v*a*h+n*y*h+c*a*x-n*u*x)*T,r[7]=(c*f*s-d*u*s+d*a*h-n*f*h-c*a*m+n*u*m)*T,r[8]=w*T,r[9]=(v*p*s-d*g*s-v*o*m+n*g*m+d*o*x-n*p*x)*T,r[10]=(c*g*s-v*l*s+v*o*h-n*g*h-c*o*x+n*l*x)*T,r[11]=(d*l*s-c*p*s-d*o*h+n*p*h+c*o*m-n*l*m)*T,r[12]=M*T,r[13]=(d*g*a-v*p*a+v*o*f-n*g*f-d*o*y+n*p*y)*T,r[14]=(v*l*a-c*g*a-v*o*u+n*g*u+c*o*y-n*l*y)*T,r[15]=(c*p*a-d*l*a+d*o*u-n*p*u-c*o*f+n*l*f)*T,this},scale:function(e){var t=this.elements,r=e.x,i=e.y,n=e.z;return t[0]*=r,t[4]*=i,t[8]*=n,t[1]*=r,t[5]*=i,t[9]*=n,t[2]*=r,t[6]*=i,t[10]*=n,t[3]*=r,t[7]*=i,t[11]*=n,this},getMaxScaleOnAxis:function(){var e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],r=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],i=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,r,i))},makeTranslation:function(e,t,r){return this.set(1,0,0,e,0,1,0,t,0,0,1,r,0,0,0,1),this},makeRotationX:function(e){var t=Math.cos(e),r=Math.sin(e);return this.set(1,0,0,0,0,t,-r,0,0,r,t,0,0,0,0,1),this},makeRotationY:function(e){var t=Math.cos(e),r=Math.sin(e);return this.set(t,0,r,0,0,1,0,0,-r,0,t,0,0,0,0,1),this},makeRotationZ:function(e){var t=Math.cos(e),r=Math.sin(e);return this.set(t,-r,0,0,r,t,0,0,0,0,1,0,0,0,0,1),this},makeRotationAxis:function(e,t){var r=Math.cos(t),i=Math.sin(t),n=1-r,o=e.x,a=e.y,s=e.z,c=n*o,l=n*a;return this.set(c*o+r,c*a-i*s,c*s+i*a,0,c*a+i*s,l*a+r,l*s-i*o,0,c*s-i*a,l*s+i*o,n*s*s+r,0,0,0,0,1),this},makeScale:function(e,t,r){return this.set(e,0,0,0,0,t,0,0,0,0,r,0,0,0,0,1),this},makeShear:function(e,t,r){return this.set(1,t,r,0,e,1,r,0,e,t,1,0,0,0,0,1),this},compose:function(e,t,r){return this.makeRotationFromQuaternion(t),this.scale(r),this.setPosition(e),this},decompose:function(){var e=new s,t=new o;return function(r,i,n){var o=this.elements,a=e.set(o[0],o[1],o[2]).length(),s=e.set(o[4],o[5],o[6]).length(),c=e.set(o[8],o[9],o[10]).length();this.determinant()<0&&(a=-a),r.x=o[12],r.y=o[13],r.z=o[14],t.copy(this);var l=1/a,u=1/s,h=1/c;return t.elements[0]*=l,t.elements[1]*=l,t.elements[2]*=l,t.elements[4]*=u,t.elements[5]*=u,t.elements[6]*=u,t.elements[8]*=h,t.elements[9]*=h,t.elements[10]*=h,i.setFromRotationMatrix(t),n.x=a,n.y=s,n.z=c,this}}(),makePerspective:function(e,t,r,i,n,o){void 0===o&&console.warn(\"THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.\");var a=this.elements,s=2*n/(t-e),c=2*n/(r-i),l=(t+e)/(t-e),u=(r+i)/(r-i),h=-(o+n)/(o-n),d=-2*o*n/(o-n);return a[0]=s,a[4]=0,a[8]=l,a[12]=0,a[1]=0,a[5]=c,a[9]=u,a[13]=0,a[2]=0,a[6]=0,a[10]=h,a[14]=d,a[3]=0,a[7]=0,a[11]=-1,a[15]=0,this},makeOrthographic:function(e,t,r,i,n,o){var a=this.elements,s=1/(t-e),c=1/(r-i),l=1/(o-n),u=(t+e)*s,h=(r+i)*c,d=(o+n)*l;return a[0]=2*s,a[4]=0,a[8]=0,a[12]=-u,a[1]=0,a[5]=2*c,a[9]=0,a[13]=-h,a[2]=0,a[6]=0,a[10]=-2*l,a[14]=-d,a[3]=0,a[7]=0,a[11]=0,a[15]=1,this},equals:function(e){for(var t=this.elements,r=e.elements,i=0;i<16;i++)if(t[i]!==r[i])return!1;return!0},fromArray:function(e,t){void 0===t&&(t=0);for(var r=0;r<16;r++)this.elements[r]=e[r+t];return this},toArray:function(e,t){void 0===e&&(e=[]),void 0===t&&(t=0);var r=this.elements;return e[t]=r[0],e[t+1]=r[1],e[t+2]=r[2],e[t+3]=r[3],e[t+4]=r[4],e[t+5]=r[5],e[t+6]=r[6],e[t+7]=r[7],e[t+8]=r[8],e[t+9]=r[9],e[t+10]=r[10],e[t+11]=r[11],e[t+12]=r[12],e[t+13]=r[13],e[t+14]=r[14],e[t+15]=r[15],e}}),Object.assign(a,{slerp:function(e,t,r,i){return r.copy(e).slerp(t,i)},slerpFlat:function(e,t,r,i,n,o,a){var s=r[i+0],c=r[i+1],l=r[i+2],u=r[i+3],h=n[o+0],d=n[o+1],p=n[o+2],f=n[o+3];if(u!==f||s!==h||c!==d||l!==p){var m=1-a,v=s*h+c*d+l*p+u*f,g=v>=0?1:-1,y=1-v*v;if(y>Number.EPSILON){var x=Math.sqrt(y),_=Math.atan2(x,v*g);m=Math.sin(m*_)/x,a=Math.sin(a*_)/x}var b=a*g;if(s=s*m+h*b,c=c*m+d*b,l=l*m+p*b,u=u*m+f*b,m===1-a){var w=1/Math.sqrt(s*s+c*c+l*l+u*u);s*=w,c*=w,l*=w,u*=w}}e[t]=s,e[t+1]=c,e[t+2]=l,e[t+3]=u}}),Object.defineProperties(a.prototype,{x:{get:function(){return this._x},set:function(e){this._x=e,this.onChangeCallback()}},y:{get:function(){return this._y},set:function(e){this._y=e,this.onChangeCallback()}},z:{get:function(){return this._z},set:function(e){this._z=e,this.onChangeCallback()}},w:{get:function(){return this._w},set:function(e){this._w=e,this.onChangeCallback()}}}),Object.assign(a.prototype,{set:function(e,t,r,i){return this._x=e,this._y=t,this._z=r,this._w=i,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._w)},copy:function(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this.onChangeCallback(),this},setFromEuler:function(e,t){if(!e||!e.isEuler)throw new Error(\"THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.\");var r=e._x,i=e._y,n=e._z,o=e.order,a=Math.cos,s=Math.sin,c=a(r/2),l=a(i/2),u=a(n/2),h=s(r/2),d=s(i/2),p=s(n/2);return\"XYZ\"===o?(this._x=h*l*u+c*d*p,this._y=c*d*u-h*l*p,this._z=c*l*p+h*d*u,this._w=c*l*u-h*d*p):\"YXZ\"===o?(this._x=h*l*u+c*d*p,this._y=c*d*u-h*l*p,this._z=c*l*p-h*d*u,this._w=c*l*u+h*d*p):\"ZXY\"===o?(this._x=h*l*u-c*d*p,this._y=c*d*u+h*l*p,this._z=c*l*p+h*d*u,this._w=c*l*u-h*d*p):\"ZYX\"===o?(this._x=h*l*u-c*d*p,this._y=c*d*u+h*l*p,this._z=c*l*p-h*d*u,this._w=c*l*u+h*d*p):\"YZX\"===o?(this._x=h*l*u+c*d*p,this._y=c*d*u+h*l*p,this._z=c*l*p-h*d*u,this._w=c*l*u-h*d*p):\"XZY\"===o&&(this._x=h*l*u-c*d*p,this._y=c*d*u-h*l*p,this._z=c*l*p+h*d*u,this._w=c*l*u+h*d*p),!1!==t&&this.onChangeCallback(),this},setFromAxisAngle:function(e,t){var r=t/2,i=Math.sin(r);return this._x=e.x*i,this._y=e.y*i,this._z=e.z*i,this._w=Math.cos(r),this.onChangeCallback(),this},setFromRotationMatrix:function(e){var t,r=e.elements,i=r[0],n=r[4],o=r[8],a=r[1],s=r[5],c=r[9],l=r[2],u=r[6],h=r[10],d=i+s+h;return d>0?(t=.5/Math.sqrt(d+1),this._w=.25/t,this._x=(u-c)*t,this._y=(o-l)*t,this._z=(a-n)*t):i>s&&i>h?(t=2*Math.sqrt(1+i-s-h),this._w=(u-c)/t,this._x=.25*t,this._y=(n+a)/t,this._z=(o+l)/t):s>h?(t=2*Math.sqrt(1+s-i-h),this._w=(o-l)/t,this._x=(n+a)/t,this._y=.25*t,this._z=(c+u)/t):(t=2*Math.sqrt(1+h-i-s),this._w=(a-n)/t,this._x=(o+l)/t,this._y=(c+u)/t,this._z=.25*t),this.onChangeCallback(),this},setFromUnitVectors:function(){var e,t=new s;return function(r,i){return void 0===t&&(t=new s),e=r.dot(i)+1,e<1e-6?(e=0,Math.abs(r.x)>Math.abs(r.z)?t.set(-r.y,r.x,0):t.set(0,-r.z,r.y)):t.crossVectors(r,i),this._x=t.x,this._y=t.y,this._z=t.z,this._w=e,this.normalize()}}(),inverse:function(){return this.conjugate()},conjugate:function(){return this._x*=-1,this._y*=-1,this._z*=-1,this.onChangeCallback(),this},dot:function(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var e=this.length();return 0===e?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this.onChangeCallback(),this},multiply:function(e,t){return void 0!==t?(console.warn(\"THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.\"),this.multiplyQuaternions(e,t)):this.multiplyQuaternions(this,e)},premultiply:function(e){return this.multiplyQuaternions(e,this)},multiplyQuaternions:function(e,t){var r=e._x,i=e._y,n=e._z,o=e._w,a=t._x,s=t._y,c=t._z,l=t._w;return this._x=r*l+o*a+i*c-n*s,this._y=i*l+o*s+n*a-r*c,this._z=n*l+o*c+r*s-i*a,this._w=o*l-r*a-i*s-n*c,this.onChangeCallback(),this},slerp:function(e,t){if(0===t)return this;if(1===t)return this.copy(e);var r=this._x,i=this._y,n=this._z,o=this._w,a=o*e._w+r*e._x+i*e._y+n*e._z;if(a<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,a=-a):this.copy(e),a>=1)return this._w=o,this._x=r,this._y=i,this._z=n,this;var s=Math.sqrt(1-a*a);if(Math.abs(s)<.001)return this._w=.5*(o+this._w),this._x=.5*(r+this._x),this._y=.5*(i+this._y),this._z=.5*(n+this._z),this;var c=Math.atan2(s,a),l=Math.sin((1-t)*c)/s,u=Math.sin(t*c)/s;return this._w=o*l+this._w*u,this._x=r*l+this._x*u,this._y=i*l+this._y*u,this._z=n*l+this._z*u,this.onChangeCallback(),this},equals:function(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w},fromArray:function(e,t){return void 0===t&&(t=0),this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this.onChangeCallback(),this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e},onChange:function(e){return this.onChangeCallback=e,this},onChangeCallback:function(){}}),Object.assign(s.prototype,{isVector3:!0,set:function(e,t,r){return this.x=e,this.y=t,this.z=r,this},setScalar:function(e){return this.x=e,this.y=e,this.z=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setZ:function(e){return this.z=e,this},setComponent:function(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error(\"index is out of range: \"+e)}return this},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error(\"index is out of range: \"+e)}},clone:function(){return new this.constructor(this.x,this.y,this.z)},copy:function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this},add:function(e,t){return void 0!==t?(console.warn(\"THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.\"),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this)},addScalar:function(e){return this.x+=e,this.y+=e,this.z+=e,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this},addScaledVector:function(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this},sub:function(e,t){return void 0!==t?(console.warn(\"THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.\"),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this)},subScalar:function(e){return this.x-=e,this.y-=e,this.z-=e,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this},multiply:function(e,t){return void 0!==t?(console.warn(\"THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.\"),this.multiplyVectors(e,t)):(this.x*=e.x,this.y*=e.y,this.z*=e.z,this)},multiplyScalar:function(e){return this.x*=e,this.y*=e,this.z*=e,this},multiplyVectors:function(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this},applyEuler:function(){var e=new a;return function(t){return t&&t.isEuler||console.error(\"THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.\"),this.applyQuaternion(e.setFromEuler(t))}}(),applyAxisAngle:function(){var e=new a;return function(t,r){return this.applyQuaternion(e.setFromAxisAngle(t,r))}}(),applyMatrix3:function(e){var t=this.x,r=this.y,i=this.z,n=e.elements;return this.x=n[0]*t+n[3]*r+n[6]*i,this.y=n[1]*t+n[4]*r+n[7]*i,this.z=n[2]*t+n[5]*r+n[8]*i,this},applyMatrix4:function(e){var t=this.x,r=this.y,i=this.z,n=e.elements,o=1/(n[3]*t+n[7]*r+n[11]*i+n[15]);return this.x=(n[0]*t+n[4]*r+n[8]*i+n[12])*o,this.y=(n[1]*t+n[5]*r+n[9]*i+n[13])*o,this.z=(n[2]*t+n[6]*r+n[10]*i+n[14])*o,this},applyQuaternion:function(e){var t=this.x,r=this.y,i=this.z,n=e.x,o=e.y,a=e.z,s=e.w,c=s*t+o*i-a*r,l=s*r+a*t-n*i,u=s*i+n*r-o*t,h=-n*t-o*r-a*i;return this.x=c*s+h*-n+l*-a-u*-o,this.y=l*s+h*-o+u*-n-c*-a,this.z=u*s+h*-a+c*-o-l*-n,this},project:function(){var e=new o;return function(t){return e.multiplyMatrices(t.projectionMatrix,e.getInverse(t.matrixWorld)),this.applyMatrix4(e)}}(),unproject:function(){var e=new o;return function(t){return e.multiplyMatrices(t.matrixWorld,e.getInverse(t.projectionMatrix)),this.applyMatrix4(e)}}(),transformDirection:function(e){var t=this.x,r=this.y,i=this.z,n=e.elements;return this.x=n[0]*t+n[4]*r+n[8]*i,this.y=n[1]*t+n[5]*r+n[9]*i,this.z=n[2]*t+n[6]*r+n[10]*i,this.normalize()},divide:function(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this},divideScalar:function(e){return this.multiplyScalar(1/e)},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this},clamp:function(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this},clampScalar:function(){var e=new s,t=new s;return function(r,i){return e.set(r,r,r),t.set(i,i,i),this.clamp(e,t)}}(),clampLength:function(e,t){var r=this.length();return this.divideScalar(r||1).multiplyScalar(Math.max(e,Math.min(t,r)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this},dot:function(e){return this.x*e.x+this.y*e.y+this.z*e.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(e){return this.normalize().multiplyScalar(e)},lerp:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this},lerpVectors:function(e,t,r){return this.subVectors(t,e).multiplyScalar(r).add(e)},cross:function(e,t){return void 0!==t?(console.warn(\"THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.\"),this.crossVectors(e,t)):this.crossVectors(this,e)},crossVectors:function(e,t){var r=e.x,i=e.y,n=e.z,o=t.x,a=t.y,s=t.z;return this.x=i*s-n*a,this.y=n*o-r*s,this.z=r*a-i*o,this},projectOnVector:function(e){var t=e.dot(this)/e.lengthSq();return this.copy(e).multiplyScalar(t)},projectOnPlane:function(){var e=new s;return function(t){return e.copy(this).projectOnVector(t),this.sub(e)}}(),reflect:function(){var e=new s;return function(t){return this.sub(e.copy(t).multiplyScalar(2*this.dot(t)))}}(),angleTo:function(e){var t=this.dot(e)/Math.sqrt(this.lengthSq()*e.lengthSq());return Math.acos(zs.clamp(t,-1,1))},distanceTo:function(e){return Math.sqrt(this.distanceToSquared(e))},distanceToSquared:function(e){var t=this.x-e.x,r=this.y-e.y,i=this.z-e.z;return t*t+r*r+i*i},manhattanDistanceTo:function(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)},setFromSpherical:function(e){var t=Math.sin(e.phi)*e.radius;return this.x=t*Math.sin(e.theta),this.y=Math.cos(e.phi)*e.radius,this.z=t*Math.cos(e.theta),this},setFromCylindrical:function(e){return this.x=e.radius*Math.sin(e.theta),this.y=e.y,this.z=e.radius*Math.cos(e.theta),this},setFromMatrixPosition:function(e){var t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this},setFromMatrixScale:function(e){var t=this.setFromMatrixColumn(e,0).length(),r=this.setFromMatrixColumn(e,1).length(),i=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=r,this.z=i,this},setFromMatrixColumn:function(e,t){return this.fromArray(e.elements,4*t)},equals:function(e){return e.x===this.x&&e.y===this.y&&e.z===this.z},fromArray:function(e,t){return void 0===t&&(t=0),this.x=e[t],this.y=e[t+1],this.z=e[t+2],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e},fromBufferAttribute:function(e,t,r){return void 0!==r&&console.warn(\"THREE.Vector3: offset has been removed from .fromBufferAttribute().\"),this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}}),Object.assign(c.prototype,{isMatrix3:!0,set:function(e,t,r,i,n,o,a,s,c){var l=this.elements;return l[0]=e,l[1]=i,l[2]=a,l[3]=t,l[4]=n,l[5]=s,l[6]=r,l[7]=o,l[8]=c,this},identity:function(){return this.set(1,0,0,0,1,0,0,0,1),this},clone:function(){return(new this.constructor).fromArray(this.elements)},copy:function(e){var t=this.elements,r=e.elements;return t[0]=r[0],t[1]=r[1],t[2]=r[2],t[3]=r[3],t[4]=r[4],t[5]=r[5],t[6]=r[6],t[7]=r[7],t[8]=r[8],this},setFromMatrix4:function(e){var t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this},applyToBufferAttribute:function(){var e=new s;return function(t){for(var r=0,i=t.count;r<i;r++)e.x=t.getX(r),e.y=t.getY(r),e.z=t.getZ(r),e.applyMatrix3(this),t.setXYZ(r,e.x,e.y,e.z);return t}}(),multiply:function(e){return this.multiplyMatrices(this,e)},premultiply:function(e){return this.multiplyMatrices(e,this)},multiplyMatrices:function(e,t){var r=e.elements,i=t.elements,n=this.elements,o=r[0],a=r[3],s=r[6],c=r[1],l=r[4],u=r[7],h=r[2],d=r[5],p=r[8],f=i[0],m=i[3],v=i[6],g=i[1],y=i[4],x=i[7],_=i[2],b=i[5],w=i[8];return n[0]=o*f+a*g+s*_,n[3]=o*m+a*y+s*b,n[6]=o*v+a*x+s*w,n[1]=c*f+l*g+u*_,n[4]=c*m+l*y+u*b,n[7]=c*v+l*x+u*w,n[2]=h*f+d*g+p*_,n[5]=h*m+d*y+p*b,n[8]=h*v+d*x+p*w,this},multiplyScalar:function(e){var t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this},determinant:function(){var e=this.elements,t=e[0],r=e[1],i=e[2],n=e[3],o=e[4],a=e[5],s=e[6],c=e[7],l=e[8];return t*o*l-t*a*c-r*n*l+r*a*s+i*n*c-i*o*s},getInverse:function(e,t){e&&e.isMatrix4&&console.error(\"THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.\");var r=e.elements,i=this.elements,n=r[0],o=r[1],a=r[2],s=r[3],c=r[4],l=r[5],u=r[6],h=r[7],d=r[8],p=d*c-l*h,f=l*u-d*s,m=h*s-c*u,v=n*p+o*f+a*m;if(0===v){var g=\"THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0\";if(!0===t)throw new Error(g);return console.warn(g),this.identity()}var y=1/v;return i[0]=p*y,i[1]=(a*h-d*o)*y,i[2]=(l*o-a*c)*y,i[3]=f*y,i[4]=(d*n-a*u)*y,i[5]=(a*s-l*n)*y,i[6]=m*y,i[7]=(o*u-h*n)*y,i[8]=(c*n-o*s)*y,this},transpose:function(){var e,t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this},getNormalMatrix:function(e){return this.setFromMatrix4(e).getInverse(this).transpose()},transposeIntoArray:function(e){var t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this},setUvTransform:function(e,t,r,i,n,o,a){var s=Math.cos(n),c=Math.sin(n);this.set(r*s,r*c,-r*(s*o+c*a)+o+e,-i*c,i*s,-i*(-c*o+s*a)+a+t,0,0,1)},scale:function(e,t){var r=this.elements;return r[0]*=e,r[3]*=e,r[6]*=e,r[1]*=t,r[4]*=t,r[7]*=t,this},rotate:function(e){var t=Math.cos(e),r=Math.sin(e),i=this.elements,n=i[0],o=i[3],a=i[6],s=i[1],c=i[4],l=i[7];return i[0]=t*n+r*s,i[3]=t*o+r*c,i[6]=t*a+r*l,i[1]=-r*n+t*s,i[4]=-r*o+t*c,i[7]=-r*a+t*l,this},translate:function(e,t){var r=this.elements;return r[0]+=e*r[2],r[3]+=e*r[5],r[6]+=e*r[8],r[1]+=t*r[2],r[4]+=t*r[5],r[7]+=t*r[8],this},equals:function(e){for(var t=this.elements,r=e.elements,i=0;i<9;i++)if(t[i]!==r[i])return!1;return!0},fromArray:function(e,t){void 0===t&&(t=0);for(var r=0;r<9;r++)this.elements[r]=e[r+t];return this},toArray:function(e,t){void 0===e&&(e=[]),void 0===t&&(t=0);var r=this.elements;return e[t]=r[0],e[t+1]=r[1],e[t+2]=r[2],e[t+3]=r[3],e[t+4]=r[4],e[t+5]=r[5],e[t+6]=r[6],e[t+7]=r[7],e[t+8]=r[8],e}});var Bs=0;l.DEFAULT_IMAGE=void 0,l.DEFAULT_MAPPING=300,l.prototype=Object.assign(Object.create(i.prototype),{constructor:l,isTexture:!0,updateMatrix:function(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.name=e.name,this.image=e.image,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.encoding=e.encoding,this},toJSON:function(e){var t=void 0===e||\"string\"==typeof e;if(!t&&void 0!==e.textures[this.uuid])return e.textures[this.uuid];var r={metadata:{version:4.5,type:\"Texture\",generator:\"Texture.toJSON\"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY};if(void 0!==this.image){var i=this.image;void 0===i.uuid&&(i.uuid=zs.generateUUID()),t||void 0!==e.images[i.uuid]||(e.images[i.uuid]={uuid:i.uuid,url:function(e){var t;if(e instanceof HTMLCanvasElement)t=e;else{t=document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"canvas\"),t.width=e.width,t.height=e.height;var r=t.getContext(\"2d\");e instanceof ImageData?r.putImageData(e,0,0):r.drawImage(e,0,0,e.width,e.height)}return t.width>2048||t.height>2048?t.toDataURL(\"image/jpeg\",.6):t.toDataURL(\"image/png\")}(i)}),r.image=i.uuid}return t||(e.textures[this.uuid]=r),r},dispose:function(){this.dispatchEvent({type:\"dispose\"})},transformUv:function(e){if(300===this.mapping){if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case Aa:e.x=e.x-Math.floor(e.x);break;case La:e.x=e.x<0?0:1;break;case Ca:1===Math.abs(Math.floor(e.x)%2)?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x)}if(e.y<0||e.y>1)switch(this.wrapT){case Aa:e.y=e.y-Math.floor(e.y);break;case La:e.y=e.y<0?0:1;break;case Ca:1===Math.abs(Math.floor(e.y)%2)?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y)}this.flipY&&(e.y=1-e.y)}}}),Object.defineProperty(l.prototype,\"needsUpdate\",{set:function(e){!0===e&&this.version++}}),Object.assign(u.prototype,{isVector4:!0,set:function(e,t,r,i){return this.x=e,this.y=t,this.z=r,this.w=i,this},setScalar:function(e){return this.x=e,this.y=e,this.z=e,this.w=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setZ:function(e){return this.z=e,this},setW:function(e){return this.w=e,this},setComponent:function(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error(\"index is out of range: \"+e)}return this},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error(\"index is out of range: \"+e)}},clone:function(){return new this.constructor(this.x,this.y,this.z,this.w)},copy:function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=void 0!==e.w?e.w:1,this},add:function(e,t){return void 0!==t?(console.warn(\"THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.\"),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this)},addScalar:function(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this},addScaledVector:function(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this},sub:function(e,t){return void 0!==t?(console.warn(\"THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.\"),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this)},subScalar:function(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this},multiplyScalar:function(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this},applyMatrix4:function(e){var t=this.x,r=this.y,i=this.z,n=this.w,o=e.elements;return this.x=o[0]*t+o[4]*r+o[8]*i+o[12]*n,this.y=o[1]*t+o[5]*r+o[9]*i+o[13]*n,this.z=o[2]*t+o[6]*r+o[10]*i+o[14]*n,this.w=o[3]*t+o[7]*r+o[11]*i+o[15]*n,this},divideScalar:function(e){return this.multiplyScalar(1/e)},setAxisAngleFromQuaternion:function(e){this.w=2*Math.acos(e.w);var t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this},setAxisAngleFromRotationMatrix:function(e){var t,r,i,n,o=e.elements,a=o[0],s=o[4],c=o[8],l=o[1],u=o[5],h=o[9],d=o[2],p=o[6],f=o[10];if(Math.abs(s-l)<.01&&Math.abs(c-d)<.01&&Math.abs(h-p)<.01){if(Math.abs(s+l)<.1&&Math.abs(c+d)<.1&&Math.abs(h+p)<.1&&Math.abs(a+u+f-3)<.1)return this.set(1,0,0,0),this;t=Math.PI;var m=(a+1)/2,v=(u+1)/2,g=(f+1)/2,y=(s+l)/4,x=(c+d)/4,_=(h+p)/4;return m>v&&m>g?m<.01?(r=0,i=.707106781,n=.707106781):(r=Math.sqrt(m),i=y/r,n=x/r):v>g?v<.01?(r=.707106781,i=0,n=.707106781):(i=Math.sqrt(v),r=y/i,n=_/i):g<.01?(r=.707106781,i=.707106781,n=0):(n=Math.sqrt(g),r=x/n,i=_/n),this.set(r,i,n,t),this}var b=Math.sqrt((p-h)*(p-h)+(c-d)*(c-d)+(l-s)*(l-s));return Math.abs(b)<.001&&(b=1),this.x=(p-h)/b,this.y=(c-d)/b,this.z=(l-s)/b,this.w=Math.acos((a+u+f-1)/2),this},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this},clamp:function(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this.w=Math.max(e.w,Math.min(t.w,this.w)),this},clampScalar:function(){var e,t;return function(r,i){return void 0===e&&(e=new u,t=new u),e.set(r,r,r,r),t.set(i,i,i,i),this.clamp(e,t)}}(),clampLength:function(e,t){var r=this.length();return this.divideScalar(r||1).multiplyScalar(Math.max(e,Math.min(t,r)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this},dot:function(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(e){return this.normalize().multiplyScalar(e)},lerp:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this},lerpVectors:function(e,t,r){return this.subVectors(t,e).multiplyScalar(r).add(e)},equals:function(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w},fromArray:function(e,t){return void 0===t&&(t=0),this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e},fromBufferAttribute:function(e,t,r){return void 0!==r&&console.warn(\"THREE.Vector4: offset has been removed from .fromBufferAttribute().\"),this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}}),h.prototype=Object.assign(Object.create(i.prototype),{constructor:h,isWebGLRenderTarget:!0,setSize:function(e,t){this.width===e&&this.height===t||(this.width=e,this.height=t,this.dispose()),this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.width=e.width,this.height=e.height,this.viewport.copy(e.viewport),this.texture=e.texture.clone(),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.depthTexture=e.depthTexture,this},dispose:function(){this.dispatchEvent({type:\"dispose\"})}}),d.prototype=Object.create(h.prototype),d.prototype.constructor=d,d.prototype.isWebGLRenderTargetCube=!0,p.prototype=Object.create(l.prototype),p.prototype.constructor=p,p.prototype.isDataTexture=!0,Object.assign(f.prototype,{isBox3:!0,set:function(e,t){return this.min.copy(e),this.max.copy(t),this},setFromArray:function(e){for(var t=1/0,r=1/0,i=1/0,n=-1/0,o=-1/0,a=-1/0,s=0,c=e.length;s<c;s+=3){var l=e[s],u=e[s+1],h=e[s+2];l<t&&(t=l),u<r&&(r=u),h<i&&(i=h),l>n&&(n=l),u>o&&(o=u),h>a&&(a=h)}return this.min.set(t,r,i),this.max.set(n,o,a),this},setFromBufferAttribute:function(e){for(var t=1/0,r=1/0,i=1/0,n=-1/0,o=-1/0,a=-1/0,s=0,c=e.count;s<c;s++){var l=e.getX(s),u=e.getY(s),h=e.getZ(s);l<t&&(t=l),u<r&&(r=u),h<i&&(i=h),l>n&&(n=l),u>o&&(o=u),h>a&&(a=h)}return this.min.set(t,r,i),this.max.set(n,o,a),this},setFromPoints:function(e){this.makeEmpty();for(var t=0,r=e.length;t<r;t++)this.expandByPoint(e[t]);return this},setFromCenterAndSize:function(){var e=new s;return function(t,r){var i=e.copy(r).multiplyScalar(.5);return this.min.copy(t).sub(i),this.max.copy(t).add(i),this}}(),setFromObject:function(e){return this.makeEmpty(),this.expandByObject(e)},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.min.copy(e.min),this.max.copy(e.max),this},makeEmpty:function(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},getCenter:function(e){return void 0===e&&(console.warn(\"THREE.Box3: .getCenter() target is now required\"),e=new s),this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(e){return void 0===e&&(console.warn(\"THREE.Box3: .getSize() target is now required\"),e=new s),this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)},expandByPoint:function(e){return this.min.min(e),this.max.max(e),this},expandByVector:function(e){return this.min.sub(e),this.max.add(e),this},expandByScalar:function(e){return this.min.addScalar(-e),this.max.addScalar(e),this},expandByObject:function(){function e(e){var o=e.geometry;if(void 0!==o)if(o.isGeometry){var a=o.vertices;for(r=0,i=a.length;r<i;r++)n.copy(a[r]),n.applyMatrix4(e.matrixWorld),t.expandByPoint(n)}else if(o.isBufferGeometry){var s=o.attributes.position;if(void 0!==s)for(r=0,i=s.count;r<i;r++)n.fromBufferAttribute(s,r).applyMatrix4(e.matrixWorld),t.expandByPoint(n)}}var t,r,i,n=new s;return function(r){return t=this,r.updateMatrixWorld(!0),r.traverse(e),this}}(),containsPoint:function(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z)},containsBox:function(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z},getParameter:function(e,t){return void 0===t&&(console.warn(\"THREE.Box3: .getParameter() target is now required\"),t=new s),t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))},intersectsBox:function(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z)},intersectsSphere:function(){var e=new s;return function(t){return this.clampPoint(t.center,e),e.distanceToSquared(t.center)<=t.radius*t.radius}}(),intersectsPlane:function(e){var t,r;return e.normal.x>0?(t=e.normal.x*this.min.x,r=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,r=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,r+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,r+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,r+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,r+=e.normal.z*this.min.z),t<=e.constant&&r>=e.constant},intersectsTriangle:function(){function e(e){var n,o;for(n=0,o=e.length-3;n<=o;n+=3){c.fromArray(e,n);var a=u.x*Math.abs(c.x)+u.y*Math.abs(c.y)+u.z*Math.abs(c.z),s=t.dot(c),l=r.dot(c),h=i.dot(c);if(Math.max(-Math.max(s,l,h),Math.min(s,l,h))>a)return!1}return!0}var t=new s,r=new s,i=new s,n=new s,o=new s,a=new s,c=new s,l=new s,u=new s,h=new s;return function(s){if(this.isEmpty())return!1;this.getCenter(l),u.subVectors(this.max,l),t.subVectors(s.a,l),r.subVectors(s.b,l),i.subVectors(s.c,l),n.subVectors(r,t),o.subVectors(i,r),a.subVectors(t,i);var c=[0,-n.z,n.y,0,-o.z,o.y,0,-a.z,a.y,n.z,0,-n.x,o.z,0,-o.x,a.z,0,-a.x,-n.y,n.x,0,-o.y,o.x,0,-a.y,a.x,0];return!!e(c)&&(c=[1,0,0,0,1,0,0,0,1],!!e(c)&&(h.crossVectors(n,o),c=[h.x,h.y,h.z],e(c)))}}(),clampPoint:function(e,t){return void 0===t&&(console.warn(\"THREE.Box3: .clampPoint() target is now required\"),t=new s),t.copy(e).clamp(this.min,this.max)},distanceToPoint:function(){var e=new s;return function(t){return e.copy(t).clamp(this.min,this.max).sub(t).length()}}(),getBoundingSphere:function(){var e=new s;return function(t){return void 0===t&&(console.warn(\"THREE.Box3: .getBoundingSphere() target is now required\"),t=new m),this.getCenter(t.center),t.radius=.5*this.getSize(e).length(),t}}(),intersect:function(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this},union:function(e){return this.min.min(e.min),this.max.max(e.max),this},applyMatrix4:function(){var e=[new s,new s,new s,new s,new s,new s,new s,new s];return function(t){return this.isEmpty()?this:(e[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),e[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),e[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),e[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),e[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),e[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),e[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),e[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(e),this)}}(),translate:function(e){return this.min.add(e),this.max.add(e),this},equals:function(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}),Object.assign(m.prototype,{set:function(e,t){return this.center.copy(e),this.radius=t,this},setFromPoints:function(){var e=new f;return function(t,r){var i=this.center;void 0!==r?i.copy(r):e.setFromPoints(t).getCenter(i);for(var n=0,o=0,a=t.length;o<a;o++)n=Math.max(n,i.distanceToSquared(t[o]));return this.radius=Math.sqrt(n),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.center.copy(e.center),this.radius=e.radius,this},empty:function(){return this.radius<=0},containsPoint:function(e){return e.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(e){return e.distanceTo(this.center)-this.radius},intersectsSphere:function(e){var t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t},intersectsBox:function(e){return e.intersectsSphere(this)},intersectsPlane:function(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius},clampPoint:function(e,t){var r=this.center.distanceToSquared(e);return void 0===t&&(console.warn(\"THREE.Sphere: .clampPoint() target is now required\"),t=new s),t.copy(e),r>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t},getBoundingBox:function(e){return void 0===e&&(console.warn(\"THREE.Sphere: .getBoundingBox() target is now required\"),e=new f),e.set(this.center,this.center),e.expandByScalar(this.radius),e},applyMatrix4:function(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this},translate:function(e){return this.center.add(e),this},equals:function(e){return e.center.equals(this.center)&&e.radius===this.radius}}),Object.assign(v.prototype,{set:function(e,t){return this.normal.copy(e),this.constant=t,this},setComponents:function(e,t,r,i){return this.normal.set(e,t,r),this.constant=i,this},setFromNormalAndCoplanarPoint:function(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this},setFromCoplanarPoints:function(){var e=new s,t=new s;return function(r,i,n){var o=e.subVectors(n,i).cross(t.subVectors(r,i)).normalize();return this.setFromNormalAndCoplanarPoint(o,r),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.normal.copy(e.normal),this.constant=e.constant,this},normalize:function(){var e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this},negate:function(){return this.constant*=-1,this.normal.negate(),this},distanceToPoint:function(e){return this.normal.dot(e)+this.constant},distanceToSphere:function(e){return this.distanceToPoint(e.center)-e.radius},projectPoint:function(e,t){return void 0===t&&(console.warn(\"THREE.Plane: .projectPoint() target is now required\"),t=new s),t.copy(this.normal).multiplyScalar(-this.distanceToPoint(e)).add(e)},intersectLine:function(){var e=new s;return function(t,r){void 0===r&&(console.warn(\"THREE.Plane: .intersectLine() target is now required\"),r=new s);var i=t.delta(e),n=this.normal.dot(i);if(0!==n){var o=-(t.start.dot(this.normal)+this.constant)/n;if(!(o<0||o>1))return r.copy(i).multiplyScalar(o).add(t.start)}else if(0===this.distanceToPoint(t.start))return r.copy(t.start)}}(),intersectsLine:function(e){var t=this.distanceToPoint(e.start),r=this.distanceToPoint(e.end);return t<0&&r>0||r<0&&t>0},intersectsBox:function(e){return e.intersectsPlane(this)},intersectsSphere:function(e){return e.intersectsPlane(this)},coplanarPoint:function(e){return void 0===e&&(console.warn(\"THREE.Plane: .coplanarPoint() target is now required\"),e=new s),e.copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var e=new s,t=new c;return function(r,i){var n=i||t.getNormalMatrix(r),o=this.coplanarPoint(e).applyMatrix4(r),a=this.normal.applyMatrix3(n).normalize();return this.constant=-o.dot(a),this}}(),translate:function(e){return this.constant-=e.dot(this.normal),this},equals:function(e){return e.normal.equals(this.normal)&&e.constant===this.constant}}),Object.assign(g.prototype,{set:function(e,t,r,i,n,o){var a=this.planes;return a[0].copy(e),a[1].copy(t),a[2].copy(r),a[3].copy(i),a[4].copy(n),a[5].copy(o),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){for(var t=this.planes,r=0;r<6;r++)t[r].copy(e.planes[r]);return this},setFromMatrix:function(e){var t=this.planes,r=e.elements,i=r[0],n=r[1],o=r[2],a=r[3],s=r[4],c=r[5],l=r[6],u=r[7],h=r[8],d=r[9],p=r[10],f=r[11],m=r[12],v=r[13],g=r[14],y=r[15];return t[0].setComponents(a-i,u-s,f-h,y-m).normalize(),t[1].setComponents(a+i,u+s,f+h,y+m).normalize(),t[2].setComponents(a+n,u+c,f+d,y+v).normalize(),t[3].setComponents(a-n,u-c,f-d,y-v).normalize(),t[4].setComponents(a-o,u-l,f-p,y-g).normalize(),t[5].setComponents(a+o,u+l,f+p,y+g).normalize(),this},intersectsObject:function(){var e=new m;return function(t){var r=t.geometry;return null===r.boundingSphere&&r.computeBoundingSphere(),e.copy(r.boundingSphere).applyMatrix4(t.matrixWorld),this.intersectsSphere(e)}}(),intersectsSprite:function(){var e=new m;return function(t){return e.center.set(0,0,0),e.radius=.7071067811865476,e.applyMatrix4(t.matrixWorld),this.intersectsSphere(e)}}(),intersectsSphere:function(e){for(var t=this.planes,r=e.center,i=-e.radius,n=0;n<6;n++){if(t[n].distanceToPoint(r)<i)return!1}return!0},intersectsBox:function(){var e=new s,t=new s;return function(r){for(var i=this.planes,n=0;n<6;n++){var o=i[n];e.x=o.normal.x>0?r.min.x:r.max.x,t.x=o.normal.x>0?r.max.x:r.min.x,e.y=o.normal.y>0?r.min.y:r.max.y,t.y=o.normal.y>0?r.max.y:r.min.y,e.z=o.normal.z>0?r.min.z:r.max.z,t.z=o.normal.z>0?r.max.z:r.min.z;var a=o.distanceToPoint(e),s=o.distanceToPoint(t);if(a<0&&s<0)return!1}return!0}}(),containsPoint:function(e){for(var t=this.planes,r=0;r<6;r++)if(t[r].distanceToPoint(e)<0)return!1;return!0}});var Gs={alphamap_fragment:\"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\",alphamap_pars_fragment:\"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\\n\",alphatest_fragment:\"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\",aomap_fragment:\"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\\n\",aomap_pars_fragment:\"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\",begin_vertex:\"\\nvec3 transformed = vec3( position );\\n\",beginnormal_vertex:\"\\nvec3 objectNormal = vec3( normal );\\n\",bsdfs:\"float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\\t}\\n\\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\",bumpmap_pars_fragment:\"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\\n\",clipping_planes_fragment:\"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\\n\",clipping_planes_pars_fragment:\"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\",clipping_planes_pars_vertex:\"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\",clipping_planes_vertex:\"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\",color_fragment:\"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\",color_pars_fragment:\"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\\n\",color_pars_vertex:\"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\",color_vertex:\"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\",common:\"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define PI_HALF 1.5707963267949\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\n\",cube_uv_reflection_fragment:\"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\",defaultnormal_vertex:\"vec3 transformedNormal = normalMatrix * objectNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n\",displacementmap_pars_vertex:\"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\\n\",displacementmap_vertex:\"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\",emissivemap_fragment:\"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\",emissivemap_pars_fragment:\"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\\n\",encodings_fragment:\"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\",encodings_pars_fragment:\"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM            = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat D      = max( maxRange / maxRGB, 1.0 );\\n\\tD            = min( floor( D ) / 255.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n\\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract(Le);\\n\\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n\\treturn vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\",envmap_fragment:\"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\\n\",envmap_pars_fragment:\"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\\tuniform float reflectivity;\\n\\tuniform float envMapIntensity;\\n#endif\\n#ifdef USE_ENVMAP\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\\n\",envmap_pars_vertex:\"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\\n\",envmap_vertex:\"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\n\",fog_vertex:\"\\n#ifdef USE_FOG\\nfogDepth = -mvPosition.z;\\n#endif\",fog_pars_vertex:\"#ifdef USE_FOG\\n  varying float fogDepth;\\n#endif\\n\",fog_fragment:\"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\",fog_pars_fragment:\"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\\n\",gradientmap_pars_fragment:\"#ifdef TOON\\n\\tuniform sampler2D gradientMap;\\n\\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\t\\tfloat dotNL = dot( normal, lightDirection );\\n\\t\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t\\t#ifdef USE_GRADIENTMAP\\n\\t\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t\\t#else\\n\\t\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\",lightmap_fragment:\"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\",lightmap_pars_fragment:\"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\",lights_lambert_vertex:\"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\",lights_pars_begin:\"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t\\tfloat shadowCameraNear;\\n\\t\\tfloat shadowCameraFar;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\\n\",lights_pars_maps:\"#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\\n\",lights_phong_fragment:\"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\",lights_phong_pars_fragment:\"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifdef TOON\\n\\t\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#else\\n\\t\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\t\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#endif\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\\n\",lights_physical_fragment:\"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.clearCoat = saturate( clearCoat );\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\",lights_physical_pars_fragment:\"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoat;\\n\\t\\tfloat clearCoatRoughness;\\n\\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifndef STANDARD\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\tfloat dotNL = dotNV;\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\",lights_fragment_begin:\"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearCoatRadiance = vec3( 0.0 );\\n#endif\\n\",lights_fragment_maps:\"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tirradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\\n\\t#ifndef STANDARD\\n\\t\\tclearCoatRadiance += getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\\n\\t#endif\\n#endif\\n\",lights_fragment_end:\"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\",logdepthbuf_fragment:\"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\",logdepthbuf_pars_fragment:\"#ifdef USE_LOGDEPTHBUF\\n\\tuniform float logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n#endif\\n\",logdepthbuf_pars_vertex:\"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n\\tuniform float logDepthBufFC;\\n#endif\",logdepthbuf_vertex:\"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t#else\\n\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\tgl_Position.z *= gl_Position.w;\\n\\t#endif\\n#endif\\n\",map_fragment:\"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\\n\",map_pars_fragment:\"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n\",map_particle_fragment:\"#ifdef USE_MAP\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\",map_particle_pars_fragment:\"#ifdef USE_MAP\\n\\tuniform mat3 uvTransform;\\n\\tuniform sampler2D map;\\n#endif\\n\",metalnessmap_fragment:\"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\\n\",metalnessmap_pars_fragment:\"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\",morphnormal_vertex:\"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\",morphtarget_pars_vertex:\"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\",morphtarget_vertex:\"#ifdef USE_MORPHTARGETS\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\\n\",normal_fragment_begin:\"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n#endif\\n\",normal_fragment_maps:\"#ifdef USE_NORMALMAP\\n\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\",normalmap_pars_fragment:\"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\\t\\tscale *= float( gl_FrontFacing ) * 2.0 - 1.0;\\n\\t\\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\\n\\t\\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\tmapN.xy = normalScale * mapN.xy;\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\\n\",packing:\"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\",premultiplied_alpha_fragment:\"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\",project_vertex:\"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\ngl_Position = projectionMatrix * mvPosition;\\n\",dithering_fragment:\"#if defined( DITHERING )\\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\\n\",dithering_pars_fragment:\"#if defined( DITHERING )\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\\n\",roughnessmap_fragment:\"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\\n\",roughnessmap_pars_fragment:\"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\",shadowmap_pars_fragment:\"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\",shadowmap_pars_vertex:\"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n#endif\\n\",shadowmap_vertex:\"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\\n\",shadowmask_pars_fragment:\"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\\n\",skinbase_vertex:\"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\",skinning_pars_vertex:\"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\\n\",skinning_vertex:\"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\\n\",skinnormal_vertex:\"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\",specularmap_fragment:\"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\",specularmap_pars_fragment:\"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\",tonemapping_fragment:\"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\",tonemapping_pars_fragment:\"#ifndef saturate\\n\\t#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\",uv_pars_fragment:\"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n#endif\",uv_pars_vertex:\"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n\\tuniform mat3 uvTransform;\\n#endif\\n\",uv_vertex:\"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\",uv2_pars_fragment:\"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\",uv2_pars_vertex:\"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\",uv2_vertex:\"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\",worldpos_vertex:\"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n#endif\\n\",cube_frag:\"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldPosition;\\nvoid main() {\\n\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\\tgl_FragColor.a *= opacity;\\n}\\n\",cube_vert:\"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\\n\",depth_frag:\"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\\n\",depth_vert:\"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\",distanceRGBA_frag:\"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\\n\",distanceRGBA_vert:\"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\\n\",equirect_frag:\"uniform sampler2D tEquirect;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldPosition );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n}\\n\",equirect_vert:\"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\",linedashed_frag:\"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\",linedashed_vert:\"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\\n\",meshbasic_frag:\"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\",meshbasic_vert:\"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\",meshlambert_frag:\"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_pars_maps>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\",meshlambert_vert:\"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_pars_maps>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\",meshphong_frag:\"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_pars_maps>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\",meshphong_vert:\"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\",meshphysical_frag:\"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars_begin>\\n#include <lights_pars_maps>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\",meshphysical_vert:\"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\",normal_frag:\"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\\n\",normal_vert:\"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\\n\",points_frag:\"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\",points_vert:\"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\\t#else\\n\\t\\tgl_PointSize = size;\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\",shadow_frag:\"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <fog_fragment>\\n}\\n\",shadow_vert:\"#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\"},Hs={merge:function(e){for(var t={},r=0;r<e.length;r++){var i=this.clone(e[r]);for(var n in i)t[n]=i[n]}return t},clone:function(e){var t={};for(var r in e){t[r]={};for(var i in e[r]){var n=e[r][i];n&&(n.isColor||n.isMatrix3||n.isMatrix4||n.isVector2||n.isVector3||n.isVector4||n.isTexture)?t[r][i]=n.clone():Array.isArray(n)?t[r][i]=n.slice():t[r][i]=n}}return t}},js={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};Object.assign(y.prototype,{isColor:!0,r:1,g:1,b:1,set:function(e){return e&&e.isColor?this.copy(e):\"number\"==typeof e?this.setHex(e):\"string\"==typeof e&&this.setStyle(e),this},setScalar:function(e){return this.r=e,this.g=e,this.b=e,this},setHex:function(e){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(255&e)/255,this},setRGB:function(e,t,r){return this.r=e,this.g=t,this.b=r,this},setHSL:function(){function e(e,t,r){return r<0&&(r+=1),r>1&&(r-=1),r<1/6?e+6*(t-e)*r:r<.5?t:r<2/3?e+6*(t-e)*(2/3-r):e}return function(t,r,i){if(t=zs.euclideanModulo(t,1),r=zs.clamp(r,0,1),i=zs.clamp(i,0,1),0===r)this.r=this.g=this.b=i;else{var n=i<=.5?i*(1+r):i+r-i*r,o=2*i-n;this.r=e(o,n,t+1/3),this.g=e(o,n,t),this.b=e(o,n,t-1/3)}return this}}(),setStyle:function(e){function t(t){void 0!==t&&parseFloat(t)<1&&console.warn(\"THREE.Color: Alpha component of \"+e+\" will be ignored.\")}var r;if(r=/^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec(e)){var i,n=r[1],o=r[2];switch(n){case\"rgb\":case\"rgba\":if(i=/^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(o))return this.r=Math.min(255,parseInt(i[1],10))/255,this.g=Math.min(255,parseInt(i[2],10))/255,this.b=Math.min(255,parseInt(i[3],10))/255,t(i[5]),this;if(i=/^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(o))return this.r=Math.min(100,parseInt(i[1],10))/100,this.g=Math.min(100,parseInt(i[2],10))/100,this.b=Math.min(100,parseInt(i[3],10))/100,t(i[5]),this;break;case\"hsl\":case\"hsla\":if(i=/^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(o)){var a=parseFloat(i[1])/360,s=parseInt(i[2],10)/100,c=parseInt(i[3],10)/100;return t(i[5]),this.setHSL(a,s,c)}}}else if(r=/^\\#([A-Fa-f0-9]+)$/.exec(e)){var l=r[1],u=l.length;if(3===u)return this.r=parseInt(l.charAt(0)+l.charAt(0),16)/255,this.g=parseInt(l.charAt(1)+l.charAt(1),16)/255,this.b=parseInt(l.charAt(2)+l.charAt(2),16)/255,this;if(6===u)return this.r=parseInt(l.charAt(0)+l.charAt(1),16)/255,this.g=parseInt(l.charAt(2)+l.charAt(3),16)/255,this.b=parseInt(l.charAt(4)+l.charAt(5),16)/255,this}if(e&&e.length>0){var l=js[e];void 0!==l?this.setHex(l):console.warn(\"THREE.Color: Unknown color \"+e)}return this},clone:function(){return new this.constructor(this.r,this.g,this.b)},copy:function(e){return this.r=e.r,this.g=e.g,this.b=e.b,this},copyGammaToLinear:function(e,t){return void 0===t&&(t=2),this.r=Math.pow(e.r,t),this.g=Math.pow(e.g,t),this.b=Math.pow(e.b,t),this},copyLinearToGamma:function(e,t){void 0===t&&(t=2);var r=t>0?1/t:1;return this.r=Math.pow(e.r,r),this.g=Math.pow(e.g,r),this.b=Math.pow(e.b,r),this},convertGammaToLinear:function(){var e=this.r,t=this.g,r=this.b;return this.r=e*e,this.g=t*t,this.b=r*r,this},convertLinearToGamma:function(){return this.r=Math.sqrt(this.r),this.g=Math.sqrt(this.g),this.b=Math.sqrt(this.b),this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return(\"000000\"+this.getHex().toString(16)).slice(-6)},getHSL:function(e){void 0===e&&(console.warn(\"THREE.Color: .getHSL() target is now required\"),e={h:0,s:0,l:0});var t,r,i=this.r,n=this.g,o=this.b,a=Math.max(i,n,o),s=Math.min(i,n,o),c=(s+a)/2;if(s===a)t=0,r=0;else{var l=a-s;switch(r=c<=.5?l/(a+s):l/(2-a-s),a){case i:t=(n-o)/l+(n<o?6:0);break;case n:t=(o-i)/l+2;break;case o:t=(i-n)/l+4}t/=6}return e.h=t,e.s=r,e.l=c,e},getStyle:function(){return\"rgb(\"+(255*this.r|0)+\",\"+(255*this.g|0)+\",\"+(255*this.b|0)+\")\"},offsetHSL:function(){var e={};return function(t,r,i){return this.getHSL(e),e.h+=t,e.s+=r,e.l+=i,this.setHSL(e.h,e.s,e.l),this}}(),add:function(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this},addColors:function(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this},addScalar:function(e){return this.r+=e,this.g+=e,this.b+=e,this},sub:function(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this},multiply:function(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this},multiplyScalar:function(e){return this.r*=e,this.g*=e,this.b*=e,this},lerp:function(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this},equals:function(e){return e.r===this.r&&e.g===this.g&&e.b===this.b},fromArray:function(e,t){return void 0===t&&(t=0),this.r=e[t],this.g=e[t+1],this.b=e[t+2],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e},toJSON:function(){return this.getHex()}});var Vs={common:{diffuse:{value:new y(15658734)},opacity:{value:1},map:{value:null},uvTransform:{value:new c},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new n(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new y(16777215)}},lights:{ambientLightColor:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}}},points:{diffuse:{value:new y(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},uvTransform:{value:new c}}},ks={basic:{uniforms:Hs.merge([Vs.common,Vs.specularmap,Vs.envmap,Vs.aomap,Vs.lightmap,Vs.fog]),vertexShader:Gs.meshbasic_vert,fragmentShader:Gs.meshbasic_frag},lambert:{uniforms:Hs.merge([Vs.common,Vs.specularmap,Vs.envmap,Vs.aomap,Vs.lightmap,Vs.emissivemap,Vs.fog,Vs.lights,{emissive:{value:new y(0)}}]),vertexShader:Gs.meshlambert_vert,fragmentShader:Gs.meshlambert_frag},phong:{uniforms:Hs.merge([Vs.common,Vs.specularmap,Vs.envmap,Vs.aomap,Vs.lightmap,Vs.emissivemap,Vs.bumpmap,Vs.normalmap,Vs.displacementmap,Vs.gradientmap,Vs.fog,Vs.lights,{emissive:{value:new y(0)},specular:{value:new y(1118481)},shininess:{value:30}}]),vertexShader:Gs.meshphong_vert,fragmentShader:Gs.meshphong_frag},standard:{uniforms:Hs.merge([Vs.common,Vs.envmap,Vs.aomap,Vs.lightmap,Vs.emissivemap,Vs.bumpmap,Vs.normalmap,Vs.displacementmap,Vs.roughnessmap,Vs.metalnessmap,Vs.fog,Vs.lights,{emissive:{value:new y(0)},roughness:{value:.5},metalness:{value:.5},envMapIntensity:{value:1}}]),vertexShader:Gs.meshphysical_vert,fragmentShader:Gs.meshphysical_frag},points:{uniforms:Hs.merge([Vs.points,Vs.fog]),vertexShader:Gs.points_vert,fragmentShader:Gs.points_frag},dashed:{uniforms:Hs.merge([Vs.common,Vs.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Gs.linedashed_vert,fragmentShader:Gs.linedashed_frag},depth:{uniforms:Hs.merge([Vs.common,Vs.displacementmap]),vertexShader:Gs.depth_vert,fragmentShader:Gs.depth_frag},normal:{uniforms:Hs.merge([Vs.common,Vs.bumpmap,Vs.normalmap,Vs.displacementmap,{opacity:{value:1}}]),vertexShader:Gs.normal_vert,fragmentShader:Gs.normal_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:Gs.cube_vert,fragmentShader:Gs.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Gs.equirect_vert,fragmentShader:Gs.equirect_frag},distanceRGBA:{uniforms:Hs.merge([Vs.common,Vs.displacementmap,{referencePosition:{value:new s},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Gs.distanceRGBA_vert,fragmentShader:Gs.distanceRGBA_frag},shadow:{uniforms:Hs.merge([Vs.lights,Vs.fog,{color:{value:new y(0)},opacity:{value:1}}]),vertexShader:Gs.shadow_vert,fragmentShader:Gs.shadow_frag}};ks.physical={uniforms:Hs.merge([ks.standard.uniforms,{clearCoat:{value:0},clearCoatRoughness:{value:0}}]),vertexShader:Gs.meshphysical_vert,fragmentShader:Gs.meshphysical_frag},_.RotationOrders=[\"XYZ\",\"YZX\",\"ZXY\",\"XZY\",\"YXZ\",\"ZYX\"],_.DefaultOrder=\"XYZ\",Object.defineProperties(_.prototype,{x:{get:function(){return this._x},set:function(e){this._x=e,this.onChangeCallback()}},y:{get:function(){return this._y},set:function(e){this._y=e,this.onChangeCallback()}},z:{get:function(){return this._z},set:function(e){this._z=e,this.onChangeCallback()}},order:{get:function(){return this._order},set:function(e){this._order=e,this.onChangeCallback()}}}),Object.assign(_.prototype,{isEuler:!0,set:function(e,t,r,i){return this._x=e,this._y=t,this._z=r,this._order=i||this._order,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._order)},copy:function(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this.onChangeCallback(),this},setFromRotationMatrix:function(e,t,r){var i=zs.clamp,n=e.elements,o=n[0],a=n[4],s=n[8],c=n[1],l=n[5],u=n[9],h=n[2],d=n[6],p=n[10];return t=t||this._order,\"XYZ\"===t?(this._y=Math.asin(i(s,-1,1)),Math.abs(s)<.99999?(this._x=Math.atan2(-u,p),this._z=Math.atan2(-a,o)):(this._x=Math.atan2(d,l),this._z=0)):\"YXZ\"===t?(this._x=Math.asin(-i(u,-1,1)),Math.abs(u)<.99999?(this._y=Math.atan2(s,p),this._z=Math.atan2(c,l)):(this._y=Math.atan2(-h,o),this._z=0)):\"ZXY\"===t?(this._x=Math.asin(i(d,-1,1)),Math.abs(d)<.99999?(this._y=Math.atan2(-h,p),this._z=Math.atan2(-a,l)):(this._y=0,this._z=Math.atan2(c,o))):\"ZYX\"===t?(this._y=Math.asin(-i(h,-1,1)),Math.abs(h)<.99999?(this._x=Math.atan2(d,p),this._z=Math.atan2(c,o)):(this._x=0,this._z=Math.atan2(-a,l))):\"YZX\"===t?(this._z=Math.asin(i(c,-1,1)),Math.abs(c)<.99999?(this._x=Math.atan2(-u,l),this._y=Math.atan2(-h,o)):(this._x=0,this._y=Math.atan2(s,p))):\"XZY\"===t?(this._z=Math.asin(-i(a,-1,1)),Math.abs(a)<.99999?(this._x=Math.atan2(d,l),this._y=Math.atan2(s,o)):(this._x=Math.atan2(-u,p),this._y=0)):console.warn(\"THREE.Euler: .setFromRotationMatrix() given unsupported order: \"+t),this._order=t,!1!==r&&this.onChangeCallback(),this},setFromQuaternion:function(){var e=new o;return function(t,r,i){return e.makeRotationFromQuaternion(t),this.setFromRotationMatrix(e,r,i)}}(),setFromVector3:function(e,t){return this.set(e.x,e.y,e.z,t||this._order)},reorder:function(){var e=new a;return function(t){return e.setFromEuler(this),this.setFromQuaternion(e,t)}}(),equals:function(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order},fromArray:function(e){return this._x=e[0],this._y=e[1],this._z=e[2],void 0!==e[3]&&(this._order=e[3]),this.onChangeCallback(),this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e},toVector3:function(e){return e?e.set(this._x,this._y,this._z):new s(this._x,this._y,this._z)},onChange:function(e){return this.onChangeCallback=e,this},onChangeCallback:function(){}}),Object.assign(b.prototype,{set:function(e){this.mask=1<<e|0},enable:function(e){this.mask|=1<<e|0},toggle:function(e){this.mask^=1<<e|0},disable:function(e){this.mask&=~(1<<e|0)},test:function(e){return 0!=(this.mask&e.mask)}});var Ws=0;w.DefaultUp=new s(0,1,0),w.DefaultMatrixAutoUpdate=!0,w.prototype=Object.assign(Object.create(i.prototype),{constructor:w,isObject3D:!0,onBeforeRender:function(){},onAfterRender:function(){},applyMatrix:function(e){this.matrix.multiplyMatrices(e,this.matrix),this.matrix.decompose(this.position,this.quaternion,this.scale)},applyQuaternion:function(e){return this.quaternion.premultiply(e),this},setRotationFromAxisAngle:function(e,t){this.quaternion.setFromAxisAngle(e,t)},setRotationFromEuler:function(e){this.quaternion.setFromEuler(e,!0)},setRotationFromMatrix:function(e){this.quaternion.setFromRotationMatrix(e)},setRotationFromQuaternion:function(e){this.quaternion.copy(e)},rotateOnAxis:function(){var e=new a;return function(t,r){return e.setFromAxisAngle(t,r),this.quaternion.multiply(e),this}}(),rotateOnWorldAxis:function(){var e=new a;return function(t,r){return e.setFromAxisAngle(t,r),this.quaternion.premultiply(e),this}}(),rotateX:function(){var e=new s(1,0,0);return function(t){return this.rotateOnAxis(e,t)}}(),rotateY:function(){var e=new s(0,1,0);return function(t){return this.rotateOnAxis(e,t)}}(),rotateZ:function(){var e=new s(0,0,1);return function(t){return this.rotateOnAxis(e,t)}}(),translateOnAxis:function(){var e=new s;return function(t,r){return e.copy(t).applyQuaternion(this.quaternion),this.position.add(e.multiplyScalar(r)),this}}(),translateX:function(){var e=new s(1,0,0);return function(t){return this.translateOnAxis(e,t)}}(),translateY:function(){var e=new s(0,1,0);return function(t){return this.translateOnAxis(e,t)}}(),translateZ:function(){var e=new s(0,0,1);return function(t){return this.translateOnAxis(e,t)}}(),localToWorld:function(e){return e.applyMatrix4(this.matrixWorld)},worldToLocal:function(){var e=new o;return function(t){return t.applyMatrix4(e.getInverse(this.matrixWorld))}}(),lookAt:function(){var e=new o,t=new s;return function(r,i,n){r.isVector3?t.copy(r):t.set(r,i,n),this.isCamera?e.lookAt(this.position,t,this.up):e.lookAt(t,this.position,this.up),this.quaternion.setFromRotationMatrix(e)}}(),add:function(e){if(arguments.length>1){for(var t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return e===this?(console.error(\"THREE.Object3D.add: object can't be added as a child of itself.\",e),this):(e&&e.isObject3D?(null!==e.parent&&e.parent.remove(e),e.parent=this,e.dispatchEvent({type:\"added\"}),this.children.push(e)):console.error(\"THREE.Object3D.add: object not an instance of THREE.Object3D.\",e),this)},remove:function(e){if(arguments.length>1){for(var t=0;t<arguments.length;t++)this.remove(arguments[t]);return this}var r=this.children.indexOf(e);return-1!==r&&(e.parent=null,e.dispatchEvent({type:\"removed\"}),this.children.splice(r,1)),this},getObjectById:function(e){return this.getObjectByProperty(\"id\",e)},getObjectByName:function(e){return this.getObjectByProperty(\"name\",e)},getObjectByProperty:function(e,t){if(this[e]===t)return this;for(var r=0,i=this.children.length;r<i;r++){var n=this.children[r],o=n.getObjectByProperty(e,t);if(void 0!==o)return o}},getWorldPosition:function(e){return void 0===e&&(console.warn(\"THREE.Object3D: .getWorldPosition() target is now required\"),e=new s),this.updateMatrixWorld(!0),e.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:function(){var e=new s,t=new s;return function(r){return void 0===r&&(console.warn(\"THREE.Object3D: .getWorldQuaternion() target is now required\"),r=new a),this.updateMatrixWorld(!0),this.matrixWorld.decompose(e,r,t),r}}(),getWorldScale:function(){var e=new s,t=new a;return function(r){return void 0===r&&(console.warn(\"THREE.Object3D: .getWorldScale() target is now required\"),r=new s),this.updateMatrixWorld(!0),this.matrixWorld.decompose(e,t,r),r}}(),getWorldDirection:function(){var e=new a;return function(t){return void 0===t&&(console.warn(\"THREE.Object3D: .getWorldDirection() target is now required\"),t=new s),this.getWorldQuaternion(e),t.set(0,0,1).applyQuaternion(e)}}(),raycast:function(){},traverse:function(e){e(this);for(var t=this.children,r=0,i=t.length;r<i;r++)t[r].traverse(e)},traverseVisible:function(e){if(!1!==this.visible){e(this);for(var t=this.children,r=0,i=t.length;r<i;r++)t[r].traverseVisible(e)}},traverseAncestors:function(e){var t=this.parent;null!==t&&(e(t),t.traverseAncestors(e))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);for(var t=this.children,r=0,i=t.length;r<i;r++)t[r].updateMatrixWorld(e)},toJSON:function(e){function t(t,r){return void 0===t[r.uuid]&&(t[r.uuid]=r.toJSON(e)),r.uuid}function r(e){var t=[];for(var r in e){var i=e[r];delete i.metadata,t.push(i)}return t}var i=void 0===e||\"string\"==typeof e,n={};i&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{}},n.metadata={version:4.5,type:\"Object\",generator:\"Object3D.toJSON\"});var o={};if(o.uuid=this.uuid,o.type=this.type,\"\"!==this.name&&(o.name=this.name),!0===this.castShadow&&(o.castShadow=!0),!0===this.receiveShadow&&(o.receiveShadow=!0),!1===this.visible&&(o.visible=!1),!1===this.frustumCulled&&(o.frustumCulled=!1),0!==this.renderOrder&&(o.renderOrder=this.renderOrder),\"{}\"!==JSON.stringify(this.userData)&&(o.userData=this.userData),o.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(o.matrixAutoUpdate=!1),void 0!==this.geometry){o.geometry=t(e.geometries,this.geometry);var a=this.geometry.parameters;if(void 0!==a&&void 0!==a.shapes){var s=a.shapes;if(Array.isArray(s))for(var c=0,l=s.length;c<l;c++){var u=s[c];t(e.shapes,u)}else t(e.shapes,s)}}if(void 0!==this.material)if(Array.isArray(this.material)){for(var h=[],c=0,l=this.material.length;c<l;c++)h.push(t(e.materials,this.material[c]));o.material=h}else o.material=t(e.materials,this.material);if(this.children.length>0){o.children=[];for(var c=0;c<this.children.length;c++)o.children.push(this.children[c].toJSON(e).object)}if(i){var d=r(e.geometries),p=r(e.materials),f=r(e.textures),m=r(e.images),s=r(e.shapes);d.length>0&&(n.geometries=d),p.length>0&&(n.materials=p),f.length>0&&(n.textures=f),m.length>0&&(n.images=m),s.length>0&&(n.shapes=s)}return n.object=o,n},clone:function(e){return(new this.constructor).copy(this,e)},copy:function(e,t){if(void 0===t&&(t=!0),this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.userData=JSON.parse(JSON.stringify(e.userData)),!0===t)for(var r=0;r<e.children.length;r++){var i=e.children[r];this.add(i.clone())}return this}}),M.prototype=Object.assign(Object.create(w.prototype),{constructor:M,isCamera:!0,copy:function(e,t){return w.prototype.copy.call(this,e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this},getWorldDirection:function(){var e=new a;return function(t){return void 0===t&&(console.warn(\"THREE.Camera: .getWorldDirection() target is now required\"),t=new s),this.getWorldQuaternion(e),t.set(0,0,-1).applyQuaternion(e)}}(),updateMatrixWorld:function(e){w.prototype.updateMatrixWorld.call(this,e),this.matrixWorldInverse.getInverse(this.matrixWorld)},clone:function(){return(new this.constructor).copy(this)}}),E.prototype=Object.assign(Object.create(M.prototype),{constructor:E,isOrthographicCamera:!0,copy:function(e,t){return M.prototype.copy.call(this,e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=null===e.view?null:Object.assign({},e.view),this},setViewOffset:function(e,t,r,i,n,o){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=r,this.view.offsetY=i,this.view.width=n,this.view.height=o,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),r=(this.right+this.left)/2,i=(this.top+this.bottom)/2,n=r-e,o=r+e,a=i+t,s=i-t;if(null!==this.view&&this.view.enabled){var c=this.zoom/(this.view.width/this.view.fullWidth),l=this.zoom/(this.view.height/this.view.fullHeight),u=(this.right-this.left)/this.view.width,h=(this.top-this.bottom)/this.view.height;n+=u*(this.view.offsetX/c),o=n+u*(this.view.width/c),a-=h*(this.view.offsetY/l),s=a-h*(this.view.height/l)}this.projectionMatrix.makeOrthographic(n,o,a,s,this.near,this.far)},toJSON:function(e){var t=w.prototype.toJSON.call(this,e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,null!==this.view&&(t.object.view=Object.assign({},this.view)),t}}),Object.assign(S.prototype,{clone:function(){return(new this.constructor).copy(this)},copy:function(e){this.a=e.a,this.b=e.b,this.c=e.c,this.normal.copy(e.normal),this.color.copy(e.color),this.materialIndex=e.materialIndex;for(var t=0,r=e.vertexNormals.length;t<r;t++)this.vertexNormals[t]=e.vertexNormals[t].clone();for(var t=0,r=e.vertexColors.length;t<r;t++)this.vertexColors[t]=e.vertexColors[t].clone();return this}});var Xs=0;T.prototype=Object.assign(Object.create(i.prototype),{constructor:T,isGeometry:!0,applyMatrix:function(e){for(var t=(new c).getNormalMatrix(e),r=0,i=this.vertices.length;r<i;r++){this.vertices[r].applyMatrix4(e)}for(var r=0,i=this.faces.length;r<i;r++){var n=this.faces[r];n.normal.applyMatrix3(t).normalize();for(var o=0,a=n.vertexNormals.length;o<a;o++)n.vertexNormals[o].applyMatrix3(t).normalize()}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this.verticesNeedUpdate=!0,this.normalsNeedUpdate=!0,this},rotateX:function(){var e=new o;return function(t){return e.makeRotationX(t),this.applyMatrix(e),this}}(),rotateY:function(){var e=new o;return function(t){return e.makeRotationY(t),this.applyMatrix(e),this}}(),rotateZ:function(){var e=new o;return function(t){return e.makeRotationZ(t),this.applyMatrix(e),this}}(),translate:function(){var e=new o;return function(t,r,i){return e.makeTranslation(t,r,i),this.applyMatrix(e),this}}(),scale:function(){var e=new o;return function(t,r,i){return e.makeScale(t,r,i),this.applyMatrix(e),this}}(),lookAt:function(){var e=new w;return function(t){e.lookAt(t),e.updateMatrix(),this.applyMatrix(e.matrix)}}(),fromBufferGeometry:function(e){function t(e,t,i,n){var o=void 0!==c?[d[e].clone(),d[t].clone(),d[i].clone()]:[],a=void 0!==l?[r.colors[e].clone(),r.colors[t].clone(),r.colors[i].clone()]:[],s=new S(e,t,i,o,a,n);r.faces.push(s),void 0!==u&&r.faceVertexUvs[0].push([p[e].clone(),p[t].clone(),p[i].clone()]),void 0!==h&&r.faceVertexUvs[1].push([f[e].clone(),f[t].clone(),f[i].clone()])}var r=this,i=null!==e.index?e.index.array:void 0,o=e.attributes,a=o.position.array,c=void 0!==o.normal?o.normal.array:void 0,l=void 0!==o.color?o.color.array:void 0,u=void 0!==o.uv?o.uv.array:void 0,h=void 0!==o.uv2?o.uv2.array:void 0;void 0!==h&&(this.faceVertexUvs[1]=[]);for(var d=[],p=[],f=[],m=0,v=0;m<a.length;m+=3,v+=2)r.vertices.push(new s(a[m],a[m+1],a[m+2])),void 0!==c&&d.push(new s(c[m],c[m+1],c[m+2])),void 0!==l&&r.colors.push(new y(l[m],l[m+1],l[m+2])),void 0!==u&&p.push(new n(u[v],u[v+1])),void 0!==h&&f.push(new n(h[v],h[v+1]));var g=e.groups;if(g.length>0)for(var m=0;m<g.length;m++)for(var x=g[m],_=x.start,b=x.count,v=_,w=_+b;v<w;v+=3)void 0!==i?t(i[v],i[v+1],i[v+2],x.materialIndex):t(v,v+1,v+2,x.materialIndex);else if(void 0!==i)for(var m=0;m<i.length;m+=3)t(i[m],i[m+1],i[m+2]);else for(var m=0;m<a.length/3;m+=3)t(m,m+1,m+2);return this.computeFaceNormals(),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),this},center:function(){var e=new s;return function(){return this.computeBoundingBox(),this.boundingBox.getCenter(e).negate(),this.translate(e.x,e.y,e.z),this}}(),normalize:function(){this.computeBoundingSphere();var e=this.boundingSphere.center,t=this.boundingSphere.radius,r=0===t?1:1/t,i=new o;return i.set(r,0,0,-r*e.x,0,r,0,-r*e.y,0,0,r,-r*e.z,0,0,0,1),this.applyMatrix(i),this},computeFaceNormals:function(){for(var e=new s,t=new s,r=0,i=this.faces.length;r<i;r++){var n=this.faces[r],o=this.vertices[n.a],a=this.vertices[n.b],c=this.vertices[n.c];e.subVectors(c,a),t.subVectors(o,a),e.cross(t),e.normalize(),n.normal.copy(e)}},computeVertexNormals:function(e){void 0===e&&(e=!0);var t,r,i,n,o,a;for(a=new Array(this.vertices.length),t=0,r=this.vertices.length;t<r;t++)a[t]=new s;if(e){var c,l,u,h=new s,d=new s;for(i=0,n=this.faces.length;i<n;i++)o=this.faces[i],c=this.vertices[o.a],l=this.vertices[o.b],u=this.vertices[o.c],h.subVectors(u,l),d.subVectors(c,l),h.cross(d),a[o.a].add(h),a[o.b].add(h),a[o.c].add(h)}else for(this.computeFaceNormals(),i=0,n=this.faces.length;i<n;i++)o=this.faces[i],a[o.a].add(o.normal),a[o.b].add(o.normal),a[o.c].add(o.normal);for(t=0,r=this.vertices.length;t<r;t++)a[t].normalize();for(i=0,n=this.faces.length;i<n;i++){o=this.faces[i];var p=o.vertexNormals;3===p.length?(p[0].copy(a[o.a]),p[1].copy(a[o.b]),p[2].copy(a[o.c])):(p[0]=a[o.a].clone(),p[1]=a[o.b].clone(),p[2]=a[o.c].clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeFlatVertexNormals:function(){var e,t,r;for(this.computeFaceNormals(),e=0,t=this.faces.length;e<t;e++){r=this.faces[e];var i=r.vertexNormals;3===i.length?(i[0].copy(r.normal),i[1].copy(r.normal),i[2].copy(r.normal)):(i[0]=r.normal.clone(),i[1]=r.normal.clone(),i[2]=r.normal.clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){var e,t,r,i,n;for(r=0,i=this.faces.length;r<i;r++)for(n=this.faces[r],n.__originalFaceNormal?n.__originalFaceNormal.copy(n.normal):n.__originalFaceNormal=n.normal.clone(),n.__originalVertexNormals||(n.__originalVertexNormals=[]),e=0,t=n.vertexNormals.length;e<t;e++)n.__originalVertexNormals[e]?n.__originalVertexNormals[e].copy(n.vertexNormals[e]):n.__originalVertexNormals[e]=n.vertexNormals[e].clone();var o=new T;for(o.faces=this.faces,e=0,t=this.morphTargets.length;e<t;e++){if(!this.morphNormals[e]){this.morphNormals[e]={},this.morphNormals[e].faceNormals=[],this.morphNormals[e].vertexNormals=[];var a,c,l=this.morphNormals[e].faceNormals,u=this.morphNormals[e].vertexNormals;for(r=0,i=this.faces.length;r<i;r++)a=new s,c={a:new s,b:new s,c:new s},l.push(a),u.push(c)}var h=this.morphNormals[e];o.vertices=this.morphTargets[e].vertices,o.computeFaceNormals(),o.computeVertexNormals();var a,c;for(r=0,i=this.faces.length;r<i;r++)n=this.faces[r],a=h.faceNormals[r],c=h.vertexNormals[r],a.copy(n.normal),c.a.copy(n.vertexNormals[0]),c.b.copy(n.vertexNormals[1]),c.c.copy(n.vertexNormals[2])}for(r=0,i=this.faces.length;r<i;r++)n=this.faces[r],n.normal=n.__originalFaceNormal,n.vertexNormals=n.__originalVertexNormals},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new f),this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new m),this.boundingSphere.setFromPoints(this.vertices)},merge:function(e,t,r){if(!e||!e.isGeometry)return void console.error(\"THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.\",e);var i,n=this.vertices.length,o=this.vertices,a=e.vertices,s=this.faces,l=e.faces,u=this.faceVertexUvs[0],h=e.faceVertexUvs[0],d=this.colors,p=e.colors;void 0===r&&(r=0),void 0!==t&&(i=(new c).getNormalMatrix(t));for(var f=0,m=a.length;f<m;f++){var v=a[f],g=v.clone();void 0!==t&&g.applyMatrix4(t),o.push(g)}for(var f=0,m=p.length;f<m;f++)d.push(p[f].clone());for(f=0,m=l.length;f<m;f++){var y,x,_,b=l[f],w=b.vertexNormals,M=b.vertexColors;y=new S(b.a+n,b.b+n,b.c+n),y.normal.copy(b.normal),void 0!==i&&y.normal.applyMatrix3(i).normalize();for(var E=0,T=w.length;E<T;E++)x=w[E].clone(),void 0!==i&&x.applyMatrix3(i).normalize(),y.vertexNormals.push(x);y.color.copy(b.color);for(var E=0,T=M.length;E<T;E++)_=M[E],y.vertexColors.push(_.clone());y.materialIndex=b.materialIndex+r,s.push(y)}for(f=0,m=h.length;f<m;f++){var A=h[f],L=[];if(void 0!==A){for(var E=0,T=A.length;E<T;E++)L.push(A[E].clone());u.push(L)}}},mergeMesh:function(e){if(!e||!e.isMesh)return void console.error(\"THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.\",e);e.matrixAutoUpdate&&e.updateMatrix(),this.merge(e.geometry,e.matrix)},mergeVertices:function(){var e,t,r,i,n,o,a,s,c={},l=[],u=[],h=Math.pow(10,4);for(r=0,i=this.vertices.length;r<i;r++)e=this.vertices[r],t=Math.round(e.x*h)+\"_\"+Math.round(e.y*h)+\"_\"+Math.round(e.z*h),void 0===c[t]?(c[t]=r,l.push(this.vertices[r]),u[r]=l.length-1):u[r]=u[c[t]];var d=[];for(r=0,i=this.faces.length;r<i;r++){n=this.faces[r],n.a=u[n.a],n.b=u[n.b],n.c=u[n.c],o=[n.a,n.b,n.c];for(var p=0;p<3;p++)if(o[p]===o[(p+1)%3]){d.push(r);break}}for(r=d.length-1;r>=0;r--){var f=d[r];for(this.faces.splice(f,1),a=0,s=this.faceVertexUvs.length;a<s;a++)this.faceVertexUvs[a].splice(f,1)}var m=this.vertices.length-l.length;return this.vertices=l,m},setFromPoints:function(e){this.vertices=[];for(var t=0,r=e.length;t<r;t++){var i=e[t];this.vertices.push(new s(i.x,i.y,i.z||0))}return this},sortFacesByMaterialIndex:function(){function e(e,t){return e.materialIndex-t.materialIndex}for(var t=this.faces,r=t.length,i=0;i<r;i++)t[i]._id=i;t.sort(e);var n,o,a=this.faceVertexUvs[0],s=this.faceVertexUvs[1];a&&a.length===r&&(n=[]),s&&s.length===r&&(o=[]);for(var i=0;i<r;i++){var c=t[i]._id;n&&n.push(a[c]),o&&o.push(s[c])}n&&(this.faceVertexUvs[0]=n),o&&(this.faceVertexUvs[1]=o)},toJSON:function(){function e(e,t,r){return r?e|1<<t:e&~(1<<t)}function t(e){var t=e.x.toString()+e.y.toString()+e.z.toString();return void 0!==d[t]?d[t]:(d[t]=h.length/3,h.push(e.x,e.y,e.z),d[t])}function r(e){var t=e.r.toString()+e.g.toString()+e.b.toString();return void 0!==f[t]?f[t]:(f[t]=p.length,p.push(e.getHex()),f[t])}function i(e){var t=e.x.toString()+e.y.toString();return void 0!==v[t]?v[t]:(v[t]=m.length/2,m.push(e.x,e.y),v[t])}var n={metadata:{version:4.5,type:\"Geometry\",generator:\"Geometry.toJSON\"}};if(n.uuid=this.uuid,n.type=this.type,\"\"!==this.name&&(n.name=this.name),void 0!==this.parameters){var o=this.parameters;for(var a in o)void 0!==o[a]&&(n[a]=o[a]);return n}for(var s=[],c=0;c<this.vertices.length;c++){var l=this.vertices[c];s.push(l.x,l.y,l.z)}for(var u=[],h=[],d={},p=[],f={},m=[],v={},c=0;c<this.faces.length;c++){var g=this.faces[c],y=void 0!==this.faceVertexUvs[0][c],x=g.normal.length()>0,_=g.vertexNormals.length>0,b=1!==g.color.r||1!==g.color.g||1!==g.color.b,w=g.vertexColors.length>0,M=0;if(M=e(M,0,0),M=e(M,1,!0),M=e(M,2,!1),M=e(M,3,y),M=e(M,4,x),M=e(M,5,_),M=e(M,6,b),M=e(M,7,w),u.push(M),u.push(g.a,g.b,g.c),u.push(g.materialIndex),y){var E=this.faceVertexUvs[0][c];u.push(i(E[0]),i(E[1]),i(E[2]))}if(x&&u.push(t(g.normal)),_){var S=g.vertexNormals;u.push(t(S[0]),t(S[1]),t(S[2]))}if(b&&u.push(r(g.color)),w){var T=g.vertexColors;u.push(r(T[0]),r(T[1]),r(T[2]))}}return n.data={},n.data.vertices=s,n.data.normals=h,p.length>0&&(n.data.colors=p),m.length>0&&(n.data.uvs=[m]),n.data.faces=u,n},clone:function(){return(new T).copy(this)},copy:function(e){var t,r,i,n,o,a;this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.name=e.name;var s=e.vertices;for(t=0,r=s.length;t<r;t++)this.vertices.push(s[t].clone());var c=e.colors;for(t=0,r=c.length;t<r;t++)this.colors.push(c[t].clone());var l=e.faces;for(t=0,r=l.length;t<r;t++)this.faces.push(l[t].clone());for(t=0,r=e.faceVertexUvs.length;t<r;t++){var u=e.faceVertexUvs[t];for(void 0===this.faceVertexUvs[t]&&(this.faceVertexUvs[t]=[]),i=0,n=u.length;i<n;i++){var h=u[i],d=[];for(o=0,a=h.length;o<a;o++){var p=h[o];d.push(p.clone())}this.faceVertexUvs[t].push(d)}}var f=e.morphTargets;for(t=0,r=f.length;t<r;t++){var m={};if(m.name=f[t].name,void 0!==f[t].vertices)for(m.vertices=[],i=0,n=f[t].vertices.length;i<n;i++)m.vertices.push(f[t].vertices[i].clone());if(void 0!==f[t].normals)for(m.normals=[],i=0,n=f[t].normals.length;i<n;i++)m.normals.push(f[t].normals[i].clone());this.morphTargets.push(m)}var v=e.morphNormals;for(t=0,r=v.length;t<r;t++){var g={};if(void 0!==v[t].vertexNormals)for(g.vertexNormals=[],i=0,n=v[t].vertexNormals.length;i<n;i++){var y=v[t].vertexNormals[i],x={};x.a=y.a.clone(),x.b=y.b.clone(),x.c=y.c.clone(),g.vertexNormals.push(x)}if(void 0!==v[t].faceNormals)for(g.faceNormals=[],i=0,n=v[t].faceNormals.length;i<n;i++)g.faceNormals.push(v[t].faceNormals[i].clone());this.morphNormals.push(g)}var _=e.skinWeights;for(t=0,r=_.length;t<r;t++)this.skinWeights.push(_[t].clone());var b=e.skinIndices;for(t=0,r=b.length;t<r;t++)this.skinIndices.push(b[t].clone());var w=e.lineDistances;for(t=0,r=w.length;t<r;t++)this.lineDistances.push(w[t]);var M=e.boundingBox;null!==M&&(this.boundingBox=M.clone());var E=e.boundingSphere;return null!==E&&(this.boundingSphere=E.clone()),this.elementsNeedUpdate=e.elementsNeedUpdate,this.verticesNeedUpdate=e.verticesNeedUpdate,this.uvsNeedUpdate=e.uvsNeedUpdate,this.normalsNeedUpdate=e.normalsNeedUpdate,this.colorsNeedUpdate=e.colorsNeedUpdate,this.lineDistancesNeedUpdate=e.lineDistancesNeedUpdate,this.groupsNeedUpdate=e.groupsNeedUpdate,this},dispose:function(){this.dispatchEvent({type:\"dispose\"})}}),Object.defineProperty(A.prototype,\"needsUpdate\",{set:function(e){!0===e&&this.version++}}),Object.assign(A.prototype,{isBufferAttribute:!0,onUploadCallback:function(){},setArray:function(e){if(Array.isArray(e))throw new TypeError(\"THREE.BufferAttribute: array should be a Typed Array.\");return this.count=void 0!==e?e.length/this.itemSize:0,this.array=e,this},setDynamic:function(e){return this.dynamic=e,this},copy:function(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.dynamic=e.dynamic,this},copyAt:function(e,t,r){e*=this.itemSize,r*=t.itemSize;for(var i=0,n=this.itemSize;i<n;i++)this.array[e+i]=t.array[r+i];return this},copyArray:function(e){return this.array.set(e),this},copyColorsArray:function(e){for(var t=this.array,r=0,i=0,n=e.length;i<n;i++){var o=e[i];void 0===o&&(console.warn(\"THREE.BufferAttribute.copyColorsArray(): color is undefined\",i),o=new y),t[r++]=o.r,t[r++]=o.g,t[r++]=o.b}return this},copyVector2sArray:function(e){for(var t=this.array,r=0,i=0,o=e.length;i<o;i++){var a=e[i];void 0===a&&(console.warn(\"THREE.BufferAttribute.copyVector2sArray(): vector is undefined\",i),a=new n),t[r++]=a.x,t[r++]=a.y}return this},copyVector3sArray:function(e){for(var t=this.array,r=0,i=0,n=e.length;i<n;i++){var o=e[i];void 0===o&&(console.warn(\"THREE.BufferAttribute.copyVector3sArray(): vector is undefined\",i),o=new s),t[r++]=o.x,t[r++]=o.y,t[r++]=o.z}return this},copyVector4sArray:function(e){for(var t=this.array,r=0,i=0,n=e.length;i<n;i++){var o=e[i];void 0===o&&(console.warn(\"THREE.BufferAttribute.copyVector4sArray(): vector is undefined\",i),o=new u),t[r++]=o.x,t[r++]=o.y,t[r++]=o.z,t[r++]=o.w}return this},set:function(e,t){return void 0===t&&(t=0),this.array.set(e,t),this},getX:function(e){return this.array[e*this.itemSize]},setX:function(e,t){return this.array[e*this.itemSize]=t,this},getY:function(e){return this.array[e*this.itemSize+1]},setY:function(e,t){return this.array[e*this.itemSize+1]=t,this},getZ:function(e){return this.array[e*this.itemSize+2]},setZ:function(e,t){return this.array[e*this.itemSize+2]=t,this},getW:function(e){return this.array[e*this.itemSize+3]},setW:function(e,t){return this.array[e*this.itemSize+3]=t,this},setXY:function(e,t,r){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=r,this},setXYZ:function(e,t,r,i){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=r,this.array[e+2]=i,this},setXYZW:function(e,t,r,i,n){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=r,this.array[e+2]=i,this.array[e+3]=n,this},onUpload:function(e){return this.onUploadCallback=e,this},clone:function(){return new this.constructor(this.array,this.itemSize).copy(this)}}),L.prototype=Object.create(A.prototype),L.prototype.constructor=L,C.prototype=Object.create(A.prototype),C.prototype.constructor=C,R.prototype=Object.create(A.prototype),R.prototype.constructor=R,P.prototype=Object.create(A.prototype),P.prototype.constructor=P,D.prototype=Object.create(A.prototype),D.prototype.constructor=D,U.prototype=Object.create(A.prototype),U.prototype.constructor=U,I.prototype=Object.create(A.prototype),I.prototype.constructor=I,O.prototype=Object.create(A.prototype),O.prototype.constructor=O,N.prototype=Object.create(A.prototype),N.prototype.constructor=N,Object.assign(F.prototype,{computeGroups:function(e){for(var t,r=[],i=void 0,n=e.faces,o=0;o<n.length;o++){var a=n[o];a.materialIndex!==i&&(i=a.materialIndex,void 0!==t&&(t.count=3*o-t.start,r.push(t)),t={start:3*o,materialIndex:i})}void 0!==t&&(t.count=3*o-t.start,r.push(t)),this.groups=r},fromGeometry:function(e){var t,r=e.faces,i=e.vertices,o=e.faceVertexUvs,a=o[0]&&o[0].length>0,s=o[1]&&o[1].length>0,c=e.morphTargets,l=c.length;if(l>0){t=[];for(var u=0;u<l;u++)t[u]=[];this.morphTargets.position=t}var h,d=e.morphNormals,p=d.length;if(p>0){h=[];for(var u=0;u<p;u++)h[u]=[];this.morphTargets.normal=h}for(var f=e.skinIndices,m=e.skinWeights,v=f.length===i.length,g=m.length===i.length,u=0;u<r.length;u++){var y=r[u];this.vertices.push(i[y.a],i[y.b],i[y.c]);var x=y.vertexNormals;if(3===x.length)this.normals.push(x[0],x[1],x[2]);else{var _=y.normal;this.normals.push(_,_,_)}var b=y.vertexColors;if(3===b.length)this.colors.push(b[0],b[1],b[2]);else{var w=y.color;this.colors.push(w,w,w)}if(!0===a){var M=o[0][u];void 0!==M?this.uvs.push(M[0],M[1],M[2]):(console.warn(\"THREE.DirectGeometry.fromGeometry(): Undefined vertexUv \",u),this.uvs.push(new n,new n,new n))}if(!0===s){var M=o[1][u];void 0!==M?this.uvs2.push(M[0],M[1],M[2]):(console.warn(\"THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 \",u),this.uvs2.push(new n,new n,new n))}for(var E=0;E<l;E++){var S=c[E].vertices;t[E].push(S[y.a],S[y.b],S[y.c])}for(var E=0;E<p;E++){var T=d[E].vertexNormals[u];h[E].push(T.a,T.b,T.c)}v&&this.skinIndices.push(f[y.a],f[y.b],f[y.c]),g&&this.skinWeights.push(m[y.a],m[y.b],m[y.c])}return this.computeGroups(e),this.verticesNeedUpdate=e.verticesNeedUpdate,this.normalsNeedUpdate=e.normalsNeedUpdate,this.colorsNeedUpdate=e.colorsNeedUpdate,this.uvsNeedUpdate=e.uvsNeedUpdate,this.groupsNeedUpdate=e.groupsNeedUpdate,this}});var qs=1;B.prototype=Object.assign(Object.create(i.prototype),{constructor:B,isBufferGeometry:!0,getIndex:function(){return this.index},setIndex:function(e){Array.isArray(e)?this.index=new(z(e)>65535?I:D)(e,1):this.index=e},addAttribute:function(e,t){return t&&t.isBufferAttribute||t&&t.isInterleavedBufferAttribute?\"index\"===e?(console.warn(\"THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.\"),void this.setIndex(t)):(this.attributes[e]=t,this):(console.warn(\"THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).\"),void this.addAttribute(e,new A(arguments[1],arguments[2])))},getAttribute:function(e){return this.attributes[e]},removeAttribute:function(e){return delete this.attributes[e],this},addGroup:function(e,t,r){this.groups.push({start:e,count:t,materialIndex:void 0!==r?r:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(e,t){this.drawRange.start=e,this.drawRange.count=t},applyMatrix:function(e){var t=this.attributes.position;void 0!==t&&(e.applyToBufferAttribute(t),t.needsUpdate=!0);var r=this.attributes.normal;if(void 0!==r){(new c).getNormalMatrix(e).applyToBufferAttribute(r),r.needsUpdate=!0}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},rotateX:function(){var e=new o;return function(t){return e.makeRotationX(t),this.applyMatrix(e),this}}(),rotateY:function(){var e=new o;return function(t){return e.makeRotationY(t),this.applyMatrix(e),this}}(),rotateZ:function(){var e=new o;return function(t){return e.makeRotationZ(t),this.applyMatrix(e),this}}(),translate:function(){var e=new o;return function(t,r,i){return e.makeTranslation(t,r,i),this.applyMatrix(e),this}}(),scale:function(){var e=new o;return function(t,r,i){return e.makeScale(t,r,i),this.applyMatrix(e),this}}(),lookAt:function(){var e=new w;return function(t){e.lookAt(t),e.updateMatrix(),this.applyMatrix(e.matrix)}}(),center:function(){var e=new s;return function(){return this.computeBoundingBox(),this.boundingBox.getCenter(e).negate(),this.translate(e.x,e.y,e.z),this}}(),setFromObject:function(e){var t=e.geometry;if(e.isPoints||e.isLine){var r=new O(3*t.vertices.length,3),i=new O(3*t.colors.length,3);if(this.addAttribute(\"position\",r.copyVector3sArray(t.vertices)),this.addAttribute(\"color\",i.copyColorsArray(t.colors)),t.lineDistances&&t.lineDistances.length===t.vertices.length){var n=new O(t.lineDistances.length,1);this.addAttribute(\"lineDistance\",n.copyArray(t.lineDistances))}null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone())}else e.isMesh&&t&&t.isGeometry&&this.fromGeometry(t);return this},setFromPoints:function(e){for(var t=[],r=0,i=e.length;r<i;r++){var n=e[r];t.push(n.x,n.y,n.z||0)}return this.addAttribute(\"position\",new O(t,3)),this},updateFromObject:function(e){var t=e.geometry;if(e.isMesh){var r=t.__directGeometry;if(!0===t.elementsNeedUpdate&&(r=void 0,t.elementsNeedUpdate=!1),void 0===r)return this.fromGeometry(t);r.verticesNeedUpdate=t.verticesNeedUpdate,r.normalsNeedUpdate=t.normalsNeedUpdate,r.colorsNeedUpdate=t.colorsNeedUpdate,r.uvsNeedUpdate=t.uvsNeedUpdate,r.groupsNeedUpdate=t.groupsNeedUpdate,t.verticesNeedUpdate=!1,t.normalsNeedUpdate=!1,t.colorsNeedUpdate=!1,t.uvsNeedUpdate=!1,t.groupsNeedUpdate=!1,t=r}var i;return!0===t.verticesNeedUpdate&&(i=this.attributes.position,void 0!==i&&(i.copyVector3sArray(t.vertices),i.needsUpdate=!0),t.verticesNeedUpdate=!1),!0===t.normalsNeedUpdate&&(i=this.attributes.normal,void 0!==i&&(i.copyVector3sArray(t.normals),i.needsUpdate=!0),t.normalsNeedUpdate=!1),!0===t.colorsNeedUpdate&&(i=this.attributes.color,void 0!==i&&(i.copyColorsArray(t.colors),i.needsUpdate=!0),t.colorsNeedUpdate=!1),t.uvsNeedUpdate&&(i=this.attributes.uv,void 0!==i&&(i.copyVector2sArray(t.uvs),i.needsUpdate=!0),t.uvsNeedUpdate=!1),t.lineDistancesNeedUpdate&&(i=this.attributes.lineDistance,void 0!==i&&(i.copyArray(t.lineDistances),i.needsUpdate=!0),t.lineDistancesNeedUpdate=!1),t.groupsNeedUpdate&&(t.computeGroups(e.geometry),this.groups=t.groups,t.groupsNeedUpdate=!1),this},fromGeometry:function(e){return e.__directGeometry=(new F).fromGeometry(e),this.fromDirectGeometry(e.__directGeometry)},fromDirectGeometry:function(e){var t=new Float32Array(3*e.vertices.length);if(this.addAttribute(\"position\",new A(t,3).copyVector3sArray(e.vertices)),e.normals.length>0){var r=new Float32Array(3*e.normals.length);this.addAttribute(\"normal\",new A(r,3).copyVector3sArray(e.normals))}if(e.colors.length>0){var i=new Float32Array(3*e.colors.length);this.addAttribute(\"color\",new A(i,3).copyColorsArray(e.colors))}if(e.uvs.length>0){var n=new Float32Array(2*e.uvs.length);this.addAttribute(\"uv\",new A(n,2).copyVector2sArray(e.uvs))}if(e.uvs2.length>0){var o=new Float32Array(2*e.uvs2.length);this.addAttribute(\"uv2\",new A(o,2).copyVector2sArray(e.uvs2))}this.groups=e.groups;for(var a in e.morphTargets){for(var s=[],c=e.morphTargets[a],l=0,u=c.length;l<u;l++){var h=c[l],d=new O(3*h.length,3);s.push(d.copyVector3sArray(h))}this.morphAttributes[a]=s}if(e.skinIndices.length>0){var p=new O(4*e.skinIndices.length,4);this.addAttribute(\"skinIndex\",p.copyVector4sArray(e.skinIndices))}if(e.skinWeights.length>0){var f=new O(4*e.skinWeights.length,4);this.addAttribute(\"skinWeight\",f.copyVector4sArray(e.skinWeights))}return null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),this},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new f);var e=this.attributes.position;void 0!==e?this.boundingBox.setFromBufferAttribute(e):this.boundingBox.makeEmpty(),(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.',this)},computeBoundingSphere:function(){var e=new f,t=new s;return function(){null===this.boundingSphere&&(this.boundingSphere=new m);var r=this.attributes.position;if(r){var i=this.boundingSphere.center;e.setFromBufferAttribute(r),e.getCenter(i);for(var n=0,o=0,a=r.count;o<a;o++)t.x=r.getX(o),t.y=r.getY(o),t.z=r.getZ(o),n=Math.max(n,i.distanceToSquared(t));this.boundingSphere.radius=Math.sqrt(n),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.',this)}}}(),computeFaceNormals:function(){},computeVertexNormals:function(){var e=this.index,t=this.attributes,r=this.groups;if(t.position){var i=t.position.array;if(void 0===t.normal)this.addAttribute(\"normal\",new A(new Float32Array(i.length),3));else for(var n=t.normal.array,o=0,a=n.length;o<a;o++)n[o]=0;var c,l,u,h=t.normal.array,d=new s,p=new s,f=new s,m=new s,v=new s;if(e){var g=e.array;0===r.length&&this.addGroup(0,g.length);for(var y=0,x=r.length;y<x;++y)for(var _=r[y],b=_.start,w=_.count,o=b,a=b+w;o<a;o+=3)c=3*g[o+0],l=3*g[o+1],u=3*g[o+2],d.fromArray(i,c),p.fromArray(i,l),f.fromArray(i,u),m.subVectors(f,p),v.subVectors(d,p),m.cross(v),h[c]+=m.x,h[c+1]+=m.y,h[c+2]+=m.z,h[l]+=m.x,h[l+1]+=m.y,h[l+2]+=m.z,h[u]+=m.x,h[u+1]+=m.y,h[u+2]+=m.z}else for(var o=0,a=i.length;o<a;o+=9)d.fromArray(i,o),p.fromArray(i,o+3),f.fromArray(i,o+6),m.subVectors(f,p),v.subVectors(d,p),m.cross(v),h[o]=m.x,h[o+1]=m.y,h[o+2]=m.z,h[o+3]=m.x,h[o+4]=m.y,h[o+5]=m.z,h[o+6]=m.x,h[o+7]=m.y,h[o+8]=m.z;this.normalizeNormals(),t.normal.needsUpdate=!0}},merge:function(e,t){if(!e||!e.isBufferGeometry)return void console.error(\"THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.\",e);void 0===t&&(t=0,console.warn(\"THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.\"));var r=this.attributes;for(var i in r)if(void 0!==e.attributes[i])for(var n=r[i],o=n.array,a=e.attributes[i],s=a.array,c=a.itemSize,l=0,u=c*t;l<s.length;l++,u++)o[u]=s[l];return this},normalizeNormals:function(){var e=new s;return function(){for(var t=this.attributes.normal,r=0,i=t.count;r<i;r++)e.x=t.getX(r),e.y=t.getY(r),e.z=t.getZ(r),e.normalize(),t.setXYZ(r,e.x,e.y,e.z)}}(),toNonIndexed:function(){if(null===this.index)return console.warn(\"THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.\"),this;var e=new B,t=this.index.array,r=this.attributes;for(var i in r){for(var n=r[i],o=n.array,a=n.itemSize,s=new o.constructor(t.length*a),c=0,l=0,u=0,h=t.length;u<h;u++){c=t[u]*a;for(var d=0;d<a;d++)s[l++]=o[c++]}e.addAttribute(i,new A(s,a))}for(var p=this.groups,u=0,h=p.length;u<h;u++){var f=p[u];e.addGroup(f.start,f.count,f.materialIndex)}return e},toJSON:function(){var e={metadata:{version:4.5,type:\"BufferGeometry\",generator:\"BufferGeometry.toJSON\"}};if(e.uuid=this.uuid,e.type=this.type,\"\"!==this.name&&(e.name=this.name),void 0!==this.parameters){var t=this.parameters;for(var r in t)void 0!==t[r]&&(e[r]=t[r]);return e}e.data={attributes:{}};var i=this.index;if(null!==i){var n=Array.prototype.slice.call(i.array);e.data.index={type:i.array.constructor.name,array:n}}var o=this.attributes;for(var r in o){var a=o[r],n=Array.prototype.slice.call(a.array);e.data.attributes[r]={itemSize:a.itemSize,type:a.array.constructor.name,array:n,normalized:a.normalized}}var s=this.groups;s.length>0&&(e.data.groups=JSON.parse(JSON.stringify(s)));var c=this.boundingSphere;return null!==c&&(e.data.boundingSphere={center:c.center.toArray(),radius:c.radius}),e},clone:function(){return(new B).copy(this)},copy:function(e){var t,r,i;this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.name=e.name;var n=e.index;null!==n&&this.setIndex(n.clone());var o=e.attributes;for(t in o){var a=o[t];this.addAttribute(t,a.clone())}var s=e.morphAttributes;for(t in s){var c=[],l=s[t];for(r=0,i=l.length;r<i;r++)c.push(l[r].clone());this.morphAttributes[t]=c}var u=e.groups;for(r=0,i=u.length;r<i;r++){var h=u[r];this.addGroup(h.start,h.count,h.materialIndex)}var d=e.boundingBox;null!==d&&(this.boundingBox=d.clone());var p=e.boundingSphere;return null!==p&&(this.boundingSphere=p.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this},dispose:function(){this.dispatchEvent({type:\"dispose\"})}}),G.prototype=Object.create(T.prototype),G.prototype.constructor=G,H.prototype=Object.create(B.prototype),H.prototype.constructor=H,j.prototype=Object.create(T.prototype),j.prototype.constructor=j,V.prototype=Object.create(B.prototype),V.prototype.constructor=V;var Ys=0;k.prototype=Object.assign(Object.create(i.prototype),{constructor:k,isMaterial:!0,onBeforeCompile:function(){},setValues:function(e){if(void 0!==e)for(var t in e){var r=e[t];if(void 0!==r)if(\"shading\"!==t){var i=this[t];void 0!==i?i&&i.isColor?i.set(r):i&&i.isVector3&&r&&r.isVector3?i.copy(r):this[t]=\"overdraw\"===t?Number(r):r:console.warn(\"THREE.\"+this.type+\": '\"+t+\"' is not a property of this material.\")}else console.warn(\"THREE.\"+this.type+\": .shading has been removed. Use the boolean .flatShading instead.\"),this.flatShading=1===r;else console.warn(\"THREE.Material: '\"+t+\"' parameter is undefined.\")}},toJSON:function(e){function t(e){var t=[];for(var r in e){var i=e[r];delete i.metadata,t.push(i)}return t}var r=void 0===e||\"string\"==typeof e;r&&(e={textures:{},images:{}});var i={metadata:{version:4.5,type:\"Material\",generator:\"Material.toJSON\"}};if(i.uuid=this.uuid,i.type=this.type,\"\"!==this.name&&(i.name=this.name),this.color&&this.color.isColor&&(i.color=this.color.getHex()),void 0!==this.roughness&&(i.roughness=this.roughness),void 0!==this.metalness&&(i.metalness=this.metalness),this.emissive&&this.emissive.isColor&&(i.emissive=this.emissive.getHex()),1!==this.emissiveIntensity&&(i.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(i.specular=this.specular.getHex()),void 0!==this.shininess&&(i.shininess=this.shininess),void 0!==this.clearCoat&&(i.clearCoat=this.clearCoat),void 0!==this.clearCoatRoughness&&(i.clearCoatRoughness=this.clearCoatRoughness),this.map&&this.map.isTexture&&(i.map=this.map.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(i.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(i.lightMap=this.lightMap.toJSON(e).uuid),this.bumpMap&&this.bumpMap.isTexture&&(i.bumpMap=this.bumpMap.toJSON(e).uuid,i.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(i.normalMap=this.normalMap.toJSON(e).uuid,i.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(i.displacementMap=this.displacementMap.toJSON(e).uuid,i.displacementScale=this.displacementScale,i.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(i.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(i.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(i.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(i.specularMap=this.specularMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(i.envMap=this.envMap.toJSON(e).uuid,i.reflectivity=this.reflectivity),this.gradientMap&&this.gradientMap.isTexture&&(i.gradientMap=this.gradientMap.toJSON(e).uuid),void 0!==this.size&&(i.size=this.size),void 0!==this.sizeAttenuation&&(i.sizeAttenuation=this.sizeAttenuation),this.blending!==Fo&&(i.blending=this.blending),!0===this.flatShading&&(i.flatShading=this.flatShading),this.side!==Ro&&(i.side=this.side),this.vertexColors!==Uo&&(i.vertexColors=this.vertexColors),this.opacity<1&&(i.opacity=this.opacity),!0===this.transparent&&(i.transparent=this.transparent),i.depthFunc=this.depthFunc,i.depthTest=this.depthTest,i.depthWrite=this.depthWrite,0!==this.rotation&&(i.rotation=this.rotation),1!==this.linewidth&&(i.linewidth=this.linewidth),void 0!==this.dashSize&&(i.dashSize=this.dashSize),void 0!==this.gapSize&&(i.gapSize=this.gapSize),void 0!==this.scale&&(i.scale=this.scale),!0===this.dithering&&(i.dithering=!0),this.alphaTest>0&&(i.alphaTest=this.alphaTest),!0===this.premultipliedAlpha&&(i.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(i.wireframe=this.wireframe),this.wireframeLinewidth>1&&(i.wireframeLinewidth=this.wireframeLinewidth),\"round\"!==this.wireframeLinecap&&(i.wireframeLinecap=this.wireframeLinecap),\"round\"!==this.wireframeLinejoin&&(i.wireframeLinejoin=this.wireframeLinejoin),!0===this.morphTargets&&(i.morphTargets=!0),!0===this.skinning&&(i.skinning=!0),!1===this.visible&&(i.visible=!1),\"{}\"!==JSON.stringify(this.userData)&&(i.userData=this.userData),r){var n=t(e.textures),o=t(e.images);n.length>0&&(i.textures=n),o.length>0&&(i.images=o)}return i},clone:function(){return(new this.constructor).copy(this)},copy:function(e){this.name=e.name,this.fog=e.fog,this.lights=e.lights,this.blending=e.blending,this.side=e.side,this.flatShading=e.flatShading,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.premultipliedAlpha=e.premultipliedAlpha,this.overdraw=e.overdraw,this.visible=e.visible,this.userData=JSON.parse(JSON.stringify(e.userData)),this.clipShadows=e.clipShadows,this.clipIntersection=e.clipIntersection;var t=e.clippingPlanes,r=null;if(null!==t){var i=t.length;r=new Array(i);for(var n=0;n!==i;++n)r[n]=t[n].clone()}return this.clippingPlanes=r,this.shadowSide=e.shadowSide,this},dispose:function(){this.dispatchEvent({type:\"dispose\"})}}),W.prototype=Object.create(k.prototype),W.prototype.constructor=W,W.prototype.isMeshBasicMaterial=!0,W.prototype.copy=function(e){return k.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this},X.prototype=Object.create(k.prototype),X.prototype.constructor=X,X.prototype.isShaderMaterial=!0,X.prototype.copy=function(e){return k.prototype.copy.call(this,e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=Hs.clone(e.uniforms),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.lights=e.lights,this.clipping=e.clipping,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this.extensions=e.extensions,this},X.prototype.toJSON=function(e){var t=k.prototype.toJSON.call(this,e);return t.uniforms=this.uniforms,t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader,t},Object.assign(q.prototype,{set:function(e,t){return this.origin.copy(e),this.direction.copy(t),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this},at:function(e,t){return void 0===t&&(console.warn(\"THREE.Ray: .at() target is now required\"),t=new s),t.copy(this.direction).multiplyScalar(e).add(this.origin)},lookAt:function(e){return this.direction.copy(e).sub(this.origin).normalize(),this},recast:function(){var e=new s;return function(t){return this.origin.copy(this.at(t,e)),this}}(),closestPointToPoint:function(e,t){void 0===t&&(console.warn(\"THREE.Ray: .closestPointToPoint() target is now required\"),t=new s),t.subVectors(e,this.origin);var r=t.dot(this.direction);return r<0?t.copy(this.origin):t.copy(this.direction).multiplyScalar(r).add(this.origin)},distanceToPoint:function(e){return Math.sqrt(this.distanceSqToPoint(e))},distanceSqToPoint:function(){var e=new s;return function(t){var r=e.subVectors(t,this.origin).dot(this.direction);return r<0?this.origin.distanceToSquared(t):(e.copy(this.direction).multiplyScalar(r).add(this.origin),e.distanceToSquared(t))}}(),distanceSqToSegment:function(){var e=new s,t=new s,r=new s;return function(i,n,o,a){e.copy(i).add(n).multiplyScalar(.5),t.copy(n).sub(i).normalize(),r.copy(this.origin).sub(e);var s,c,l,u,h=.5*i.distanceTo(n),d=-this.direction.dot(t),p=r.dot(this.direction),f=-r.dot(t),m=r.lengthSq(),v=Math.abs(1-d*d);if(v>0)if(s=d*f-p,c=d*p-f,u=h*v,s>=0)if(c>=-u)if(c<=u){var g=1/v;s*=g,c*=g,l=s*(s+d*c+2*p)+c*(d*s+c+2*f)+m}else c=h,s=Math.max(0,-(d*c+p)),l=-s*s+c*(c+2*f)+m;else c=-h,s=Math.max(0,-(d*c+p)),l=-s*s+c*(c+2*f)+m;else c<=-u?(s=Math.max(0,-(-d*h+p)),c=s>0?-h:Math.min(Math.max(-h,-f),h),l=-s*s+c*(c+2*f)+m):c<=u?(s=0,c=Math.min(Math.max(-h,-f),h),l=c*(c+2*f)+m):(s=Math.max(0,-(d*h+p)),c=s>0?h:Math.min(Math.max(-h,-f),h),l=-s*s+c*(c+2*f)+m);else c=d>0?-h:h,s=Math.max(0,-(d*c+p)),l=-s*s+c*(c+2*f)+m;return o&&o.copy(this.direction).multiplyScalar(s).add(this.origin),a&&a.copy(t).multiplyScalar(c).add(e),l}}(),intersectSphere:function(){var e=new s;return function(t,r){e.subVectors(t.center,this.origin);var i=e.dot(this.direction),n=e.dot(e)-i*i,o=t.radius*t.radius;if(n>o)return null;var a=Math.sqrt(o-n),s=i-a,c=i+a;return s<0&&c<0?null:s<0?this.at(c,r):this.at(s,r)}}(),intersectsSphere:function(e){return this.distanceToPoint(e.center)<=e.radius},distanceToPlane:function(e){var t=e.normal.dot(this.direction);if(0===t)return 0===e.distanceToPoint(this.origin)?0:null;var r=-(this.origin.dot(e.normal)+e.constant)/t;return r>=0?r:null},intersectPlane:function(e,t){var r=this.distanceToPlane(e);return null===r?null:this.at(r,t)},intersectsPlane:function(e){var t=e.distanceToPoint(this.origin);return 0===t||e.normal.dot(this.direction)*t<0},intersectBox:function(e,t){var r,i,n,o,a,s,c=1/this.direction.x,l=1/this.direction.y,u=1/this.direction.z,h=this.origin;return c>=0?(r=(e.min.x-h.x)*c,i=(e.max.x-h.x)*c):(r=(e.max.x-h.x)*c,i=(e.min.x-h.x)*c),l>=0?(n=(e.min.y-h.y)*l,o=(e.max.y-h.y)*l):(n=(e.max.y-h.y)*l,o=(e.min.y-h.y)*l),r>o||n>i?null:((n>r||r!==r)&&(r=n),(o<i||i!==i)&&(i=o),u>=0?(a=(e.min.z-h.z)*u,s=(e.max.z-h.z)*u):(a=(e.max.z-h.z)*u,s=(e.min.z-h.z)*u),r>s||a>i?null:((a>r||r!==r)&&(r=a),(s<i||i!==i)&&(i=s),i<0?null:this.at(r>=0?r:i,t)))},intersectsBox:function(){var e=new s;return function(t){return null!==this.intersectBox(t,e)}}(),intersectTriangle:function(){var e=new s,t=new s,r=new s,i=new s;return function(n,o,a,s,c){t.subVectors(o,n),r.subVectors(a,n),i.crossVectors(t,r);var l,u=this.direction.dot(i);if(u>0){if(s)return null;l=1}else{if(!(u<0))return null;l=-1,u=-u}e.subVectors(this.origin,n);var h=l*this.direction.dot(r.crossVectors(e,r));if(h<0)return null;var d=l*this.direction.dot(t.cross(e));if(d<0)return null;if(h+d>u)return null;var p=-l*e.dot(i);return p<0?null:this.at(p/u,c)}}(),applyMatrix4:function(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this},equals:function(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}}),Object.assign(Y.prototype,{set:function(e,t){return this.start.copy(e),this.end.copy(t),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.start.copy(e.start),this.end.copy(e.end),this},getCenter:function(e){return void 0===e&&(console.warn(\"THREE.Line3: .getCenter() target is now required\"),e=new s),e.addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(e){return void 0===e&&(console.warn(\"THREE.Line3: .delta() target is now required\"),e=new s),e.subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(e,t){return void 0===t&&(console.warn(\"THREE.Line3: .at() target is now required\"),t=new s),this.delta(t).multiplyScalar(e).add(this.start)},closestPointToPointParameter:function(){var e=new s,t=new s;return function(r,i){e.subVectors(r,this.start),t.subVectors(this.end,this.start);var n=t.dot(t),o=t.dot(e),a=o/n;return i&&(a=zs.clamp(a,0,1)),a}}(),closestPointToPoint:function(e,t,r){var i=this.closestPointToPointParameter(e,t);return void 0===r&&(console.warn(\"THREE.Line3: .closestPointToPoint() target is now required\"),r=new s),this.delta(r).multiplyScalar(i).add(this.start)},applyMatrix4:function(e){return this.start.applyMatrix4(e),this.end.applyMatrix4(e),this},equals:function(e){return e.start.equals(this.start)&&e.end.equals(this.end)}}),Object.assign(Z,{getNormal:function(){var e=new s;return function(t,r,i,n){void 0===n&&(console.warn(\"THREE.Triangle: .getNormal() target is now required\"),n=new s),n.subVectors(i,r),e.subVectors(t,r),n.cross(e);var o=n.lengthSq();return o>0?n.multiplyScalar(1/Math.sqrt(o)):n.set(0,0,0)}}(),getBarycoord:function(){var e=new s,t=new s,r=new s;return function(i,n,o,a,c){e.subVectors(a,n),t.subVectors(o,n),r.subVectors(i,n);var l=e.dot(e),u=e.dot(t),h=e.dot(r),d=t.dot(t),p=t.dot(r),f=l*d-u*u;if(void 0===c&&(console.warn(\"THREE.Triangle: .getBarycoord() target is now required\"),c=new s),0===f)return c.set(-2,-1,-1);var m=1/f,v=(d*h-u*p)*m,g=(l*p-u*h)*m;return c.set(1-v-g,g,v)}}(),containsPoint:function(){var e=new s;return function(t,r,i,n){return Z.getBarycoord(t,r,i,n,e),e.x>=0&&e.y>=0&&e.x+e.y<=1}}()}),Object.assign(Z.prototype,{set:function(e,t,r){return this.a.copy(e),this.b.copy(t),this.c.copy(r),this},setFromPointsAndIndices:function(e,t,r,i){return this.a.copy(e[t]),this.b.copy(e[r]),this.c.copy(e[i]),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this},getArea:function(){var e=new s,t=new s;return function(){return e.subVectors(this.c,this.b),t.subVectors(this.a,this.b),.5*e.cross(t).length()}}(),getMidpoint:function(e){return void 0===e&&(console.warn(\"THREE.Triangle: .getMidpoint() target is now required\"),e=new s),e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},getNormal:function(e){return Z.getNormal(this.a,this.b,this.c,e)},getPlane:function(e){return void 0===e&&(console.warn(\"THREE.Triangle: .getPlane() target is now required\"),e=new s),e.setFromCoplanarPoints(this.a,this.b,this.c)},getBarycoord:function(e,t){return Z.getBarycoord(e,this.a,this.b,this.c,t)},containsPoint:function(e){return Z.containsPoint(e,this.a,this.b,this.c)},intersectsBox:function(e){return e.intersectsTriangle(this)},closestPointToPoint:function(){var e=new v,t=[new Y,new Y,new Y],r=new s,i=new s;return function(n,o){void 0===o&&(console.warn(\"THREE.Triangle: .closestPointToPoint() target is now required\"),o=new s);var a=1/0;if(e.setFromCoplanarPoints(this.a,this.b,this.c),e.projectPoint(n,r),!0===this.containsPoint(r))o.copy(r);else{t[0].set(this.a,this.b),t[1].set(this.b,this.c),t[2].set(this.c,this.a);for(var c=0;c<t.length;c++){t[c].closestPointToPoint(r,!0,i);var l=r.distanceToSquared(i);l<a&&(a=l,o.copy(i))}}return o}}(),equals:function(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}),J.prototype=Object.assign(Object.create(w.prototype),{constructor:J,isMesh:!0,setDrawMode:function(e){this.drawMode=e},copy:function(e){return w.prototype.copy.call(this,e),this.drawMode=e.drawMode,void 0!==e.morphTargetInfluences&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),void 0!==e.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this},updateMorphTargets:function(){var e,t,r,i=this.geometry;if(i.isBufferGeometry){var n=i.morphAttributes,o=Object.keys(n);if(o.length>0){var a=n[o[0]];if(void 0!==a)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},e=0,t=a.length;e<t;e++)r=a[e].name||String(e),this.morphTargetInfluences.push(0),this.morphTargetDictionary[r]=e}}else{var s=i.morphTargets;if(void 0!==s&&s.length>0)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},e=0,t=s.length;e<t;e++)r=s[e].name||String(e),this.morphTargetInfluences.push(0),this.morphTargetDictionary[r]=e}},raycast:function(){function e(e,t,r,i,n,o,a){return Z.getBarycoord(e,t,r,i,x),n.multiplyScalar(x.x),o.multiplyScalar(x.y),a.multiplyScalar(x.z),n.add(o).add(a),n.clone()}function t(e,t,r,i,n,o,a,s){if(null===(t.side===Po?i.intersectTriangle(a,o,n,!0,s):i.intersectTriangle(n,o,a,t.side!==Do,s)))return null;b.copy(s),b.applyMatrix4(e.matrixWorld);var c=r.ray.origin.distanceTo(b);return c<r.near||c>r.far?null:{distance:c,point:b.clone(),object:e}}function r(r,i,n,o,a,s,c,d){l.fromBufferAttribute(o,s),u.fromBufferAttribute(o,c),h.fromBufferAttribute(o,d);var p=t(r,r.material,i,n,l,u,h,_);if(p){a&&(v.fromBufferAttribute(a,s),g.fromBufferAttribute(a,c),y.fromBufferAttribute(a,d),p.uv=e(_,l,u,h,v,g,y));var f=new S(s,c,d);Z.getNormal(l,u,h,f.normal),p.face=f,p.faceIndex=s}return p}var i=new o,a=new q,c=new m,l=new s,u=new s,h=new s,d=new s,p=new s,f=new s,v=new n,g=new n,y=new n,x=new s,_=new s,b=new s;return function(n,o){var s=this.geometry,m=this.material,x=this.matrixWorld;if(void 0!==m&&(null===s.boundingSphere&&s.computeBoundingSphere(),c.copy(s.boundingSphere),c.applyMatrix4(x),!1!==n.ray.intersectsSphere(c)&&(i.getInverse(x),a.copy(n.ray).applyMatrix4(i),null===s.boundingBox||!1!==a.intersectsBox(s.boundingBox)))){var b;if(s.isBufferGeometry){var w,M,E,S,T,A=s.index,L=s.attributes.position,C=s.attributes.uv;if(null!==A)for(S=0,T=A.count;S<T;S+=3)w=A.getX(S),M=A.getX(S+1),E=A.getX(S+2),(b=r(this,n,a,L,C,w,M,E))&&(b.faceIndex=Math.floor(S/3),o.push(b));else if(void 0!==L)for(S=0,T=L.count;S<T;S+=3)w=S,M=S+1,E=S+2,(b=r(this,n,a,L,C,w,M,E))&&o.push(b)}else if(s.isGeometry){var R,P,D,U,I=Array.isArray(m),O=s.vertices,N=s.faces,F=s.faceVertexUvs[0];F.length>0&&(U=F);for(var z=0,B=N.length;z<B;z++){var G=N[z],H=I?m[G.materialIndex]:m;if(void 0!==H){if(R=O[G.a],P=O[G.b],D=O[G.c],!0===H.morphTargets){var j=s.morphTargets,V=this.morphTargetInfluences;l.set(0,0,0),u.set(0,0,0),h.set(0,0,0);for(var k=0,W=j.length;k<W;k++){var X=V[k];if(0!==X){var q=j[k].vertices;l.addScaledVector(d.subVectors(q[G.a],R),X),u.addScaledVector(p.subVectors(q[G.b],P),X),h.addScaledVector(f.subVectors(q[G.c],D),X)}}l.add(R),u.add(P),h.add(D),R=l,P=u,D=h}if(b=t(this,H,n,a,R,P,D,_)){if(U&&U[z]){var Y=U[z];v.copy(Y[0]),g.copy(Y[1]),y.copy(Y[2]),b.uv=e(_,R,P,D,v,g,y)}b.face=G,b.faceIndex=z,o.push(b)}}}}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),ce.prototype=Object.create(l.prototype),ce.prototype.constructor=ce,ce.prototype.isCubeTexture=!0,Object.defineProperty(ce.prototype,\"images\",{get:function(){return this.image},set:function(e){this.image=e}});var Zs=new l,Js=new ce,Ks=[],Qs=[],$s=new Float32Array(16),ec=new Float32Array(9);Be.prototype.setValue=function(e,t){for(var r=this.seq,i=0,n=r.length;i!==n;++i){var o=r[i];o.setValue(e,t[o.id])}};var tc=/([\\w\\d_]+)(\\])?(\\[|\\.)?/g;je.prototype.setValue=function(e,t,r){var i=this.map[t];void 0!==i&&i.setValue(e,r,this.renderer)},je.prototype.setOptional=function(e,t,r){var i=t[r];void 0!==i&&this.setValue(e,r,i)},je.upload=function(e,t,r,i){for(var n=0,o=t.length;n!==o;++n){var a=t[n],s=r[a.id];!1!==s.needsUpdate&&a.setValue(e,s.value,i)}},je.seqWithValue=function(e,t){for(var r=[],i=0,n=e.length;i!==n;++i){var o=e[i];o.id in t&&r.push(o)}return r};var rc=0,ic=0;ft.prototype=Object.create(k.prototype),ft.prototype.constructor=ft,ft.prototype.isMeshDepthMaterial=!0,ft.prototype.copy=function(e){return k.prototype.copy.call(this,e),this.depthPacking=e.depthPacking,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this},mt.prototype=Object.create(k.prototype),mt.prototype.constructor=mt,mt.prototype.isMeshDistanceMaterial=!0,mt.prototype.copy=function(e){return k.prototype.copy.call(this,e),this.referencePosition.copy(e.referencePosition),this.nearDistance=e.nearDistance,this.farDistance=e.farDistance,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this},gt.prototype=Object.create(l.prototype),gt.prototype.constructor=gt,wt.prototype=Object.assign(Object.create(M.prototype),{constructor:wt,isPerspectiveCamera:!0,copy:function(e,t){return M.prototype.copy.call(this,e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=null===e.view?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this},setFocalLength:function(e){var t=.5*this.getFilmHeight()/e;this.fov=2*zs.RAD2DEG*Math.atan(t),this.updateProjectionMatrix()},getFocalLength:function(){var e=Math.tan(.5*zs.DEG2RAD*this.fov);return.5*this.getFilmHeight()/e},getEffectiveFOV:function(){return 2*zs.RAD2DEG*Math.atan(Math.tan(.5*zs.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(e,t,r,i,n,o){this.aspect=e/t,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=r,this.view.offsetY=i,this.view.width=n,this.view.height=o,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var e=this.near,t=e*Math.tan(.5*zs.DEG2RAD*this.fov)/this.zoom,r=2*t,i=this.aspect*r,n=-.5*i,o=this.view;if(null!==this.view&&this.view.enabled){var a=o.fullWidth,s=o.fullHeight;n+=o.offsetX*i/a,t-=o.offsetY*r/s,i*=o.width/a,r*=o.height/s}var c=this.filmOffset;0!==c&&(n+=e*c/this.getFilmWidth()),this.projectionMatrix.makePerspective(n,n+i,t,t-r,e,this.far)},toJSON:function(e){var t=w.prototype.toJSON.call(this,e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,null!==this.view&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}),Mt.prototype=Object.assign(Object.create(wt.prototype),{constructor:Mt,isArrayCamera:!0}),Tt.prototype.isFogExp2=!0,Tt.prototype.clone=function(){return new Tt(this.color.getHex(),this.density)},Tt.prototype.toJSON=function(){return{type:\"FogExp2\",color:this.color.getHex(),density:this.density}},At.prototype.isFog=!0,At.prototype.clone=function(){return new At(this.color.getHex(),this.near,this.far)},At.prototype.toJSON=function(){return{type:\"Fog\",color:this.color.getHex(),near:this.near,far:this.far}},Lt.prototype=Object.assign(Object.create(w.prototype),{constructor:Lt,copy:function(e,t){return w.prototype.copy.call(this,e,t),null!==e.background&&(this.background=e.background.clone()),null!==e.fog&&(this.fog=e.fog.clone()),null!==e.overrideMaterial&&(this.overrideMaterial=e.overrideMaterial.clone()),this.autoUpdate=e.autoUpdate,this.matrixAutoUpdate=e.matrixAutoUpdate,this},toJSON:function(e){var t=w.prototype.toJSON.call(this,e);return null!==this.background&&(t.object.background=this.background.toJSON(e)),null!==this.fog&&(t.object.fog=this.fog.toJSON()),t}}),Ct.prototype=Object.create(k.prototype),Ct.prototype.constructor=Ct,Ct.prototype.isSpriteMaterial=!0,Ct.prototype.copy=function(e){return k.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.rotation=e.rotation,this},Rt.prototype=Object.assign(Object.create(w.prototype),{constructor:Rt,isSprite:!0,raycast:function(){var e=new s,t=new s,r=new s;return function(i,n){t.setFromMatrixPosition(this.matrixWorld),i.ray.closestPointToPoint(t,e),r.setFromMatrixScale(this.matrixWorld);var o=r.x*r.y/4;if(!(t.distanceToSquared(e)>o)){var a=i.ray.origin.distanceTo(e);a<i.near||a>i.far||n.push({distance:a,point:e.clone(),face:null,object:this})}}}(),clone:function(){return new this.constructor(this.material).copy(this)},copy:function(e){return w.prototype.copy.call(this,e),void 0!==e.center&&this.center.copy(e.center),this}}),Pt.prototype=Object.assign(Object.create(w.prototype),{constructor:Pt,copy:function(e){w.prototype.copy.call(this,e,!1);for(var t=e.levels,r=0,i=t.length;r<i;r++){var n=t[r];this.addLevel(n.object.clone(),n.distance)}return this},addLevel:function(e,t){void 0===t&&(t=0),t=Math.abs(t);for(var r=this.levels,i=0;i<r.length&&!(t<r[i].distance);i++);r.splice(i,0,{distance:t,object:e}),this.add(e)},getObjectForDistance:function(e){for(var t=this.levels,r=1,i=t.length;r<i&&!(e<t[r].distance);r++);return t[r-1].object},raycast:function(){var e=new s;return function(t,r){e.setFromMatrixPosition(this.matrixWorld);var i=t.ray.origin.distanceTo(e);this.getObjectForDistance(i).raycast(t,r)}}(),update:function(){var e=new s,t=new s;return function(r){var i=this.levels;if(i.length>1){e.setFromMatrixPosition(r.matrixWorld),t.setFromMatrixPosition(this.matrixWorld);var n=e.distanceTo(t);i[0].object.visible=!0;for(var o=1,a=i.length;o<a&&n>=i[o].distance;o++)i[o-1].object.visible=!1,i[o].object.visible=!0;for(;o<a;o++)i[o].object.visible=!1}}}(),toJSON:function(e){var t=w.prototype.toJSON.call(this,e);t.object.levels=[];for(var r=this.levels,i=0,n=r.length;i<n;i++){var o=r[i];t.object.levels.push({object:o.object.uuid,distance:o.distance})}return t}}),Object.assign(Dt.prototype,{calculateInverses:function(){this.boneInverses=[];for(var e=0,t=this.bones.length;e<t;e++){var r=new o;this.bones[e]&&r.getInverse(this.bones[e].matrixWorld),this.boneInverses.push(r)}},pose:function(){var e,t,r;for(t=0,r=this.bones.length;t<r;t++)(e=this.bones[t])&&e.matrixWorld.getInverse(this.boneInverses[t]);for(t=0,r=this.bones.length;t<r;t++)(e=this.bones[t])&&(e.parent&&e.parent.isBone?(e.matrix.getInverse(e.parent.matrixWorld),e.matrix.multiply(e.matrixWorld)):e.matrix.copy(e.matrixWorld),e.matrix.decompose(e.position,e.quaternion,e.scale))},update:function(){var e=new o,t=new o;return function(){for(var r=this.bones,i=this.boneInverses,n=this.boneMatrices,o=this.boneTexture,a=0,s=r.length;a<s;a++){var c=r[a]?r[a].matrixWorld:t;e.multiplyMatrices(c,i[a]),e.toArray(n,16*a)}void 0!==o&&(o.needsUpdate=!0)}}(),clone:function(){return new Dt(this.bones,this.boneInverses)},getBoneByName:function(e){for(var t=0,r=this.bones.length;t<r;t++){var i=this.bones[t];if(i.name===e)return i}}}),Ut.prototype=Object.assign(Object.create(w.prototype),{constructor:Ut,isBone:!0}),It.prototype=Object.assign(Object.create(J.prototype),{constructor:It,isSkinnedMesh:!0,initBones:function(){var e,t,r,i,n=[];if(this.geometry&&void 0!==this.geometry.bones){for(r=0,i=this.geometry.bones.length;r<i;r++)t=this.geometry.bones[r],e=new Ut,n.push(e),e.name=t.name,e.position.fromArray(t.pos),e.quaternion.fromArray(t.rotq),void 0!==t.scl&&e.scale.fromArray(t.scl);for(r=0,i=this.geometry.bones.length;r<i;r++)t=this.geometry.bones[r],-1!==t.parent&&null!==t.parent&&void 0!==n[t.parent]?n[t.parent].add(n[r]):this.add(n[r])}return this.updateMatrixWorld(!0),n},bind:function(e,t){this.skeleton=e,void 0===t&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),t=this.matrixWorld),this.bindMatrix.copy(t),this.bindMatrixInverse.getInverse(t)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){var e,t;if(this.geometry&&this.geometry.isGeometry)for(t=0;t<this.geometry.skinWeights.length;t++){var r=this.geometry.skinWeights[t];e=1/r.manhattanLength(),e!==1/0?r.multiplyScalar(e):r.set(1,0,0,0)}else if(this.geometry&&this.geometry.isBufferGeometry){var i=new u,n=this.geometry.attributes.skinWeight;for(t=0;t<n.count;t++)i.x=n.getX(t),i.y=n.getY(t),i.z=n.getZ(t),i.w=n.getW(t),e=1/i.manhattanLength(),e!==1/0?i.multiplyScalar(e):i.set(1,0,0,0),n.setXYZW(t,i.x,i.y,i.z,i.w)}},updateMatrixWorld:function(e){J.prototype.updateMatrixWorld.call(this,e),\"attached\"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):\"detached\"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn(\"THREE.SkinnedMesh: Unrecognized bindMode: \"+this.bindMode)},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),Ot.prototype=Object.create(k.prototype),Ot.prototype.constructor=Ot,Ot.prototype.isLineBasicMaterial=!0,Ot.prototype.copy=function(e){return k.prototype.copy.call(this,e),this.color.copy(e.color),this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this},Nt.prototype=Object.assign(Object.create(w.prototype),{constructor:Nt,isLine:!0,computeLineDistances:function(){var e=new s,t=new s;return function(){var r=this.geometry;if(r.isBufferGeometry)if(null===r.index){for(var i=r.attributes.position,n=[0],o=1,a=i.count;o<a;o++)e.fromBufferAttribute(i,o-1),t.fromBufferAttribute(i,o),n[o]=n[o-1],n[o]+=e.distanceTo(t);r.addAttribute(\"lineDistance\",new O(n,1))}else console.warn(\"THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.\");else if(r.isGeometry){var s=r.vertices,n=r.lineDistances;n[0]=0;for(var o=1,a=s.length;o<a;o++)n[o]=n[o-1],n[o]+=s[o-1].distanceTo(s[o])}return this}}(),raycast:function(){var e=new o,t=new q,r=new m;return function(i,n){var o=i.linePrecision,a=o*o,c=this.geometry,l=this.matrixWorld;if(null===c.boundingSphere&&c.computeBoundingSphere(),r.copy(c.boundingSphere),r.applyMatrix4(l),!1!==i.ray.intersectsSphere(r)){e.getInverse(l),t.copy(i.ray).applyMatrix4(e);var u=new s,h=new s,d=new s,p=new s,f=this&&this.isLineSegments?2:1;if(c.isBufferGeometry){var m=c.index,v=c.attributes,g=v.position.array;if(null!==m)for(var y=m.array,x=0,_=y.length-1;x<_;x+=f){var b=y[x],w=y[x+1];u.fromArray(g,3*b),h.fromArray(g,3*w);var M=t.distanceSqToSegment(u,h,p,d);if(!(M>a)){p.applyMatrix4(this.matrixWorld);var E=i.ray.origin.distanceTo(p);E<i.near||E>i.far||n.push({distance:E,point:d.clone().applyMatrix4(this.matrixWorld),index:x,face:null,faceIndex:null,object:this})}}else for(var x=0,_=g.length/3-1;x<_;x+=f){u.fromArray(g,3*x),h.fromArray(g,3*x+3);var M=t.distanceSqToSegment(u,h,p,d);if(!(M>a)){p.applyMatrix4(this.matrixWorld);var E=i.ray.origin.distanceTo(p);E<i.near||E>i.far||n.push({distance:E,point:d.clone().applyMatrix4(this.matrixWorld),index:x,face:null,faceIndex:null,object:this})}}}else if(c.isGeometry)for(var S=c.vertices,T=S.length,x=0;x<T-1;x+=f){var M=t.distanceSqToSegment(S[x],S[x+1],p,d);if(!(M>a)){p.applyMatrix4(this.matrixWorld);var E=i.ray.origin.distanceTo(p);E<i.near||E>i.far||n.push({distance:E,point:d.clone().applyMatrix4(this.matrixWorld),index:x,face:null,faceIndex:null,object:this})}}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),Ft.prototype=Object.assign(Object.create(Nt.prototype),{constructor:Ft,isLineSegments:!0,computeLineDistances:function(){var e=new s,t=new s;return function(){var r=this.geometry;if(r.isBufferGeometry)if(null===r.index){for(var i=r.attributes.position,n=[],o=0,a=i.count;o<a;o+=2)e.fromBufferAttribute(i,o),t.fromBufferAttribute(i,o+1),n[o]=0===o?0:n[o-1],n[o+1]=n[o]+e.distanceTo(t);r.addAttribute(\"lineDistance\",new O(n,1))}else console.warn(\"THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.\");else if(r.isGeometry)for(var s=r.vertices,n=r.lineDistances,o=0,a=s.length;o<a;o+=2)e.copy(s[o]),t.copy(s[o+1]),n[o]=0===o?0:n[o-1],n[o+1]=n[o]+e.distanceTo(t);return this}}()}),zt.prototype=Object.assign(Object.create(Nt.prototype),{constructor:zt,isLineLoop:!0}),Bt.prototype=Object.create(k.prototype),Bt.prototype.constructor=Bt,Bt.prototype.isPointsMaterial=!0,Bt.prototype.copy=function(e){return k.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this},Gt.prototype=Object.assign(Object.create(w.prototype),{constructor:Gt,isPoints:!0,raycast:function(){var e=new o,t=new q,r=new m;return function(i,n){function o(e,r){var o=t.distanceSqToPoint(e);if(o<d){t.closestPointToPoint(e,f),f.applyMatrix4(l);var s=i.ray.origin.distanceTo(f);if(s<i.near||s>i.far)return;n.push({distance:s,distanceToRay:Math.sqrt(o),point:f.clone(),index:r,face:null,object:a})}}var a=this,c=this.geometry,l=this.matrixWorld,u=i.params.Points.threshold;if(null===c.boundingSphere&&c.computeBoundingSphere(),r.copy(c.boundingSphere),r.applyMatrix4(l),r.radius+=u,!1!==i.ray.intersectsSphere(r)){e.getInverse(l),t.copy(i.ray).applyMatrix4(e);var h=u/((this.scale.x+this.scale.y+this.scale.z)/3),d=h*h,p=new s,f=new s;if(c.isBufferGeometry){var m=c.index,v=c.attributes,g=v.position.array;if(null!==m)for(var y=m.array,x=0,_=y.length;x<_;x++){var b=y[x];p.fromArray(g,3*b),o(p,b)}else for(var x=0,w=g.length/3;x<w;x++)p.fromArray(g,3*x),o(p,x)}else for(var M=c.vertices,x=0,w=M.length;x<w;x++)o(M[x],x)}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),Ht.prototype=Object.assign(Object.create(w.prototype),{constructor:Ht,isGroup:!0}),jt.prototype=Object.assign(Object.create(l.prototype),{constructor:jt,isVideoTexture:!0,update:function(){var e=this.image;e.readyState>=e.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}),Vt.prototype=Object.create(l.prototype),Vt.prototype.constructor=Vt,Vt.prototype.isCompressedTexture=!0,kt.prototype=Object.create(l.prototype),kt.prototype.constructor=kt,kt.prototype.isDepthTexture=!0,Wt.prototype=Object.create(B.prototype),Wt.prototype.constructor=Wt,Xt.prototype=Object.create(T.prototype),Xt.prototype.constructor=Xt,qt.prototype=Object.create(B.prototype),qt.prototype.constructor=qt,Yt.prototype=Object.create(T.prototype),Yt.prototype.constructor=Yt,Zt.prototype=Object.create(B.prototype),Zt.prototype.constructor=Zt,Jt.prototype=Object.create(T.prototype),Jt.prototype.constructor=Jt,Kt.prototype=Object.create(Zt.prototype),Kt.prototype.constructor=Kt,Qt.prototype=Object.create(T.prototype),Qt.prototype.constructor=Qt,$t.prototype=Object.create(Zt.prototype),$t.prototype.constructor=$t,er.prototype=Object.create(T.prototype),er.prototype.constructor=er,tr.prototype=Object.create(Zt.prototype),tr.prototype.constructor=tr,rr.prototype=Object.create(T.prototype),rr.prototype.constructor=rr,ir.prototype=Object.create(Zt.prototype),ir.prototype.constructor=ir,nr.prototype=Object.create(T.prototype),nr.prototype.constructor=nr,or.prototype=Object.create(B.prototype),or.prototype.constructor=or,ar.prototype=Object.create(T.prototype),ar.prototype.constructor=ar,sr.prototype=Object.create(B.prototype),sr.prototype.constructor=sr,cr.prototype=Object.create(T.prototype),cr.prototype.constructor=cr,lr.prototype=Object.create(B.prototype),lr.prototype.constructor=lr;var nc={triangulate:function(e,t,r){r=r||2;var i=t&&t.length,n=i?t[0]*r:e.length,o=ur(e,0,n,r,!0),a=[];if(!o)return a;var s,c,l,u,h,d,p;if(i&&(o=gr(e,t,o,r)),e.length>80*r){s=l=e[0],c=u=e[1];for(var f=r;f<n;f+=r)h=e[f],d=e[f+1],h<s&&(s=h),d<c&&(c=d),h>l&&(l=h),d>u&&(u=d);p=Math.max(l-s,u-c),p=0!==p?1/p:0}return dr(o,a,r,s,c,p),a}},oc={area:function(e){for(var t=e.length,r=0,i=t-1,n=0;n<t;i=n++)r+=e[i].x*e[n].y-e[n].x*e[i].y;return.5*r},isClockWise:function(e){return oc.area(e)<0},triangulateShape:function(e,t){var r=[],i=[],n=[];zr(e),Br(r,e);var o=e.length;t.forEach(zr);for(var a=0;a<t.length;a++)i.push(o),o+=t[a].length,Br(r,t[a]);for(var s=nc.triangulate(r,i),a=0;a<s.length;a+=3)n.push(s.slice(a,a+3));return n}};Gr.prototype=Object.create(T.prototype),Gr.prototype.constructor=Gr,Hr.prototype=Object.create(B.prototype),Hr.prototype.constructor=Hr;var ac={generateTopUV:function(e,t,r,i,o){var a=t[3*r],s=t[3*r+1],c=t[3*i],l=t[3*i+1],u=t[3*o],h=t[3*o+1];return[new n(a,s),new n(c,l),new n(u,h)]},generateSideWallUV:function(e,t,r,i,o,a){var s=t[3*r],c=t[3*r+1],l=t[3*r+2],u=t[3*i],h=t[3*i+1],d=t[3*i+2],p=t[3*o],f=t[3*o+1],m=t[3*o+2],v=t[3*a],g=t[3*a+1],y=t[3*a+2];return Math.abs(c-h)<.01?[new n(s,1-l),new n(u,1-d),new n(p,1-m),new n(v,1-y)]:[new n(c,1-l),new n(h,1-d),new n(f,1-m),new n(g,1-y)]}};jr.prototype=Object.create(T.prototype),jr.prototype.constructor=jr,Vr.prototype=Object.create(Hr.prototype),Vr.prototype.constructor=Vr,kr.prototype=Object.create(T.prototype),kr.prototype.constructor=kr,Wr.prototype=Object.create(B.prototype),Wr.prototype.constructor=Wr,Xr.prototype=Object.create(T.prototype),Xr.prototype.constructor=Xr,qr.prototype=Object.create(B.prototype),qr.prototype.constructor=qr,Yr.prototype=Object.create(T.prototype),Yr.prototype.constructor=Yr,Zr.prototype=Object.create(B.prototype),Zr.prototype.constructor=Zr,Jr.prototype=Object.create(T.prototype),Jr.prototype.constructor=Jr,Jr.prototype.toJSON=function(){var e=T.prototype.toJSON.call(this);return Qr(this.parameters.shapes,e)},Kr.prototype=Object.create(B.prototype),Kr.prototype.constructor=Kr,Kr.prototype.toJSON=function(){var e=B.prototype.toJSON.call(this);return Qr(this.parameters.shapes,e)},$r.prototype=Object.create(B.prototype),$r.prototype.constructor=$r,ei.prototype=Object.create(T.prototype),ei.prototype.constructor=ei,ti.prototype=Object.create(B.prototype),ti.prototype.constructor=ti,ri.prototype=Object.create(ei.prototype),ri.prototype.constructor=ri,ii.prototype=Object.create(ti.prototype),ii.prototype.constructor=ii,ni.prototype=Object.create(T.prototype),ni.prototype.constructor=ni,oi.prototype=Object.create(B.prototype),oi.prototype.constructor=oi;var sc=Object.freeze({WireframeGeometry:Wt,ParametricGeometry:Xt,ParametricBufferGeometry:qt,TetrahedronGeometry:Jt,TetrahedronBufferGeometry:Kt,OctahedronGeometry:Qt,OctahedronBufferGeometry:$t,IcosahedronGeometry:er,IcosahedronBufferGeometry:tr,DodecahedronGeometry:rr,DodecahedronBufferGeometry:ir,PolyhedronGeometry:Yt,PolyhedronBufferGeometry:Zt,TubeGeometry:nr,TubeBufferGeometry:or,TorusKnotGeometry:ar,TorusKnotBufferGeometry:sr,TorusGeometry:cr,TorusBufferGeometry:lr,TextGeometry:jr,TextBufferGeometry:Vr,SphereGeometry:kr,SphereBufferGeometry:Wr,RingGeometry:Xr,RingBufferGeometry:qr,PlaneGeometry:j,PlaneBufferGeometry:V,LatheGeometry:Yr,LatheBufferGeometry:Zr,ShapeGeometry:Jr,ShapeBufferGeometry:Kr,ExtrudeGeometry:Gr,ExtrudeBufferGeometry:Hr,EdgesGeometry:$r,ConeGeometry:ri,ConeBufferGeometry:ii,CylinderGeometry:ei,CylinderBufferGeometry:ti,CircleGeometry:ni,CircleBufferGeometry:oi,BoxGeometry:G,BoxBufferGeometry:H});ai.prototype=Object.create(k.prototype),ai.prototype.constructor=ai,ai.prototype.isShadowMaterial=!0,ai.prototype.copy=function(e){return k.prototype.copy.call(this,e),this.color.copy(e.color),this},si.prototype=Object.create(X.prototype),si.prototype.constructor=si,si.prototype.isRawShaderMaterial=!0,ci.prototype=Object.create(k.prototype),ci.prototype.constructor=ci,ci.prototype.isMeshStandardMaterial=!0,ci.prototype.copy=function(e){return k.prototype.copy.call(this,e),this.defines={STANDARD:\"\"},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapIntensity=e.envMapIntensity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},li.prototype=Object.create(ci.prototype),li.prototype.constructor=li,li.prototype.isMeshPhysicalMaterial=!0,li.prototype.copy=function(e){return ci.prototype.copy.call(this,e),this.defines={PHYSICAL:\"\"},this.reflectivity=e.reflectivity,this.clearCoat=e.clearCoat,this.clearCoatRoughness=e.clearCoatRoughness,this},ui.prototype=Object.create(k.prototype),ui.prototype.constructor=ui,ui.prototype.isMeshPhongMaterial=!0,ui.prototype.copy=function(e){return k.prototype.copy.call(this,e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},hi.prototype=Object.create(ui.prototype),hi.prototype.constructor=hi,hi.prototype.isMeshToonMaterial=!0,hi.prototype.copy=function(e){return ui.prototype.copy.call(this,e),this.gradientMap=e.gradientMap,this},di.prototype=Object.create(k.prototype),di.prototype.constructor=di,di.prototype.isMeshNormalMaterial=!0,di.prototype.copy=function(e){return k.prototype.copy.call(this,e),this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},pi.prototype=Object.create(k.prototype),pi.prototype.constructor=pi,pi.prototype.isMeshLambertMaterial=!0,pi.prototype.copy=function(e){return k.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},fi.prototype=Object.create(Ot.prototype),fi.prototype.constructor=fi,fi.prototype.isLineDashedMaterial=!0,fi.prototype.copy=function(e){return Ot.prototype.copy.call(this,e),this.scale=e.scale,this.dashSize=e.dashSize,this.gapSize=e.gapSize,this};var cc=Object.freeze({ShadowMaterial:ai,SpriteMaterial:Ct,RawShaderMaterial:si,ShaderMaterial:X,PointsMaterial:Bt,MeshPhysicalMaterial:li,MeshStandardMaterial:ci,MeshPhongMaterial:ui,MeshToonMaterial:hi,MeshNormalMaterial:di,MeshLambertMaterial:pi,MeshDepthMaterial:ft,MeshDistanceMaterial:mt,MeshBasicMaterial:W,LineDashedMaterial:fi,LineBasicMaterial:Ot,Material:k}),lc={enabled:!1,files:{},add:function(e,t){!1!==this.enabled&&(this.files[e]=t)},get:function(e){if(!1!==this.enabled)return this.files[e]},remove:function(e){delete this.files[e]},clear:function(){this.files={}}},uc=new mi,hc={};Object.assign(vi.prototype,{load:function(e,t,r,i){void 0===e&&(e=\"\"),void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e);var n=this,o=lc.get(e);if(void 0!==o)return n.manager.itemStart(e),setTimeout(function(){t&&t(o),n.manager.itemEnd(e)},0),o;if(void 0!==hc[e])return void hc[e].push({onLoad:t,onProgress:r,onError:i});var a=/^data:(.*?)(;base64)?,(.*)$/,s=e.match(a);if(s){var c=s[1],l=!!s[2],u=s[3];u=window.decodeURIComponent(u),l&&(u=window.atob(u));try{var h,d=(this.responseType||\"\").toLowerCase();switch(d){case\"arraybuffer\":case\"blob\":for(var p=new Uint8Array(u.length),f=0;f<u.length;f++)p[f]=u.charCodeAt(f);h=\"blob\"===d?new Blob([p.buffer],{type:c}):p.buffer;break;case\"document\":var m=new DOMParser;h=m.parseFromString(u,c);break;case\"json\":h=JSON.parse(u);break;default:h=u}window.setTimeout(function(){t&&t(h),n.manager.itemEnd(e)},0)}catch(t){window.setTimeout(function(){i&&i(t),n.manager.itemEnd(e),n.manager.itemError(e)},0)}}else{hc[e]=[],hc[e].push({onLoad:t,onProgress:r,onError:i});var v=new XMLHttpRequest;v.open(\"GET\",e,!0),v.addEventListener(\"load\",function(t){var r=this.response;lc.add(e,r);var i=hc[e];if(delete hc[e],200===this.status){for(var o=0,a=i.length;o<a;o++){var s=i[o];s.onLoad&&s.onLoad(r)}n.manager.itemEnd(e)}else if(0===this.status){console.warn(\"THREE.FileLoader: HTTP Status 0 received.\");for(var o=0,a=i.length;o<a;o++){var s=i[o];s.onLoad&&s.onLoad(r)}n.manager.itemEnd(e)}else{for(var o=0,a=i.length;o<a;o++){var s=i[o];s.onError&&s.onError(t)}n.manager.itemEnd(e),n.manager.itemError(e)}},!1),v.addEventListener(\"progress\",function(t){for(var r=hc[e],i=0,n=r.length;i<n;i++){var o=r[i];o.onProgress&&o.onProgress(t)}},!1),v.addEventListener(\"error\",function(t){var r=hc[e];delete hc[e];for(var i=0,o=r.length;i<o;i++){var a=r[i];a.onError&&a.onError(t)}n.manager.itemEnd(e),n.manager.itemError(e)},!1),void 0!==this.responseType&&(v.responseType=this.responseType),void 0!==this.withCredentials&&(v.withCredentials=this.withCredentials),v.overrideMimeType&&v.overrideMimeType(void 0!==this.mimeType?this.mimeType:\"text/plain\");for(var g in this.requestHeader)v.setRequestHeader(g,this.requestHeader[g]);v.send(null)}return n.manager.itemStart(e),v},setPath:function(e){return this.path=e,this},setResponseType:function(e){return this.responseType=e,this},setWithCredentials:function(e){return this.withCredentials=e,this},setMimeType:function(e){return this.mimeType=e,this},setRequestHeader:function(e){return this.requestHeader=e,this}}),Object.assign(gi.prototype,{load:function(e,t,r,i){var n=this,o=[],a=new Vt;a.image=o;var s=new vi(this.manager);if(s.setPath(this.path),s.setResponseType(\"arraybuffer\"),Array.isArray(e))for(var c=0,l=0,u=e.length;l<u;++l)!function(l){s.load(e[l],function(e){var r=n._parser(e,!0);o[l]={width:r.width,height:r.height,format:r.format,mipmaps:r.mipmaps},6===(c+=1)&&(1===r.mipmapCount&&(a.minFilter=Ua),a.format=r.format,a.needsUpdate=!0,t&&t(a))},r,i)}(l);else s.load(e,function(e){var r=n._parser(e,!0);if(r.isCubemap)for(var i=r.mipmaps.length/r.mipmapCount,s=0;s<i;s++){o[s]={mipmaps:[]};for(var c=0;c<r.mipmapCount;c++)o[s].mipmaps.push(r.mipmaps[s*r.mipmapCount+c]),o[s].format=r.format,o[s].width=r.width,o[s].height=r.height}else a.image.width=r.width,a.image.height=r.height,a.mipmaps=r.mipmaps;1===r.mipmapCount&&(a.minFilter=Ua),a.format=r.format,a.needsUpdate=!0,t&&t(a)},r,i);return a},setPath:function(e){return this.path=e,this}}),Object.assign(yi.prototype,{load:function(e,t,r,i){var n=this,o=new p,a=new vi(this.manager);return a.setResponseType(\"arraybuffer\"),a.load(e,function(e){var r=n._parser(e);r&&(void 0!==r.image?o.image=r.image:void 0!==r.data&&(o.image.width=r.width,o.image.height=r.height,o.image.data=r.data),o.wrapS=void 0!==r.wrapS?r.wrapS:La,o.wrapT=void 0!==r.wrapT?r.wrapT:La,o.magFilter=void 0!==r.magFilter?r.magFilter:Ua,o.minFilter=void 0!==r.minFilter?r.minFilter:Oa,o.anisotropy=void 0!==r.anisotropy?r.anisotropy:1,void 0!==r.format&&(o.format=r.format),void 0!==r.type&&(o.type=r.type),void 0!==r.mipmaps&&(o.mipmaps=r.mipmaps),1===r.mipmapCount&&(o.minFilter=Ua),o.needsUpdate=!0,t&&t(o,r))},r,i),o}}),Object.assign(xi.prototype,{crossOrigin:\"Anonymous\",load:function(e,t,r,i){void 0===e&&(e=\"\"),void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e);var n=this,o=lc.get(e);if(void 0!==o)return n.manager.itemStart(e),setTimeout(function(){t&&t(o),n.manager.itemEnd(e)},0),o;var a=document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"img\");return a.addEventListener(\"load\",function(){lc.add(e,this),t&&t(this),n.manager.itemEnd(e)},!1),a.addEventListener(\"error\",function(t){i&&i(t),n.manager.itemEnd(e),n.manager.itemError(e)},!1),\"data:\"!==e.substr(0,5)&&void 0!==this.crossOrigin&&(a.crossOrigin=this.crossOrigin),n.manager.itemStart(e),a.src=e,a},setCrossOrigin:function(e){return this.crossOrigin=e,this},setPath:function(e){return this.path=e,this}}),Object.assign(_i.prototype,{crossOrigin:\"Anonymous\",load:function(e,t,r,i){var n=new ce,o=new xi(this.manager);o.setCrossOrigin(this.crossOrigin),o.setPath(this.path);for(var a=0,s=0;s<e.length;++s)!function(r){o.load(e[r],function(e){n.images[r]=e,6==++a&&(n.needsUpdate=!0,t&&t(n))},void 0,i)}(s);return n},setCrossOrigin:function(e){return this.crossOrigin=e,this},setPath:function(e){return this.path=e,this}}),Object.assign(bi.prototype,{crossOrigin:\"Anonymous\",load:function(e,t,r,i){var n=new l,o=new xi(this.manager);return o.setCrossOrigin(this.crossOrigin),o.setPath(this.path),o.load(e,function(r){n.image=r;var i=e.search(/\\.(jpg|jpeg)$/)>0||0===e.search(/^data\\:image\\/jpeg/);n.format=i?Za:Ja,n.needsUpdate=!0,void 0!==t&&t(n)},r,i),n},setCrossOrigin:function(e){return this.crossOrigin=e,this},setPath:function(e){return this.path=e,this}}),Object.assign(wi.prototype,{getPoint:function(){return console.warn(\"THREE.Curve: .getPoint() not implemented.\"),null},getPointAt:function(e,t){var r=this.getUtoTmapping(e);return this.getPoint(r,t)},getPoints:function(e){void 0===e&&(e=5);for(var t=[],r=0;r<=e;r++)t.push(this.getPoint(r/e));return t},getSpacedPoints:function(e){void 0===e&&(e=5);for(var t=[],r=0;r<=e;r++)t.push(this.getPointAt(r/e));return t},getLength:function(){var e=this.getLengths();return e[e.length-1]},getLengths:function(e){if(void 0===e&&(e=this.arcLengthDivisions),this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var t,r,i=[],n=this.getPoint(0),o=0;for(i.push(0),r=1;r<=e;r++)t=this.getPoint(r/e),o+=t.distanceTo(n),i.push(o),n=t;return this.cacheArcLengths=i,i},updateArcLengths:function(){this.needsUpdate=!0,this.getLengths()},getUtoTmapping:function(e,t){var r,i=this.getLengths(),n=0,o=i.length;r=t||e*i[o-1];for(var a,s=0,c=o-1;s<=c;)if(n=Math.floor(s+(c-s)/2),(a=i[n]-r)<0)s=n+1;else{if(!(a>0)){c=n;break}c=n-1}if(n=c,i[n]===r)return n/(o-1);var l=i[n];return(n+(r-l)/(i[n+1]-l))/(o-1)},getTangent:function(e){var t=e-1e-4,r=e+1e-4;t<0&&(t=0),r>1&&(r=1);var i=this.getPoint(t);return this.getPoint(r).clone().sub(i).normalize()},getTangentAt:function(e){var t=this.getUtoTmapping(e);return this.getTangent(t)},computeFrenetFrames:function(e,t){var r,i,n,a=new s,c=[],l=[],u=[],h=new s,d=new o;for(r=0;r<=e;r++)i=r/e,c[r]=this.getTangentAt(i),c[r].normalize();l[0]=new s,u[0]=new s;var p=Number.MAX_VALUE,f=Math.abs(c[0].x),m=Math.abs(c[0].y),v=Math.abs(c[0].z);for(f<=p&&(p=f,a.set(1,0,0)),m<=p&&(p=m,a.set(0,1,0)),v<=p&&a.set(0,0,1),h.crossVectors(c[0],a).normalize(),l[0].crossVectors(c[0],h),u[0].crossVectors(c[0],l[0]),r=1;r<=e;r++)l[r]=l[r-1].clone(),u[r]=u[r-1].clone(),h.crossVectors(c[r-1],c[r]),h.length()>Number.EPSILON&&(h.normalize(),n=Math.acos(zs.clamp(c[r-1].dot(c[r]),-1,1)),l[r].applyMatrix4(d.makeRotationAxis(h,n))),u[r].crossVectors(c[r],l[r]);if(!0===t)for(n=Math.acos(zs.clamp(l[0].dot(l[e]),-1,1)),n/=e,c[0].dot(h.crossVectors(l[0],l[e]))>0&&(n=-n),r=1;r<=e;r++)l[r].applyMatrix4(d.makeRotationAxis(c[r],n*r)),u[r].crossVectors(c[r],l[r]);return{tangents:c,normals:l,binormals:u}},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.arcLengthDivisions=e.arcLengthDivisions,this},toJSON:function(){var e={metadata:{version:4.5,type:\"Curve\",generator:\"Curve.toJSON\"}};return e.arcLengthDivisions=this.arcLengthDivisions,e.type=this.type,e},fromJSON:function(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}}),Mi.prototype=Object.create(wi.prototype),Mi.prototype.constructor=Mi,Mi.prototype.isEllipseCurve=!0,Mi.prototype.getPoint=function(e,t){for(var r=t||new n,i=2*Math.PI,o=this.aEndAngle-this.aStartAngle,a=Math.abs(o)<Number.EPSILON;o<0;)o+=i;for(;o>i;)o-=i;o<Number.EPSILON&&(o=a?0:i),!0!==this.aClockwise||a||(o===i?o=-i:o-=i);var s=this.aStartAngle+e*o,c=this.aX+this.xRadius*Math.cos(s),l=this.aY+this.yRadius*Math.sin(s);if(0!==this.aRotation){var u=Math.cos(this.aRotation),h=Math.sin(this.aRotation),d=c-this.aX,p=l-this.aY;c=d*u-p*h+this.aX,l=d*h+p*u+this.aY}return r.set(c,l)},Mi.prototype.copy=function(e){return wi.prototype.copy.call(this,e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this},Mi.prototype.toJSON=function(){var e=wi.prototype.toJSON.call(this);return e.aX=this.aX,e.aY=this.aY,e.xRadius=this.xRadius,e.yRadius=this.yRadius,e.aStartAngle=this.aStartAngle,e.aEndAngle=this.aEndAngle,e.aClockwise=this.aClockwise,e.aRotation=this.aRotation,e},Mi.prototype.fromJSON=function(e){return wi.prototype.fromJSON.call(this,e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this},Ei.prototype=Object.create(Mi.prototype),Ei.prototype.constructor=Ei,Ei.prototype.isArcCurve=!0;var dc=new s,pc=new Si,fc=new Si,mc=new Si;Ti.prototype=Object.create(wi.prototype),Ti.prototype.constructor=Ti,Ti.prototype.isCatmullRomCurve3=!0,Ti.prototype.getPoint=function(e,t){var r=t||new s,i=this.points,n=i.length,o=(n-(this.closed?0:1))*e,a=Math.floor(o),c=o-a;this.closed?a+=a>0?0:(Math.floor(Math.abs(a)/n)+1)*n:0===c&&a===n-1&&(a=n-2,c=1);var l,u,h,d;if(this.closed||a>0?l=i[(a-1)%n]:(dc.subVectors(i[0],i[1]).add(i[0]),l=dc),u=i[a%n],h=i[(a+1)%n],this.closed||a+2<n?d=i[(a+2)%n]:(dc.subVectors(i[n-1],i[n-2]).add(i[n-1]),d=dc),\"centripetal\"===this.curveType||\"chordal\"===this.curveType){var p=\"chordal\"===this.curveType?.5:.25,f=Math.pow(l.distanceToSquared(u),p),m=Math.pow(u.distanceToSquared(h),p),v=Math.pow(h.distanceToSquared(d),p);m<1e-4&&(m=1),f<1e-4&&(f=m),v<1e-4&&(v=m),pc.initNonuniformCatmullRom(l.x,u.x,h.x,d.x,f,m,v),fc.initNonuniformCatmullRom(l.y,u.y,h.y,d.y,f,m,v),mc.initNonuniformCatmullRom(l.z,u.z,h.z,d.z,f,m,v)}else\"catmullrom\"===this.curveType&&(pc.initCatmullRom(l.x,u.x,h.x,d.x,this.tension),fc.initCatmullRom(l.y,u.y,h.y,d.y,this.tension),mc.initCatmullRom(l.z,u.z,h.z,d.z,this.tension));return r.set(pc.calc(c),fc.calc(c),mc.calc(c)),r},Ti.prototype.copy=function(e){wi.prototype.copy.call(this,e),this.points=[];for(var t=0,r=e.points.length;t<r;t++){var i=e.points[t];this.points.push(i.clone())}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this},Ti.prototype.toJSON=function(){var e=wi.prototype.toJSON.call(this);e.points=[];for(var t=0,r=this.points.length;t<r;t++){var i=this.points[t];e.points.push(i.toArray())}return e.closed=this.closed,e.curveType=this.curveType,e.tension=this.tension,e},Ti.prototype.fromJSON=function(e){wi.prototype.fromJSON.call(this,e),this.points=[];for(var t=0,r=e.points.length;t<r;t++){var i=e.points[t];this.points.push((new s).fromArray(i))}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this},Fi.prototype=Object.create(wi.prototype),Fi.prototype.constructor=Fi,Fi.prototype.isCubicBezierCurve=!0,Fi.prototype.getPoint=function(e,t){var r=t||new n,i=this.v0,o=this.v1,a=this.v2,s=this.v3;return r.set(Ni(e,i.x,o.x,a.x,s.x),Ni(e,i.y,o.y,a.y,s.y)),r},Fi.prototype.copy=function(e){return wi.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this},Fi.prototype.toJSON=function(){var e=wi.prototype.toJSON.call(this);return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e},Fi.prototype.fromJSON=function(e){return wi.prototype.fromJSON.call(this,e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this},zi.prototype=Object.create(wi.prototype),zi.prototype.constructor=zi,zi.prototype.isCubicBezierCurve3=!0,zi.prototype.getPoint=function(e,t){var r=t||new s,i=this.v0,n=this.v1,o=this.v2,a=this.v3;return r.set(Ni(e,i.x,n.x,o.x,a.x),Ni(e,i.y,n.y,o.y,a.y),Ni(e,i.z,n.z,o.z,a.z)),r},zi.prototype.copy=function(e){return wi.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this},zi.prototype.toJSON=function(){var e=wi.prototype.toJSON.call(this);return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e},zi.prototype.fromJSON=function(e){return wi.prototype.fromJSON.call(this,e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this},Bi.prototype=Object.create(wi.prototype),Bi.prototype.constructor=Bi,Bi.prototype.isLineCurve=!0,Bi.prototype.getPoint=function(e,t){var r=t||new n;return 1===e?r.copy(this.v2):(r.copy(this.v2).sub(this.v1),r.multiplyScalar(e).add(this.v1)),r},Bi.prototype.getPointAt=function(e,t){return this.getPoint(e,t)},Bi.prototype.getTangent=function(){return this.v2.clone().sub(this.v1).normalize()},Bi.prototype.copy=function(e){return wi.prototype.copy.call(this,e),this.v1.copy(e.v1),this.v2.copy(e.v2),this},Bi.prototype.toJSON=function(){var e=wi.prototype.toJSON.call(this);return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e},Bi.prototype.fromJSON=function(e){return wi.prototype.fromJSON.call(this,e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this},Gi.prototype=Object.create(wi.prototype),Gi.prototype.constructor=Gi,Gi.prototype.isLineCurve3=!0,Gi.prototype.getPoint=function(e,t){var r=t||new s;return 1===e?r.copy(this.v2):(r.copy(this.v2).sub(this.v1),r.multiplyScalar(e).add(this.v1)),r},Gi.prototype.getPointAt=function(e,t){return this.getPoint(e,t)},Gi.prototype.copy=function(e){return wi.prototype.copy.call(this,e),this.v1.copy(e.v1),this.v2.copy(e.v2),this},Gi.prototype.toJSON=function(){var e=wi.prototype.toJSON.call(this);return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e},Gi.prototype.fromJSON=function(e){return wi.prototype.fromJSON.call(this,e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this},Hi.prototype=Object.create(wi.prototype),Hi.prototype.constructor=Hi,Hi.prototype.isQuadraticBezierCurve=!0,Hi.prototype.getPoint=function(e,t){var r=t||new n,i=this.v0,o=this.v1,a=this.v2;return r.set(Pi(e,i.x,o.x,a.x),Pi(e,i.y,o.y,a.y)),r},Hi.prototype.copy=function(e){return wi.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this},Hi.prototype.toJSON=function(){var e=wi.prototype.toJSON.call(this);return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e},Hi.prototype.fromJSON=function(e){return wi.prototype.fromJSON.call(this,e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this},ji.prototype=Object.create(wi.prototype),ji.prototype.constructor=ji,ji.prototype.isQuadraticBezierCurve3=!0,ji.prototype.getPoint=function(e,t){var r=t||new s,i=this.v0,n=this.v1,o=this.v2;return r.set(Pi(e,i.x,n.x,o.x),Pi(e,i.y,n.y,o.y),Pi(e,i.z,n.z,o.z)),r},ji.prototype.copy=function(e){return wi.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this},ji.prototype.toJSON=function(){var e=wi.prototype.toJSON.call(this);return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e},ji.prototype.fromJSON=function(e){return wi.prototype.fromJSON.call(this,e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this},Vi.prototype=Object.create(wi.prototype),Vi.prototype.constructor=Vi,Vi.prototype.isSplineCurve=!0,Vi.prototype.getPoint=function(e,t){var r=t||new n,i=this.points,o=(i.length-1)*e,a=Math.floor(o),s=o-a,c=i[0===a?a:a-1],l=i[a],u=i[a>i.length-2?i.length-1:a+1],h=i[a>i.length-3?i.length-1:a+2];return r.set(Ai(s,c.x,l.x,u.x,h.x),Ai(s,c.y,l.y,u.y,h.y)),r},Vi.prototype.copy=function(e){wi.prototype.copy.call(this,e),this.points=[];for(var t=0,r=e.points.length;t<r;t++){var i=e.points[t];this.points.push(i.clone())}return this},Vi.prototype.toJSON=function(){var e=wi.prototype.toJSON.call(this);e.points=[];for(var t=0,r=this.points.length;t<r;t++){var i=this.points[t];e.points.push(i.toArray())}return e},Vi.prototype.fromJSON=function(e){wi.prototype.fromJSON.call(this,e),this.points=[];for(var t=0,r=e.points.length;t<r;t++){var i=e.points[t];this.points.push((new n).fromArray(i))}return this};var vc=Object.freeze({ArcCurve:Ei,CatmullRomCurve3:Ti,CubicBezierCurve:Fi,CubicBezierCurve3:zi,EllipseCurve:Mi,LineCurve:Bi,LineCurve3:Gi,QuadraticBezierCurve:Hi,QuadraticBezierCurve3:ji,SplineCurve:Vi});ki.prototype=Object.assign(Object.create(wi.prototype),{constructor:ki,add:function(e){this.curves.push(e)},closePath:function(){var e=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);e.equals(t)||this.curves.push(new Bi(t,e))},getPoint:function(e){for(var t=e*this.getLength(),r=this.getCurveLengths(),i=0;i<r.length;){if(r[i]>=t){var n=r[i]-t,o=this.curves[i],a=o.getLength(),s=0===a?0:1-n/a;return o.getPointAt(s)}i++}return null},getLength:function(){var e=this.getCurveLengths();return e[e.length-1]},updateArcLengths:function(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;for(var e=[],t=0,r=0,i=this.curves.length;r<i;r++)t+=this.curves[r].getLength(),e.push(t);return this.cacheLengths=e,e},getSpacedPoints:function(e){void 0===e&&(e=40);for(var t=[],r=0;r<=e;r++)t.push(this.getPoint(r/e));return this.autoClose&&t.push(t[0]),t},getPoints:function(e){e=e||12;for(var t,r=[],i=0,n=this.curves;i<n.length;i++)for(var o=n[i],a=o&&o.isEllipseCurve?2*e:o&&o.isLineCurve?1:o&&o.isSplineCurve?e*o.points.length:e,s=o.getPoints(a),c=0;c<s.length;c++){var l=s[c];t&&t.equals(l)||(r.push(l),t=l)}return this.autoClose&&r.length>1&&!r[r.length-1].equals(r[0])&&r.push(r[0]),r},copy:function(e){wi.prototype.copy.call(this,e),this.curves=[];for(var t=0,r=e.curves.length;t<r;t++){var i=e.curves[t];this.curves.push(i.clone())}return this.autoClose=e.autoClose,this},toJSON:function(){var e=wi.prototype.toJSON.call(this);e.autoClose=this.autoClose,e.curves=[];for(var t=0,r=this.curves.length;t<r;t++){var i=this.curves[t];e.curves.push(i.toJSON())}return e},fromJSON:function(e){wi.prototype.fromJSON.call(this,e),this.autoClose=e.autoClose,this.curves=[];for(var t=0,r=e.curves.length;t<r;t++){var i=e.curves[t];this.curves.push((new vc[i.type]).fromJSON(i))}return this}}),Wi.prototype=Object.assign(Object.create(ki.prototype),{constructor:Wi,setFromPoints:function(e){this.moveTo(e[0].x,e[0].y);for(var t=1,r=e.length;t<r;t++)this.lineTo(e[t].x,e[t].y)},moveTo:function(e,t){this.currentPoint.set(e,t)},lineTo:function(e,t){var r=new Bi(this.currentPoint.clone(),new n(e,t));this.curves.push(r),this.currentPoint.set(e,t)},quadraticCurveTo:function(e,t,r,i){var o=new Hi(this.currentPoint.clone(),new n(e,t),new n(r,i));this.curves.push(o),this.currentPoint.set(r,i)},bezierCurveTo:function(e,t,r,i,o,a){var s=new Fi(this.currentPoint.clone(),new n(e,t),new n(r,i),new n(o,a));this.curves.push(s),this.currentPoint.set(o,a)},splineThru:function(e){var t=[this.currentPoint.clone()].concat(e),r=new Vi(t);this.curves.push(r),this.currentPoint.copy(e[e.length-1])},arc:function(e,t,r,i,n,o){var a=this.currentPoint.x,s=this.currentPoint.y;this.absarc(e+a,t+s,r,i,n,o)},absarc:function(e,t,r,i,n,o){this.absellipse(e,t,r,r,i,n,o)},ellipse:function(e,t,r,i,n,o,a,s){var c=this.currentPoint.x,l=this.currentPoint.y;this.absellipse(e+c,t+l,r,i,n,o,a,s)},absellipse:function(e,t,r,i,n,o,a,s){var c=new Mi(e,t,r,i,n,o,a,s);if(this.curves.length>0){var l=c.getPoint(0);l.equals(this.currentPoint)||this.lineTo(l.x,l.y)}this.curves.push(c);var u=c.getPoint(1);this.currentPoint.copy(u)},copy:function(e){return ki.prototype.copy.call(this,e),this.currentPoint.copy(e.currentPoint),this},toJSON:function(){var e=ki.prototype.toJSON.call(this);return e.currentPoint=this.currentPoint.toArray(),e},fromJSON:function(e){return ki.prototype.fromJSON.call(this,e),this.currentPoint.fromArray(e.currentPoint),this}}),Xi.prototype=Object.assign(Object.create(Wi.prototype),{constructor:Xi,getPointsHoles:function(e){for(var t=[],r=0,i=this.holes.length;r<i;r++)t[r]=this.holes[r].getPoints(e);return t},extractPoints:function(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}},copy:function(e){Wi.prototype.copy.call(this,e),this.holes=[];for(var t=0,r=e.holes.length;t<r;t++){var i=e.holes[t];this.holes.push(i.clone())}return this},toJSON:function(){var e=Wi.prototype.toJSON.call(this);e.uuid=this.uuid,e.holes=[];for(var t=0,r=this.holes.length;t<r;t++){var i=this.holes[t];e.holes.push(i.toJSON())}return e},fromJSON:function(e){Wi.prototype.fromJSON.call(this,e),this.uuid=e.uuid,this.holes=[];for(var t=0,r=e.holes.length;t<r;t++){var i=e.holes[t];this.holes.push((new Wi).fromJSON(i))}return this}}),qi.prototype=Object.assign(Object.create(w.prototype),{constructor:qi,isLight:!0,copy:function(e){return w.prototype.copy.call(this,e),this.color.copy(e.color),this.intensity=e.intensity,this},toJSON:function(e){var t=w.prototype.toJSON.call(this,e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,void 0!==this.groundColor&&(t.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(t.object.distance=this.distance),void 0!==this.angle&&(t.object.angle=this.angle),void 0!==this.decay&&(t.object.decay=this.decay),void 0!==this.penumbra&&(t.object.penumbra=this.penumbra),void 0!==this.shadow&&(t.object.shadow=this.shadow.toJSON()),t}}),Yi.prototype=Object.assign(Object.create(qi.prototype),{constructor:Yi,isHemisphereLight:!0,copy:function(e){return qi.prototype.copy.call(this,e),this.groundColor.copy(e.groundColor),this}}),Object.assign(Zi.prototype,{copy:function(e){return this.camera=e.camera.clone(),this.bias=e.bias,this.radius=e.radius,this.mapSize.copy(e.mapSize),this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){var e={};return 0!==this.bias&&(e.bias=this.bias),1!==this.radius&&(e.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}}),Ji.prototype=Object.assign(Object.create(Zi.prototype),{constructor:Ji,isSpotLightShadow:!0,update:function(e){var t=this.camera,r=2*zs.RAD2DEG*e.angle,i=this.mapSize.width/this.mapSize.height,n=e.distance||t.far;r===t.fov&&i===t.aspect&&n===t.far||(t.fov=r,t.aspect=i,t.far=n,t.updateProjectionMatrix())}}),Ki.prototype=Object.assign(Object.create(qi.prototype),{constructor:Ki,isSpotLight:!0,copy:function(e){return qi.prototype.copy.call(this,e),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}),Qi.prototype=Object.assign(Object.create(qi.prototype),{constructor:Qi,isPointLight:!0,copy:function(e){return qi.prototype.copy.call(this,e),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}),$i.prototype=Object.assign(Object.create(Zi.prototype),{constructor:$i}),en.prototype=Object.assign(Object.create(qi.prototype),{constructor:en,isDirectionalLight:!0,copy:function(e){return qi.prototype.copy.call(this,e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}),tn.prototype=Object.assign(Object.create(qi.prototype),{constructor:tn,isAmbientLight:!0}),rn.prototype=Object.assign(Object.create(qi.prototype),{constructor:rn,isRectAreaLight:!0,copy:function(e){return qi.prototype.copy.call(this,e),this.width=e.width,this.height=e.height,this},toJSON:function(e){var t=qi.prototype.toJSON.call(this,e);return t.object.width=this.width,t.object.height=this.height,t}}),nn.prototype=Object.assign(Object.create(fn.prototype),{constructor:nn,ValueTypeName:\"string\",ValueBufferType:Array,DefaultInterpolation:2300,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),on.prototype=Object.assign(Object.create(fn.prototype),{constructor:on,ValueTypeName:\"bool\",ValueBufferType:Array,DefaultInterpolation:2300,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),Object.assign(an.prototype,{evaluate:function(e){var t=this.parameterPositions,r=this._cachedIndex,i=t[r],n=t[r-1];e:{t:{var o;r:{i:if(!(e<i)){for(var a=r+2;;){if(void 0===i){if(e<n)break i;return r=t.length,this._cachedIndex=r,this.afterEnd_(r-1,e,n)}if(r===a)break;if(n=i,i=t[++r],e<i)break t}o=t.length;break r}{if(e>=n)break e;var s=t[1];e<s&&(r=2,n=s);for(var a=r-2;;){if(void 0===n)return this._cachedIndex=0,this.beforeStart_(0,e,i);if(r===a)break;if(i=n,n=t[--r-1],e>=n)break t}o=r,r=0}}for(;r<o;){var c=r+o>>>1;e<t[c]?o=c:r=c+1}if(i=t[r],void 0===(n=t[r-1]))return this._cachedIndex=0,this.beforeStart_(0,e,i);if(void 0===i)return r=t.length,this._cachedIndex=r,this.afterEnd_(r-1,n,e)}this._cachedIndex=r,this.intervalChanged_(r,n,i)}return this.interpolate_(r,n,e,i)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(e){for(var t=this.resultBuffer,r=this.sampleValues,i=this.valueSize,n=e*i,o=0;o!==i;++o)t[o]=r[n+o];return t},interpolate_:function(){throw new Error(\"call to abstract method\")},intervalChanged_:function(){}}),\n//!\\ DECLARE ALIAS AFTER assign prototype !\nObject.assign(an.prototype,{beforeStart_:an.prototype.copySampleValue_,afterEnd_:an.prototype.copySampleValue_}),sn.prototype=Object.assign(Object.create(an.prototype),{constructor:sn,interpolate_:function(e,t,r,i){for(var n=this.resultBuffer,o=this.sampleValues,s=this.valueSize,c=e*s,l=(r-t)/(i-t),u=c+s;c!==u;c+=4)a.slerpFlat(n,0,o,c-s,o,c,l);return n}}),cn.prototype=Object.assign(Object.create(fn.prototype),{constructor:cn,ValueTypeName:\"quaternion\",DefaultInterpolation:2301,InterpolantFactoryMethodLinear:function(e){return new sn(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodSmooth:void 0}),ln.prototype=Object.assign(Object.create(fn.prototype),{constructor:ln,ValueTypeName:\"color\"}),un.prototype=Object.assign(Object.create(fn.prototype),{constructor:un,ValueTypeName:\"number\"}),hn.prototype=Object.assign(Object.create(an.prototype),{constructor:hn,DefaultSettings_:{endingStart:Ss,endingEnd:Ss},intervalChanged_:function(e,t,r){var i=this.parameterPositions,n=e-2,o=e+1,a=i[n],s=i[o];if(void 0===a)switch(this.getSettings_().endingStart){case 2401:n=e,a=2*t-r;break;case 2402:n=i.length-2,a=t+i[n]-i[n+1];break;default:n=e,a=r}if(void 0===s)switch(this.getSettings_().endingEnd){case 2401:o=e,s=2*r-t;break;case 2402:o=1,s=r+i[1]-i[0];break;default:o=e-1,s=t}var c=.5*(r-t),l=this.valueSize;this._weightPrev=c/(t-a),this._weightNext=c/(s-r),this._offsetPrev=n*l,this._offsetNext=o*l},interpolate_:function(e,t,r,i){for(var n=this.resultBuffer,o=this.sampleValues,a=this.valueSize,s=e*a,c=s-a,l=this._offsetPrev,u=this._offsetNext,h=this._weightPrev,d=this._weightNext,p=(r-t)/(i-t),f=p*p,m=f*p,v=-h*m+2*h*f-h*p,g=(1+h)*m+(-1.5-2*h)*f+(-.5+h)*p+1,y=(-1-d)*m+(1.5+d)*f+.5*p,x=d*m-d*f,_=0;_!==a;++_)n[_]=v*o[l+_]+g*o[c+_]+y*o[s+_]+x*o[u+_];return n}}),dn.prototype=Object.assign(Object.create(an.prototype),{constructor:dn,interpolate_:function(e,t,r,i){for(var n=this.resultBuffer,o=this.sampleValues,a=this.valueSize,s=e*a,c=s-a,l=(r-t)/(i-t),u=1-l,h=0;h!==a;++h)n[h]=o[c+h]*u+o[s+h]*l;return n}}),pn.prototype=Object.assign(Object.create(an.prototype),{constructor:pn,interpolate_:function(e){return this.copySampleValue_(e-1)}});var gc={arraySlice:function(e,t,r){return gc.isTypedArray(e)?new e.constructor(e.subarray(t,void 0!==r?r:e.length)):e.slice(t,r)},convertArray:function(e,t,r){return!e||!r&&e.constructor===t?e:\"number\"==typeof t.BYTES_PER_ELEMENT?new t(e):Array.prototype.slice.call(e)},isTypedArray:function(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)},getKeyframeOrder:function(e){function t(t,r){return e[t]-e[r]}for(var r=e.length,i=new Array(r),n=0;n!==r;++n)i[n]=n;return i.sort(t),i},sortedArray:function(e,t,r){for(var i=e.length,n=new e.constructor(i),o=0,a=0;a!==i;++o)for(var s=r[o]*t,c=0;c!==t;++c)n[a++]=e[s+c];return n},flattenJSON:function(e,t,r,i){for(var n=1,o=e[0];void 0!==o&&void 0===o[i];)o=e[n++];if(void 0!==o){var a=o[i];if(void 0!==a)if(Array.isArray(a))do{a=o[i],void 0!==a&&(t.push(o.time),r.push.apply(r,a)),o=e[n++]}while(void 0!==o);else if(void 0!==a.toArray)do{a=o[i],void 0!==a&&(t.push(o.time),a.toArray(r,r.length)),o=e[n++]}while(void 0!==o);else do{a=o[i],void 0!==a&&(t.push(o.time),r.push(a)),o=e[n++]}while(void 0!==o)}}};Object.assign(fn,{parse:function(e){if(void 0===e.type)throw new Error(\"THREE.KeyframeTrack: track type undefined, can not parse\");var t=fn._getTrackTypeForValueTypeName(e.type);if(void 0===e.times){var r=[],i=[];gc.flattenJSON(e.keys,r,i,\"value\"),e.times=r,e.values=i}return void 0!==t.parse?t.parse(e):new t(e.name,e.times,e.values,e.interpolation)},toJSON:function(e){var t,r=e.constructor;if(void 0!==r.toJSON)t=r.toJSON(e);else{t={name:e.name,times:gc.convertArray(e.times,Array),values:gc.convertArray(e.values,Array)};var i=e.getInterpolation();i!==e.DefaultInterpolation&&(t.interpolation=i)}return t.type=e.ValueTypeName,t},_getTrackTypeForValueTypeName:function(e){switch(e.toLowerCase()){case\"scalar\":case\"double\":case\"float\":case\"number\":case\"integer\":return un;case\"vector\":case\"vector2\":case\"vector3\":case\"vector4\":return mn;case\"color\":return ln;case\"quaternion\":return cn;case\"bool\":case\"boolean\":return on;case\"string\":return nn}throw new Error(\"THREE.KeyframeTrack: Unsupported typeName: \"+e)}}),Object.assign(fn.prototype,{constructor:fn,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:2301,InterpolantFactoryMethodDiscrete:function(e){return new pn(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodLinear:function(e){return new dn(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodSmooth:function(e){return new hn(this.times,this.values,this.getValueSize(),e)},setInterpolation:function(e){var t;switch(e){case 2300:t=this.InterpolantFactoryMethodDiscrete;break;case 2301:t=this.InterpolantFactoryMethodLinear;break;case 2302:t=this.InterpolantFactoryMethodSmooth}if(void 0===t){var r=\"unsupported interpolation for \"+this.ValueTypeName+\" keyframe track named \"+this.name;if(void 0===this.createInterpolant){if(e===this.DefaultInterpolation)throw new Error(r);this.setInterpolation(this.DefaultInterpolation)}return void console.warn(\"THREE.KeyframeTrack:\",r)}this.createInterpolant=t},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return 2300;case this.InterpolantFactoryMethodLinear:return 2301;case this.InterpolantFactoryMethodSmooth:return 2302}},getValueSize:function(){return this.values.length/this.times.length},shift:function(e){if(0!==e)for(var t=this.times,r=0,i=t.length;r!==i;++r)t[r]+=e;return this},scale:function(e){if(1!==e)for(var t=this.times,r=0,i=t.length;r!==i;++r)t[r]*=e;return this},trim:function(e,t){for(var r=this.times,i=r.length,n=0,o=i-1;n!==i&&r[n]<e;)++n;for(;-1!==o&&r[o]>t;)--o;if(++o,0!==n||o!==i){n>=o&&(o=Math.max(o,1),n=o-1);var a=this.getValueSize();this.times=gc.arraySlice(r,n,o),this.values=gc.arraySlice(this.values,n*a,o*a)}return this},validate:function(){var e=!0,t=this.getValueSize();t-Math.floor(t)!=0&&(console.error(\"THREE.KeyframeTrack: Invalid value size in track.\",this),e=!1);var r=this.times,i=this.values,n=r.length;0===n&&(console.error(\"THREE.KeyframeTrack: Track is empty.\",this),e=!1);for(var o=null,a=0;a!==n;a++){var s=r[a];if(\"number\"==typeof s&&isNaN(s)){console.error(\"THREE.KeyframeTrack: Time is not a valid number.\",this,a,s),e=!1;break}if(null!==o&&o>s){console.error(\"THREE.KeyframeTrack: Out of order keys.\",this,a,s,o),e=!1;break}o=s}if(void 0!==i&&gc.isTypedArray(i))for(var a=0,c=i.length;a!==c;++a){var l=i[a];if(isNaN(l)){console.error(\"THREE.KeyframeTrack: Value is not a valid number.\",this,a,l),e=!1;break}}return e},optimize:function(){for(var e=this.times,t=this.values,r=this.getValueSize(),i=2302===this.getInterpolation(),n=1,o=e.length-1,a=1;a<o;++a){var s=!1,c=e[a];if(c!==e[a+1]&&(1!==a||c!==c[0]))if(i)s=!0;else for(var l=a*r,u=l-r,h=l+r,d=0;d!==r;++d){var p=t[l+d];if(p!==t[u+d]||p!==t[h+d]){s=!0;break}}if(s){if(a!==n){e[n]=e[a];for(var f=a*r,m=n*r,d=0;d!==r;++d)t[m+d]=t[f+d]}++n}}if(o>0){e[n]=e[o];for(var f=o*r,m=n*r,d=0;d!==r;++d)t[m+d]=t[f+d];++n}return n!==e.length&&(this.times=gc.arraySlice(e,0,n),this.values=gc.arraySlice(t,0,n*r)),this}}),mn.prototype=Object.assign(Object.create(fn.prototype),{constructor:mn,ValueTypeName:\"vector\"}),Object.assign(vn,{parse:function(e){for(var t=[],r=e.tracks,i=1/(e.fps||1),n=0,o=r.length;n!==o;++n)t.push(fn.parse(r[n]).scale(i));return new vn(e.name,e.duration,t)},toJSON:function(e){for(var t=[],r=e.tracks,i={name:e.name,duration:e.duration,tracks:t},n=0,o=r.length;n!==o;++n)t.push(fn.toJSON(r[n]));return i},CreateFromMorphTargetSequence:function(e,t,r,i){for(var n=t.length,o=[],a=0;a<n;a++){var s=[],c=[];s.push((a+n-1)%n,a,(a+1)%n),c.push(0,1,0);var l=gc.getKeyframeOrder(s);s=gc.sortedArray(s,1,l),c=gc.sortedArray(c,1,l),i||0!==s[0]||(s.push(n),c.push(c[0])),o.push(new un(\".morphTargetInfluences[\"+t[a].name+\"]\",s,c).scale(1/r))}return new vn(e,-1,o)},findByName:function(e,t){var r=e;if(!Array.isArray(e)){var i=e;r=i.geometry&&i.geometry.animations||i.animations}for(var n=0;n<r.length;n++)if(r[n].name===t)return r[n];return null},CreateClipsFromMorphTargetSequences:function(e,t,r){for(var i={},n=/^([\\w-]*?)([\\d]+)$/,o=0,a=e.length;o<a;o++){var s=e[o],c=s.name.match(n);if(c&&c.length>1){var l=c[1],u=i[l];u||(i[l]=u=[]),u.push(s)}}var h=[];for(var l in i)h.push(vn.CreateFromMorphTargetSequence(l,i[l],t,r));return h},parseAnimation:function(e,t){if(!e)return console.error(\"THREE.AnimationClip: No animation in JSONLoader data.\"),null;for(var r=function(e,t,r,i,n){if(0!==r.length){var o=[],a=[];gc.flattenJSON(r,o,a,i),0!==o.length&&n.push(new e(t,o,a))}},i=[],n=e.name||\"default\",o=e.length||-1,a=e.fps||30,s=e.hierarchy||[],c=0;c<s.length;c++){var l=s[c].keys;if(l&&0!==l.length)if(l[0].morphTargets){for(var u={},h=0;h<l.length;h++)if(l[h].morphTargets)for(var d=0;d<l[h].morphTargets.length;d++)u[l[h].morphTargets[d]]=-1;for(var p in u){for(var f=[],m=[],d=0;d!==l[h].morphTargets.length;++d){var v=l[h];f.push(v.time),m.push(v.morphTarget===p?1:0)}i.push(new un(\".morphTargetInfluence[\"+p+\"]\",f,m))}o=u.length*(a||1)}else{var g=\".bones[\"+t[c].name+\"]\";r(mn,g+\".position\",l,\"pos\",i),r(cn,g+\".quaternion\",l,\"rot\",i),r(mn,g+\".scale\",l,\"scl\",i)}}return 0===i.length?null:new vn(n,o,i)}}),Object.assign(vn.prototype,{resetDuration:function(){for(var e=this.tracks,t=0,r=0,i=e.length;r!==i;++r){var n=this.tracks[r];t=Math.max(t,n.times[n.times.length-1])}this.duration=t},trim:function(){for(var e=0;e<this.tracks.length;e++)this.tracks[e].trim(0,this.duration);return this},optimize:function(){for(var e=0;e<this.tracks.length;e++)this.tracks[e].optimize();return this}}),Object.assign(gn.prototype,{load:function(e,t,r,i){var n=this;new vi(n.manager).load(e,function(e){t(n.parse(JSON.parse(e)))},r,i)},setTextures:function(e){this.textures=e},parse:function(e){function t(e){return void 0===r[e]&&console.warn(\"THREE.MaterialLoader: Undefined texture\",e),r[e]}var r=this.textures,i=new cc[e.type];if(void 0!==e.uuid&&(i.uuid=e.uuid),void 0!==e.name&&(i.name=e.name),void 0!==e.color&&i.color.setHex(e.color),void 0!==e.roughness&&(i.roughness=e.roughness),void 0!==e.metalness&&(i.metalness=e.metalness),void 0!==e.emissive&&i.emissive.setHex(e.emissive),void 0!==e.specular&&i.specular.setHex(e.specular),void 0!==e.shininess&&(i.shininess=e.shininess),void 0!==e.clearCoat&&(i.clearCoat=e.clearCoat),void 0!==e.clearCoatRoughness&&(i.clearCoatRoughness=e.clearCoatRoughness),void 0!==e.uniforms&&(i.uniforms=e.uniforms),void 0!==e.vertexShader&&(i.vertexShader=e.vertexShader),void 0!==e.fragmentShader&&(i.fragmentShader=e.fragmentShader),void 0!==e.vertexColors&&(i.vertexColors=e.vertexColors),void 0!==e.fog&&(i.fog=e.fog),void 0!==e.flatShading&&(i.flatShading=e.flatShading),void 0!==e.blending&&(i.blending=e.blending),void 0!==e.side&&(i.side=e.side),void 0!==e.opacity&&(i.opacity=e.opacity),void 0!==e.transparent&&(i.transparent=e.transparent),void 0!==e.alphaTest&&(i.alphaTest=e.alphaTest),void 0!==e.depthTest&&(i.depthTest=e.depthTest),void 0!==e.depthWrite&&(i.depthWrite=e.depthWrite),void 0!==e.colorWrite&&(i.colorWrite=e.colorWrite),void 0!==e.wireframe&&(i.wireframe=e.wireframe),void 0!==e.wireframeLinewidth&&(i.wireframeLinewidth=e.wireframeLinewidth),void 0!==e.wireframeLinecap&&(i.wireframeLinecap=e.wireframeLinecap),void 0!==e.wireframeLinejoin&&(i.wireframeLinejoin=e.wireframeLinejoin),void 0!==e.rotation&&(i.rotation=e.rotation),1!==e.linewidth&&(i.linewidth=e.linewidth),void 0!==e.dashSize&&(i.dashSize=e.dashSize),void 0!==e.gapSize&&(i.gapSize=e.gapSize),void 0!==e.scale&&(i.scale=e.scale),void 0!==e.polygonOffset&&(i.polygonOffset=e.polygonOffset),void 0!==e.polygonOffsetFactor&&(i.polygonOffsetFactor=e.polygonOffsetFactor),void 0!==e.polygonOffsetUnits&&(i.polygonOffsetUnits=e.polygonOffsetUnits),void 0!==e.skinning&&(i.skinning=e.skinning),void 0!==e.morphTargets&&(i.morphTargets=e.morphTargets),void 0!==e.dithering&&(i.dithering=e.dithering),void 0!==e.visible&&(i.visible=e.visible),void 0!==e.userData&&(i.userData=e.userData),void 0!==e.shading&&(i.flatShading=1===e.shading),void 0!==e.size&&(i.size=e.size),void 0!==e.sizeAttenuation&&(i.sizeAttenuation=e.sizeAttenuation),void 0!==e.map&&(i.map=t(e.map)),void 0!==e.alphaMap&&(i.alphaMap=t(e.alphaMap),i.transparent=!0),void 0!==e.bumpMap&&(i.bumpMap=t(e.bumpMap)),void 0!==e.bumpScale&&(i.bumpScale=e.bumpScale),void 0!==e.normalMap&&(i.normalMap=t(e.normalMap)),void 0!==e.normalScale){var o=e.normalScale;!1===Array.isArray(o)&&(o=[o,o]),i.normalScale=(new n).fromArray(o)}return void 0!==e.displacementMap&&(i.displacementMap=t(e.displacementMap)),void 0!==e.displacementScale&&(i.displacementScale=e.displacementScale),void 0!==e.displacementBias&&(i.displacementBias=e.displacementBias),void 0!==e.roughnessMap&&(i.roughnessMap=t(e.roughnessMap)),void 0!==e.metalnessMap&&(i.metalnessMap=t(e.metalnessMap)),void 0!==e.emissiveMap&&(i.emissiveMap=t(e.emissiveMap)),void 0!==e.emissiveIntensity&&(i.emissiveIntensity=e.emissiveIntensity),void 0!==e.specularMap&&(i.specularMap=t(e.specularMap)),void 0!==e.envMap&&(i.envMap=t(e.envMap)),void 0!==e.reflectivity&&(i.reflectivity=e.reflectivity),void 0!==e.lightMap&&(i.lightMap=t(e.lightMap)),void 0!==e.lightMapIntensity&&(i.lightMapIntensity=e.lightMapIntensity),void 0!==e.aoMap&&(i.aoMap=t(e.aoMap)),void 0!==e.aoMapIntensity&&(i.aoMapIntensity=e.aoMapIntensity),void 0!==e.gradientMap&&(i.gradientMap=t(e.gradientMap)),i}}),Object.assign(yn.prototype,{load:function(e,t,r,i){var n=this;new vi(n.manager).load(e,function(e){t(n.parse(JSON.parse(e)))},r,i)},parse:function(e){var t=new B,r=e.data.index;if(void 0!==r){var i=new yc[r.type](r.array);t.setIndex(new A(i,1))}var n=e.data.attributes;for(var o in n){var a=n[o],i=new yc[a.type](a.array);t.addAttribute(o,new A(i,a.itemSize,a.normalized))}var c=e.data.groups||e.data.drawcalls||e.data.offsets;if(void 0!==c)for(var l=0,u=c.length;l!==u;++l){var h=c[l];t.addGroup(h.start,h.count,h.materialIndex)}var d=e.data.boundingSphere;if(void 0!==d){var p=new s;void 0!==d.center&&p.fromArray(d.center),t.boundingSphere=new m(p,d.radius)}return t}});var yc={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:\"undefined\"!=typeof Uint8ClampedArray?Uint8ClampedArray:Uint8Array,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};xn.Handlers={handlers:[],add:function(e,t){this.handlers.push(e,t)},get:function(e){for(var t=this.handlers,r=0,i=t.length;r<i;r+=2){var n=t[r],o=t[r+1];if(n.test(e))return o}return null}},Object.assign(xn.prototype,{crossOrigin:void 0,onLoadStart:function(){},onLoadProgress:function(){},onLoadComplete:function(){},initMaterials:function(e,t,r){for(var i=[],n=0;n<e.length;++n)i[n]=this.createMaterial(e[n],t,r);return i},createMaterial:function(){var e={NoBlending:No,NormalBlending:Fo,AdditiveBlending:zo,SubtractiveBlending:Bo,MultiplyBlending:Go,CustomBlending:Ho},t=new y,r=new bi,i=new gn;return function(n,o,a){function s(e,t,i,n,s){var l,u=o+e,h=xn.Handlers.get(u);null!==h?l=h.load(u):(r.setCrossOrigin(a),l=r.load(u)),void 0!==t&&(l.repeat.fromArray(t),1!==t[0]&&(l.wrapS=Aa),1!==t[1]&&(l.wrapT=Aa)),void 0!==i&&l.offset.fromArray(i),void 0!==n&&(\"repeat\"===n[0]&&(l.wrapS=Aa),\"mirror\"===n[0]&&(l.wrapS=Ca),\"repeat\"===n[1]&&(l.wrapT=Aa),\"mirror\"===n[1]&&(l.wrapT=Ca)),void 0!==s&&(l.anisotropy=s);var d=zs.generateUUID();return c[d]=l,d}var c={},l={uuid:zs.generateUUID(),type:\"MeshLambertMaterial\"};for(var u in n){var h=n[u];switch(u){case\"DbgColor\":case\"DbgIndex\":case\"opticalDensity\":case\"illumination\":break;case\"DbgName\":l.name=h;break;case\"blending\":l.blending=e[h];break;case\"colorAmbient\":case\"mapAmbient\":console.warn(\"THREE.Loader.createMaterial:\",u,\"is no longer supported.\");break;case\"colorDiffuse\":l.color=t.fromArray(h).getHex();break;case\"colorSpecular\":l.specular=t.fromArray(h).getHex();break;case\"colorEmissive\":l.emissive=t.fromArray(h).getHex();break;case\"specularCoef\":l.shininess=h;break;case\"shading\":\"basic\"===h.toLowerCase()&&(l.type=\"MeshBasicMaterial\"),\"phong\"===h.toLowerCase()&&(l.type=\"MeshPhongMaterial\"),\"standard\"===h.toLowerCase()&&(l.type=\"MeshStandardMaterial\");break;case\"mapDiffuse\":l.map=s(h,n.mapDiffuseRepeat,n.mapDiffuseOffset,n.mapDiffuseWrap,n.mapDiffuseAnisotropy);break;case\"mapDiffuseRepeat\":case\"mapDiffuseOffset\":case\"mapDiffuseWrap\":case\"mapDiffuseAnisotropy\":break;case\"mapEmissive\":l.emissiveMap=s(h,n.mapEmissiveRepeat,n.mapEmissiveOffset,n.mapEmissiveWrap,n.mapEmissiveAnisotropy);break;case\"mapEmissiveRepeat\":case\"mapEmissiveOffset\":case\"mapEmissiveWrap\":case\"mapEmissiveAnisotropy\":break;case\"mapLight\":l.lightMap=s(h,n.mapLightRepeat,n.mapLightOffset,n.mapLightWrap,n.mapLightAnisotropy);break;case\"mapLightRepeat\":case\"mapLightOffset\":case\"mapLightWrap\":case\"mapLightAnisotropy\":break;case\"mapAO\":l.aoMap=s(h,n.mapAORepeat,n.mapAOOffset,n.mapAOWrap,n.mapAOAnisotropy);break;case\"mapAORepeat\":case\"mapAOOffset\":case\"mapAOWrap\":case\"mapAOAnisotropy\":break;case\"mapBump\":l.bumpMap=s(h,n.mapBumpRepeat,n.mapBumpOffset,n.mapBumpWrap,n.mapBumpAnisotropy);break;case\"mapBumpScale\":l.bumpScale=h;break;case\"mapBumpRepeat\":case\"mapBumpOffset\":case\"mapBumpWrap\":case\"mapBumpAnisotropy\":break;case\"mapNormal\":l.normalMap=s(h,n.mapNormalRepeat,n.mapNormalOffset,n.mapNormalWrap,n.mapNormalAnisotropy);break;case\"mapNormalFactor\":l.normalScale=h;break;case\"mapNormalRepeat\":case\"mapNormalOffset\":case\"mapNormalWrap\":case\"mapNormalAnisotropy\":break;case\"mapSpecular\":l.specularMap=s(h,n.mapSpecularRepeat,n.mapSpecularOffset,n.mapSpecularWrap,n.mapSpecularAnisotropy);break;case\"mapSpecularRepeat\":case\"mapSpecularOffset\":case\"mapSpecularWrap\":case\"mapSpecularAnisotropy\":break;case\"mapMetalness\":l.metalnessMap=s(h,n.mapMetalnessRepeat,n.mapMetalnessOffset,n.mapMetalnessWrap,n.mapMetalnessAnisotropy);break;case\"mapMetalnessRepeat\":case\"mapMetalnessOffset\":case\"mapMetalnessWrap\":case\"mapMetalnessAnisotropy\":break;case\"mapRoughness\":l.roughnessMap=s(h,n.mapRoughnessRepeat,n.mapRoughnessOffset,n.mapRoughnessWrap,n.mapRoughnessAnisotropy);break;case\"mapRoughnessRepeat\":case\"mapRoughnessOffset\":case\"mapRoughnessWrap\":case\"mapRoughnessAnisotropy\":break;case\"mapAlpha\":l.alphaMap=s(h,n.mapAlphaRepeat,n.mapAlphaOffset,n.mapAlphaWrap,n.mapAlphaAnisotropy);break;case\"mapAlphaRepeat\":case\"mapAlphaOffset\":case\"mapAlphaWrap\":case\"mapAlphaAnisotropy\":break;case\"flipSided\":l.side=Po;break;case\"doubleSided\":l.side=Do;break;case\"transparency\":console.warn(\"THREE.Loader.createMaterial: transparency has been renamed to opacity\"),l.opacity=h;break;case\"depthTest\":case\"depthWrite\":case\"colorWrite\":case\"opacity\":case\"reflectivity\":case\"transparent\":case\"visible\":case\"wireframe\":l[u]=h;break;case\"vertexColors\":!0===h&&(l.vertexColors=Oo),\"face\"===h&&(l.vertexColors=Io);break;default:console.error(\"THREE.Loader.createMaterial: Unsupported\",u,h)}}return\"MeshBasicMaterial\"===l.type&&delete l.emissive,\"MeshPhongMaterial\"!==l.type&&delete l.specular,l.opacity<1&&(l.transparent=!0),i.setTextures(c),i.parse(l)}}()});var xc={decodeText:function(e){if(\"undefined\"!=typeof TextDecoder)return(new TextDecoder).decode(e);for(var t=\"\",r=0,i=e.length;r<i;r++)t+=String.fromCharCode(e[r]);return decodeURIComponent(escape(t))},extractUrlBase:function(e){var t=e.lastIndexOf(\"/\");return-1===t?\"./\":e.substr(0,t+1)}};Object.assign(_n.prototype,{load:function(e,t,r,i){var n=this,o=this.texturePath&&\"string\"==typeof this.texturePath?this.texturePath:xc.extractUrlBase(e),a=new vi(this.manager);a.setWithCredentials(this.withCredentials),a.load(e,function(r){var i=JSON.parse(r),a=i.metadata;if(void 0!==a){var s=a.type;if(void 0!==s&&\"object\"===s.toLowerCase())return void console.error(\"THREE.JSONLoader: \"+e+\" should be loaded with THREE.ObjectLoader instead.\")}var c=n.parse(i,o);t(c.geometry,c.materials)},r,i)},setTexturePath:function(e){this.texturePath=e},parse:function(){function e(e,t){function r(e,t){return e&1<<t}var i,o,a,c,l,u,h,d,p,f,m,v,g,x,_,b,w,M,E,T,A,L,C,R,P,D,U,I=e.faces,O=e.vertices,N=e.normals,F=e.colors,z=e.scale,B=0;if(void 0!==e.uvs){for(i=0;i<e.uvs.length;i++)e.uvs[i].length&&B++;for(i=0;i<B;i++)t.faceVertexUvs[i]=[]}for(c=0,l=O.length;c<l;)M=new s,M.x=O[c++]*z,M.y=O[c++]*z,M.z=O[c++]*z,t.vertices.push(M);for(c=0,l=I.length;c<l;)if(f=I[c++],m=r(f,0),v=r(f,1),g=r(f,3),x=r(f,4),_=r(f,5),b=r(f,6),w=r(f,7),m){if(T=new S,T.a=I[c],T.b=I[c+1],T.c=I[c+3],A=new S,A.a=I[c+1],A.b=I[c+2],A.c=I[c+3],c+=4,v&&(p=I[c++],T.materialIndex=p,A.materialIndex=p),a=t.faces.length,g)for(i=0;i<B;i++)for(R=e.uvs[i],t.faceVertexUvs[i][a]=[],t.faceVertexUvs[i][a+1]=[],o=0;o<4;o++)d=I[c++],D=R[2*d],U=R[2*d+1],P=new n(D,U),2!==o&&t.faceVertexUvs[i][a].push(P),0!==o&&t.faceVertexUvs[i][a+1].push(P);if(x&&(h=3*I[c++],T.normal.set(N[h++],N[h++],N[h]),A.normal.copy(T.normal)),_)for(i=0;i<4;i++)h=3*I[c++],C=new s(N[h++],N[h++],N[h]),2!==i&&T.vertexNormals.push(C),0!==i&&A.vertexNormals.push(C);if(b&&(u=I[c++],L=F[u],T.color.setHex(L),A.color.setHex(L)),w)for(i=0;i<4;i++)u=I[c++],L=F[u],2!==i&&T.vertexColors.push(new y(L)),0!==i&&A.vertexColors.push(new y(L));t.faces.push(T),t.faces.push(A)}else{if(E=new S,E.a=I[c++],E.b=I[c++],E.c=I[c++],v&&(p=I[c++],E.materialIndex=p),a=t.faces.length,g)for(i=0;i<B;i++)for(R=e.uvs[i],t.faceVertexUvs[i][a]=[],o=0;o<3;o++)d=I[c++],D=R[2*d],U=R[2*d+1],P=new n(D,U),t.faceVertexUvs[i][a].push(P);if(x&&(h=3*I[c++],E.normal.set(N[h++],N[h++],N[h])),_)for(i=0;i<3;i++)h=3*I[c++],C=new s(N[h++],N[h++],N[h]),E.vertexNormals.push(C);if(b&&(u=I[c++],E.color.setHex(F[u])),w)for(i=0;i<3;i++)u=I[c++],E.vertexColors.push(new y(F[u]));t.faces.push(E)}}function t(e,t){var r=void 0!==e.influencesPerVertex?e.influencesPerVertex:2;if(e.skinWeights)for(var i=0,n=e.skinWeights.length;i<n;i+=r){var o=e.skinWeights[i],a=r>1?e.skinWeights[i+1]:0,s=r>2?e.skinWeights[i+2]:0,c=r>3?e.skinWeights[i+3]:0;t.skinWeights.push(new u(o,a,s,c))}if(e.skinIndices)for(var i=0,n=e.skinIndices.length;i<n;i+=r){var l=e.skinIndices[i],h=r>1?e.skinIndices[i+1]:0,d=r>2?e.skinIndices[i+2]:0,p=r>3?e.skinIndices[i+3]:0;t.skinIndices.push(new u(l,h,d,p))}t.bones=e.bones,t.bones&&t.bones.length>0&&(t.skinWeights.length!==t.skinIndices.length||t.skinIndices.length!==t.vertices.length)&&console.warn(\"When skinning, number of vertices (\"+t.vertices.length+\"), skinIndices (\"+t.skinIndices.length+\"), and skinWeights (\"+t.skinWeights.length+\") should match.\")}function r(e,t){var r=e.scale;if(void 0!==e.morphTargets)for(var i=0,n=e.morphTargets.length;i<n;i++){t.morphTargets[i]={},t.morphTargets[i].name=e.morphTargets[i].name,t.morphTargets[i].vertices=[];for(var o=t.morphTargets[i].vertices,a=e.morphTargets[i].vertices,c=0,l=a.length;c<l;c+=3){var u=new s;u.x=a[c]*r,u.y=a[c+1]*r,u.z=a[c+2]*r,o.push(u)}}if(void 0!==e.morphColors&&e.morphColors.length>0){console.warn('THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.');for(var h=t.faces,d=e.morphColors[0].colors,i=0,n=h.length;i<n;i++)h[i].color.fromArray(d,3*i)}}function i(e,t){var r=[],i=[];void 0!==e.animation&&i.push(e.animation),void 0!==e.animations&&(e.animations.length?i=i.concat(e.animations):i.push(e.animations));for(var n=0;n<i.length;n++){var o=vn.parseAnimation(i[n],t.bones);o&&r.push(o)}if(t.morphTargets){var a=vn.CreateClipsFromMorphTargetSequences(t.morphTargets,10);r=r.concat(a)}r.length>0&&(t.animations=r)}return function(n,o){void 0!==n.data&&(n=n.data),void 0!==n.scale?n.scale=1/n.scale:n.scale=1;var a=new T;return e(n,a),t(n,a),r(n,a),i(n,a),a.computeFaceNormals(),a.computeBoundingSphere(),void 0===n.materials||0===n.materials.length?{geometry:a}:{geometry:a,materials:xn.prototype.initMaterials(n.materials,o,this.crossOrigin)}}}()}),Object.assign(bn.prototype,{load:function(e,t,r,i){\"\"===this.texturePath&&(this.texturePath=e.substring(0,e.lastIndexOf(\"/\")+1));var n=this;new vi(n.manager).load(e,function(r){var o=null;try{o=JSON.parse(r)}catch(t){return void 0!==i&&i(t),void console.error(\"THREE:ObjectLoader: Can't parse \"+e+\".\",t.message)}var a=o.metadata;if(void 0===a||void 0===a.type||\"geometry\"===a.type.toLowerCase())return void console.error(\"THREE.ObjectLoader: Can't load \"+e+\". Use THREE.JSONLoader instead.\");n.parse(o,t)},r,i)},setTexturePath:function(e){this.texturePath=e},setCrossOrigin:function(e){this.crossOrigin=e},parse:function(e,t){var r=this.parseShape(e.shapes),i=this.parseGeometries(e.geometries,r),n=this.parseImages(e.images,function(){void 0!==t&&t(s)}),o=this.parseTextures(e.textures,n),a=this.parseMaterials(e.materials,o),s=this.parseObject(e.object,i,a);return e.animations&&(s.animations=this.parseAnimations(e.animations)),void 0!==e.images&&0!==e.images.length||void 0!==t&&t(s),s},parseShape:function(e){var t={};if(void 0!==e)for(var r=0,i=e.length;r<i;r++){var n=(new Xi).fromJSON(e[r]);t[n.uuid]=n}return t},parseGeometries:function(e,t){var r={};if(void 0!==e)for(var i=new _n,n=new yn,o=0,a=e.length;o<a;o++){var s,c=e[o];switch(c.type){case\"PlaneGeometry\":case\"PlaneBufferGeometry\":s=new sc[c.type](c.width,c.height,c.widthSegments,c.heightSegments);break;case\"BoxGeometry\":case\"BoxBufferGeometry\":case\"CubeGeometry\":s=new sc[c.type](c.width,c.height,c.depth,c.widthSegments,c.heightSegments,c.depthSegments);break;case\"CircleGeometry\":case\"CircleBufferGeometry\":s=new sc[c.type](c.radius,c.segments,c.thetaStart,c.thetaLength);break;case\"CylinderGeometry\":case\"CylinderBufferGeometry\":s=new sc[c.type](c.radiusTop,c.radiusBottom,c.height,c.radialSegments,c.heightSegments,c.openEnded,c.thetaStart,c.thetaLength);break;case\"ConeGeometry\":case\"ConeBufferGeometry\":s=new sc[c.type](c.radius,c.height,c.radialSegments,c.heightSegments,c.openEnded,c.thetaStart,c.thetaLength);break;case\"SphereGeometry\":case\"SphereBufferGeometry\":s=new sc[c.type](c.radius,c.widthSegments,c.heightSegments,c.phiStart,c.phiLength,c.thetaStart,c.thetaLength);break;case\"DodecahedronGeometry\":case\"DodecahedronBufferGeometry\":case\"IcosahedronGeometry\":case\"IcosahedronBufferGeometry\":case\"OctahedronGeometry\":case\"OctahedronBufferGeometry\":case\"TetrahedronGeometry\":case\"TetrahedronBufferGeometry\":s=new sc[c.type](c.radius,c.detail);break;case\"RingGeometry\":case\"RingBufferGeometry\":s=new sc[c.type](c.innerRadius,c.outerRadius,c.thetaSegments,c.phiSegments,c.thetaStart,c.thetaLength);break;case\"TorusGeometry\":case\"TorusBufferGeometry\":s=new sc[c.type](c.radius,c.tube,c.radialSegments,c.tubularSegments,c.arc);break;case\"TorusKnotGeometry\":case\"TorusKnotBufferGeometry\":s=new sc[c.type](c.radius,c.tube,c.tubularSegments,c.radialSegments,c.p,c.q);break;case\"LatheGeometry\":case\"LatheBufferGeometry\":s=new sc[c.type](c.points,c.segments,c.phiStart,c.phiLength);break;case\"PolyhedronGeometry\":case\"PolyhedronBufferGeometry\":s=new sc[c.type](c.vertices,c.indices,c.radius,c.details);break;case\"ShapeGeometry\":case\"ShapeBufferGeometry\":for(var l=[],u=0,h=c.shapes.length;u<h;u++){var d=t[c.shapes[u]];l.push(d)}s=new sc[c.type](l,c.curveSegments);break;case\"BufferGeometry\":s=n.parse(c);break;case\"Geometry\":s=i.parse(c,this.texturePath).geometry;break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type \"'+c.type+'\"');continue}s.uuid=c.uuid,void 0!==c.name&&(s.name=c.name),r[c.uuid]=s}return r},parseMaterials:function(e,t){var r={};if(void 0!==e){var i=new gn;i.setTextures(t);for(var n=0,o=e.length;n<o;n++){var a=e[n];if(\"MultiMaterial\"===a.type){for(var s=[],c=0;c<a.materials.length;c++)s.push(i.parse(a.materials[c]));r[a.uuid]=s}else r[a.uuid]=i.parse(a)}}return r},parseAnimations:function(e){for(var t=[],r=0;r<e.length;r++){var i=vn.parse(e[r]);t.push(i)}return t},parseImages:function(e,t){var r=this,i={};if(void 0!==e&&e.length>0){var n=new mi(t),o=new xi(n);o.setCrossOrigin(this.crossOrigin);for(var a=0,s=e.length;a<s;a++){var c=e[a],l=/^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(c.url)?c.url:r.texturePath+c.url;i[c.uuid]=function(e){return r.manager.itemStart(e),o.load(e,function(){r.manager.itemEnd(e)},void 0,function(){r.manager.itemEnd(e),r.manager.itemError(e)})}(l)}}return i},parseTextures:function(e,t){function r(e,t){return\"number\"==typeof e?e:(console.warn(\"THREE.ObjectLoader.parseTexture: Constant should be in numeric form.\",e),t[e])}var i={};if(void 0!==e)for(var n=0,o=e.length;n<o;n++){var a=e[n];void 0===a.image&&console.warn('THREE.ObjectLoader: No \"image\" specified for',a.uuid),void 0===t[a.image]&&console.warn(\"THREE.ObjectLoader: Undefined image\",a.image);var s=new l(t[a.image]);s.needsUpdate=!0,s.uuid=a.uuid,void 0!==a.name&&(s.name=a.name),void 0!==a.mapping&&(s.mapping=r(a.mapping,_c)),void 0!==a.offset&&s.offset.fromArray(a.offset),void 0!==a.repeat&&s.repeat.fromArray(a.repeat),void 0!==a.center&&s.center.fromArray(a.center),void 0!==a.rotation&&(s.rotation=a.rotation),void 0!==a.wrap&&(s.wrapS=r(a.wrap[0],bc),s.wrapT=r(a.wrap[1],bc)),void 0!==a.format&&(s.format=a.format),void 0!==a.minFilter&&(s.minFilter=r(a.minFilter,wc)),void 0!==a.magFilter&&(s.magFilter=r(a.magFilter,wc)),void 0!==a.anisotropy&&(s.anisotropy=a.anisotropy),void 0!==a.flipY&&(s.flipY=a.flipY),i[a.uuid]=s}return i},parseObject:function(e,t,r){function i(e){return void 0===t[e]&&console.warn(\"THREE.ObjectLoader: Undefined geometry\",e),t[e]}function n(e){if(void 0!==e){if(Array.isArray(e)){for(var t=[],i=0,n=e.length;i<n;i++){var o=e[i];void 0===r[o]&&console.warn(\"THREE.ObjectLoader: Undefined material\",o),t.push(r[o])}return t}return void 0===r[e]&&console.warn(\"THREE.ObjectLoader: Undefined material\",e),r[e]}}var o;switch(e.type){case\"Scene\":o=new Lt,void 0!==e.background&&Number.isInteger(e.background)&&(o.background=new y(e.background)),void 0!==e.fog&&(\"Fog\"===e.fog.type?o.fog=new At(e.fog.color,e.fog.near,e.fog.far):\"FogExp2\"===e.fog.type&&(o.fog=new Tt(e.fog.color,e.fog.density)));break;case\"PerspectiveCamera\":o=new wt(e.fov,e.aspect,e.near,e.far),void 0!==e.focus&&(o.focus=e.focus),void 0!==e.zoom&&(o.zoom=e.zoom),void 0!==e.filmGauge&&(o.filmGauge=e.filmGauge),void 0!==e.filmOffset&&(o.filmOffset=e.filmOffset),void 0!==e.view&&(o.view=Object.assign({},e.view));break;case\"OrthographicCamera\":o=new E(e.left,e.right,e.top,e.bottom,e.near,e.far),void 0!==e.zoom&&(o.zoom=e.zoom),void 0!==e.view&&(o.view=Object.assign({},e.view));break;case\"AmbientLight\":o=new tn(e.color,e.intensity);break;case\"DirectionalLight\":o=new en(e.color,e.intensity);break;case\"PointLight\":o=new Qi(e.color,e.intensity,e.distance,e.decay);break;case\"RectAreaLight\":o=new rn(e.color,e.intensity,e.width,e.height);break;case\"SpotLight\":o=new Ki(e.color,e.intensity,e.distance,e.angle,e.penumbra,e.decay);break;case\"HemisphereLight\":o=new Yi(e.color,e.groundColor,e.intensity);break;case\"SkinnedMesh\":console.warn(\"THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.\");case\"Mesh\":var a=i(e.geometry),s=n(e.material);o=a.bones&&a.bones.length>0?new It(a,s):new J(a,s);break;case\"LOD\":o=new Pt;break;case\"Line\":o=new Nt(i(e.geometry),n(e.material),e.mode);break;case\"LineLoop\":o=new zt(i(e.geometry),n(e.material));break;case\"LineSegments\":o=new Ft(i(e.geometry),n(e.material));break;case\"PointCloud\":case\"Points\":o=new Gt(i(e.geometry),n(e.material));break;case\"Sprite\":o=new Rt(n(e.material));break;case\"Group\":o=new Ht;break;default:o=new w}if(o.uuid=e.uuid,void 0!==e.name&&(o.name=e.name),void 0!==e.matrix?(o.matrix.fromArray(e.matrix),void 0!==e.matrixAutoUpdate&&(o.matrixAutoUpdate=e.matrixAutoUpdate),o.matrixAutoUpdate&&o.matrix.decompose(o.position,o.quaternion,o.scale)):(void 0!==e.position&&o.position.fromArray(e.position),void 0!==e.rotation&&o.rotation.fromArray(e.rotation),void 0!==e.quaternion&&o.quaternion.fromArray(e.quaternion),void 0!==e.scale&&o.scale.fromArray(e.scale)),void 0!==e.castShadow&&(o.castShadow=e.castShadow),void 0!==e.receiveShadow&&(o.receiveShadow=e.receiveShadow),e.shadow&&(void 0!==e.shadow.bias&&(o.shadow.bias=e.shadow.bias),void 0!==e.shadow.radius&&(o.shadow.radius=e.shadow.radius),void 0!==e.shadow.mapSize&&o.shadow.mapSize.fromArray(e.shadow.mapSize),void 0!==e.shadow.camera&&(o.shadow.camera=this.parseObject(e.shadow.camera))),void 0!==e.visible&&(o.visible=e.visible),void 0!==e.frustumCulled&&(o.frustumCulled=e.frustumCulled),void 0!==e.renderOrder&&(o.renderOrder=e.renderOrder),void 0!==e.userData&&(o.userData=e.userData),void 0!==e.children)for(var c=e.children,l=0;l<c.length;l++)o.add(this.parseObject(c[l],t,r));if(\"LOD\"===e.type)for(var u=e.levels,h=0;h<u.length;h++){var d=u[h],p=o.getObjectByProperty(\"uuid\",d.object);void 0!==p&&o.addLevel(p,d.distance)}return o}});var _c={UVMapping:300,CubeReflectionMapping:_a,CubeRefractionMapping:ba,EquirectangularReflectionMapping:wa,EquirectangularRefractionMapping:Ma,SphericalReflectionMapping:Ea,CubeUVReflectionMapping:Sa,CubeUVRefractionMapping:Ta},bc={RepeatWrapping:Aa,ClampToEdgeWrapping:La,MirroredRepeatWrapping:Ca},wc={NearestFilter:Ra,NearestMipMapNearestFilter:Pa,NearestMipMapLinearFilter:Da,LinearFilter:Ua,LinearMipMapNearestFilter:Ia,LinearMipMapLinearFilter:Oa};wn.prototype={constructor:wn,setOptions:function(e){return this.options=e,this},load:function(e,t,r,i){void 0===e&&(e=\"\"),void 0!==this.path&&(e=this.path+e);var n=this,o=lc.get(e);if(void 0!==o)return n.manager.itemStart(e),setTimeout(function(){t&&t(o),n.manager.itemEnd(e)},0),o;fetch(e).then(function(e){return e.blob()}).then(function(e){return createImageBitmap(e,n.options)}).then(function(r){lc.add(e,r),t&&t(r),n.manager.itemEnd(e)}).catch(function(t){i&&i(t),n.manager.itemEnd(e),n.manager.itemError(e)})},setCrossOrigin:function(){return this},setPath:function(e){return this.path=e,this}},Object.assign(Mn.prototype,{moveTo:function(e,t){this.currentPath=new Wi,this.subPaths.push(this.currentPath),this.currentPath.moveTo(e,t)},lineTo:function(e,t){this.currentPath.lineTo(e,t)},quadraticCurveTo:function(e,t,r,i){this.currentPath.quadraticCurveTo(e,t,r,i)},bezierCurveTo:function(e,t,r,i,n,o){this.currentPath.bezierCurveTo(e,t,r,i,n,o)},splineThru:function(e){this.currentPath.splineThru(e)},toShapes:function(e,t){function r(e){for(var t=[],r=0,i=e.length;r<i;r++){var n=e[r],o=new Xi;o.curves=n.curves,t.push(o)}return t}var i=oc.isClockWise,n=this.subPaths;if(0===n.length)return[];if(!0===t)return r(n);var o,a,s,c=[];if(1===n.length)return a=n[0],s=new Xi,s.curves=a.curves,c.push(s),c;var l=!i(n[0].getPoints());l=e?!l:l;var u,h=[],d=[],p=[],f=0;d[f]=void 0,p[f]=[];for(var m=0,v=n.length;m<v;m++)a=n[m],u=a.getPoints(),o=i(u),o=e?!o:o,o?(!l&&d[f]&&f++,d[f]={s:new Xi,p:u},d[f].s.curves=a.curves,l&&f++,p[f]=[]):p[f].push({h:a,p:u[0]});if(!d[0])return r(n);if(d.length>1){for(var g=!1,y=[],x=0,_=d.length;x<_;x++)h[x]=[];for(var x=0,_=d.length;x<_;x++)for(var b=p[x],w=0;w<b.length;w++){for(var M=b[w],E=!0,S=0;S<d.length;S++)(function(e,t){for(var r=t.length,i=!1,n=r-1,o=0;o<r;n=o++){var a=t[n],s=t[o],c=s.x-a.x,l=s.y-a.y;if(Math.abs(l)>Number.EPSILON){if(l<0&&(a=t[o],c=-c,s=t[n],l=-l),e.y<a.y||e.y>s.y)continue;if(e.y===a.y){if(e.x===a.x)return!0}else{var u=l*(e.x-a.x)-c*(e.y-a.y);if(0===u)return!0;if(u<0)continue;i=!i}}else{if(e.y!==a.y)continue;if(s.x<=e.x&&e.x<=a.x||a.x<=e.x&&e.x<=s.x)return!0}}return i})(M.p,d[S].p)&&(x!==S&&y.push({froms:x,tos:S,hole:w}),E?(E=!1,h[S].push(M)):g=!0);E&&h[x].push(M)}y.length>0&&(g||(p=h))}for(var T,m=0,A=d.length;m<A;m++){s=d[m].s,c.push(s),T=p[m];for(var L=0,C=T.length;L<C;L++)s.holes.push(T[L].h)}return c}}),Object.assign(En.prototype,{isFont:!0,generateShapes:function(e,t,r){void 0===t&&(t=100),void 0===r&&(r=4);for(var i=[],n=Sn(e,t,r,this.data),o=0,a=n.length;o<a;o++)Array.prototype.push.apply(i,n[o].toShapes());return i}}),Object.assign(An.prototype,{load:function(e,t,r,i){var n=this,o=new vi(this.manager);o.setPath(this.path),o.load(e,function(e){var r;try{r=JSON.parse(e)}catch(t){console.warn(\"THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.\"),r=JSON.parse(e.substring(65,e.length-2))}var i=n.parse(r);t&&t(i)},r,i)},parse:function(e){return new En(e)},setPath:function(e){return this.path=e,this}});var Mc,Ec={getContext:function(){return void 0===Mc&&(Mc=new(window.AudioContext||window.webkitAudioContext)),Mc},setContext:function(e){Mc=e}};Object.assign(Ln.prototype,{load:function(e,t,r,i){var n=new vi(this.manager);n.setResponseType(\"arraybuffer\"),n.load(e,function(e){Ec.getContext().decodeAudioData(e,function(e){t(e)})},r,i)}}),Object.assign(Cn.prototype,{update:function(){var e,t,r,i,n,a,s,c,l=new o,u=new o;return function(o){if(e!==this||t!==o.focus||r!==o.fov||i!==o.aspect*this.aspect||n!==o.near||a!==o.far||s!==o.zoom||c!==this.eyeSep){e=this,t=o.focus,r=o.fov,i=o.aspect*this.aspect,n=o.near,a=o.far,s=o.zoom;var h=o.projectionMatrix.clone();c=this.eyeSep/2;var d,p,f=c*n/t,m=n*Math.tan(zs.DEG2RAD*r*.5)/s;u.elements[12]=-c,l.elements[12]=c,d=-m*i+f,p=m*i+f,h.elements[0]=2*n/(p-d),h.elements[8]=(p+d)/(p-d),this.cameraL.projectionMatrix.copy(h),d=-m*i-f,p=m*i-f,h.elements[0]=2*n/(p-d),h.elements[8]=(p+d)/(p-d),this.cameraR.projectionMatrix.copy(h)}this.cameraL.matrixWorld.copy(o.matrixWorld).multiply(u),this.cameraR.matrixWorld.copy(o.matrixWorld).multiply(l)}}()}),Rn.prototype=Object.create(w.prototype),Rn.prototype.constructor=Rn,Pn.prototype=Object.assign(Object.create(w.prototype),{constructor:Pn,getInput:function(){return this.gain},removeFilter:function(){null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null)},getFilter:function(){return this.filter},setFilter:function(e){null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=e,this.gain.connect(this.filter),this.filter.connect(this.context.destination)},getMasterVolume:function(){return this.gain.gain.value},setMasterVolume:function(e){this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01)},updateMatrixWorld:function(){var e=new s,t=new a,r=new s,i=new s;return function(n){w.prototype.updateMatrixWorld.call(this,n);var o=this.context.listener,a=this.up;this.matrixWorld.decompose(e,t,r),i.set(0,0,-1).applyQuaternion(t),o.positionX?(o.positionX.setValueAtTime(e.x,this.context.currentTime),o.positionY.setValueAtTime(e.y,this.context.currentTime),o.positionZ.setValueAtTime(e.z,this.context.currentTime),o.forwardX.setValueAtTime(i.x,this.context.currentTime),o.forwardY.setValueAtTime(i.y,this.context.currentTime),o.forwardZ.setValueAtTime(i.z,this.context.currentTime),o.upX.setValueAtTime(a.x,this.context.currentTime),o.upY.setValueAtTime(a.y,this.context.currentTime),o.upZ.setValueAtTime(a.z,this.context.currentTime)):(o.setPosition(e.x,e.y,e.z),o.setOrientation(i.x,i.y,i.z,a.x,a.y,a.z))}}()}),Dn.prototype=Object.assign(Object.create(w.prototype),{constructor:Dn,getOutput:function(){return this.gain},setNodeSource:function(e){return this.hasPlaybackControl=!1,this.sourceType=\"audioNode\",this.source=e,this.connect(),this},setBuffer:function(e){return this.buffer=e,this.sourceType=\"buffer\",this.autoplay&&this.play(),this},play:function(){if(!0===this.isPlaying)return void console.warn(\"THREE.Audio: Audio is already playing.\");if(!1===this.hasPlaybackControl)return void console.warn(\"THREE.Audio: this Audio has no playback control.\");var e=this.context.createBufferSource();return e.buffer=this.buffer,e.loop=this.loop,e.onended=this.onEnded.bind(this),e.playbackRate.setValueAtTime(this.playbackRate,this.startTime),this.startTime=this.context.currentTime,e.start(this.startTime,this.offset),this.isPlaying=!0,this.source=e,this.connect()},pause:function(){return!1===this.hasPlaybackControl?void console.warn(\"THREE.Audio: this Audio has no playback control.\"):(!0===this.isPlaying&&(this.source.stop(),this.offset+=(this.context.currentTime-this.startTime)*this.playbackRate,this.isPlaying=!1),this)},stop:function(){return!1===this.hasPlaybackControl?void console.warn(\"THREE.Audio: this Audio has no playback control.\"):(this.source.stop(),this.offset=0,this.isPlaying=!1,this)},connect:function(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(var e=1,t=this.filters.length;e<t;e++)this.filters[e-1].connect(this.filters[e]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this},disconnect:function(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(var e=1,t=this.filters.length;e<t;e++)this.filters[e-1].disconnect(this.filters[e]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this},getFilters:function(){return this.filters},setFilters:function(e){return e||(e=[]),!0===this.isPlaying?(this.disconnect(),this.filters=e,this.connect()):this.filters=e,this},getFilter:function(){return this.getFilters()[0]},setFilter:function(e){return this.setFilters(e?[e]:[])},setPlaybackRate:function(e){return!1===this.hasPlaybackControl?void console.warn(\"THREE.Audio: this Audio has no playback control.\"):(this.playbackRate=e,!0===this.isPlaying&&this.source.playbackRate.setValueAtTime(this.playbackRate,this.context.currentTime),this)},getPlaybackRate:function(){return this.playbackRate},onEnded:function(){this.isPlaying=!1},getLoop:function(){return!1===this.hasPlaybackControl?(console.warn(\"THREE.Audio: this Audio has no playback control.\"),!1):this.loop},setLoop:function(e){return!1===this.hasPlaybackControl?void console.warn(\"THREE.Audio: this Audio has no playback control.\"):(this.loop=e,!0===this.isPlaying&&(this.source.loop=this.loop),this)},getVolume:function(){return this.gain.gain.value},setVolume:function(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this}}),Un.prototype=Object.assign(Object.create(Dn.prototype),{constructor:Un,getOutput:function(){return this.panner},getRefDistance:function(){return this.panner.refDistance},setRefDistance:function(e){this.panner.refDistance=e},getRolloffFactor:function(){return this.panner.rolloffFactor},setRolloffFactor:function(e){this.panner.rolloffFactor=e},getDistanceModel:function(){return this.panner.distanceModel},setDistanceModel:function(e){this.panner.distanceModel=e},getMaxDistance:function(){return this.panner.maxDistance},setMaxDistance:function(e){this.panner.maxDistance=e},updateMatrixWorld:function(){var e=new s;return function(t){w.prototype.updateMatrixWorld.call(this,t),e.setFromMatrixPosition(this.matrixWorld),this.panner.setPosition(e.x,e.y,e.z)}}()}),Object.assign(In.prototype,{getFrequencyData:function(){return this.analyser.getByteFrequencyData(this.data),this.data},getAverageFrequency:function(){for(var e=0,t=this.getFrequencyData(),r=0;r<t.length;r++)e+=t[r];return e/t.length}}),Object.assign(On.prototype,{accumulate:function(e,t){var r=this.buffer,i=this.valueSize,n=e*i+i,o=this.cumulativeWeight;if(0===o){for(var a=0;a!==i;++a)r[n+a]=r[a];o=t}else{o+=t;var s=t/o;this._mixBufferRegion(r,n,0,s,i)}this.cumulativeWeight=o},apply:function(e){var t=this.valueSize,r=this.buffer,i=e*t+t,n=this.cumulativeWeight,o=this.binding;if(this.cumulativeWeight=0,n<1){var a=3*t;this._mixBufferRegion(r,i,a,1-n,t)}for(var s=t,c=t+t;s!==c;++s)if(r[s]!==r[s+t]){o.setValue(r,i);break}},saveOriginalState:function(){var e=this.binding,t=this.buffer,r=this.valueSize,i=3*r;e.getValue(t,i);for(var n=r,o=i;n!==o;++n)t[n]=t[i+n%r];this.cumulativeWeight=0},restoreOriginalState:function(){var e=3*this.valueSize;this.binding.setValue(this.buffer,e)},_select:function(e,t,r,i,n){if(i>=.5)for(var o=0;o!==n;++o)e[t+o]=e[r+o]},_slerp:function(e,t,r,i){a.slerpFlat(e,t,e,t,e,r,i)},_lerp:function(e,t,r,i,n){for(var o=1-i,a=0;a!==n;++a){var s=t+a;e[s]=e[s]*o+e[r+a]*i}}});var Sc=\"\\\\[\\\\]\\\\.:\\\\/\";Object.assign(Nn.prototype,{getValue:function(e,t){this.bind();var r=this._targetGroup.nCachedObjects_,i=this._bindings[r];void 0!==i&&i.getValue(e,t)},setValue:function(e,t){for(var r=this._bindings,i=this._targetGroup.nCachedObjects_,n=r.length;i!==n;++i)r[i].setValue(e,t)},bind:function(){for(var e=this._bindings,t=this._targetGroup.nCachedObjects_,r=e.length;t!==r;++t)e[t].bind()},unbind:function(){for(var e=this._bindings,t=this._targetGroup.nCachedObjects_,r=e.length;t!==r;++t)e[t].unbind()}}),Object.assign(Fn,{Composite:Nn,create:function(e,t,r){return e&&e.isAnimationObjectGroup?new Fn.Composite(e,t,r):new Fn(e,t,r)},sanitizeNodeName:function(){var e=new RegExp(\"[\"+Sc+\"]\",\"g\");return function(t){return t.replace(/\\s/g,\"_\").replace(e,\"\")}}(),parseTrackName:function(){var e=\"[^\"+Sc+\"]\",t=\"[^\"+Sc.replace(\"\\\\.\",\"\")+\"]\",r=/((?:WC+[\\/:])*)/.source.replace(\"WC\",e),i=/(WCOD+)?/.source.replace(\"WCOD\",t),n=/(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace(\"WC\",e),o=/\\.(WC+)(?:\\[(.+)\\])?/.source.replace(\"WC\",e),a=new RegExp(\"^\"+r+i+n+o+\"$\"),s=[\"material\",\"materials\",\"bones\"];return function(e){var t=a.exec(e);if(!t)throw new Error(\"PropertyBinding: Cannot parse trackName: \"+e);var r={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]},i=r.nodeName&&r.nodeName.lastIndexOf(\".\");if(void 0!==i&&-1!==i){var n=r.nodeName.substring(i+1);-1!==s.indexOf(n)&&(r.nodeName=r.nodeName.substring(0,i),r.objectName=n)}if(null===r.propertyName||0===r.propertyName.length)throw new Error(\"PropertyBinding: can not parse propertyName from trackName: \"+e);return r}}(),findNode:function(e,t){if(!t||\"\"===t||\"root\"===t||\".\"===t||-1===t||t===e.name||t===e.uuid)return e;if(e.skeleton){var r=e.skeleton.getBoneByName(t);if(void 0!==r)return r}if(e.children){var i=function(e){for(var r=0;r<e.length;r++){var n=e[r];if(n.name===t||n.uuid===t)return n;var o=i(n.children);if(o)return o}return null},n=i(e.children);if(n)return n}return null}}),Object.assign(Fn.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function(e,t){e[t]=this.node[this.propertyName]},function(e,t){for(var r=this.resolvedProperty,i=0,n=r.length;i!==n;++i)e[t++]=r[i]},function(e,t){e[t]=this.resolvedProperty[this.propertyIndex]},function(e,t){this.resolvedProperty.toArray(e,t)}],SetterByBindingTypeAndVersioning:[[function(e,t){this.targetObject[this.propertyName]=e[t]},function(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.needsUpdate=!0},function(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,t){for(var r=this.resolvedProperty,i=0,n=r.length;i!==n;++i)r[i]=e[t++]},function(e,t){for(var r=this.resolvedProperty,i=0,n=r.length;i!==n;++i)r[i]=e[t++];this.targetObject.needsUpdate=!0},function(e,t){for(var r=this.resolvedProperty,i=0,n=r.length;i!==n;++i)r[i]=e[t++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,t){this.resolvedProperty[this.propertyIndex]=e[t]},function(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.needsUpdate=!0},function(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,t){this.resolvedProperty.fromArray(e,t)},function(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.needsUpdate=!0},function(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.matrixWorldNeedsUpdate=!0}]],getValue:function(e,t){this.bind(),this.getValue(e,t)},setValue:function(e,t){this.bind(),this.setValue(e,t)},bind:function(){var e=this.node,t=this.parsedPath,r=t.objectName,i=t.propertyName,n=t.propertyIndex;if(e||(e=Fn.findNode(this.rootNode,t.nodeName)||this.rootNode,this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!e)return void console.error(\"THREE.PropertyBinding: Trying to update node for track: \"+this.path+\" but it wasn't found.\");if(r){var o=t.objectIndex;switch(r){case\"materials\":if(!e.material)return void console.error(\"THREE.PropertyBinding: Can not bind to material as node does not have a material.\",this);if(!e.material.materials)return void console.error(\"THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.\",this);e=e.material.materials;break;case\"bones\":if(!e.skeleton)return void console.error(\"THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.\",this);e=e.skeleton.bones;for(var a=0;a<e.length;a++)if(e[a].name===o){o=a;break}break;default:if(void 0===e[r])return void console.error(\"THREE.PropertyBinding: Can not bind to objectName of node undefined.\",this);e=e[r]}if(void 0!==o){if(void 0===e[o])return void console.error(\"THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.\",this,e);e=e[o]}}var s=e[i];if(void 0===s){var c=t.nodeName;return void console.error(\"THREE.PropertyBinding: Trying to update property for track: \"+c+\".\"+i+\" but it wasn't found.\",e)}var l=this.Versioning.None;void 0!==e.needsUpdate?(l=this.Versioning.NeedsUpdate,this.targetObject=e):void 0!==e.matrixWorldNeedsUpdate&&(l=this.Versioning.MatrixWorldNeedsUpdate,this.targetObject=e);var u=this.BindingType.Direct;if(void 0!==n){if(\"morphTargetInfluences\"===i){if(!e.geometry)return void console.error(\"THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.\",this);if(e.geometry.isBufferGeometry){if(!e.geometry.morphAttributes)return void console.error(\"THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.\",this);for(var a=0;a<this.node.geometry.morphAttributes.position.length;a++)if(e.geometry.morphAttributes.position[a].name===n){n=a;break}}else{if(!e.geometry.morphTargets)return void console.error(\"THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.\",this);for(var a=0;a<this.node.geometry.morphTargets.length;a++)if(e.geometry.morphTargets[a].name===n){n=a;break}}}u=this.BindingType.ArrayElement,this.resolvedProperty=s,this.propertyIndex=n}else void 0!==s.fromArray&&void 0!==s.toArray?(u=this.BindingType.HasFromToArray,this.resolvedProperty=s):Array.isArray(s)?(u=this.BindingType.EntireArray,this.resolvedProperty=s):this.propertyName=i;this.getValue=this.GetterByBindingType[u],this.setValue=this.SetterByBindingTypeAndVersioning[u][l]},unbind:function(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}),\n//!\\ DECLARE ALIAS AFTER assign prototype !\nObject.assign(Fn.prototype,{_getValue_unbound:Fn.prototype.getValue,_setValue_unbound:Fn.prototype.setValue}),Object.assign(zn.prototype,{isAnimationObjectGroup:!0,add:function(){for(var e=this._objects,t=e.length,r=this.nCachedObjects_,i=this._indicesByUUID,n=this._paths,o=this._parsedPaths,a=this._bindings,s=a.length,c=void 0,l=0,u=arguments.length;l!==u;++l){var h=arguments[l],d=h.uuid,p=i[d];if(void 0===p){p=t++,i[d]=p,e.push(h);for(var f=0,m=s;f!==m;++f)a[f].push(new Fn(h,n[f],o[f]))}else if(p<r){c=e[p];var v=--r,g=e[v];i[g.uuid]=p,e[p]=g,i[d]=v,e[v]=h;for(var f=0,m=s;f!==m;++f){var y=a[f],x=y[v],_=y[p];y[p]=x,void 0===_&&(_=new Fn(h,n[f],o[f])),y[v]=_}}else e[p]!==c&&console.error(\"THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.\")}this.nCachedObjects_=r},remove:function(){for(var e=this._objects,t=this.nCachedObjects_,r=this._indicesByUUID,i=this._bindings,n=i.length,o=0,a=arguments.length;o!==a;++o){var s=arguments[o],c=s.uuid,l=r[c];if(void 0!==l&&l>=t){var u=t++,h=e[u];r[h.uuid]=l,e[l]=h,r[c]=u,e[u]=s;for(var d=0,p=n;d!==p;++d){var f=i[d],m=f[u],v=f[l];f[l]=m,f[u]=v}}}this.nCachedObjects_=t},uncache:function(){for(var e=this._objects,t=e.length,r=this.nCachedObjects_,i=this._indicesByUUID,n=this._bindings,o=n.length,a=0,s=arguments.length;a!==s;++a){var c=arguments[a],l=c.uuid,u=i[l];if(void 0!==u)if(delete i[l],u<r){var h=--r,d=e[h],p=--t,f=e[p];i[d.uuid]=u,e[u]=d,i[f.uuid]=h,e[h]=f,e.pop();for(var m=0,v=o;m!==v;++m){var g=n[m],y=g[h],x=g[p];g[u]=y,g[h]=x,g.pop()}}else{var p=--t,f=e[p];i[f.uuid]=u,e[u]=f,e.pop();for(var m=0,v=o;m!==v;++m){var g=n[m];g[u]=g[p],g.pop()}}}this.nCachedObjects_=r},subscribe_:function(e,t){var r=this._bindingsIndicesByPath,i=r[e],n=this._bindings;if(void 0!==i)return n[i];var o=this._paths,a=this._parsedPaths,s=this._objects,c=s.length,l=this.nCachedObjects_,u=new Array(c);i=n.length,r[e]=i,o.push(e),a.push(t),n.push(u);for(var h=l,d=s.length;h!==d;++h){var p=s[h];u[h]=new Fn(p,e,t)}return u},unsubscribe_:function(e){var t=this._bindingsIndicesByPath,r=t[e];if(void 0!==r){var i=this._paths,n=this._parsedPaths,o=this._bindings,a=o.length-1,s=o[a];t[e[a]]=r,o[r]=s,o.pop(),n[r]=n[a],n.pop(),i[r]=i[a],i.pop()}}}),Object.assign(Bn.prototype,{play:function(){return this._mixer._activateAction(this),this},stop:function(){return this._mixer._deactivateAction(this),this.reset()},reset:function(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()},isRunning:function(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)},isScheduled:function(){return this._mixer._isActiveAction(this)},startAt:function(e){return this._startTime=e,this},setLoop:function(e,t){return this.loop=e,this.repetitions=t,this},setEffectiveWeight:function(e){return this.weight=e,this._effectiveWeight=this.enabled?e:0,this.stopFading()},getEffectiveWeight:function(){return this._effectiveWeight},fadeIn:function(e){return this._scheduleFading(e,0,1)},fadeOut:function(e){return this._scheduleFading(e,1,0)},crossFadeFrom:function(e,t,r){if(e.fadeOut(t),this.fadeIn(t),r){var i=this._clip.duration,n=e._clip.duration,o=n/i,a=i/n;e.warp(1,o,t),this.warp(a,1,t)}return this},crossFadeTo:function(e,t,r){return e.crossFadeFrom(this,t,r)},stopFading:function(){var e=this._weightInterpolant;return null!==e&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this},setEffectiveTimeScale:function(e){return this.timeScale=e,this._effectiveTimeScale=this.paused?0:e,this.stopWarping()},getEffectiveTimeScale:function(){return this._effectiveTimeScale},setDuration:function(e){return this.timeScale=this._clip.duration/e,this.stopWarping()},syncWith:function(e){return this.time=e.time,this.timeScale=e.timeScale,this.stopWarping()},halt:function(e){return this.warp(this._effectiveTimeScale,0,e)},warp:function(e,t,r){var i=this._mixer,n=i.time,o=this._timeScaleInterpolant,a=this.timeScale;null===o&&(o=i._lendControlInterpolant(),this._timeScaleInterpolant=o);var s=o.parameterPositions,c=o.sampleValues;return s[0]=n,s[1]=n+r,c[0]=e/a,c[1]=t/a,this},stopWarping:function(){var e=this._timeScaleInterpolant;return null!==e&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this},getMixer:function(){return this._mixer},getClip:function(){return this._clip},getRoot:function(){return this._localRoot||this._mixer._root},_update:function(e,t,r,i){if(!this.enabled)return void this._updateWeight(e);var n=this._startTime;if(null!==n){var o=(e-n)*r;if(o<0||0===r)return;this._startTime=null,t=r*o}t*=this._updateTimeScale(e);var a=this._updateTime(t),s=this._updateWeight(e);if(s>0)for(var c=this._interpolants,l=this._propertyBindings,u=0,h=c.length;u!==h;++u)c[u].evaluate(a),l[u].accumulate(i,s)},_updateWeight:function(e){var t=0;if(this.enabled){t=this.weight;var r=this._weightInterpolant;if(null!==r){var i=r.evaluate(e)[0];t*=i,e>r.parameterPositions[1]&&(this.stopFading(),0===i&&(this.enabled=!1))}}return this._effectiveWeight=t,t},_updateTimeScale:function(e){var t=0;if(!this.paused){t=this.timeScale;var r=this._timeScaleInterpolant;if(null!==r){t*=r.evaluate(e)[0],e>r.parameterPositions[1]&&(this.stopWarping(),0===t?this.paused=!0:this.timeScale=t)}}return this._effectiveTimeScale=t,t},_updateTime:function(e){var t=this.time+e;if(0===e)return t;var r=this._clip.duration,i=this.loop,n=this._loopCount;if(2200===i){-1===n&&(this._loopCount=0,this._setEndings(!0,!0,!1));e:{if(t>=r)t=r;else{if(!(t<0))break e;t=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this._mixer.dispatchEvent({type:\"finished\",action:this,direction:e<0?-1:1})}}else{var o=2202===i;if(-1===n&&(e>=0?(n=0,this._setEndings(!0,0===this.repetitions,o)):this._setEndings(0===this.repetitions,!0,o)),t>=r||t<0){var a=Math.floor(t/r);t-=r*a,n+=Math.abs(a);var s=this.repetitions-n;if(s<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,t=e>0?r:0,this._mixer.dispatchEvent({type:\"finished\",action:this,direction:e>0?1:-1});else{if(1===s){var c=e<0;this._setEndings(c,!c,o)}else this._setEndings(!1,!1,o);this._loopCount=n,this._mixer.dispatchEvent({type:\"loop\",action:this,loopDelta:a})}}if(o&&1==(1&n))return this.time=t,r-t}return this.time=t,t},_setEndings:function(e,t,r){var i=this._interpolantSettings;r?(i.endingStart=2401,i.endingEnd=2401):(i.endingStart=e?this.zeroSlopeAtStart?2401:Ss:2402,i.endingEnd=t?this.zeroSlopeAtEnd?2401:Ss:2402)},_scheduleFading:function(e,t,r){var i=this._mixer,n=i.time,o=this._weightInterpolant;null===o&&(o=i._lendControlInterpolant(),this._weightInterpolant=o);var a=o.parameterPositions,s=o.sampleValues;return a[0]=n,s[0]=t,a[1]=n+e,s[1]=r,this}}),Gn.prototype=Object.assign(Object.create(i.prototype),{constructor:Gn,_bindAction:function(e,t){var r=e._localRoot||this._root,i=e._clip.tracks,n=i.length,o=e._propertyBindings,a=e._interpolants,s=r.uuid,c=this._bindingsByRootAndName,l=c[s];void 0===l&&(l={},c[s]=l);for(var u=0;u!==n;++u){var h=i[u],d=h.name,p=l[d];if(void 0!==p)o[u]=p;else{if(void 0!==(p=o[u])){null===p._cacheIndex&&(++p.referenceCount,this._addInactiveBinding(p,s,d));continue}var f=t&&t._propertyBindings[u].binding.parsedPath;p=new On(Fn.create(r,d,f),h.ValueTypeName,h.getValueSize()),++p.referenceCount,this._addInactiveBinding(p,s,d),o[u]=p}a[u].resultBuffer=p.buffer}},_activateAction:function(e){if(!this._isActiveAction(e)){if(null===e._cacheIndex){var t=(e._localRoot||this._root).uuid,r=e._clip.uuid,i=this._actionsByClip[r];this._bindAction(e,i&&i.knownActions[0]),this._addInactiveAction(e,r,t)}for(var n=e._propertyBindings,o=0,a=n.length;o!==a;++o){var s=n[o];0==s.useCount++&&(this._lendBinding(s),s.saveOriginalState())}this._lendAction(e)}},_deactivateAction:function(e){if(this._isActiveAction(e)){for(var t=e._propertyBindings,r=0,i=t.length;r!==i;++r){var n=t[r];0==--n.useCount&&(n.restoreOriginalState(),this._takeBackBinding(n))}this._takeBackAction(e)}},_initMemoryManager:function(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;var e=this;this.stats={actions:{get total(){return e._actions.length},get inUse(){return e._nActiveActions}},bindings:{get total(){return e._bindings.length},get inUse(){return e._nActiveBindings}},controlInterpolants:{get total(){return e._controlInterpolants.length},get inUse(){return e._nActiveControlInterpolants}}}},_isActiveAction:function(e){var t=e._cacheIndex;return null!==t&&t<this._nActiveActions},_addInactiveAction:function(e,t,r){var i=this._actions,n=this._actionsByClip,o=n[t];if(void 0===o)o={knownActions:[e],actionByRoot:{}},e._byClipCacheIndex=0,n[t]=o;else{var a=o.knownActions;e._byClipCacheIndex=a.length,a.push(e)}e._cacheIndex=i.length,i.push(e),o.actionByRoot[r]=e},_removeInactiveAction:function(e){var t=this._actions,r=t[t.length-1],i=e._cacheIndex;r._cacheIndex=i,t[i]=r,t.pop(),e._cacheIndex=null;var n=e._clip.uuid,o=this._actionsByClip,a=o[n],s=a.knownActions,c=s[s.length-1],l=e._byClipCacheIndex;c._byClipCacheIndex=l,s[l]=c,s.pop(),e._byClipCacheIndex=null,delete a.actionByRoot[(e._localRoot||this._root).uuid],0===s.length&&delete o[n],this._removeInactiveBindingsForAction(e)},_removeInactiveBindingsForAction:function(e){for(var t=e._propertyBindings,r=0,i=t.length;r!==i;++r){var n=t[r];0==--n.referenceCount&&this._removeInactiveBinding(n)}},_lendAction:function(e){var t=this._actions,r=e._cacheIndex,i=this._nActiveActions++,n=t[i];e._cacheIndex=i,t[i]=e,n._cacheIndex=r,t[r]=n},_takeBackAction:function(e){var t=this._actions,r=e._cacheIndex,i=--this._nActiveActions,n=t[i];e._cacheIndex=i,t[i]=e,n._cacheIndex=r,t[r]=n},_addInactiveBinding:function(e,t,r){var i=this._bindingsByRootAndName,n=i[t],o=this._bindings;void 0===n&&(n={},i[t]=n),n[r]=e,e._cacheIndex=o.length,o.push(e)},_removeInactiveBinding:function(e){var t=this._bindings,r=e.binding,i=r.rootNode.uuid,n=r.path,o=this._bindingsByRootAndName,a=o[i],s=t[t.length-1],c=e._cacheIndex;s._cacheIndex=c,t[c]=s,t.pop(),delete a[n];e:{for(var l in a)break e;delete o[i]}},_lendBinding:function(e){var t=this._bindings,r=e._cacheIndex,i=this._nActiveBindings++,n=t[i];e._cacheIndex=i,t[i]=e,n._cacheIndex=r,t[r]=n},_takeBackBinding:function(e){var t=this._bindings,r=e._cacheIndex,i=--this._nActiveBindings,n=t[i];e._cacheIndex=i,t[i]=e,n._cacheIndex=r,t[r]=n},_lendControlInterpolant:function(){var e=this._controlInterpolants,t=this._nActiveControlInterpolants++,r=e[t];return void 0===r&&(r=new dn(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),r.__cacheIndex=t,e[t]=r),r},_takeBackControlInterpolant:function(e){var t=this._controlInterpolants,r=e.__cacheIndex,i=--this._nActiveControlInterpolants,n=t[i];e.__cacheIndex=i,t[i]=e,n.__cacheIndex=r,t[r]=n},_controlInterpolantsResultBuffer:new Float32Array(1),clipAction:function(e,t){var r=t||this._root,i=r.uuid,n=\"string\"==typeof e?vn.findByName(r,e):e,o=null!==n?n.uuid:e,a=this._actionsByClip[o],s=null;if(void 0!==a){var c=a.actionByRoot[i];if(void 0!==c)return c;s=a.knownActions[0],null===n&&(n=s._clip)}if(null===n)return null;var l=new Bn(this,n,t);return this._bindAction(l,s),this._addInactiveAction(l,o,i),l},existingAction:function(e,t){var r=t||this._root,i=r.uuid,n=\"string\"==typeof e?vn.findByName(r,e):e,o=n?n.uuid:e,a=this._actionsByClip[o];return void 0!==a?a.actionByRoot[i]||null:null},stopAllAction:function(){var e=this._actions,t=this._nActiveActions,r=this._bindings,i=this._nActiveBindings;this._nActiveActions=0,this._nActiveBindings=0;for(var n=0;n!==t;++n)e[n].reset();for(var n=0;n!==i;++n)r[n].useCount=0;return this},update:function(e){e*=this.timeScale;for(var t=this._actions,r=this._nActiveActions,i=this.time+=e,n=Math.sign(e),o=this._accuIndex^=1,a=0;a!==r;++a){t[a]._update(i,e,n,o)}for(var s=this._bindings,c=this._nActiveBindings,a=0;a!==c;++a)s[a].apply(o);return this},getRoot:function(){return this._root},uncacheClip:function(e){var t=this._actions,r=e.uuid,i=this._actionsByClip,n=i[r];if(void 0!==n){for(var o=n.knownActions,a=0,s=o.length;a!==s;++a){var c=o[a];this._deactivateAction(c);var l=c._cacheIndex,u=t[t.length-1];c._cacheIndex=null,c._byClipCacheIndex=null,u._cacheIndex=l,t[l]=u,t.pop(),this._removeInactiveBindingsForAction(c)}delete i[r]}},uncacheRoot:function(e){var t=e.uuid,r=this._actionsByClip;for(var i in r){var n=r[i].actionByRoot,o=n[t];void 0!==o&&(this._deactivateAction(o),this._removeInactiveAction(o))}var a=this._bindingsByRootAndName,s=a[t];if(void 0!==s)for(var c in s){var l=s[c];l.restoreOriginalState(),this._removeInactiveBinding(l)}},uncacheAction:function(e,t){var r=this.existingAction(e,t);null!==r&&(this._deactivateAction(r),this._removeInactiveAction(r))}}),Hn.prototype.clone=function(){return new Hn(void 0===this.value.clone?this.value:this.value.clone())},jn.prototype=Object.assign(Object.create(B.prototype),{constructor:jn,isInstancedBufferGeometry:!0,copy:function(e){return B.prototype.copy.call(this,e),this.maxInstancedCount=e.maxInstancedCount,this},clone:function(){return(new this.constructor).copy(this)}}),Object.defineProperties(Vn.prototype,{count:{get:function(){return this.data.count}},array:{get:function(){return this.data.array}}}),Object.assign(Vn.prototype,{isInterleavedBufferAttribute:!0,setX:function(e,t){return this.data.array[e*this.data.stride+this.offset]=t,this},setY:function(e,t){return this.data.array[e*this.data.stride+this.offset+1]=t,this},setZ:function(e,t){return this.data.array[e*this.data.stride+this.offset+2]=t,this},setW:function(e,t){return this.data.array[e*this.data.stride+this.offset+3]=t,this},getX:function(e){return this.data.array[e*this.data.stride+this.offset]},getY:function(e){return this.data.array[e*this.data.stride+this.offset+1]},getZ:function(e){return this.data.array[e*this.data.stride+this.offset+2]},getW:function(e){return this.data.array[e*this.data.stride+this.offset+3]},setXY:function(e,t,r){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=r,this},setXYZ:function(e,t,r,i){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=r,this.data.array[e+2]=i,this},setXYZW:function(e,t,r,i,n){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=r,this.data.array[e+2]=i,this.data.array[e+3]=n,this}}),Object.defineProperty(kn.prototype,\"needsUpdate\",{set:function(e){!0===e&&this.version++}}),Object.assign(kn.prototype,{isInterleavedBuffer:!0,onUploadCallback:function(){},setArray:function(e){if(Array.isArray(e))throw new TypeError(\"THREE.BufferAttribute: array should be a Typed Array.\");return this.count=void 0!==e?e.length/this.stride:0,this.array=e,this},setDynamic:function(e){return this.dynamic=e,this},copy:function(e){return this.array=new e.array.constructor(e.array),this.count=e.count,this.stride=e.stride,this.dynamic=e.dynamic,this},copyAt:function(e,t,r){e*=this.stride,r*=t.stride;for(var i=0,n=this.stride;i<n;i++)this.array[e+i]=t.array[r+i];return this},set:function(e,t){return void 0===t&&(t=0),this.array.set(e,t),this},clone:function(){return(new this.constructor).copy(this)},onUpload:function(e){return this.onUploadCallback=e,this}}),Wn.prototype=Object.assign(Object.create(kn.prototype),{constructor:Wn,isInstancedInterleavedBuffer:!0,copy:function(e){return kn.prototype.copy.call(this,e),this.meshPerAttribute=e.meshPerAttribute,this}}),Xn.prototype=Object.assign(Object.create(A.prototype),{constructor:Xn,isInstancedBufferAttribute:!0,copy:function(e){return A.prototype.copy.call(this,e),this.meshPerAttribute=e.meshPerAttribute,this}}),Object.assign(qn.prototype,{linePrecision:1,set:function(e,t){this.ray.set(e,t)},setFromCamera:function(e,t){t&&t.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(e.x,e.y,.5).unproject(t).sub(this.ray.origin).normalize()):t&&t.isOrthographicCamera?(this.ray.origin.set(e.x,e.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld)):console.error(\"THREE.Raycaster: Unsupported camera type.\")},intersectObject:function(e,t,r){var i=r||[];return Zn(e,this,i,t),i.sort(Yn),i},intersectObjects:function(e,t,r){var i=r||[];if(!1===Array.isArray(e))return console.warn(\"THREE.Raycaster.intersectObjects: objects is not an Array.\"),i;for(var n=0,o=e.length;n<o;n++)Zn(e[n],this,i,t);return i.sort(Yn),i}}),Object.assign(Jn.prototype,{start:function(){this.startTime=(\"undefined\"==typeof performance?Date:performance).now(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0},stop:function(){this.getElapsedTime(),this.running=!1,this.autoStart=!1},getElapsedTime:function(){return this.getDelta(),this.elapsedTime},getDelta:function(){var e=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){var t=(\"undefined\"==typeof performance?Date:performance).now();e=(t-this.oldTime)/1e3,this.oldTime=t,this.elapsedTime+=e}return e}}),Object.assign(Kn.prototype,{set:function(e,t,r){return this.radius=e,this.phi=t,this.theta=r,this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this},makeSafe:function(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this},setFromVector3:function(e){return this.radius=e.length(),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e.x,e.z),this.phi=Math.acos(zs.clamp(e.y/this.radius,-1,1))),this}}),Object.assign(Qn.prototype,{set:function(e,t,r){return this.radius=e,this.theta=t,this.y=r,this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.radius=e.radius,this.theta=e.theta,this.y=e.y,this},setFromVector3:function(e){return this.radius=Math.sqrt(e.x*e.x+e.z*e.z),this.theta=Math.atan2(e.x,e.z),this.y=e.y,this}}),Object.assign($n.prototype,{set:function(e,t){return this.min.copy(e),this.max.copy(t),this},setFromPoints:function(e){this.makeEmpty();for(var t=0,r=e.length;t<r;t++)this.expandByPoint(e[t]);return this},setFromCenterAndSize:function(){var e=new n;return function(t,r){var i=e.copy(r).multiplyScalar(.5);return this.min.copy(t).sub(i),this.max.copy(t).add(i),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.min.copy(e.min),this.max.copy(e.max),this},makeEmpty:function(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},getCenter:function(e){return void 0===e&&(console.warn(\"THREE.Box2: .getCenter() target is now required\"),e=new n),this.isEmpty()?e.set(0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(e){return void 0===e&&(console.warn(\"THREE.Box2: .getSize() target is now required\"),e=new n),this.isEmpty()?e.set(0,0):e.subVectors(this.max,this.min)},expandByPoint:function(e){return this.min.min(e),this.max.max(e),this},expandByVector:function(e){return this.min.sub(e),this.max.add(e),this},expandByScalar:function(e){return this.min.addScalar(-e),this.max.addScalar(e),this},containsPoint:function(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y)},containsBox:function(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y},getParameter:function(e,t){return void 0===t&&(console.warn(\"THREE.Box2: .getParameter() target is now required\"),t=new n),t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y))},intersectsBox:function(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y)},clampPoint:function(e,t){return void 0===t&&(console.warn(\"THREE.Box2: .clampPoint() target is now required\"),t=new n),t.copy(e).clamp(this.min,this.max)},distanceToPoint:function(){var e=new n;return function(t){return e.copy(t).clamp(this.min,this.max).sub(t).length()}}(),intersect:function(e){return this.min.max(e.min),this.max.min(e.max),this},union:function(e){return this.min.min(e.min),this.max.max(e.max),this},translate:function(e){return this.min.add(e),this.max.add(e),this},equals:function(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}),eo.prototype=Object.create(w.prototype),eo.prototype.constructor=eo,eo.prototype.isImmediateRenderObject=!0,to.prototype=Object.create(Ft.prototype),to.prototype.constructor=to,to.prototype.update=function(){var e=new s,t=new s,r=new c;return function(){var i=[\"a\",\"b\",\"c\"];this.object.updateMatrixWorld(!0),r.getNormalMatrix(this.object.matrixWorld);var n=this.object.matrixWorld,o=this.geometry.attributes.position,a=this.object.geometry;if(a&&a.isGeometry)for(var s=a.vertices,c=a.faces,l=0,u=0,h=c.length;u<h;u++)for(var d=c[u],p=0,f=d.vertexNormals.length;p<f;p++){var m=s[d[i[p]]],v=d.vertexNormals[p];e.copy(m).applyMatrix4(n),t.copy(v).applyMatrix3(r).normalize().multiplyScalar(this.size).add(e),o.setXYZ(l,e.x,e.y,e.z),l+=1,o.setXYZ(l,t.x,t.y,t.z),l+=1}else if(a&&a.isBufferGeometry)for(var g=a.attributes.position,y=a.attributes.normal,l=0,p=0,f=g.count;p<f;p++)e.set(g.getX(p),g.getY(p),g.getZ(p)).applyMatrix4(n),t.set(y.getX(p),y.getY(p),y.getZ(p)),t.applyMatrix3(r).normalize().multiplyScalar(this.size).add(e),o.setXYZ(l,e.x,e.y,e.z),l+=1,o.setXYZ(l,t.x,t.y,t.z),l+=1;o.needsUpdate=!0}}(),ro.prototype=Object.create(w.prototype),ro.prototype.constructor=ro,ro.prototype.dispose=function(){this.cone.geometry.dispose(),this.cone.material.dispose()},ro.prototype.update=function(){var e=new s,t=new s;return function(){this.light.updateMatrixWorld();var r=this.light.distance?this.light.distance:1e3,i=r*Math.tan(this.light.angle);this.cone.scale.set(i,i,r),e.setFromMatrixPosition(this.light.matrixWorld),t.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(t.sub(e)),void 0!==this.color?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}(),no.prototype=Object.create(Ft.prototype),no.prototype.constructor=no,no.prototype.updateMatrixWorld=function(){var e=new s,t=new o,r=new o;return function(i){var n=this.bones,o=this.geometry,a=o.getAttribute(\"position\");r.getInverse(this.root.matrixWorld);for(var s=0,c=0;s<n.length;s++){var l=n[s];l.parent&&l.parent.isBone&&(t.multiplyMatrices(r,l.matrixWorld),e.setFromMatrixPosition(t),a.setXYZ(c,e.x,e.y,e.z),t.multiplyMatrices(r,l.parent.matrixWorld),e.setFromMatrixPosition(t),a.setXYZ(c+1,e.x,e.y,e.z),c+=2)}o.getAttribute(\"position\").needsUpdate=!0,w.prototype.updateMatrixWorld.call(this,i)}}(),oo.prototype=Object.create(J.prototype),oo.prototype.constructor=oo,oo.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose()},oo.prototype.update=function(){void 0!==this.color?this.material.color.set(this.color):this.material.color.copy(this.light.color)},ao.prototype=Object.create(w.prototype),ao.prototype.constructor=ao,ao.prototype.dispose=function(){this.children[0].geometry.dispose(),this.children[0].material.dispose()},ao.prototype.update=function(){var e=.5*this.light.width,t=.5*this.light.height,r=this.line.geometry.attributes.position,i=r.array;i[0]=e,i[1]=-t,i[2]=0,i[3]=e,i[4]=t,i[5]=0,i[6]=-e,i[7]=t,i[8]=0,i[9]=-e,i[10]=-t,i[11]=0,i[12]=e,i[13]=-t,i[14]=0,r.needsUpdate=!0,void 0!==this.color?this.line.material.color.set(this.color):this.line.material.color.copy(this.light.color)},so.prototype=Object.create(w.prototype),so.prototype.constructor=so,so.prototype.dispose=function(){this.children[0].geometry.dispose(),this.children[0].material.dispose()},so.prototype.update=function(){var e=new s,t=new y,r=new y;return function(){var i=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{var n=i.geometry.getAttribute(\"color\");t.copy(this.light.color),r.copy(this.light.groundColor);for(var o=0,a=n.count;o<a;o++){var s=o<a/2?t:r;n.setXYZ(o,s.r,s.g,s.b)}n.needsUpdate=!0}i.lookAt(e.setFromMatrixPosition(this.light.matrixWorld).negate())}}(),co.prototype=Object.create(Ft.prototype),co.prototype.constructor=co,lo.prototype=Object.create(Ft.prototype),lo.prototype.constructor=lo,uo.prototype=Object.create(Ft.prototype),uo.prototype.constructor=uo,uo.prototype.update=function(){var e=new s,t=new s,r=new c;return function(){this.object.updateMatrixWorld(!0),r.getNormalMatrix(this.object.matrixWorld);for(var i=this.object.matrixWorld,n=this.geometry.attributes.position,o=this.object.geometry,a=o.vertices,s=o.faces,c=0,l=0,u=s.length;l<u;l++){var h=s[l],d=h.normal;e.copy(a[h.a]).add(a[h.b]).add(a[h.c]).divideScalar(3).applyMatrix4(i),t.copy(d).applyMatrix3(r).normalize().multiplyScalar(this.size).add(e),n.setXYZ(c,e.x,e.y,e.z),c+=1,n.setXYZ(c,t.x,t.y,t.z),c+=1}n.needsUpdate=!0}}(),ho.prototype=Object.create(w.prototype),ho.prototype.constructor=ho,ho.prototype.dispose=function(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()},ho.prototype.update=function(){var e=new s,t=new s,r=new s;return function(){e.setFromMatrixPosition(this.light.matrixWorld),t.setFromMatrixPosition(this.light.target.matrixWorld),r.subVectors(t,e),this.lightPlane.lookAt(r),void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(r),this.targetLine.scale.z=r.length()}}(),po.prototype=Object.create(Ft.prototype),po.prototype.constructor=po,po.prototype.update=function(){function e(e,o,a,s){i.set(o,a,s).unproject(n);var c=r[e];if(void 0!==c)for(var l=t.getAttribute(\"position\"),u=0,h=c.length;u<h;u++)l.setXYZ(c[u],i.x,i.y,i.z)}var t,r,i=new s,n=new M;return function(){t=this.geometry,r=this.pointMap;n.projectionMatrix.copy(this.camera.projectionMatrix),e(\"c\",0,0,-1),e(\"t\",0,0,1),e(\"n1\",-1,-1,-1),e(\"n2\",1,-1,-1),e(\"n3\",-1,1,-1),e(\"n4\",1,1,-1),e(\"f1\",-1,-1,1),e(\"f2\",1,-1,1),e(\"f3\",-1,1,1),e(\"f4\",1,1,1),e(\"u1\",.7,1.1,-1),e(\"u2\",-.7,1.1,-1),e(\"u3\",0,2,-1),e(\"cf1\",-1,0,1),e(\"cf2\",1,0,1),e(\"cf3\",0,-1,1),e(\"cf4\",0,1,1),e(\"cn1\",-1,0,-1),e(\"cn2\",1,0,-1),e(\"cn3\",0,-1,-1),e(\"cn4\",0,1,-1),t.getAttribute(\"position\").needsUpdate=!0}}(),fo.prototype=Object.create(Ft.prototype),fo.prototype.constructor=fo,fo.prototype.update=function(){var e=new f;return function(t){if(void 0!==t&&console.warn(\"THREE.BoxHelper: .update() has no longer arguments.\"),void 0!==this.object&&e.setFromObject(this.object),!e.isEmpty()){var r=e.min,i=e.max,n=this.geometry.attributes.position,o=n.array;o[0]=i.x,o[1]=i.y,o[2]=i.z,o[3]=r.x,o[4]=i.y,o[5]=i.z,o[6]=r.x,o[7]=r.y,o[8]=i.z,o[9]=i.x,o[10]=r.y,o[11]=i.z,o[12]=i.x,o[13]=i.y,o[14]=r.z,o[15]=r.x,o[16]=i.y,o[17]=r.z,o[18]=r.x,o[19]=r.y,o[20]=r.z,o[21]=i.x,o[22]=r.y,o[23]=r.z,n.needsUpdate=!0,this.geometry.computeBoundingSphere()}}}(),fo.prototype.setFromObject=function(e){return this.object=e,this.update(),this},mo.prototype=Object.create(Ft.prototype),mo.prototype.constructor=mo,mo.prototype.updateMatrixWorld=function(e){var t=this.box;t.isEmpty()||(t.getCenter(this.position),t.getSize(this.scale),this.scale.multiplyScalar(.5),w.prototype.updateMatrixWorld.call(this,e))},vo.prototype=Object.create(Nt.prototype),vo.prototype.constructor=vo,vo.prototype.updateMatrixWorld=function(e){var t=-this.plane.constant;Math.abs(t)<1e-8&&(t=1e-8),this.scale.set(.5*this.size,.5*this.size,t),this.lookAt(this.plane.normal),w.prototype.updateMatrixWorld.call(this,e)};var Tc,Ac;go.prototype=Object.create(w.prototype),go.prototype.constructor=go,go.prototype.setDirection=function(){var e,t=new s;return function(r){r.y>.99999?this.quaternion.set(0,0,0,1):r.y<-.99999?this.quaternion.set(1,0,0,0):(t.set(r.z,0,-r.x).normalize(),e=Math.acos(r.y),this.quaternion.setFromAxisAngle(t,e))}}(),go.prototype.setLength=function(e,t,r){void 0===t&&(t=.2*e),void 0===r&&(r=.2*t),this.line.scale.set(1,Math.max(0,e-t),1),this.line.updateMatrix(),this.cone.scale.set(r,t,r),this.cone.position.y=e,this.cone.updateMatrix()},go.prototype.setColor=function(e){this.line.material.color.copy(e),this.cone.material.color.copy(e)},yo.prototype=Object.create(Ft.prototype),yo.prototype.constructor=yo;wi.create=function(e,t){return console.log(\"THREE.Curve.create() has been deprecated\"),e.prototype=Object.create(wi.prototype),e.prototype.constructor=e,e.prototype.getPoint=t,e},Object.assign(ki.prototype,{createPointsGeometry:function(e){console.warn(\"THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.\");var t=this.getPoints(e);return this.createGeometry(t)},createSpacedPointsGeometry:function(e){console.warn(\"THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.\");var t=this.getSpacedPoints(e);return this.createGeometry(t)},createGeometry:function(e){console.warn(\"THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.\");for(var t=new T,r=0,i=e.length;r<i;r++){var n=e[r];t.vertices.push(new s(n.x,n.y,n.z||0))}return t}}),Object.assign(Wi.prototype,{fromPoints:function(e){console.warn(\"THREE.Path: .fromPoints() has been renamed to .setFromPoints().\"),this.setFromPoints(e)}}),xo.prototype=Object.create(Ti.prototype),_o.prototype=Object.create(Ti.prototype),bo.prototype=Object.create(Ti.prototype),Object.assign(bo.prototype,{initFromArray:function(){console.error(\"THREE.Spline: .initFromArray() has been removed.\")},getControlPointsArray:function(){console.error(\"THREE.Spline: .getControlPointsArray() has been removed.\")},reparametrizeByArcLength:function(){console.error(\"THREE.Spline: .reparametrizeByArcLength() has been removed.\")}}),co.prototype.setColors=function(){console.error(\"THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.\")},no.prototype.update=function(){console.error(\"THREE.SkeletonHelper: update() no longer needs to be called.\")},Object.assign(xn.prototype,{extractUrlBase:function(e){return console.warn(\"THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.\"),xc.extractUrlBase(e)}}),Object.assign($n.prototype,{center:function(e){return console.warn(\"THREE.Box2: .center() has been renamed to .getCenter().\"),this.getCenter(e)},empty:function(){return console.warn(\"THREE.Box2: .empty() has been renamed to .isEmpty().\"),this.isEmpty()},isIntersectionBox:function(e){return console.warn(\"THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().\"),this.intersectsBox(e)},size:function(e){return console.warn(\"THREE.Box2: .size() has been renamed to .getSize().\"),this.getSize(e)}}),Object.assign(f.prototype,{center:function(e){return console.warn(\"THREE.Box3: .center() has been renamed to .getCenter().\"),this.getCenter(e)},empty:function(){return console.warn(\"THREE.Box3: .empty() has been renamed to .isEmpty().\"),this.isEmpty()},isIntersectionBox:function(e){return console.warn(\"THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().\"),this.intersectsBox(e)},isIntersectionSphere:function(e){return console.warn(\"THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().\"),this.intersectsSphere(e)},size:function(e){return console.warn(\"THREE.Box3: .size() has been renamed to .getSize().\"),this.getSize(e)}}),Y.prototype.center=function(e){return console.warn(\"THREE.Line3: .center() has been renamed to .getCenter().\"),this.getCenter(e)},Object.assign(zs,{random16:function(){return console.warn(\"THREE.Math: .random16() has been deprecated. Use Math.random() instead.\"),Math.random()},nearestPowerOfTwo:function(e){return console.warn(\"THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().\"),zs.floorPowerOfTwo(e)},nextPowerOfTwo:function(e){return console.warn(\"THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().\"),zs.ceilPowerOfTwo(e)}}),Object.assign(c.prototype,{flattenToArrayOffset:function(e,t){return console.warn(\"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\"),this.toArray(e,t)},multiplyVector3:function(e){return console.warn(\"THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.\"),e.applyMatrix3(this)},multiplyVector3Array:function(){console.error(\"THREE.Matrix3: .multiplyVector3Array() has been removed.\")},applyToBuffer:function(e){return console.warn(\"THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.\"),this.applyToBufferAttribute(e)},applyToVector3Array:function(){console.error(\"THREE.Matrix3: .applyToVector3Array() has been removed.\")}}),Object.assign(o.prototype,{extractPosition:function(e){return console.warn(\"THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().\"),this.copyPosition(e)},flattenToArrayOffset:function(e,t){return console.warn(\"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\"),this.toArray(e,t)},getPosition:function(){var e;return function(){return void 0===e&&(e=new s),console.warn(\"THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.\"),e.setFromMatrixColumn(this,3)}}(),setRotationFromQuaternion:function(e){return console.warn(\"THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().\"),this.makeRotationFromQuaternion(e)},multiplyToArray:function(){console.warn(\"THREE.Matrix4: .multiplyToArray() has been removed.\")},multiplyVector3:function(e){return console.warn(\"THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.\"),e.applyMatrix4(this)},multiplyVector4:function(e){return console.warn(\"THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.\"),e.applyMatrix4(this)},multiplyVector3Array:function(){console.error(\"THREE.Matrix4: .multiplyVector3Array() has been removed.\")},rotateAxis:function(e){console.warn(\"THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.\"),e.transformDirection(this)},crossVector:function(e){return console.warn(\"THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.\"),e.applyMatrix4(this)},translate:function(){console.error(\"THREE.Matrix4: .translate() has been removed.\")},rotateX:function(){console.error(\"THREE.Matrix4: .rotateX() has been removed.\")},rotateY:function(){console.error(\"THREE.Matrix4: .rotateY() has been removed.\")},rotateZ:function(){console.error(\"THREE.Matrix4: .rotateZ() has been removed.\")},rotateByAxis:function(){console.error(\"THREE.Matrix4: .rotateByAxis() has been removed.\")},applyToBuffer:function(e){return console.warn(\"THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.\"),this.applyToBufferAttribute(e)},applyToVector3Array:function(){console.error(\"THREE.Matrix4: .applyToVector3Array() has been removed.\")},makeFrustum:function(e,t,r,i,n,o){return console.warn(\"THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.\"),this.makePerspective(e,t,i,r,n,o)}}),v.prototype.isIntersectionLine=function(e){return console.warn(\"THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().\"),this.intersectsLine(e)},a.prototype.multiplyVector3=function(e){return console.warn(\"THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.\"),e.applyQuaternion(this)},Object.assign(q.prototype,{isIntersectionBox:function(e){return console.warn(\"THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().\"),this.intersectsBox(e)},isIntersectionPlane:function(e){return console.warn(\"THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().\"),this.intersectsPlane(e)},isIntersectionSphere:function(e){return console.warn(\"THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().\"),this.intersectsSphere(e)}}),Object.assign(Z.prototype,{area:function(){return console.warn(\"THREE.Triangle: .area() has been renamed to .getArea().\"),this.getArea()},barycoordFromPoint:function(e,t){return console.warn(\"THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().\"),this.getBarycoord(e,t)},midpoint:function(e){return console.warn(\"THREE.Triangle: .midpoint() has been renamed to .getMidpoint().\"),this.getMidpoint(e)},normal:function(e){return console.warn(\"THREE.Triangle: .normal() has been renamed to .getNormal().\"),this.getNormal(e)},plane:function(e){return console.warn(\"THREE.Triangle: .plane() has been renamed to .getPlane().\"),this.getPlane(e)}}),Object.assign(Z,{barycoordFromPoint:function(e,t,r,i,n){return console.warn(\"THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().\"),Z.getBarycoord(e,t,r,i,n)},normal:function(e,t,r,i){return console.warn(\"THREE.Triangle: .normal() has been renamed to .getNormal().\"),Z.getNormal(e,t,r,i)}}),Object.assign(Xi.prototype,{extractAllPoints:function(e){return console.warn(\"THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.\"),this.extractPoints(e)},extrude:function(e){return console.warn(\"THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.\"),new Gr(this,e)},makeGeometry:function(e){return console.warn(\"THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.\"),new Jr(this,e)}}),Object.assign(n.prototype,{fromAttribute:function(e,t,r){return console.warn(\"THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().\"),this.fromBufferAttribute(e,t,r)},distanceToManhattan:function(e){return console.warn(\"THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().\"),this.manhattanDistanceTo(e)},lengthManhattan:function(){return console.warn(\"THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().\"),this.manhattanLength()}}),Object.assign(s.prototype,{setEulerFromRotationMatrix:function(){console.error(\"THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.\")},setEulerFromQuaternion:function(){console.error(\"THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.\")},getPositionFromMatrix:function(e){return console.warn(\"THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().\"),this.setFromMatrixPosition(e)},getScaleFromMatrix:function(e){return console.warn(\"THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().\"),this.setFromMatrixScale(e)},getColumnFromMatrix:function(e,t){return console.warn(\"THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().\"),this.setFromMatrixColumn(t,e)},applyProjection:function(e){return console.warn(\"THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.\"),this.applyMatrix4(e)},fromAttribute:function(e,t,r){return console.warn(\"THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().\"),this.fromBufferAttribute(e,t,r)},distanceToManhattan:function(e){return console.warn(\"THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().\"),this.manhattanDistanceTo(e)},lengthManhattan:function(){return console.warn(\"THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().\"),this.manhattanLength()}}),Object.assign(u.prototype,{fromAttribute:function(e,t,r){return console.warn(\"THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().\"),this.fromBufferAttribute(e,t,r)},lengthManhattan:function(){return console.warn(\"THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().\"),this.manhattanLength()}}),Object.assign(T.prototype,{computeTangents:function(){console.error(\"THREE.Geometry: .computeTangents() has been removed.\")},computeLineDistances:function(){console.error(\"THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.\")}}),Object.assign(w.prototype,{getChildByName:function(e){return console.warn(\"THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().\"),this.getObjectByName(e)},renderDepth:function(){console.warn(\"THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.\")},translate:function(e,t){return console.warn(\"THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.\"),this.translateOnAxis(t,e)},getWorldRotation:function(){console.error(\"THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.\")}}),Object.defineProperties(w.prototype,{eulerOrder:{get:function(){return console.warn(\"THREE.Object3D: .eulerOrder is now .rotation.order.\"),this.rotation.order},set:function(e){console.warn(\"THREE.Object3D: .eulerOrder is now .rotation.order.\"),this.rotation.order=e}},useQuaternion:{get:function(){console.warn(\"THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.\")},set:function(){console.warn(\"THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.\")}}}),Object.defineProperties(Pt.prototype,{objects:{get:function(){return console.warn(\"THREE.LOD: .objects has been renamed to .levels.\"),this.levels}}}),Object.defineProperty(Dt.prototype,\"useVertexTexture\",{get:function(){console.warn(\"THREE.Skeleton: useVertexTexture has been removed.\")},set:function(){console.warn(\"THREE.Skeleton: useVertexTexture has been removed.\")}}),Object.defineProperty(wi.prototype,\"__arcLengthDivisions\",{get:function(){return console.warn(\"THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.\"),this.arcLengthDivisions},set:function(e){console.warn(\"THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.\"),this.arcLengthDivisions=e}}),wt.prototype.setLens=function(e,t){console.warn(\"THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.\"),void 0!==t&&(this.filmGauge=t),this.setFocalLength(e)},Object.defineProperties(qi.prototype,{onlyShadow:{set:function(){console.warn(\"THREE.Light: .onlyShadow has been removed.\")}},shadowCameraFov:{set:function(e){console.warn(\"THREE.Light: .shadowCameraFov is now .shadow.camera.fov.\"),this.shadow.camera.fov=e}},shadowCameraLeft:{set:function(e){console.warn(\"THREE.Light: .shadowCameraLeft is now .shadow.camera.left.\"),this.shadow.camera.left=e}},shadowCameraRight:{set:function(e){console.warn(\"THREE.Light: .shadowCameraRight is now .shadow.camera.right.\"),this.shadow.camera.right=e}},shadowCameraTop:{set:function(e){console.warn(\"THREE.Light: .shadowCameraTop is now .shadow.camera.top.\"),this.shadow.camera.top=e}},shadowCameraBottom:{set:function(e){console.warn(\"THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.\"),this.shadow.camera.bottom=e}},shadowCameraNear:{set:function(e){console.warn(\"THREE.Light: .shadowCameraNear is now .shadow.camera.near.\"),this.shadow.camera.near=e}},shadowCameraFar:{set:function(e){console.warn(\"THREE.Light: .shadowCameraFar is now .shadow.camera.far.\"),this.shadow.camera.far=e}},shadowCameraVisible:{set:function(){console.warn(\"THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.\")}},shadowBias:{set:function(e){console.warn(\"THREE.Light: .shadowBias is now .shadow.bias.\"),this.shadow.bias=e}},shadowDarkness:{set:function(){console.warn(\"THREE.Light: .shadowDarkness has been removed.\")}},shadowMapWidth:{set:function(e){console.warn(\"THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.\"),this.shadow.mapSize.width=e}},shadowMapHeight:{set:function(e){console.warn(\"THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.\"),this.shadow.mapSize.height=e}}}),Object.defineProperties(A.prototype,{length:{get:function(){return console.warn(\"THREE.BufferAttribute: .length has been deprecated. Use .count instead.\"),this.array.length}},copyIndicesArray:function(){console.error(\"THREE.BufferAttribute: .copyIndicesArray() has been removed.\")}}),Object.assign(B.prototype,{addIndex:function(e){console.warn(\"THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().\"),this.setIndex(e)},addDrawCall:function(e,t,r){void 0!==r&&console.warn(\"THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.\"),console.warn(\"THREE.BufferGeometry: .addDrawCall() is now .addGroup().\"),this.addGroup(e,t)},clearDrawCalls:function(){console.warn(\"THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().\"),this.clearGroups()},computeTangents:function(){console.warn(\"THREE.BufferGeometry: .computeTangents() has been removed.\")},computeOffsets:function(){console.warn(\"THREE.BufferGeometry: .computeOffsets() has been removed.\")}}),Object.defineProperties(B.prototype,{drawcalls:{get:function(){return console.error(\"THREE.BufferGeometry: .drawcalls has been renamed to .groups.\"),this.groups}},offsets:{get:function(){return console.warn(\"THREE.BufferGeometry: .offsets has been renamed to .groups.\"),this.groups}}}),Object.assign(Hr.prototype,{getArrays:function(){console.error(\"THREE.ExtrudeBufferGeometry: .getArrays() has been removed.\")},addShapeList:function(){console.error(\"THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.\")},addShape:function(){console.error(\"THREE.ExtrudeBufferGeometry: .addShape() has been removed.\")}}),Object.defineProperties(Hn.prototype,{dynamic:{set:function(){console.warn(\"THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.\")}},onUpdate:{value:function(){return console.warn(\"THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.\"),this}}}),Object.defineProperties(k.prototype,{wrapAround:{get:function(){console.warn(\"THREE.Material: .wrapAround has been removed.\")},set:function(){console.warn(\"THREE.Material: .wrapAround has been removed.\")}},wrapRGB:{get:function(){return console.warn(\"THREE.Material: .wrapRGB has been removed.\"),new y}},shading:{get:function(){console.error(\"THREE.\"+this.type+\": .shading has been removed. Use the boolean .flatShading instead.\")},set:function(e){console.warn(\"THREE.\"+this.type+\": .shading has been removed. Use the boolean .flatShading instead.\"),this.flatShading=1===e}}}),Object.defineProperties(ui.prototype,{metal:{get:function(){return console.warn(\"THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.\"),!1},set:function(){console.warn(\"THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead\")}}}),Object.defineProperties(X.prototype,{derivatives:{get:function(){return console.warn(\"THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.\"),this.extensions.derivatives},set:function(e){console.warn(\"THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.\"),this.extensions.derivatives=e}}}),Object.assign(St.prototype,{getCurrentRenderTarget:function(){return console.warn(\"THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().\"),this.getRenderTarget()},getMaxAnisotropy:function(){return console.warn(\"THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().\"),this.capabilities.getMaxAnisotropy()},getPrecision:function(){return console.warn(\"THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.\"),this.capabilities.precision},resetGLState:function(){return console.warn(\"THREE.WebGLRenderer: .resetGLState() is now .state.reset().\"),this.state.reset()},supportsFloatTextures:function(){return console.warn(\"THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).\"),this.extensions.get(\"OES_texture_float\")},supportsHalfFloatTextures:function(){return console.warn(\"THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).\"),this.extensions.get(\"OES_texture_half_float\")},supportsStandardDerivatives:function(){return console.warn(\"THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).\"),this.extensions.get(\"OES_standard_derivatives\")},supportsCompressedTextureS3TC:function(){return console.warn(\"THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).\"),this.extensions.get(\"WEBGL_compressed_texture_s3tc\")},supportsCompressedTexturePVRTC:function(){return console.warn(\"THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).\"),this.extensions.get(\"WEBGL_compressed_texture_pvrtc\")},supportsBlendMinMax:function(){return console.warn(\"THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).\"),this.extensions.get(\"EXT_blend_minmax\")},supportsVertexTextures:function(){return console.warn(\"THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.\"),this.capabilities.vertexTextures},supportsInstancedArrays:function(){return console.warn(\"THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).\"),this.extensions.get(\"ANGLE_instanced_arrays\")},enableScissorTest:function(e){console.warn(\"THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().\"),this.setScissorTest(e)},initMaterial:function(){console.warn(\"THREE.WebGLRenderer: .initMaterial() has been removed.\")},addPrePlugin:function(){console.warn(\"THREE.WebGLRenderer: .addPrePlugin() has been removed.\")},addPostPlugin:function(){console.warn(\"THREE.WebGLRenderer: .addPostPlugin() has been removed.\")},updateShadowMap:function(){console.warn(\"THREE.WebGLRenderer: .updateShadowMap() has been removed.\")},setFaceCulling:function(){console.warn(\"THREE.WebGLRenderer: .setFaceCulling() has been removed.\")}}),Object.defineProperties(St.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(e){console.warn(\"THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.\"),this.shadowMap.enabled=e}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(e){console.warn(\"THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.\"),this.shadowMap.type=e}},shadowMapCullFace:{get:function(){console.warn(\"THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.\")},set:function(){console.warn(\"THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.\")}}}),Object.defineProperties(vt.prototype,{cullFace:{get:function(){console.warn(\"THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.\")},set:function(){console.warn(\"THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.\")}},renderReverseSided:{get:function(){console.warn(\"THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.\")},set:function(){console.warn(\"THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.\")}},renderSingleSided:{get:function(){console.warn(\"THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.\")},set:function(){console.warn(\"THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.\")}}}),Object.defineProperties(h.prototype,{wrapS:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.\"),this.texture.wrapS},set:function(e){console.warn(\"THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.\"),this.texture.wrapS=e}},wrapT:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.\"),this.texture.wrapT},set:function(e){console.warn(\"THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.\"),this.texture.wrapT=e}},magFilter:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.\"),this.texture.magFilter},set:function(e){console.warn(\"THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.\"),this.texture.magFilter=e}},minFilter:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.\"),this.texture.minFilter},set:function(e){console.warn(\"THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.\"),this.texture.minFilter=e}},anisotropy:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.\"),this.texture.anisotropy},set:function(e){console.warn(\"THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.\"),this.texture.anisotropy=e}},offset:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .offset is now .texture.offset.\"),this.texture.offset},set:function(e){console.warn(\"THREE.WebGLRenderTarget: .offset is now .texture.offset.\"),this.texture.offset=e}},repeat:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .repeat is now .texture.repeat.\"),this.texture.repeat},set:function(e){console.warn(\"THREE.WebGLRenderTarget: .repeat is now .texture.repeat.\"),this.texture.repeat=e}},format:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .format is now .texture.format.\"),this.texture.format},set:function(e){console.warn(\"THREE.WebGLRenderTarget: .format is now .texture.format.\"),this.texture.format=e}},type:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .type is now .texture.type.\"),this.texture.type},set:function(e){console.warn(\"THREE.WebGLRenderTarget: .type is now .texture.type.\"),this.texture.type=e}},generateMipmaps:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.\"),this.texture.generateMipmaps},set:function(e){console.warn(\"THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.\"),this.texture.generateMipmaps=e}}}),Object.defineProperties(Et.prototype,{standing:{set:function(){console.warn(\"THREE.WebVRManager: .standing has been removed.\")}}}),Dn.prototype.load=function(e){console.warn(\"THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.\");var t=this;return(new Ln).load(e,function(e){t.setBuffer(e)}),this},In.prototype.getData=function(){return console.warn(\"THREE.AudioAnalyser: .getData() is now .getFrequencyData().\"),this.getFrequencyData()},Rn.prototype.updateCubeMap=function(e,t){return console.warn(\"THREE.CubeCamera: .updateCubeMap() is now .update().\"),this.update(e,t)}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var i=r(2);r.d(t,\"AdaptiveToneMappingPass\",function(){return i.a});var n=r(3);r.d(t,\"BasicShader\",function(){return n.a});var o=r(4);r.d(t,\"BleachBypassShader\",function(){return o.a});var a=r(5);r.d(t,\"BlendShader\",function(){return a.a});var s=r(6);r.d(t,\"BloomPass\",function(){return s.a});var c=r(7);r.d(t,\"BokehPass\",function(){return c.a});var l=r(8);r.d(t,\"BokehShader\",function(){return l.a});var u=r(9);r.d(t,\"BokehShader2\",function(){return u.a});var h=r(10);r.d(t,\"BrightnessContrastShader\",function(){return h.a});var d=r(11);r.d(t,\"ColorCorrectionShader\",function(){return d.a});var p=r(12);r.d(t,\"ColorifyShader\",function(){return p.a});var f=r(13);r.d(t,\"ConvolutionShader\",function(){return f.a});var m=r(14);r.d(t,\"CopyShader\",function(){return m.a});var v=r(15);r.d(t,\"DDSLoader\",function(){return v.a});var g=r(16);r.d(t,\"DOFMipMapShader\",function(){return g.a});var y=r(17);r.d(t,\"DigitalGlitch\",function(){return y.a});var x=r(18);r.d(t,\"DotScreenPass\",function(){return x.a});var _=r(19);r.d(t,\"DotScreenShader\",function(){return _.a});var b=r(20);r.d(t,\"EdgeShader\",function(){return b.a});var w=r(21);r.d(t,\"EdgeShader2\",function(){return w.a});var M=r(22);r.d(t,\"EffectComposer\",function(){return M.a});var E=r(23);r.d(t,\"FXAAShader\",function(){return E.a});var S=r(24);r.d(t,\"FilmPass\",function(){return S.a});var T=r(25);r.d(t,\"FilmShader\",function(){return T.a});var A=r(26);r.d(t,\"FocusShader\",function(){return A.a});var L=r(27);r.d(t,\"FresnelShader\",function(){return L.a});var C=r(28);r.d(t,\"GammaCorrectionShader\",function(){return C.a});var R=r(29);r.d(t,\"GlitchPass\",function(){return R.a});var P=r(30);r.d(t,\"HorizontalBlurShader\",function(){return P.a});var D=r(31);r.d(t,\"HorizontalTiltShiftShader\",function(){return D.a});var U=r(32);r.d(t,\"HueSaturationShader\",function(){return U.a});var I=r(33);r.d(t,\"KaleidoShader\",function(){return I.a});var O=r(34);r.d(t,\"LuminosityShader\",function(){return O.a});var N=r(35);r.d(t,\"MTLLoader\",function(){return N.a});var F=r(36);r.d(t,\"MarchingCubes\",function(){return F.a});var z=r(37);r.d(t,\"MaskPass\",function(){return z.a});var B=r(38);r.d(t,\"MirrorShader\",function(){return B.a});var G=r(39);r.d(t,\"NormalMapShader\",function(){return G.a});var H=r(40);r.d(t,\"OBJLoader\",function(){return H.a});var j=r(41);r.d(t,\"OceanShaders\",function(){return j.a});var V=r(42);r.d(t,\"OrbitControls\",function(){return V.a});var k=r(43);r.d(t,\"ParallaxShader\",function(){return k.a});var W=r(44);r.d(t,\"RGBShiftShader\",function(){return W.a});var X=r(45);r.d(t,\"RenderPass\",function(){return X.a});var q=r(46);r.d(t,\"SSAOShader\",function(){return q.a});var Y=r(47);r.d(t,\"SVGLoader\",function(){return Y.a});var Z=r(48);r.d(t,\"SavePass\",function(){return Z.a});var J=r(49);r.d(t,\"SepiaShader\",function(){return J.a});var K=r(50);r.d(t,\"ShaderPass\",function(){return K.a});var Q=r(51);r.d(t,\"ShaderToon\",function(){return Q.a});var $=r(52);r.d(t,\"TechnicolorShader\",function(){return $.a});var ee=r(53);r.d(t,\"TexturePass\",function(){return ee.a});var te=r(54);r.d(t,\"ToneMapShader\",function(){return te.a});var re=r(55);r.d(t,\"TriangleBlurShader\",function(){return re.a});var ie=r(56);r.d(t,\"UnpackDepthRGBAShader\",function(){return ie.a});var ne=r(57);r.d(t,\"VerticalBlurShader\",function(){return ne.a});var oe=r(58);r.d(t,\"VerticalTiltShiftShader\",function(){return oe.a});var ae=r(59);r.d(t,\"VignetteShader\",function(){return ae.a});var se=r(60);r.d(t,\"SobelOperatorShader\",function(){return se.a})},function(e,t,r){\"use strict\";var i=r(0);i.AdaptiveToneMappingPass=function(e,t){this.resolution=void 0!==t?t:256,this.needsInit=!0,this.adaptive=void 0===e||!!e,this.luminanceRT=null,this.previousLuminanceRT=null,this.currentLuminanceRT=null,void 0===i.CopyShader&&console.error(\"THREE.AdaptiveToneMappingPass relies on THREE.CopyShader\");var r=i.CopyShader;this.copyUniforms=i._46.clone(r.uniforms),this.materialCopy=new i._35({uniforms:this.copyUniforms,vertexShader:r.vertexShader,fragmentShader:r.fragmentShader,blending:i._9,depthTest:!1}),void 0===i.LuminosityShader&&console.error(\"THREE.AdaptiveToneMappingPass relies on THREE.LuminosityShader\"),this.materialLuminance=new i._35({uniforms:i._46.clone(i.LuminosityShader.uniforms),vertexShader:i.LuminosityShader.vertexShader,fragmentShader:i.LuminosityShader.fragmentShader,blending:i._9}),this.adaptLuminanceShader={defines:{MIP_LEVEL_1X1:(Math.log(this.resolution)/Math.log(2)).toFixed(1)},uniforms:{lastLum:{type:\"t\",value:null},currentLum:{type:\"t\",value:null},delta:{type:\"f\",value:.016},tau:{type:\"f\",value:1}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"varying vec2 vUv;\",\"uniform sampler2D lastLum;\",\"uniform sampler2D currentLum;\",\"uniform float delta;\",\"uniform float tau;\",\"void main() {\",\"vec4 lastLum = texture2D( lastLum, vUv, MIP_LEVEL_1X1 );\",\"vec4 currentLum = texture2D( currentLum, vUv, MIP_LEVEL_1X1 );\",\"float fLastLum = lastLum.r;\",\"float fCurrentLum = currentLum.r;\",\"fCurrentLum *= fCurrentLum;\",\"float fAdaptedLum = fLastLum + (fCurrentLum - fLastLum) * (1.0 - exp(-delta * tau));\",\"gl_FragColor = vec4( vec3( fAdaptedLum ), 1.0 );\",\"}\"].join(\"\\n\")},this.materialAdaptiveLum=new i._35({uniforms:i._46.clone(this.adaptLuminanceShader.uniforms),vertexShader:this.adaptLuminanceShader.vertexShader,fragmentShader:this.adaptLuminanceShader.fragmentShader,defines:this.adaptLuminanceShader.defines,blending:i._9}),void 0===i.ToneMapShader&&console.error(\"THREE.AdaptiveToneMappingPass relies on THREE.ToneMapShader\"),this.materialToneMap=new i._35({uniforms:i._46.clone(i.ToneMapShader.uniforms),vertexShader:i.ToneMapShader.vertexShader,fragmentShader:i.ToneMapShader.fragmentShader,blending:i._9}),this.enabled=!0,this.needsSwap=!0,this.clear=!1,this.camera=new i._14(-1,1,1,-1,0,1),this.scene=new i._31,this.quad=new i._3(new i._17(2,2),null),this.scene.add(this.quad)},i.AdaptiveToneMappingPass.prototype={render:function(e,t,r,i,n){this.needsInit&&(this.reset(e),this.luminanceRT.type=r.type,this.previousLuminanceRT.type=r.type,this.currentLuminanceRT.type=r.type,this.needsInit=!1),this.adaptive&&(this.quad.material=this.materialLuminance,this.materialLuminance.uniforms.tDiffuse.value=r,e.render(this.scene,this.camera,this.currentLuminanceRT),this.quad.material=this.materialAdaptiveLum,this.materialAdaptiveLum.uniforms.delta.value=i,this.materialAdaptiveLum.uniforms.lastLum.value=this.previousLuminanceRT,this.materialAdaptiveLum.uniforms.currentLum.value=this.currentLuminanceRT,e.render(this.scene,this.camera,this.luminanceRT),this.quad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=this.luminanceRT,e.render(this.scene,this.camera,this.previousLuminanceRT)),this.quad.material=this.materialToneMap,this.materialToneMap.uniforms.tDiffuse.value=r,e.render(this.scene,this.camera,t,this.clear)},reset:function(e){this.luminanceRT&&this.luminanceRT.dispose(),this.currentLuminanceRT&&this.currentLuminanceRT.dispose(),this.previousLuminanceRT&&this.previousLuminanceRT.dispose();var t={minFilter:i.U,magFilter:i.U,format:i._22};this.luminanceRT=new i._53(this.resolution,this.resolution,t),this.luminanceRT.generateMipmaps=!1,this.previousLuminanceRT=new i._53(this.resolution,this.resolution,t),this.previousLuminanceRT.generateMipmaps=!1,t.minFilter=i.V,this.currentLuminanceRT=new i._53(this.resolution,this.resolution,t),this.adaptive&&(this.materialToneMap.defines.ADAPTED_LUMINANCE=\"\",this.materialToneMap.uniforms.luminanceMap.value=this.luminanceRT),this.quad.material=new i._4({color:7829367}),this.materialLuminance.needsUpdate=!0,this.materialAdaptiveLum.needsUpdate=!0,this.materialToneMap.needsUpdate=!0},setAdaptive:function(e){e?(this.adaptive=!0,this.materialToneMap.defines.ADAPTED_LUMINANCE=\"\",this.materialToneMap.uniforms.luminanceMap.value=this.luminanceRT):(this.adaptive=!1,delete this.materialToneMap.defines.ADAPTED_LUMINANCE,this.materialToneMap.uniforms.luminanceMap.value=void 0),this.materialToneMap.needsUpdate=!0},setAdaptionRate:function(e){e&&(this.materialAdaptiveLum.uniforms.tau.value=Math.abs(e))},setMaxLuminance:function(e){e&&(this.materialToneMap.uniforms.maxLuminance.value=e)},setAverageLuminance:function(e){e&&(this.materialToneMap.uniforms.averageLuminance.value=e)},setMiddleGrey:function(e){e&&(this.materialToneMap.uniforms.middleGrey.value=e)},dispose:function(){this.luminanceRT&&this.luminanceRT.dispose(),this.previousLuminanceRT&&this.previousLuminanceRT.dispose(),this.currentLuminanceRT&&this.currentLuminanceRT.dispose(),this.materialLuminance&&this.materialLuminance.dispose(),this.materialAdaptiveLum&&this.materialAdaptiveLum.dispose(),this.materialCopy&&this.materialCopy.dispose(),this.materialToneMap&&this.materialToneMap.dispose()}},t.a=i.AdaptiveToneMappingPass},function(e,t,r){\"use strict\";var i=r(0);i.BasicShader={uniforms:{},vertexShader:[\"void main() {\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"void main() {\",\"gl_FragColor = vec4( 1.0, 0.0, 0.0, 0.5 );\",\"}\"].join(\"\\n\")},t.a=i.BasicShader},function(e,t,r){\"use strict\";var i=r(0);i.BleachBypassShader={uniforms:{tDiffuse:{type:\"t\",value:null},opacity:{type:\"f\",value:1}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform float opacity;\",\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"void main() {\",\"vec4 base = texture2D( tDiffuse, vUv );\",\"vec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\",\"float lum = dot( lumCoeff, base.rgb );\",\"vec3 blend = vec3( lum );\",\"float L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\",\"vec3 result1 = 2.0 * base.rgb * blend;\",\"vec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\",\"vec3 newColor = mix( result1, result2, L );\",\"float A2 = opacity * base.a;\",\"vec3 mixRGB = A2 * newColor.rgb;\",\"mixRGB += ( ( 1.0 - A2 ) * base.rgb );\",\"gl_FragColor = vec4( mixRGB, base.a );\",\"}\"].join(\"\\n\")},t.a=i.BleachBypassShader},function(e,t,r){\"use strict\";var i=r(0);i.BlendShader={uniforms:{tDiffuse1:{type:\"t\",value:null},tDiffuse2:{type:\"t\",value:null},mixRatio:{type:\"f\",value:.5},opacity:{type:\"f\",value:1}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform float opacity;\",\"uniform float mixRatio;\",\"uniform sampler2D tDiffuse1;\",\"uniform sampler2D tDiffuse2;\",\"varying vec2 vUv;\",\"void main() {\",\"vec4 texel1 = texture2D( tDiffuse1, vUv );\",\"vec4 texel2 = texture2D( tDiffuse2, vUv );\",\"gl_FragColor = opacity * mix( texel1, texel2, mixRatio );\",\"}\"].join(\"\\n\")},t.a=i.BlendShader},function(e,t,r){\"use strict\";var i=r(0);i.BloomPass=function(e,t,r,n){e=void 0!==e?e:1,t=void 0!==t?t:25,r=void 0!==r?r:4,n=void 0!==n?n:256;var o={minFilter:i.U,magFilter:i.U,format:i._22};this.renderTargetX=new i._53(n,n,o),this.renderTargetY=new i._53(n,n,o),void 0===i.CopyShader&&console.error(\"THREE.BloomPass relies on THREE.CopyShader\");var a=i.CopyShader;this.copyUniforms=i._46.clone(a.uniforms),this.copyUniforms.opacity.value=e,this.materialCopy=new i._35({uniforms:this.copyUniforms,vertexShader:a.vertexShader,fragmentShader:a.fragmentShader,blending:i.b,transparent:!0}),void 0===i.ConvolutionShader&&console.error(\"THREE.BloomPass relies on THREE.ConvolutionShader\");var s=i.ConvolutionShader;this.convolutionUniforms=i._46.clone(s.uniforms),this.convolutionUniforms.uImageIncrement.value=i.BloomPass.blurX,this.convolutionUniforms.cKernel.value=i.ConvolutionShader.buildKernel(r),this.materialConvolution=new i._35({uniforms:this.convolutionUniforms,vertexShader:s.vertexShader,fragmentShader:s.fragmentShader,defines:{KERNEL_SIZE_FLOAT:t.toFixed(1),KERNEL_SIZE_INT:t.toFixed(0)}}),this.enabled=!0,this.needsSwap=!1,this.clear=!1,this.camera=new i._14(-1,1,1,-1,0,1),this.scene=new i._31,this.quad=new i._3(new i._17(2,2),null),this.scene.add(this.quad)},i.BloomPass.prototype={render:function(e,t,r,n,o){o&&e.context.disable(e.context.STENCIL_TEST),this.quad.material=this.materialConvolution,this.convolutionUniforms.tDiffuse.value=r,this.convolutionUniforms.uImageIncrement.value=i.BloomPass.blurX,e.render(this.scene,this.camera,this.renderTargetX,!0),this.convolutionUniforms.tDiffuse.value=this.renderTargetX,this.convolutionUniforms.uImageIncrement.value=i.BloomPass.blurY,e.render(this.scene,this.camera,this.renderTargetY,!0),this.quad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=this.renderTargetY,o&&e.context.enable(e.context.STENCIL_TEST),e.render(this.scene,this.camera,r,this.clear)}},i.BloomPass.blurX=new i._48(.001953125,0),i.BloomPass.blurY=new i._48(0,.001953125),t.a=i.BloomPass},function(e,t,r){\"use strict\";var i=r(0);i.BokehPass=function(e,t,r){this.scene=e,this.camera=t;var n=void 0!==r.focus?r.focus:1,o=void 0!==r.aspect?r.aspect:t.aspect,a=void 0!==r.aperture?r.aperture:.025,s=void 0!==r.maxblur?r.maxblur:1,c=r.width||window.innerWidth||1,l=r.height||window.innerHeight||1;this.renderTargetColor=new i._53(c,l,{minFilter:i.U,magFilter:i.U,format:i._22}),this.renderTargetDepth=this.renderTargetColor.clone(),this.materialDepth=new i._5,void 0===i.BokehShader&&console.error(\"THREE.BokehPass relies on THREE.BokehShader\");var u=i.BokehShader,h=i._46.clone(u.uniforms);h.tDepth.value=this.renderTargetDepth,h.focus.value=n,h.aspect.value=o,h.aperture.value=a,h.maxblur.value=s,this.materialBokeh=new i._35({uniforms:h,vertexShader:u.vertexShader,fragmentShader:u.fragmentShader}),this.uniforms=h,this.enabled=!0,this.needsSwap=!1,this.renderToScreen=!1,this.clear=!1,this.camera2=new i._14(-1,1,1,-1,0,1),this.scene2=new i._31,this.quad2=new i._3(new i._17(2,2),null),this.scene2.add(this.quad2)},i.BokehPass.prototype={render:function(e,t,r,i,n){this.quad2.material=this.materialBokeh,this.scene.overrideMaterial=this.materialDepth,e.render(this.scene,this.camera,this.renderTargetDepth,!0),this.uniforms.tColor.value=r,this.renderToScreen?e.render(this.scene2,this.camera2):e.render(this.scene2,this.camera2,t,this.clear),this.scene.overrideMaterial=null}},t.a=i.BokehPass},function(e,t,r){\"use strict\";var i=r(0);i.BokehShader={uniforms:{tColor:{type:\"t\",value:null},tDepth:{type:\"t\",value:null},focus:{type:\"f\",value:1},aspect:{type:\"f\",value:1},aperture:{type:\"f\",value:.025},maxblur:{type:\"f\",value:1}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"varying vec2 vUv;\",\"uniform sampler2D tColor;\",\"uniform sampler2D tDepth;\",\"uniform float maxblur;\",\"uniform float aperture;\",\"uniform float focus;\",\"uniform float aspect;\",\"void main() {\",\"vec2 aspectcorrect = vec2( 1.0, aspect );\",\"vec4 depth1 = texture2D( tDepth, vUv );\",\"float factor = depth1.x - focus;\",\"vec2 dofblur = vec2 ( clamp( factor * aperture, -maxblur, maxblur ) );\",\"vec2 dofblur9 = dofblur * 0.9;\",\"vec2 dofblur7 = dofblur * 0.7;\",\"vec2 dofblur4 = dofblur * 0.4;\",\"vec4 col = vec4( 0.0 );\",\"col += texture2D( tColor, vUv.xy );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur9 );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur9 );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur9 );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur9 );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur9 );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur9 );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur9 );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur9 );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur7 );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur7 );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur7 );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur7 );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur7 );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur7 );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur7 );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur7 );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur4 );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.4,   0.0  ) * aspectcorrect ) * dofblur4 );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur4 );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur4 );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur4 );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur4 );\",\"col += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur4 );\",\"col += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur4 );\",\"gl_FragColor = col / 41.0;\",\"gl_FragColor.a = 1.0;\",\"}\"].join(\"\\n\")},t.a=i.BokehShader},function(e,t,r){\"use strict\";var i=r(0);i.BokehShader={uniforms:{textureWidth:{type:\"f\",value:1},textureHeight:{type:\"f\",value:1},focalDepth:{type:\"f\",value:1},focalLength:{type:\"f\",value:24},fstop:{type:\"f\",value:.9},tColor:{type:\"t\",value:null},tDepth:{type:\"t\",value:null},maxblur:{type:\"f\",value:1},showFocus:{type:\"i\",value:0},manualdof:{type:\"i\",value:0},vignetting:{type:\"i\",value:0},depthblur:{type:\"i\",value:0},threshold:{type:\"f\",value:.5},gain:{type:\"f\",value:2},bias:{type:\"f\",value:.5},fringe:{type:\"f\",value:.7},znear:{type:\"f\",value:.1},zfar:{type:\"f\",value:100},noise:{type:\"i\",value:1},dithering:{type:\"f\",value:1e-4},pentagon:{type:\"i\",value:0},shaderFocus:{type:\"i\",value:1},focusCoords:{type:\"v2\",value:new i._48}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"varying vec2 vUv;\",\"uniform sampler2D tColor;\",\"uniform sampler2D tDepth;\",\"uniform float textureWidth;\",\"uniform float textureHeight;\",\"const float PI = 3.14159265;\",\"uniform float focalDepth;  //focal distance value in meters, but you may use autofocus option below\",\"uniform float focalLength; //focal length in mm\",\"uniform float fstop; //f-stop value\",\"uniform bool showFocus; //show debug focus point and focal range (red = focal point, green = focal range)\",\"/*\",\"make sure that these two values are the same for your camera, otherwise distances will be wrong.\",\"*/\",\"uniform float znear; // camera clipping start\",\"uniform float zfar; // camera clipping end\",\"//------------------------------------------\",\"//user variables\",\"const int samples = SAMPLES; //samples on the first ring\",\"const int rings = RINGS; //ring count\",\"const int maxringsamples = rings * samples;\",\"uniform bool manualdof; // manual dof calculation\",\"float ndofstart = 1.0; // near dof blur start\",\"float ndofdist = 2.0; // near dof blur falloff distance\",\"float fdofstart = 1.0; // far dof blur start\",\"float fdofdist = 3.0; // far dof blur falloff distance\",\"float CoC = 0.03; //circle of confusion size in mm (35mm film = 0.03mm)\",\"uniform bool vignetting; // use optical lens vignetting\",\"float vignout = 1.3; // vignetting outer border\",\"float vignin = 0.0; // vignetting inner border\",\"float vignfade = 22.0; // f-stops till vignete fades\",\"uniform bool shaderFocus;\",\"// disable if you use external focalDepth value\",\"uniform vec2 focusCoords;\",\"// autofocus point on screen (0.0,0.0 - left lower corner, 1.0,1.0 - upper right)\",\"// if center of screen use vec2(0.5, 0.5);\",\"uniform float maxblur;\",\"//clamp value of max blur (0.0 = no blur, 1.0 default)\",\"uniform float threshold; // highlight threshold;\",\"uniform float gain; // highlight gain;\",\"uniform float bias; // bokeh edge bias\",\"uniform float fringe; // bokeh chromatic aberration / fringing\",\"uniform bool noise; //use noise instead of pattern for sample dithering\",\"uniform float dithering;\",\"uniform bool depthblur; // blur the depth buffer\",\"float dbsize = 1.25; // depth blur size\",\"/*\",\"next part is experimental\",\"not looking good with small sample and ring count\",\"looks okay starting from samples = 4, rings = 4\",\"*/\",\"uniform bool pentagon; //use pentagon as bokeh shape?\",\"float feather = 0.4; //pentagon shape feather\",\"//------------------------------------------\",\"float penta(vec2 coords) {\",\"//pentagonal shape\",\"float scale = float(rings) - 1.3;\",\"vec4  HS0 = vec4( 1.0,         0.0,         0.0,  1.0);\",\"vec4  HS1 = vec4( 0.309016994, 0.951056516, 0.0,  1.0);\",\"vec4  HS2 = vec4(-0.809016994, 0.587785252, 0.0,  1.0);\",\"vec4  HS3 = vec4(-0.809016994,-0.587785252, 0.0,  1.0);\",\"vec4  HS4 = vec4( 0.309016994,-0.951056516, 0.0,  1.0);\",\"vec4  HS5 = vec4( 0.0        ,0.0         , 1.0,  1.0);\",\"vec4  one = vec4( 1.0 );\",\"vec4 P = vec4((coords),vec2(scale, scale));\",\"vec4 dist = vec4(0.0);\",\"float inorout = -4.0;\",\"dist.x = dot( P, HS0 );\",\"dist.y = dot( P, HS1 );\",\"dist.z = dot( P, HS2 );\",\"dist.w = dot( P, HS3 );\",\"dist = smoothstep( -feather, feather, dist );\",\"inorout += dot( dist, one );\",\"dist.x = dot( P, HS4 );\",\"dist.y = HS5.w - abs( P.z );\",\"dist = smoothstep( -feather, feather, dist );\",\"inorout += dist.x;\",\"return clamp( inorout, 0.0, 1.0 );\",\"}\",\"float bdepth(vec2 coords) {\",\"// Depth buffer blur\",\"float d = 0.0;\",\"float kernel[9];\",\"vec2 offset[9];\",\"vec2 wh = vec2(1.0/textureWidth,1.0/textureHeight) * dbsize;\",\"offset[0] = vec2(-wh.x,-wh.y);\",\"offset[1] = vec2( 0.0, -wh.y);\",\"offset[2] = vec2( wh.x -wh.y);\",\"offset[3] = vec2(-wh.x,  0.0);\",\"offset[4] = vec2( 0.0,   0.0);\",\"offset[5] = vec2( wh.x,  0.0);\",\"offset[6] = vec2(-wh.x, wh.y);\",\"offset[7] = vec2( 0.0,  wh.y);\",\"offset[8] = vec2( wh.x, wh.y);\",\"kernel[0] = 1.0/16.0;   kernel[1] = 2.0/16.0;   kernel[2] = 1.0/16.0;\",\"kernel[3] = 2.0/16.0;   kernel[4] = 4.0/16.0;   kernel[5] = 2.0/16.0;\",\"kernel[6] = 1.0/16.0;   kernel[7] = 2.0/16.0;   kernel[8] = 1.0/16.0;\",\"for( int i=0; i<9; i++ ) {\",\"float tmp = texture2D(tDepth, coords + offset[i]).r;\",\"d += tmp * kernel[i];\",\"}\",\"return d;\",\"}\",\"vec3 color(vec2 coords,float blur) {\",\"//processing the sample\",\"vec3 col = vec3(0.0);\",\"vec2 texel = vec2(1.0/textureWidth,1.0/textureHeight);\",\"col.r = texture2D(tColor,coords + vec2(0.0,1.0)*texel*fringe*blur).r;\",\"col.g = texture2D(tColor,coords + vec2(-0.866,-0.5)*texel*fringe*blur).g;\",\"col.b = texture2D(tColor,coords + vec2(0.866,-0.5)*texel*fringe*blur).b;\",\"vec3 lumcoeff = vec3(0.299,0.587,0.114);\",\"float lum = dot(col.rgb, lumcoeff);\",\"float thresh = max((lum-threshold)*gain, 0.0);\",\"return col+mix(vec3(0.0),col,thresh*blur);\",\"}\",\"vec2 rand(vec2 coord) {\",\"// generating noise / pattern texture for dithering\",\"float noiseX = ((fract(1.0-coord.s*(textureWidth/2.0))*0.25)+(fract(coord.t*(textureHeight/2.0))*0.75))*2.0-1.0;\",\"float noiseY = ((fract(1.0-coord.s*(textureWidth/2.0))*0.75)+(fract(coord.t*(textureHeight/2.0))*0.25))*2.0-1.0;\",\"if (noise) {\",\"noiseX = clamp(fract(sin(dot(coord ,vec2(12.9898,78.233))) * 43758.5453),0.0,1.0)*2.0-1.0;\",\"noiseY = clamp(fract(sin(dot(coord ,vec2(12.9898,78.233)*2.0)) * 43758.5453),0.0,1.0)*2.0-1.0;\",\"}\",\"return vec2(noiseX,noiseY);\",\"}\",\"vec3 debugFocus(vec3 col, float blur, float depth) {\",\"float edge = 0.002*depth; //distance based edge smoothing\",\"float m = clamp(smoothstep(0.0,edge,blur),0.0,1.0);\",\"float e = clamp(smoothstep(1.0-edge,1.0,blur),0.0,1.0);\",\"col = mix(col,vec3(1.0,0.5,0.0),(1.0-m)*0.6);\",\"col = mix(col,vec3(0.0,0.5,1.0),((1.0-e)-(1.0-m))*0.2);\",\"return col;\",\"}\",\"float linearize(float depth) {\",\"return -zfar * znear / (depth * (zfar - znear) - zfar);\",\"}\",\"float vignette() {\",\"float dist = distance(vUv.xy, vec2(0.5,0.5));\",\"dist = smoothstep(vignout+(fstop/vignfade), vignin+(fstop/vignfade), dist);\",\"return clamp(dist,0.0,1.0);\",\"}\",\"float gather(float i, float j, int ringsamples, inout vec3 col, float w, float h, float blur) {\",\"float rings2 = float(rings);\",\"float step = PI*2.0 / float(ringsamples);\",\"float pw = cos(j*step)*i;\",\"float ph = sin(j*step)*i;\",\"float p = 1.0;\",\"if (pentagon) {\",\"p = penta(vec2(pw,ph));\",\"}\",\"col += color(vUv.xy + vec2(pw*w,ph*h), blur) * mix(1.0, i/rings2, bias) * p;\",\"return 1.0 * mix(1.0, i /rings2, bias) * p;\",\"}\",\"void main() {\",\"//scene depth calculation\",\"float depth = linearize(texture2D(tDepth,vUv.xy).x);\",\"// Blur depth?\",\"if (depthblur) {\",\"depth = linearize(bdepth(vUv.xy));\",\"}\",\"//focal plane calculation\",\"float fDepth = focalDepth;\",\"if (shaderFocus) {\",\"fDepth = linearize(texture2D(tDepth,focusCoords).x);\",\"}\",\"// dof blur factor calculation\",\"float blur = 0.0;\",\"if (manualdof) {\",\"float a = depth-fDepth; // Focal plane\",\"float b = (a-fdofstart)/fdofdist; // Far DoF\",\"float c = (-a-ndofstart)/ndofdist; // Near Dof\",\"blur = (a>0.0) ? b : c;\",\"} else {\",\"float f = focalLength; // focal length in mm\",\"float d = fDepth*1000.0; // focal plane in mm\",\"float o = depth*1000.0; // depth in mm\",\"float a = (o*f)/(o-f);\",\"float b = (d*f)/(d-f);\",\"float c = (d-f)/(d*fstop*CoC);\",\"blur = abs(a-b)*c;\",\"}\",\"blur = clamp(blur,0.0,1.0);\",\"// calculation of pattern for dithering\",\"vec2 noise = rand(vUv.xy)*dithering*blur;\",\"// getting blur x and y step factor\",\"float w = (1.0/textureWidth)*blur*maxblur+noise.x;\",\"float h = (1.0/textureHeight)*blur*maxblur+noise.y;\",\"// calculation of final color\",\"vec3 col = vec3(0.0);\",\"if(blur < 0.05) {\",\"//some optimization thingy\",\"col = texture2D(tColor, vUv.xy).rgb;\",\"} else {\",\"col = texture2D(tColor, vUv.xy).rgb;\",\"float s = 1.0;\",\"int ringsamples;\",\"for (int i = 1; i <= rings; i++) {\",\"/*unboxstart*/\",\"ringsamples = i * samples;\",\"for (int j = 0 ; j < maxringsamples ; j++) {\",\"if (j >= ringsamples) break;\",\"s += gather(float(i), float(j), ringsamples, col, w, h, blur);\",\"}\",\"/*unboxend*/\",\"}\",\"col /= s; //divide by sample count\",\"}\",\"if (showFocus) {\",\"col = debugFocus(col, blur, depth);\",\"}\",\"if (vignetting) {\",\"col *= vignette();\",\"}\",\"gl_FragColor.rgb = col;\",\"gl_FragColor.a = 1.0;\",\"} \"].join(\"\\n\")},t.a=i.BokehShader},function(e,t,r){\"use strict\";var i=r(0);i.BrightnessContrastShader={uniforms:{tDiffuse:{type:\"t\",value:null},brightness:{type:\"f\",value:0},contrast:{type:\"f\",value:0}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"uniform float brightness;\",\"uniform float contrast;\",\"varying vec2 vUv;\",\"void main() {\",\"gl_FragColor = texture2D( tDiffuse, vUv );\",\"gl_FragColor.rgb += brightness;\",\"if (contrast > 0.0) {\",\"gl_FragColor.rgb = (gl_FragColor.rgb - 0.5) / (1.0 - contrast) + 0.5;\",\"} else {\",\"gl_FragColor.rgb = (gl_FragColor.rgb - 0.5) * (1.0 + contrast) + 0.5;\",\"}\",\"}\"].join(\"\\n\")},t.a=i.BrightnessContrastShader},function(e,t,r){\"use strict\";var i=r(0);i.ColorCorrectionShader={uniforms:{tDiffuse:{type:\"t\",value:null},powRGB:{type:\"v3\",value:new i._49(2,2,2)},mulRGB:{type:\"v3\",value:new i._49(1,1,1)},addRGB:{type:\"v3\",value:new i._49(0,0,0)}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"uniform vec3 powRGB;\",\"uniform vec3 mulRGB;\",\"uniform vec3 addRGB;\",\"varying vec2 vUv;\",\"void main() {\",\"gl_FragColor = texture2D( tDiffuse, vUv );\",\"gl_FragColor.rgb = mulRGB * pow( ( gl_FragColor.rgb + addRGB ), powRGB );\",\"}\"].join(\"\\n\")},t.a=i.ColorCorrectionShader},function(e,t,r){\"use strict\";var i=r(0);i.ColorifyShader={uniforms:{tDiffuse:{type:\"t\",value:null},color:{type:\"c\",value:new i.m(16777215)}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform vec3 color;\",\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"void main() {\",\"vec4 texel = texture2D( tDiffuse, vUv );\",\"vec3 luma = vec3( 0.299, 0.587, 0.114 );\",\"float v = dot( texel.xyz, luma );\",\"gl_FragColor = vec4( v * color, texel.w );\",\"}\"].join(\"\\n\")},t.a=i.ColorifyShader},function(e,t,r){\"use strict\";var i=r(0);i.ConvolutionShader={defines:{KERNEL_SIZE_FLOAT:\"25.0\",KERNEL_SIZE_INT:\"25\"},uniforms:{tDiffuse:{type:\"t\",value:null},uImageIncrement:{type:\"v2\",value:new i._48(.001953125,0)},cKernel:{type:\"fv1\",value:[]}},vertexShader:[\"uniform vec2 uImageIncrement;\",\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform float cKernel[ KERNEL_SIZE_INT ];\",\"uniform sampler2D tDiffuse;\",\"uniform vec2 uImageIncrement;\",\"varying vec2 vUv;\",\"void main() {\",\"vec2 imageCoord = vUv;\",\"vec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );\",\"for( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {\",\"sum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];\",\"imageCoord += uImageIncrement;\",\"}\",\"gl_FragColor = sum;\",\"}\"].join(\"\\n\"),buildKernel:function(e){var t,r,i,n,o=2*Math.ceil(3*e)+1;for(o>25&&(o=25),n=.5*(o-1),r=new Array(o),i=0,t=0;t<o;++t)r[t]=function(e,t){return Math.exp(-e*e/(2*t*t))}(t-n,e),i+=r[t];for(t=0;t<o;++t)r[t]/=i;return r}},t.a=i.ConvolutionShader},function(e,t,r){\"use strict\";var i=r(0);i.CopyShader={uniforms:{tDiffuse:{type:\"t\",value:null},opacity:{type:\"f\",value:1}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform float opacity;\",\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"void main() {\",\"vec4 texel = texture2D( tDiffuse, vUv );\",\"gl_FragColor = opacity * texel;\",\"}\"].join(\"\\n\")},t.a=i.CopyShader},function(e,t,r){\"use strict\";var i=r(0);i.DDSLoader=function(){this._parser=i.DDSLoader.parse},i.DDSLoader.prototype=Object.create(i.p.prototype),i.DDSLoader.prototype.constructor=i.DDSLoader,i.DDSLoader.parse=function(e,t){function r(e){return e.charCodeAt(0)+(e.charCodeAt(1)<<8)+(e.charCodeAt(2)<<16)+(e.charCodeAt(3)<<24)}var n={mipmaps:[],width:0,height:0,format:null,mipmapCount:1},o=r(\"DXT1\"),a=r(\"DXT3\"),s=r(\"DXT5\"),c=r(\"ETC1\"),l=new Int32Array(e,0,31);if(542327876!==l[0])return console.error(\"THREE.DDSLoader.parse: Invalid magic number in DDS header.\"),n;if(4&!l[20])return console.error(\"THREE.DDSLoader.parse: Unsupported format, must contain a FourCC code.\"),n;var u,h=l[21],d=!1;switch(h){case o:u=8,n.format=i._25;break;case a:u=16,n.format=i._20;break;case s:u=16,n.format=i._21;break;case c:u=8,n.format=i._24;break;default:if(!(32===l[22]&&16711680&l[23]&&65280&l[24]&&255&l[25]&&4278190080&l[26]))return console.error(\"THREE.DDSLoader.parse: Unsupported FourCC code \",function(e){return String.fromCharCode(255&e,e>>8&255,e>>16&255,e>>24&255)}(h)),n;d=!0,u=64,n.format=i._19}n.mipmapCount=1,131072&l[2]&&!1!==t&&(n.mipmapCount=Math.max(1,l[7]));var p=l[28];if(n.isCubemap=!!(512&p),n.isCubemap&&(!(1024&p)||!(2048&p)||!(4096&p)||!(8192&p)||!(16384&p)||!(32768&p)))return console.error(\"THREE.DDSLoader.parse: Incomplete cubemap faces\"),n;n.width=l[4],n.height=l[3];for(var f=l[1]+4,m=n.isCubemap?6:1,v=0;v<m;v++)for(var g=n.width,y=n.height,x=0;x<n.mipmapCount;x++){if(d)var _=function(e,t,r,i){for(var n=r*i*4,o=new Uint8Array(e,t,n),a=new Uint8Array(n),s=0,c=0,l=0;l<i;l++)for(var u=0;u<r;u++){var h=o[c];c++;var d=o[c];c++;var p=o[c];c++;var f=o[c];c++,a[s]=p,s++,a[s]=d,s++,a[s]=h,s++,a[s]=f,s++}return a}(e,f,g,y),b=_.length;else var b=Math.max(4,g)/4*Math.max(4,y)/4*u,_=new Uint8Array(e,f,b);var w={data:_,width:g,height:y};n.mipmaps.push(w),f+=b,g=Math.max(g>>1,1),y=Math.max(y>>1,1)}return n},t.a=i.DDSLoader},function(e,t,r){\"use strict\";var i=r(0);i.DOFMipMapShader={uniforms:{tColor:{type:\"t\",value:null},tDepth:{type:\"t\",value:null},focus:{type:\"f\",value:1},maxblur:{type:\"f\",value:1}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform float focus;\",\"uniform float maxblur;\",\"uniform sampler2D tColor;\",\"uniform sampler2D tDepth;\",\"varying vec2 vUv;\",\"void main() {\",\"vec4 depth = texture2D( tDepth, vUv );\",\"float factor = depth.x - focus;\",\"vec4 col = texture2D( tColor, vUv, 2.0 * maxblur * abs( focus - depth.x ) );\",\"gl_FragColor = col;\",\"gl_FragColor.a = 1.0;\",\"}\"].join(\"\\n\")},t.a=i.DOFMipMapShader},function(e,t,r){\"use strict\";var i=r(0);i.DigitalGlitch={uniforms:{tDiffuse:{type:\"t\",value:null},tDisp:{type:\"t\",value:null},byp:{type:\"i\",value:0},amount:{type:\"f\",value:.08},angle:{type:\"f\",value:.02},seed:{type:\"f\",value:.02},seed_x:{type:\"f\",value:.02},seed_y:{type:\"f\",value:.02},distortion_x:{type:\"f\",value:.5},distortion_y:{type:\"f\",value:.6},col_s:{type:\"f\",value:.05}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform int byp;\",\"uniform sampler2D tDiffuse;\",\"uniform sampler2D tDisp;\",\"uniform float amount;\",\"uniform float angle;\",\"uniform float seed;\",\"uniform float seed_x;\",\"uniform float seed_y;\",\"uniform float distortion_x;\",\"uniform float distortion_y;\",\"uniform float col_s;\",\"varying vec2 vUv;\",\"float rand(vec2 co){\",\"return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\",\"}\",\"void main() {\",\"if(byp<1) {\",\"vec2 p = vUv;\",\"float xs = floor(gl_FragCoord.x / 0.5);\",\"float ys = floor(gl_FragCoord.y / 0.5);\",\"vec4 normal = texture2D (tDisp, p*seed*seed);\",\"if(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {\",\"if(seed_x>0.){\",\"p.y = 1. - (p.y + distortion_y);\",\"}\",\"else {\",\"p.y = distortion_y;\",\"}\",\"}\",\"if(p.x<distortion_y+col_s && p.x>distortion_y-col_s*seed) {\",\"if(seed_y>0.){\",\"p.x=distortion_x;\",\"}\",\"else {\",\"p.x = 1. - (p.x + distortion_x);\",\"}\",\"}\",\"p.x+=normal.x*seed_x*(seed/5.);\",\"p.y+=normal.y*seed_y*(seed/5.);\",\"vec2 offset = amount * vec2( cos(angle), sin(angle));\",\"vec4 cr = texture2D(tDiffuse, p + offset);\",\"vec4 cga = texture2D(tDiffuse, p);\",\"vec4 cb = texture2D(tDiffuse, p - offset);\",\"gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\",\"vec4 snow = 200.*amount*vec4(rand(vec2(xs * seed,ys * seed*50.))*0.2);\",\"gl_FragColor = gl_FragColor+ snow;\",\"}\",\"else {\",\"gl_FragColor=texture2D (tDiffuse, vUv);\",\"}\",\"}\"].join(\"\\n\")},t.a=i.DigitalGlitch},function(e,t,r){\"use strict\";var i=r(0);i.DotScreenPass=function(e,t,r){void 0===i.DotScreenShader&&console.error(\"THREE.DotScreenPass relies on THREE.DotScreenShader\");var n=i.DotScreenShader;this.uniforms=i._46.clone(n.uniforms),void 0!==e&&this.uniforms.center.value.copy(e),void 0!==t&&(this.uniforms.angle.value=t),void 0!==r&&(this.uniforms.scale.value=r),this.material=new i._35({uniforms:this.uniforms,vertexShader:n.vertexShader,fragmentShader:n.fragmentShader}),this.enabled=!0,this.renderToScreen=!1,this.needsSwap=!0,this.camera=new i._14(-1,1,1,-1,0,1),this.scene=new i._31,this.quad=new i._3(new i._17(2,2),null),this.scene.add(this.quad)},i.DotScreenPass.prototype={render:function(e,t,r,i){this.uniforms.tDiffuse.value=r,this.uniforms.tSize.value.set(r.width,r.height),this.quad.material=this.material,this.renderToScreen?e.render(this.scene,this.camera):e.render(this.scene,this.camera,t,!1)}},t.a=i.DotScreenPass},function(e,t,r){\"use strict\";var i=r(0);i.DotScreenShader={uniforms:{tDiffuse:{type:\"t\",value:null},tSize:{type:\"v2\",value:new i._48(256,256)},center:{type:\"v2\",value:new i._48(.5,.5)},angle:{type:\"f\",value:1.57},scale:{type:\"f\",value:1}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform vec2 center;\",\"uniform float angle;\",\"uniform float scale;\",\"uniform vec2 tSize;\",\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"float pattern() {\",\"float s = sin( angle ), c = cos( angle );\",\"vec2 tex = vUv * tSize - center;\",\"vec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;\",\"return ( sin( point.x ) * sin( point.y ) ) * 4.0;\",\"}\",\"void main() {\",\"vec4 color = texture2D( tDiffuse, vUv );\",\"float average = ( color.r + color.g + color.b ) / 3.0;\",\"gl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );\",\"}\"].join(\"\\n\")},t.a=i.DotScreenShader},function(e,t,r){\"use strict\";var i=r(0);i.EdgeShader={uniforms:{tDiffuse:{type:\"t\",value:null},aspect:{type:\"v2\",value:new i._48(512,512)}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"uniform vec2 aspect;\",\"vec2 texel = vec2(1.0 / aspect.x, 1.0 / aspect.y);\",\"mat3 G[9];\",\"const mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\",\"const mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\",\"const mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\",\"const mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\",\"const mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\",\"const mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\",\"const mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\",\"const mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\",\"const mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\",\"void main(void)\",\"{\",\"G[0] = g0,\",\"G[1] = g1,\",\"G[2] = g2,\",\"G[3] = g3,\",\"G[4] = g4,\",\"G[5] = g5,\",\"G[6] = g6,\",\"G[7] = g7,\",\"G[8] = g8;\",\"mat3 I;\",\"float cnv[9];\",\"vec3 sample;\",\"for (float i=0.0; i<3.0; i++) {\",\"for (float j=0.0; j<3.0; j++) {\",\"sample = texture2D(tDiffuse, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\",\"I[int(i)][int(j)] = length(sample);\",\"}\",\"}\",\"for (int i=0; i<9; i++) {\",\"float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\",\"cnv[i] = dp3 * dp3;\",\"}\",\"float M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\",\"float S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\",\"gl_FragColor = vec4(vec3(sqrt(M/S)), 1.0);\",\"}\"].join(\"\\n\")},t.a=i.EdgeShader},function(e,t,r){\"use strict\";var i=r(0);i.EdgeShader2={uniforms:{tDiffuse:{type:\"t\",value:null},aspect:{type:\"v2\",value:new i._48(512,512)}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"uniform vec2 aspect;\",\"vec2 texel = vec2(1.0 / aspect.x, 1.0 / aspect.y);\",\"mat3 G[2];\",\"const mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );\",\"const mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );\",\"void main(void)\",\"{\",\"mat3 I;\",\"float cnv[2];\",\"vec3 sample;\",\"G[0] = g0;\",\"G[1] = g1;\",\"for (float i=0.0; i<3.0; i++)\",\"for (float j=0.0; j<3.0; j++) {\",\"sample = texture2D( tDiffuse, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\",\"I[int(i)][int(j)] = length(sample);\",\"}\",\"for (int i=0; i<2; i++) {\",\"float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\",\"cnv[i] = dp3 * dp3; \",\"}\",\"gl_FragColor = vec4(0.5 * sqrt(cnv[0]*cnv[0]+cnv[1]*cnv[1]));\",\"} \"].join(\"\\n\")},t.a=i.EdgeShader2},function(e,t,r){\"use strict\";var i=r(0);i.EffectComposer=function(e,t){if(this.renderer=e,void 0===t){var r=e.getPixelRatio(),n=Math.floor(e.context.canvas.width/r)||1,o=Math.floor(e.context.canvas.height/r)||1,a={minFilter:i.U,magFilter:i.U,format:i._22,stencilBuffer:!1};t=new i._53(n,o,a)}this.renderTarget1=t,this.renderTarget2=t.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2,this.passes=[],void 0===i.CopyShader&&console.error(\"THREE.EffectComposer relies on THREE.CopyShader\"),this.copyPass=new i.ShaderPass(i.CopyShader)},i.EffectComposer.prototype={swapBuffers:function(){var e=this.readBuffer;this.readBuffer=this.writeBuffer,this.writeBuffer=e},addPass:function(e){this.passes.push(e)},insertPass:function(e,t){this.passes.splice(t,0,e)},render:function(e){this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2;var t,r,n=!1,o=this.passes.length;for(r=0;r<o;r++)if(t=this.passes[r],t.enabled){if(t.render(this.renderer,this.writeBuffer,this.readBuffer,e,n),t.needsSwap){if(n){var a=this.renderer.context;a.stencilFunc(a.NOTEQUAL,1,4294967295),this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,e),a.stencilFunc(a.EQUAL,1,4294967295)}this.swapBuffers()}t instanceof i.MaskPass?n=!0:t instanceof i.ClearMaskPass&&(n=!1)}},reset:function(e){if(void 0===e){e=this.renderTarget1.clone();var t=this.renderer.getPixelRatio();e.width=Math.floor(this.renderer.context.canvas.width/t),e.height=Math.floor(this.renderer.context.canvas.height/t)}this.renderTarget1.dispose(),this.renderTarget1=e,this.renderTarget2.dispose(),this.renderTarget2=e.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2},setSize:function(e,t){this.renderTarget1.setSize(e,t),this.renderTarget2.setSize(e,t)}},t.a=i.EffectComposer},function(e,t,r){\"use strict\";var i=r(0);i.FXAAShader={uniforms:{tDiffuse:{type:\"t\",value:new i._41},resolution:{type:\"v2\",value:new i._48}},vertexShader:\"#define GLSLIFY 1\\nvarying vec2 vUv;\\n\\nvarying vec2 v_rgbNW;\\nvarying vec2 v_rgbNE;\\nvarying vec2 v_rgbSW;\\nvarying vec2 v_rgbSE;\\nvarying vec2 v_rgbM;\\n\\nuniform vec2 resolution;\\n\\nvoid main() {\\n  vUv = uv;\\n  vec2 fragCoord = uv * resolution;\\n  vec2 inverseVP = 1.0 / resolution.xy;\\n  v_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * inverseVP;\\n  v_rgbNE = (fragCoord + vec2(1.0, -1.0)) * inverseVP;\\n  v_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * inverseVP;\\n  v_rgbSE = (fragCoord + vec2(1.0, 1.0)) * inverseVP;\\n  v_rgbM = vec2(fragCoord * inverseVP);\\n\\n  gl_Position = projectionMatrix *\\n              modelViewMatrix *\\n              vec4(position,1.0);\\n}\\n\",fragmentShader:'#define GLSLIFY 1\\nvarying vec2 vUv;\\n\\n//texcoords computed in vertex step\\n//to avoid dependent texture reads\\nvarying vec2 v_rgbNW;\\nvarying vec2 v_rgbNE;\\nvarying vec2 v_rgbSW;\\nvarying vec2 v_rgbSE;\\nvarying vec2 v_rgbM;\\n\\n//make sure to have a resolution uniform set to the screen size\\nuniform vec2 resolution;\\nuniform sampler2D tDiffuse;\\n\\n/**\\nBasic FXAA implementation based on the code on geeks3d.com with the\\nmodification that the texture2DLod stuff was removed since it\\'s\\nunsupported by WebGL.\\n\\n--\\n\\nFrom:\\nhttps://github.com/mitsuhiko/webgl-meincraft\\n\\nCopyright (c) 2011 by Armin Ronacher.\\n\\nSome rights reserved.\\n\\nRedistribution and use in source and binary forms, with or without\\nmodification, are permitted provided that the following conditions are\\nmet:\\n\\n    * Redistributions of source code must retain the above copyright\\n      notice, this list of conditions and the following disclaimer.\\n\\n    * Redistributions in binary form must reproduce the above\\n      copyright notice, this list of conditions and the following\\n      disclaimer in the documentation and/or other materials provided\\n      with the distribution.\\n\\n    * The names of the contributors may not be used to endorse or\\n      promote products derived from this software without specific\\n      prior written permission.\\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n*/\\n\\n#ifndef FXAA_REDUCE_MIN\\n    #define FXAA_REDUCE_MIN   (1.0/ 128.0)\\n#endif\\n#ifndef FXAA_REDUCE_MUL\\n    #define FXAA_REDUCE_MUL   (1.0 / 8.0)\\n#endif\\n#ifndef FXAA_SPAN_MAX\\n    #define FXAA_SPAN_MAX     8.0\\n#endif\\n\\n//optimized version for mobile, where dependent \\n//texture reads can be a bottleneck\\nvec4 fxaa_1540259130(sampler2D tex, vec2 fragCoord, vec2 resolution,\\n            vec2 v_rgbNW, vec2 v_rgbNE, \\n            vec2 v_rgbSW, vec2 v_rgbSE, \\n            vec2 v_rgbM) {\\n    vec4 color;\\n    mediump vec2 inverseVP = vec2(1.0 / resolution.x, 1.0 / resolution.y);\\n    vec3 rgbNW = texture2D(tex, v_rgbNW).xyz;\\n    vec3 rgbNE = texture2D(tex, v_rgbNE).xyz;\\n    vec3 rgbSW = texture2D(tex, v_rgbSW).xyz;\\n    vec3 rgbSE = texture2D(tex, v_rgbSE).xyz;\\n    vec4 texColor = texture2D(tex, v_rgbM);\\n    vec3 rgbM  = texColor.xyz;\\n    vec3 luma = vec3(0.299, 0.587, 0.114);\\n    float lumaNW = dot(rgbNW, luma);\\n    float lumaNE = dot(rgbNE, luma);\\n    float lumaSW = dot(rgbSW, luma);\\n    float lumaSE = dot(rgbSE, luma);\\n    float lumaM  = dot(rgbM,  luma);\\n    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\\n    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\\n    \\n    mediump vec2 dir;\\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\\n    \\n    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *\\n                          (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);\\n    \\n    float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\\n    dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\\n              max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\\n              dir * rcpDirMin)) * inverseVP;\\n    \\n    vec3 rgbA = 0.5 * (\\n        texture2D(tex, fragCoord * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +\\n        texture2D(tex, fragCoord * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);\\n    vec3 rgbB = rgbA * 0.5 + 0.25 * (\\n        texture2D(tex, fragCoord * inverseVP + dir * -0.5).xyz +\\n        texture2D(tex, fragCoord * inverseVP + dir * 0.5).xyz);\\n\\n    float lumaB = dot(rgbB, luma);\\n    if ((lumaB < lumaMin) || (lumaB > lumaMax))\\n        color = vec4(rgbA, texColor.a);\\n    else\\n        color = vec4(rgbB, texColor.a);\\n    return color;\\n}\\n\\nvoid main() {\\n  vec2 fragCoord = vUv * resolution;   \\n  gl_FragColor = fxaa_1540259130(tDiffuse, fragCoord, resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\\n}\\n'},t.a=i.FXAAShader},function(e,t,r){\"use strict\";var i=r(0);i.FilmPass=function(e,t,r,n){void 0===i.FilmShader&&console.error(\"THREE.FilmPass relies on THREE.FilmShader\");var o=i.FilmShader;this.uniforms=i._46.clone(o.uniforms),this.material=new i._35({uniforms:this.uniforms,vertexShader:o.vertexShader,fragmentShader:o.fragmentShader}),void 0!==n&&(this.uniforms.grayscale.value=n),void 0!==e&&(this.uniforms.nIntensity.value=e),void 0!==t&&(this.uniforms.sIntensity.value=t),void 0!==r&&(this.uniforms.sCount.value=r),this.enabled=!0,this.renderToScreen=!1,this.needsSwap=!0,this.camera=new i._14(-1,1,1,-1,0,1),this.scene=new i._31,this.quad=new i._3(new i._17(2,2),null),this.scene.add(this.quad)},i.FilmPass.prototype={render:function(e,t,r,i){this.uniforms.tDiffuse.value=r,this.uniforms.time.value+=i,this.quad.material=this.material,this.renderToScreen?e.render(this.scene,this.camera):e.render(this.scene,this.camera,t,!1)}},t.a=i.FilmPass},function(e,t,r){\"use strict\";var i=r(0);i.FilmShader={uniforms:{tDiffuse:{type:\"t\",value:null},time:{type:\"f\",value:0},nIntensity:{type:\"f\",value:.5},sIntensity:{type:\"f\",value:.05},sCount:{type:\"f\",value:4096},grayscale:{type:\"i\",value:1}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform float time;\",\"uniform bool grayscale;\",\"uniform float nIntensity;\",\"uniform float sIntensity;\",\"uniform float sCount;\",\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"void main() {\",\"vec4 cTextureScreen = texture2D( tDiffuse, vUv );\",\"float x = vUv.x * vUv.y * time *  1000.0;\",\"x = mod( x, 13.0 ) * mod( x, 123.0 );\",\"float dx = mod( x, 0.01 );\",\"vec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx * 100.0, 0.0, 1.0 );\",\"vec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );\",\"cResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;\",\"cResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );\",\"if( grayscale ) {\",\"cResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );\",\"}\",\"gl_FragColor =  vec4( cResult, cTextureScreen.a );\",\"}\"].join(\"\\n\")},t.a=i.FilmShader},function(e,t,r){\"use strict\";var i=r(0);i.FocusShader={uniforms:{tDiffuse:{type:\"t\",value:null},screenWidth:{type:\"f\",value:1024},screenHeight:{type:\"f\",value:1024},sampleDistance:{type:\"f\",value:.94},waveFactor:{type:\"f\",value:.00125}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform float screenWidth;\",\"uniform float screenHeight;\",\"uniform float sampleDistance;\",\"uniform float waveFactor;\",\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"void main() {\",\"vec4 color, org, tmp, add;\",\"float sample_dist, f;\",\"vec2 vin;\",\"vec2 uv = vUv;\",\"add = color = org = texture2D( tDiffuse, uv );\",\"vin = ( uv - vec2( 0.5 ) ) * vec2( 1.4 );\",\"sample_dist = dot( vin, vin ) * 2.0;\",\"f = ( waveFactor * 100.0 + sample_dist ) * sampleDistance * 4.0;\",\"vec2 sampleSize = vec2(  1.0 / screenWidth, 1.0 / screenHeight ) * vec2( f );\",\"add += tmp = texture2D( tDiffuse, uv + vec2( 0.111964, 0.993712 ) * sampleSize );\",\"if( tmp.b < color.b ) color = tmp;\",\"add += tmp = texture2D( tDiffuse, uv + vec2( 0.846724, 0.532032 ) * sampleSize );\",\"if( tmp.b < color.b ) color = tmp;\",\"add += tmp = texture2D( tDiffuse, uv + vec2( 0.943883, -0.330279 ) * sampleSize );\",\"if( tmp.b < color.b ) color = tmp;\",\"add += tmp = texture2D( tDiffuse, uv + vec2( 0.330279, -0.943883 ) * sampleSize );\",\"if( tmp.b < color.b ) color = tmp;\",\"add += tmp = texture2D( tDiffuse, uv + vec2( -0.532032, -0.846724 ) * sampleSize );\",\"if( tmp.b < color.b ) color = tmp;\",\"add += tmp = texture2D( tDiffuse, uv + vec2( -0.993712, -0.111964 ) * sampleSize );\",\"if( tmp.b < color.b ) color = tmp;\",\"add += tmp = texture2D( tDiffuse, uv + vec2( -0.707107, 0.707107 ) * sampleSize );\",\"if( tmp.b < color.b ) color = tmp;\",\"color = color * vec4( 2.0 ) - ( add / vec4( 8.0 ) );\",\"color = color + ( add / vec4( 8.0 ) - color ) * ( vec4( 1.0 ) - vec4( sample_dist * 0.5 ) );\",\"gl_FragColor = vec4( color.rgb * color.rgb * vec3( 0.95 ) + color.rgb, 1.0 );\",\"}\"].join(\"\\n\")},t.a=i.FocusShader},function(e,t,r){\"use strict\";var i=r(0);i.FresnelShader={uniforms:{mRefractionRatio:{type:\"f\",value:1.02},mFresnelBias:{type:\"f\",value:.1},mFresnelPower:{type:\"f\",value:2},mFresnelScale:{type:\"f\",value:1},tCube:{type:\"t\",value:null}},vertexShader:[\"uniform float mRefractionRatio;\",\"uniform float mFresnelBias;\",\"uniform float mFresnelScale;\",\"uniform float mFresnelPower;\",\"varying vec3 vReflect;\",\"varying vec3 vRefract[3];\",\"varying float vReflectionFactor;\",\"void main() {\",\"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\"vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\",\"vec3 worldNormal = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\",\"vec3 I = worldPosition.xyz - cameraPosition;\",\"vReflect = reflect( I, worldNormal );\",\"vRefract[0] = refract( normalize( I ), worldNormal, mRefractionRatio );\",\"vRefract[1] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.99 );\",\"vRefract[2] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.98 );\",\"vReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), worldNormal ), mFresnelPower );\",\"gl_Position = projectionMatrix * mvPosition;\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform samplerCube tCube;\",\"varying vec3 vReflect;\",\"varying vec3 vRefract[3];\",\"varying float vReflectionFactor;\",\"void main() {\",\"vec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\",\"vec4 refractedColor = vec4( 1.0 );\",\"refractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\",\"refractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\",\"refractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\",\"gl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\",\"}\"].join(\"\\n\")},t.a=i.FresnelShader},function(e,t,r){\"use strict\";var i=r(0);i.GammaCorrectionShader={uniforms:{tDiffuse:{type:\"t\",value:null}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"#define GAMMA_OUTPUT\",\"#define GAMMA_FACTOR 2\",\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",i._33.common,\"void main() {\",\"vec4 tex = texture2D( tDiffuse, vec2( vUv.x, vUv.y ) );\",\"gl_FragColor = vec4( linearToOutput( tex.rgb ), tex.a );\",\"}\"].join(\"\\n\")},t.a=i.GammaCorrectionShader},function(e,t,r){\"use strict\";var i=r(0);i.GlitchPass=function(e){void 0===i.DigitalGlitch&&console.error(\"THREE.GlitchPass relies on THREE.DigitalGlitch\");var t=i.DigitalGlitch;this.uniforms=i._46.clone(t.uniforms),void 0==e&&(e=64),this.uniforms.tDisp.value=this.generateHeightmap(e),this.material=new i._35({uniforms:this.uniforms,vertexShader:t.vertexShader,fragmentShader:t.fragmentShader}),this.enabled=!0,this.renderToScreen=!1,this.needsSwap=!0,this.camera=new i._14(-1,1,1,-1,0,1),this.scene=new i._31,this.quad=new i._3(new i._17(2,2),null),this.scene.add(this.quad),this.goWild=!1,this.curF=0,this.generateTrigger()},i.GlitchPass.prototype={render:function(e,t,r,n){this.uniforms.tDiffuse.value=r,this.uniforms.seed.value=Math.random(),this.uniforms.byp.value=0,this.curF%this.randX==0||1==this.goWild?(this.uniforms.amount.value=Math.random()/30,this.uniforms.angle.value=i._2.randFloat(-Math.PI,Math.PI),this.uniforms.seed_x.value=i._2.randFloat(-1,1),this.uniforms.seed_y.value=i._2.randFloat(-1,1),this.uniforms.distortion_x.value=i._2.randFloat(0,1),this.uniforms.distortion_y.value=i._2.randFloat(0,1),this.curF=0,this.generateTrigger()):this.curF%this.randX<this.randX/5?(this.uniforms.amount.value=Math.random()/90,this.uniforms.angle.value=i._2.randFloat(-Math.PI,Math.PI),this.uniforms.distortion_x.value=i._2.randFloat(0,1),this.uniforms.distortion_y.value=i._2.randFloat(0,1),this.uniforms.seed_x.value=i._2.randFloat(-.3,.3),this.uniforms.seed_y.value=i._2.randFloat(-.3,.3)):0==this.goWild&&(this.uniforms.byp.value=1),this.curF++,this.quad.material=this.material,this.renderToScreen?e.render(this.scene,this.camera):e.render(this.scene,this.camera,t,!1)},generateTrigger:function(){this.randX=i._2.randInt(120,240)},generateHeightmap:function(e){for(var t=new Float32Array(e*e*3),r=e*e,n=0;n<r;n++){var o=i._2.randFloat(0,1);t[3*n+0]=o,t[3*n+1]=o,t[3*n+2]=o}var a=new i.u(t,e,e,i._22,i.I);return a.needsUpdate=!0,a}},t.a=i.GlitchPass},function(e,t,r){\"use strict\";var i=r(0);i.HorizontalBlurShader={uniforms:{tDiffuse:{type:\"t\",value:null},h:{type:\"f\",value:1/512}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"uniform float h;\",\"varying vec2 vUv;\",\"void main() {\",\"vec4 sum = vec4( 0.0 );\",\"sum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * h, vUv.y ) ) * 0.051;\",\"sum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * h, vUv.y ) ) * 0.0918;\",\"sum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * h, vUv.y ) ) * 0.12245;\",\"sum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * h, vUv.y ) ) * 0.1531;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\",\"sum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * h, vUv.y ) ) * 0.1531;\",\"sum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * h, vUv.y ) ) * 0.12245;\",\"sum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * h, vUv.y ) ) * 0.0918;\",\"sum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * h, vUv.y ) ) * 0.051;\",\"gl_FragColor = sum;\",\"}\"].join(\"\\n\")},t.a=i.HorizontalBlurShader},function(e,t,r){\"use strict\";var i=r(0);i.HorizontalTiltShiftShader={uniforms:{tDiffuse:{type:\"t\",value:null},h:{type:\"f\",value:1/512},r:{type:\"f\",value:.35}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"uniform float h;\",\"uniform float r;\",\"varying vec2 vUv;\",\"void main() {\",\"vec4 sum = vec4( 0.0 );\",\"float hh = h * abs( r - vUv.y );\",\"sum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;\",\"sum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;\",\"sum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;\",\"sum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\",\"sum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;\",\"sum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;\",\"sum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;\",\"sum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;\",\"gl_FragColor = sum;\",\"}\"].join(\"\\n\")},t.a=i.HorizontalTiltShiftShader},function(e,t,r){\"use strict\";var i=r(0);i.HueSaturationShader={uniforms:{tDiffuse:{type:\"t\",value:null},hue:{type:\"f\",value:0},saturation:{type:\"f\",value:0}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"uniform float hue;\",\"uniform float saturation;\",\"varying vec2 vUv;\",\"void main() {\",\"gl_FragColor = texture2D( tDiffuse, vUv );\",\"float angle = hue * 3.14159265;\",\"float s = sin(angle), c = cos(angle);\",\"vec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;\",\"float len = length(gl_FragColor.rgb);\",\"gl_FragColor.rgb = vec3(\",\"dot(gl_FragColor.rgb, weights.xyz),\",\"dot(gl_FragColor.rgb, weights.zxy),\",\"dot(gl_FragColor.rgb, weights.yzx)\",\");\",\"float average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;\",\"if (saturation > 0.0) {\",\"gl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));\",\"} else {\",\"gl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);\",\"}\",\"}\"].join(\"\\n\")},t.a=i.HueSaturationShader},function(e,t,r){\"use strict\";var i=r(0);i.KaleidoShader={uniforms:{tDiffuse:{type:\"t\",value:null},sides:{type:\"f\",value:6},angle:{type:\"f\",value:0}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"uniform float sides;\",\"uniform float angle;\",\"varying vec2 vUv;\",\"void main() {\",\"vec2 p = vUv - 0.5;\",\"float r = length(p);\",\"float a = atan(p.y, p.x) + angle;\",\"float tau = 2. * 3.1416 ;\",\"a = mod(a, tau/sides);\",\"a = abs(a - tau/sides/2.) ;\",\"p = r * vec2(cos(a), sin(a));\",\"vec4 color = texture2D(tDiffuse, p + 0.5);\",\"gl_FragColor = color;\",\"}\"].join(\"\\n\")},t.a=i.KaleidoShader},function(e,t,r){\"use strict\";var i=r(0);i.LuminosityShader={uniforms:{tDiffuse:{type:\"t\",value:null}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"void main() {\",\"vec4 texel = texture2D( tDiffuse, vUv );\",\"vec3 luma = vec3( 0.299, 0.587, 0.114 );\",\"float v = dot( texel.xyz, luma );\",\"gl_FragColor = vec4( v, v, v, texel.w );\",\"}\"].join(\"\\n\")},t.a=i.LuminosityShader},function(e,t,r){\"use strict\";var i=r(0);i.MTLLoader=function(e){this.manager=void 0!==e?e:i.v},i.MTLLoader.prototype={constructor:i.MTLLoader,load:function(e,t,r,n){var o=this,a=new i._54(this.manager);a.setPath(this.path),a.load(e,function(e){t(o.parse(e))},r,n)},setPath:function(e){this.path=e},setBaseUrl:function(e){this.baseUrl=e},setCrossOrigin:function(e){this.crossOrigin=e},setMaterialOptions:function(e){this.materialOptions=e},parse:function(e){for(var t=e.split(\"\\n\"),r={},n=/\\s+/,o={},a=0;a<t.length;a++){var s=t[a];if(s=s.trim(),0!==s.length&&\"#\"!==s.charAt(0)){var c=s.indexOf(\" \"),l=c>=0?s.substring(0,c):s;l=l.toLowerCase();var u=c>=0?s.substring(c+1):\"\";if(u=u.trim(),\"newmtl\"===l)r={name:u},o[u]=r;else if(r)if(\"ka\"===l||\"kd\"===l||\"ks\"===l){var h=u.split(n,3);r[l]=[parseFloat(h[0]),parseFloat(h[1]),parseFloat(h[2])]}else r[l]=u}}var d=new i.MTLLoader.MaterialCreator(this.baseUrl,this.materialOptions);return d.setCrossOrigin(this.crossOrigin),d.setManager(this.manager),d.setMaterials(o),d}},i.MTLLoader.MaterialCreator=function(e,t){this.baseUrl=e,this.options=t,this.materialsInfo={},this.materials={},this.materialsArray=[],this.nameLookup={},this.side=this.options&&this.options.side?this.options.side:i.L,this.wrap=this.options&&this.options.wrap?this.options.wrap:i._27},i.MTLLoader.MaterialCreator.prototype={constructor:i.MTLLoader.MaterialCreator,setCrossOrigin:function(e){this.crossOrigin=e},setManager:function(e){this.manager=e},setMaterials:function(e){this.materialsInfo=this.convert(e),this.materials={},this.materialsArray=[],this.nameLookup={}},convert:function(e){if(!this.options)return e;var t={};for(var r in e){var i=e[r],n={};t[r]=n;for(var o in i){var a=!0,s=i[o],c=o.toLowerCase();switch(c){case\"kd\":case\"ka\":case\"ks\":this.options&&this.options.normalizeRGB&&(s=[s[0]/255,s[1]/255,s[2]/255]),this.options&&this.options.ignoreZeroRGBs&&0===s[0]&&0===s[1]&&0===s[1]&&(a=!1)}a&&(n[c]=s)}}return t},preload:function(){for(var e in this.materialsInfo)this.create(e)},getIndex:function(e){return this.nameLookup[e]},getAsArray:function(){var e=0;for(var t in this.materialsInfo)this.materialsArray[e]=this.create(t),this.nameLookup[t]=e,e++;return this.materialsArray},create:function(e){return void 0===this.materials[e]&&this.createMaterial_(e),this.materials[e]},createMaterial_:function(e){var t=this.materialsInfo[e],r={name:e,side:this.side};for(var n in t){var o=t[n];if(\"\"!==o)switch(n.toLowerCase()){case\"kd\":r.color=(new i.m).fromArray(o);break;case\"ks\":r.specular=(new i.m).fromArray(o);break;case\"map_kd\":r.map=this.loadTexture(this.baseUrl+o),r.map.wrapS=this.wrap,r.map.wrapT=this.wrap;break;case\"ns\":r.shininess=parseFloat(o);break;case\"d\":o<1&&(r.opacity=o,r.transparent=!0);break;case\"Tr\":o>0&&(r.opacity=1-o,r.transparent=!0);break;case\"map_bump\":case\"bump\":if(r.bumpMap)break;r.bumpMap=this.loadTexture(this.baseUrl+o),r.bumpMap.wrapS=this.wrap,r.bumpMap.wrapT=this.wrap}}return this.materials[e]=new i._7(r),this.materials[e]},loadTexture:function(e,t,r,n,o){var a,s=i.W.Handlers.get(e),c=void 0!==this.manager?this.manager:i.v;return null===s&&(s=new i._42(c)),s.setCrossOrigin&&s.setCrossOrigin(this.crossOrigin),a=s.load(e,r,n,o),void 0!==t&&(a.mapping=t),a}},Object.assign(i.MTLLoader.prototype,i.C.prototype),t.a=i.MTLLoader},function(e,t,r){\"use strict\";var i=r(0);i.MarchingCubes=function(e,t,r,n){i.S.call(this,t),this.enableUvs=void 0!==r&&r,this.enableColors=void 0!==n&&n,this.init=function(e){this.resolution=e,this.isolation=80,this.size=e,this.size2=this.size*this.size,this.size3=this.size2*this.size,this.halfsize=this.size/2,this.delta=2/this.size,this.yd=this.size,this.zd=this.size2,this.field=new Float32Array(this.size3),this.normal_cache=new Float32Array(3*this.size3),this.vlist=new Float32Array(36),this.nlist=new Float32Array(36),this.maxCount=4096,this.count=0,this.hasPositions=!1,this.hasNormals=!1,this.hasColors=!1,this.hasUvs=!1,this.positionArray=new Float32Array(3*this.maxCount),this.normalArray=new Float32Array(3*this.maxCount),this.enableUvs&&(this.uvArray=new Float32Array(2*this.maxCount)),this.enableColors&&(this.colorArray=new Float32Array(3*this.maxCount))},this.lerp=function(e,t,r){return e+(t-e)*r},this.VIntX=function(e,t,r,i,n,o,a,s,c,l){var u=(n-c)/(l-c),h=this.normal_cache;t[i]=o+u*this.delta,t[i+1]=a,t[i+2]=s,r[i]=this.lerp(h[e],h[e+3],u),r[i+1]=this.lerp(h[e+1],h[e+4],u),r[i+2]=this.lerp(h[e+2],h[e+5],u)},this.VIntY=function(e,t,r,i,n,o,a,s,c,l){var u=(n-c)/(l-c),h=this.normal_cache;t[i]=o,t[i+1]=a+u*this.delta,t[i+2]=s;var d=e+3*this.yd;r[i]=this.lerp(h[e],h[d],u),r[i+1]=this.lerp(h[e+1],h[d+1],u),r[i+2]=this.lerp(h[e+2],h[d+2],u)},this.VIntZ=function(e,t,r,i,n,o,a,s,c,l){var u=(n-c)/(l-c),h=this.normal_cache;t[i]=o,t[i+1]=a,t[i+2]=s+u*this.delta;var d=e+3*this.zd;r[i]=this.lerp(h[e],h[d],u),r[i+1]=this.lerp(h[e+1],h[d+1],u),r[i+2]=this.lerp(h[e+2],h[d+2],u)},this.compNorm=function(e){var t=3*e;0===this.normal_cache[t]&&(this.normal_cache[t]=this.field[e-1]-this.field[e+1],this.normal_cache[t+1]=this.field[e-this.yd]-this.field[e+this.yd],this.normal_cache[t+2]=this.field[e-this.zd]-this.field[e+this.zd])},this.polygonize=function(e,t,r,n,o,a){var s=n+1,c=n+this.yd,l=n+this.zd,u=s+this.yd,h=s+this.zd,d=n+this.yd+this.zd,p=s+this.yd+this.zd,f=0,m=this.field[n],v=this.field[s],g=this.field[c],y=this.field[u],x=this.field[l],_=this.field[h],b=this.field[d],w=this.field[p];m<o&&(f|=1),v<o&&(f|=2),g<o&&(f|=8),y<o&&(f|=4),x<o&&(f|=16),_<o&&(f|=32),b<o&&(f|=128),w<o&&(f|=64);var M=i.edgeTable[f];if(0===M)return 0;var E=this.delta,S=e+E,T=t+E,A=r+E;1&M&&(this.compNorm(n),this.compNorm(s),this.VIntX(3*n,this.vlist,this.nlist,0,o,e,t,r,m,v)),2&M&&(this.compNorm(s),this.compNorm(u),this.VIntY(3*s,this.vlist,this.nlist,3,o,S,t,r,v,y)),4&M&&(this.compNorm(c),this.compNorm(u),this.VIntX(3*c,this.vlist,this.nlist,6,o,e,T,r,g,y)),8&M&&(this.compNorm(n),this.compNorm(c),this.VIntY(3*n,this.vlist,this.nlist,9,o,e,t,r,m,g)),16&M&&(this.compNorm(l),this.compNorm(h),this.VIntX(3*l,this.vlist,this.nlist,12,o,e,t,A,x,_)),32&M&&(this.compNorm(h),this.compNorm(p),this.VIntY(3*h,this.vlist,this.nlist,15,o,S,t,A,_,w)),64&M&&(this.compNorm(d),this.compNorm(p),this.VIntX(3*d,this.vlist,this.nlist,18,o,e,T,A,b,w)),128&M&&(this.compNorm(l),this.compNorm(d),this.VIntY(3*l,this.vlist,this.nlist,21,o,e,t,A,x,b)),256&M&&(this.compNorm(n),this.compNorm(l),this.VIntZ(3*n,this.vlist,this.nlist,24,o,e,t,r,m,x)),512&M&&(this.compNorm(s),this.compNorm(h),this.VIntZ(3*s,this.vlist,this.nlist,27,o,S,t,r,v,_)),1024&M&&(this.compNorm(u),this.compNorm(p),this.VIntZ(3*u,this.vlist,this.nlist,30,o,S,T,r,y,w)),2048&M&&(this.compNorm(c),this.compNorm(d),this.VIntZ(3*c,this.vlist,this.nlist,33,o,e,T,r,g,b)),f<<=4;for(var L,C,R,P=0,D=0;-1!=i.triTable[f+D];)L=f+D,C=L+1,R=L+2,this.posnormtriv(this.vlist,this.nlist,3*i.triTable[L],3*i.triTable[C],3*i.triTable[R],a),D+=3,P++;return P},this.posnormtriv=function(e,t,r,i,n,o){var a=3*this.count;if(this.positionArray[a]=e[r],this.positionArray[a+1]=e[r+1],this.positionArray[a+2]=e[r+2],this.positionArray[a+3]=e[i],this.positionArray[a+4]=e[i+1],this.positionArray[a+5]=e[i+2],this.positionArray[a+6]=e[n],this.positionArray[a+7]=e[n+1],this.positionArray[a+8]=e[n+2],this.normalArray[a]=t[r],this.normalArray[a+1]=t[r+1],this.normalArray[a+2]=t[r+2],this.normalArray[a+3]=t[i],this.normalArray[a+4]=t[i+1],this.normalArray[a+5]=t[i+2],this.normalArray[a+6]=t[n],this.normalArray[a+7]=t[n+1],this.normalArray[a+8]=t[n+2],this.enableUvs){var s=2*this.count;this.uvArray[s]=e[r],this.uvArray[s+1]=e[r+2],this.uvArray[s+2]=e[i],this.uvArray[s+3]=e[i+2],this.uvArray[s+4]=e[n],this.uvArray[s+5]=e[n+2]}this.enableColors&&(this.colorArray[a]=e[r],this.colorArray[a+1]=e[r+1],this.colorArray[a+2]=e[r+2],this.colorArray[a+3]=e[i],this.colorArray[a+4]=e[i+1],this.colorArray[a+5]=e[i+2],this.colorArray[a+6]=e[n],this.colorArray[a+7]=e[n+1],this.colorArray[a+8]=e[n+2]),this.count+=3,this.count>=this.maxCount-3&&(this.hasPositions=!0,this.hasNormals=!0,this.enableUvs&&(this.hasUvs=!0),this.enableColors&&(this.hasColors=!0),o(this))},this.begin=function(){this.count=0,this.hasPositions=!1,this.hasNormals=!1,this.hasUvs=!1,this.hasColors=!1},this.end=function(e){if(0!==this.count){for(var t=3*this.count;t<this.positionArray.length;t++)this.positionArray[t]=0;this.hasPositions=!0,this.hasNormals=!0,this.enableUvs&&(this.hasUvs=!0),this.enableColors&&(this.hasColors=!0),e(this)}},this.addBall=function(e,t,r,i,n){var o=this.size*Math.sqrt(i/n),a=r*this.size,s=t*this.size,c=e*this.size,l=Math.floor(a-o);l<1&&(l=1);var u=Math.floor(a+o);u>this.size-1&&(u=this.size-1);var h=Math.floor(s-o);h<1&&(h=1);var d=Math.floor(s+o);d>this.size-1&&(d=this.size-1);var p=Math.floor(c-o);p<1&&(p=1);var f=Math.floor(c+o);f>this.size-1&&(f=this.size-1);var m,v,g,y,x,_,b,w,M,E,S;for(g=l;g<u;g++)for(x=this.size2*g,w=g/this.size-r,M=w*w,v=h;v<d;v++)for(y=x+this.size*v,b=v/this.size-t,E=b*b,m=p;m<f;m++)_=m/this.size-e,(S=i/(1e-6+_*_+E+M)-n)>0&&(this.field[y+m]+=S)},this.addPlaneX=function(e,t){var r,i,n,o,a,s,c,l=this.size,u=this.yd,h=this.zd,d=this.field,p=l*Math.sqrt(e/t);for(p>l&&(p=l),r=0;r<p;r++)if(s=r/l,o=s*s,(a=e/(1e-4+o)-t)>0)for(i=0;i<l;i++)for(c=r+i*u,n=0;n<l;n++)d[h*n+c]+=a},this.addPlaneY=function(e,t){var r,i,n,o,a,s,c,l,u=this.size,h=this.yd,d=this.zd,p=this.field,f=u*Math.sqrt(e/t);for(f>u&&(f=u),i=0;i<f;i++)if(s=i/u,o=s*s,(a=e/(1e-4+o)-t)>0)for(c=i*h,r=0;r<u;r++)for(l=c+r,n=0;n<u;n++)p[d*n+l]+=a},this.addPlaneZ=function(e,t){var r,i,n,o,a,s,c,l,u=this.size,h=this.yd,d=this.zd,p=this.field,f=u*Math.sqrt(e/t);for(f>u&&(f=u),n=0;n<f;n++)if(s=n/u,o=s*s,(a=e/(1e-4+o)-t)>0)for(c=d*n,i=0;i<u;i++)for(l=c+i*h,r=0;r<u;r++)p[l+r]+=a},this.reset=function(){var e;for(e=0;e<this.size3;e++)this.normal_cache[3*e]=0,this.field[e]=0},this.render=function(e){this.begin();for(var t=this.size-2,r=1;r<t;r++)for(var i=this.size2*r,n=(r-this.halfsize)/this.halfsize,o=1;o<t;o++)for(var a=i+this.size*o,s=(o-this.halfsize)/this.halfsize,c=1;c<t;c++){var l=(c-this.halfsize)/this.halfsize,u=a+c;this.polygonize(l,s,n,u,this.isolation,e)}this.end(e)},this.generateGeometry=function(){var e=0,t=new i.N,r=[],n=function(n){var o,a,s,c,l,u,h,d,p,f,m,v,g,y;for(o=0;o<n.count;o++)d=3*o,p=d+1,f=d+2,a=n.positionArray[d],s=n.positionArray[p],c=n.positionArray[f],l=new i._49(a,s,c),a=n.normalArray[d],s=n.normalArray[p],c=n.normalArray[f],u=new i._49(a,s,c),u.normalize(),t.vertices.push(l),r.push(u);for(y=n.count/3,o=0;o<y;o++)d=3*(e+o),p=d+1,f=d+2,m=r[d],v=r[p],g=r[f],h=new i.E(d,p,f,[m,v,g]),t.faces.push(h);e+=y,n.count=0};return this.render(n),t},this.init(e)},i.MarchingCubes.prototype=Object.create(i.S.prototype),i.MarchingCubes.prototype.constructor=i.MarchingCubes,i.edgeTable=new Int32Array([0,265,515,778,1030,1295,1541,1804,2060,2309,2575,2822,3082,3331,3593,3840,400,153,915,666,1430,1183,1941,1692,2460,2197,2975,2710,3482,3219,3993,3728,560,825,51,314,1590,1855,1077,1340,2620,2869,2111,2358,3642,3891,3129,3376,928,681,419,170,1958,1711,1445,1196,2988,2725,2479,2214,4010,3747,3497,3232,1120,1385,1635,1898,102,367,613,876,3180,3429,3695,3942,2154,2403,2665,2912,1520,1273,2035,1786,502,255,1013,764,3580,3317,4095,3830,2554,2291,3065,2800,1616,1881,1107,1370,598,863,85,348,3676,3925,3167,3414,2650,2899,2137,2384,1984,1737,1475,1226,966,719,453,204,4044,3781,3535,3270,3018,2755,2505,2240,2240,2505,2755,3018,3270,3535,3781,4044,204,453,719,966,1226,1475,1737,1984,2384,2137,2899,2650,3414,3167,3925,3676,348,85,863,598,1370,1107,1881,1616,2800,3065,2291,2554,3830,4095,3317,3580,764,1013,255,502,1786,2035,1273,1520,2912,2665,2403,2154,3942,3695,3429,3180,876,613,367,102,1898,1635,1385,1120,3232,3497,3747,4010,2214,2479,2725,2988,1196,1445,1711,1958,170,419,681,928,3376,3129,3891,3642,2358,2111,2869,2620,1340,1077,1855,1590,314,51,825,560,3728,3993,3219,3482,2710,2975,2197,2460,1692,1941,1183,1430,666,915,153,400,3840,3593,3331,3082,2822,2575,2309,2060,1804,1541,1295,1030,778,515,265,0]),i.triTable=new Int32Array([-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,8,3,9,8,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,1,2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,2,10,0,2,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,8,3,2,10,8,10,9,8,-1,-1,-1,-1,-1,-1,-1,3,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,11,2,8,11,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,9,0,2,3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,11,2,1,9,11,9,8,11,-1,-1,-1,-1,-1,-1,-1,3,10,1,11,10,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,10,1,0,8,10,8,11,10,-1,-1,-1,-1,-1,-1,-1,3,9,0,3,11,9,11,10,9,-1,-1,-1,-1,-1,-1,-1,9,8,10,10,8,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,3,0,7,3,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,9,8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,1,9,4,7,1,7,3,1,-1,-1,-1,-1,-1,-1,-1,1,2,10,8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,4,7,3,0,4,1,2,10,-1,-1,-1,-1,-1,-1,-1,9,2,10,9,0,2,8,4,7,-1,-1,-1,-1,-1,-1,-1,2,10,9,2,9,7,2,7,3,7,9,4,-1,-1,-1,-1,8,4,7,3,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,4,7,11,2,4,2,0,4,-1,-1,-1,-1,-1,-1,-1,9,0,1,8,4,7,2,3,11,-1,-1,-1,-1,-1,-1,-1,4,7,11,9,4,11,9,11,2,9,2,1,-1,-1,-1,-1,3,10,1,3,11,10,7,8,4,-1,-1,-1,-1,-1,-1,-1,1,11,10,1,4,11,1,0,4,7,11,4,-1,-1,-1,-1,4,7,8,9,0,11,9,11,10,11,0,3,-1,-1,-1,-1,4,7,11,4,11,9,9,11,10,-1,-1,-1,-1,-1,-1,-1,9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,5,4,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,5,4,1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,5,4,8,3,5,3,1,5,-1,-1,-1,-1,-1,-1,-1,1,2,10,9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,0,8,1,2,10,4,9,5,-1,-1,-1,-1,-1,-1,-1,5,2,10,5,4,2,4,0,2,-1,-1,-1,-1,-1,-1,-1,2,10,5,3,2,5,3,5,4,3,4,8,-1,-1,-1,-1,9,5,4,2,3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,11,2,0,8,11,4,9,5,-1,-1,-1,-1,-1,-1,-1,0,5,4,0,1,5,2,3,11,-1,-1,-1,-1,-1,-1,-1,2,1,5,2,5,8,2,8,11,4,8,5,-1,-1,-1,-1,10,3,11,10,1,3,9,5,4,-1,-1,-1,-1,-1,-1,-1,4,9,5,0,8,1,8,10,1,8,11,10,-1,-1,-1,-1,5,4,0,5,0,11,5,11,10,11,0,3,-1,-1,-1,-1,5,4,8,5,8,10,10,8,11,-1,-1,-1,-1,-1,-1,-1,9,7,8,5,7,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,3,0,9,5,3,5,7,3,-1,-1,-1,-1,-1,-1,-1,0,7,8,0,1,7,1,5,7,-1,-1,-1,-1,-1,-1,-1,1,5,3,3,5,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,7,8,9,5,7,10,1,2,-1,-1,-1,-1,-1,-1,-1,10,1,2,9,5,0,5,3,0,5,7,3,-1,-1,-1,-1,8,0,2,8,2,5,8,5,7,10,5,2,-1,-1,-1,-1,2,10,5,2,5,3,3,5,7,-1,-1,-1,-1,-1,-1,-1,7,9,5,7,8,9,3,11,2,-1,-1,-1,-1,-1,-1,-1,9,5,7,9,7,2,9,2,0,2,7,11,-1,-1,-1,-1,2,3,11,0,1,8,1,7,8,1,5,7,-1,-1,-1,-1,11,2,1,11,1,7,7,1,5,-1,-1,-1,-1,-1,-1,-1,9,5,8,8,5,7,10,1,3,10,3,11,-1,-1,-1,-1,5,7,0,5,0,9,7,11,0,1,0,10,11,10,0,-1,11,10,0,11,0,3,10,5,0,8,0,7,5,7,0,-1,11,10,5,7,11,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,5,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,0,1,5,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,8,3,1,9,8,5,10,6,-1,-1,-1,-1,-1,-1,-1,1,6,5,2,6,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,6,5,1,2,6,3,0,8,-1,-1,-1,-1,-1,-1,-1,9,6,5,9,0,6,0,2,6,-1,-1,-1,-1,-1,-1,-1,5,9,8,5,8,2,5,2,6,3,2,8,-1,-1,-1,-1,2,3,11,10,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,0,8,11,2,0,10,6,5,-1,-1,-1,-1,-1,-1,-1,0,1,9,2,3,11,5,10,6,-1,-1,-1,-1,-1,-1,-1,5,10,6,1,9,2,9,11,2,9,8,11,-1,-1,-1,-1,6,3,11,6,5,3,5,1,3,-1,-1,-1,-1,-1,-1,-1,0,8,11,0,11,5,0,5,1,5,11,6,-1,-1,-1,-1,3,11,6,0,3,6,0,6,5,0,5,9,-1,-1,-1,-1,6,5,9,6,9,11,11,9,8,-1,-1,-1,-1,-1,-1,-1,5,10,6,4,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,3,0,4,7,3,6,5,10,-1,-1,-1,-1,-1,-1,-1,1,9,0,5,10,6,8,4,7,-1,-1,-1,-1,-1,-1,-1,10,6,5,1,9,7,1,7,3,7,9,4,-1,-1,-1,-1,6,1,2,6,5,1,4,7,8,-1,-1,-1,-1,-1,-1,-1,1,2,5,5,2,6,3,0,4,3,4,7,-1,-1,-1,-1,8,4,7,9,0,5,0,6,5,0,2,6,-1,-1,-1,-1,7,3,9,7,9,4,3,2,9,5,9,6,2,6,9,-1,3,11,2,7,8,4,10,6,5,-1,-1,-1,-1,-1,-1,-1,5,10,6,4,7,2,4,2,0,2,7,11,-1,-1,-1,-1,0,1,9,4,7,8,2,3,11,5,10,6,-1,-1,-1,-1,9,2,1,9,11,2,9,4,11,7,11,4,5,10,6,-1,8,4,7,3,11,5,3,5,1,5,11,6,-1,-1,-1,-1,5,1,11,5,11,6,1,0,11,7,11,4,0,4,11,-1,0,5,9,0,6,5,0,3,6,11,6,3,8,4,7,-1,6,5,9,6,9,11,4,7,9,7,11,9,-1,-1,-1,-1,10,4,9,6,4,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,10,6,4,9,10,0,8,3,-1,-1,-1,-1,-1,-1,-1,10,0,1,10,6,0,6,4,0,-1,-1,-1,-1,-1,-1,-1,8,3,1,8,1,6,8,6,4,6,1,10,-1,-1,-1,-1,1,4,9,1,2,4,2,6,4,-1,-1,-1,-1,-1,-1,-1,3,0,8,1,2,9,2,4,9,2,6,4,-1,-1,-1,-1,0,2,4,4,2,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,3,2,8,2,4,4,2,6,-1,-1,-1,-1,-1,-1,-1,10,4,9,10,6,4,11,2,3,-1,-1,-1,-1,-1,-1,-1,0,8,2,2,8,11,4,9,10,4,10,6,-1,-1,-1,-1,3,11,2,0,1,6,0,6,4,6,1,10,-1,-1,-1,-1,6,4,1,6,1,10,4,8,1,2,1,11,8,11,1,-1,9,6,4,9,3,6,9,1,3,11,6,3,-1,-1,-1,-1,8,11,1,8,1,0,11,6,1,9,1,4,6,4,1,-1,3,11,6,3,6,0,0,6,4,-1,-1,-1,-1,-1,-1,-1,6,4,8,11,6,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,10,6,7,8,10,8,9,10,-1,-1,-1,-1,-1,-1,-1,0,7,3,0,10,7,0,9,10,6,7,10,-1,-1,-1,-1,10,6,7,1,10,7,1,7,8,1,8,0,-1,-1,-1,-1,10,6,7,10,7,1,1,7,3,-1,-1,-1,-1,-1,-1,-1,1,2,6,1,6,8,1,8,9,8,6,7,-1,-1,-1,-1,2,6,9,2,9,1,6,7,9,0,9,3,7,3,9,-1,7,8,0,7,0,6,6,0,2,-1,-1,-1,-1,-1,-1,-1,7,3,2,6,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,11,10,6,8,10,8,9,8,6,7,-1,-1,-1,-1,2,0,7,2,7,11,0,9,7,6,7,10,9,10,7,-1,1,8,0,1,7,8,1,10,7,6,7,10,2,3,11,-1,11,2,1,11,1,7,10,6,1,6,7,1,-1,-1,-1,-1,8,9,6,8,6,7,9,1,6,11,6,3,1,3,6,-1,0,9,1,11,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,8,0,7,0,6,3,11,0,11,6,0,-1,-1,-1,-1,7,11,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,0,8,11,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,9,11,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,1,9,8,3,1,11,7,6,-1,-1,-1,-1,-1,-1,-1,10,1,2,6,11,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,2,10,3,0,8,6,11,7,-1,-1,-1,-1,-1,-1,-1,2,9,0,2,10,9,6,11,7,-1,-1,-1,-1,-1,-1,-1,6,11,7,2,10,3,10,8,3,10,9,8,-1,-1,-1,-1,7,2,3,6,2,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,8,7,6,0,6,2,0,-1,-1,-1,-1,-1,-1,-1,2,7,6,2,3,7,0,1,9,-1,-1,-1,-1,-1,-1,-1,1,6,2,1,8,6,1,9,8,8,7,6,-1,-1,-1,-1,10,7,6,10,1,7,1,3,7,-1,-1,-1,-1,-1,-1,-1,10,7,6,1,7,10,1,8,7,1,0,8,-1,-1,-1,-1,0,3,7,0,7,10,0,10,9,6,10,7,-1,-1,-1,-1,7,6,10,7,10,8,8,10,9,-1,-1,-1,-1,-1,-1,-1,6,8,4,11,8,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,6,11,3,0,6,0,4,6,-1,-1,-1,-1,-1,-1,-1,8,6,11,8,4,6,9,0,1,-1,-1,-1,-1,-1,-1,-1,9,4,6,9,6,3,9,3,1,11,3,6,-1,-1,-1,-1,6,8,4,6,11,8,2,10,1,-1,-1,-1,-1,-1,-1,-1,1,2,10,3,0,11,0,6,11,0,4,6,-1,-1,-1,-1,4,11,8,4,6,11,0,2,9,2,10,9,-1,-1,-1,-1,10,9,3,10,3,2,9,4,3,11,3,6,4,6,3,-1,8,2,3,8,4,2,4,6,2,-1,-1,-1,-1,-1,-1,-1,0,4,2,4,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,9,0,2,3,4,2,4,6,4,3,8,-1,-1,-1,-1,1,9,4,1,4,2,2,4,6,-1,-1,-1,-1,-1,-1,-1,8,1,3,8,6,1,8,4,6,6,10,1,-1,-1,-1,-1,10,1,0,10,0,6,6,0,4,-1,-1,-1,-1,-1,-1,-1,4,6,3,4,3,8,6,10,3,0,3,9,10,9,3,-1,10,9,4,6,10,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,9,5,7,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,4,9,5,11,7,6,-1,-1,-1,-1,-1,-1,-1,5,0,1,5,4,0,7,6,11,-1,-1,-1,-1,-1,-1,-1,11,7,6,8,3,4,3,5,4,3,1,5,-1,-1,-1,-1,9,5,4,10,1,2,7,6,11,-1,-1,-1,-1,-1,-1,-1,6,11,7,1,2,10,0,8,3,4,9,5,-1,-1,-1,-1,7,6,11,5,4,10,4,2,10,4,0,2,-1,-1,-1,-1,3,4,8,3,5,4,3,2,5,10,5,2,11,7,6,-1,7,2,3,7,6,2,5,4,9,-1,-1,-1,-1,-1,-1,-1,9,5,4,0,8,6,0,6,2,6,8,7,-1,-1,-1,-1,3,6,2,3,7,6,1,5,0,5,4,0,-1,-1,-1,-1,6,2,8,6,8,7,2,1,8,4,8,5,1,5,8,-1,9,5,4,10,1,6,1,7,6,1,3,7,-1,-1,-1,-1,1,6,10,1,7,6,1,0,7,8,7,0,9,5,4,-1,4,0,10,4,10,5,0,3,10,6,10,7,3,7,10,-1,7,6,10,7,10,8,5,4,10,4,8,10,-1,-1,-1,-1,6,9,5,6,11,9,11,8,9,-1,-1,-1,-1,-1,-1,-1,3,6,11,0,6,3,0,5,6,0,9,5,-1,-1,-1,-1,0,11,8,0,5,11,0,1,5,5,6,11,-1,-1,-1,-1,6,11,3,6,3,5,5,3,1,-1,-1,-1,-1,-1,-1,-1,1,2,10,9,5,11,9,11,8,11,5,6,-1,-1,-1,-1,0,11,3,0,6,11,0,9,6,5,6,9,1,2,10,-1,11,8,5,11,5,6,8,0,5,10,5,2,0,2,5,-1,6,11,3,6,3,5,2,10,3,10,5,3,-1,-1,-1,-1,5,8,9,5,2,8,5,6,2,3,8,2,-1,-1,-1,-1,9,5,6,9,6,0,0,6,2,-1,-1,-1,-1,-1,-1,-1,1,5,8,1,8,0,5,6,8,3,8,2,6,2,8,-1,1,5,6,2,1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,3,6,1,6,10,3,8,6,5,6,9,8,9,6,-1,10,1,0,10,0,6,9,5,0,5,6,0,-1,-1,-1,-1,0,3,8,5,6,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,5,10,7,5,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,5,10,11,7,5,8,3,0,-1,-1,-1,-1,-1,-1,-1,5,11,7,5,10,11,1,9,0,-1,-1,-1,-1,-1,-1,-1,10,7,5,10,11,7,9,8,1,8,3,1,-1,-1,-1,-1,11,1,2,11,7,1,7,5,1,-1,-1,-1,-1,-1,-1,-1,0,8,3,1,2,7,1,7,5,7,2,11,-1,-1,-1,-1,9,7,5,9,2,7,9,0,2,2,11,7,-1,-1,-1,-1,7,5,2,7,2,11,5,9,2,3,2,8,9,8,2,-1,2,5,10,2,3,5,3,7,5,-1,-1,-1,-1,-1,-1,-1,8,2,0,8,5,2,8,7,5,10,2,5,-1,-1,-1,-1,9,0,1,5,10,3,5,3,7,3,10,2,-1,-1,-1,-1,9,8,2,9,2,1,8,7,2,10,2,5,7,5,2,-1,1,3,5,3,7,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,7,0,7,1,1,7,5,-1,-1,-1,-1,-1,-1,-1,9,0,3,9,3,5,5,3,7,-1,-1,-1,-1,-1,-1,-1,9,8,7,5,9,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,8,4,5,10,8,10,11,8,-1,-1,-1,-1,-1,-1,-1,5,0,4,5,11,0,5,10,11,11,3,0,-1,-1,-1,-1,0,1,9,8,4,10,8,10,11,10,4,5,-1,-1,-1,-1,10,11,4,10,4,5,11,3,4,9,4,1,3,1,4,-1,2,5,1,2,8,5,2,11,8,4,5,8,-1,-1,-1,-1,0,4,11,0,11,3,4,5,11,2,11,1,5,1,11,-1,0,2,5,0,5,9,2,11,5,4,5,8,11,8,5,-1,9,4,5,2,11,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,5,10,3,5,2,3,4,5,3,8,4,-1,-1,-1,-1,5,10,2,5,2,4,4,2,0,-1,-1,-1,-1,-1,-1,-1,3,10,2,3,5,10,3,8,5,4,5,8,0,1,9,-1,5,10,2,5,2,4,1,9,2,9,4,2,-1,-1,-1,-1,8,4,5,8,5,3,3,5,1,-1,-1,-1,-1,-1,-1,-1,0,4,5,1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,4,5,8,5,3,9,0,5,0,3,5,-1,-1,-1,-1,9,4,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,11,7,4,9,11,9,10,11,-1,-1,-1,-1,-1,-1,-1,0,8,3,4,9,7,9,11,7,9,10,11,-1,-1,-1,-1,1,10,11,1,11,4,1,4,0,7,4,11,-1,-1,-1,-1,3,1,4,3,4,8,1,10,4,7,4,11,10,11,4,-1,4,11,7,9,11,4,9,2,11,9,1,2,-1,-1,-1,-1,9,7,4,9,11,7,9,1,11,2,11,1,0,8,3,-1,11,7,4,11,4,2,2,4,0,-1,-1,-1,-1,-1,-1,-1,11,7,4,11,4,2,8,3,4,3,2,4,-1,-1,-1,-1,2,9,10,2,7,9,2,3,7,7,4,9,-1,-1,-1,-1,9,10,7,9,7,4,10,2,7,8,7,0,2,0,7,-1,3,7,10,3,10,2,7,4,10,1,10,0,4,0,10,-1,1,10,2,8,7,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,9,1,4,1,7,7,1,3,-1,-1,-1,-1,-1,-1,-1,4,9,1,4,1,7,0,8,1,8,7,1,-1,-1,-1,-1,4,0,3,7,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,8,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,10,8,10,11,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,0,9,3,9,11,11,9,10,-1,-1,-1,-1,-1,-1,-1,0,1,10,0,10,8,8,10,11,-1,-1,-1,-1,-1,-1,-1,3,1,10,11,3,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,2,11,1,11,9,9,11,8,-1,-1,-1,-1,-1,-1,-1,3,0,9,3,9,11,1,2,9,2,11,9,-1,-1,-1,-1,0,2,11,8,0,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,2,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,8,2,8,10,10,8,9,-1,-1,-1,-1,-1,-1,-1,9,10,2,0,9,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,8,2,8,10,0,1,8,1,10,8,-1,-1,-1,-1,1,10,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,3,8,9,1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,9,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,3,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]),t.a=i.MarchingCubes},function(e,t,r){\"use strict\";var i=r(0);i.MaskPass=function(e,t){this.scene=e,this.camera=t,this.enabled=!0,this.clear=!0,this.needsSwap=!1,this.inverse=!1},i.MaskPass.prototype={render:function(e,t,r,i){var n=e.context;n.colorMask(!1,!1,!1,!1),n.depthMask(!1);var o,a;this.inverse?(o=0,a=1):(o=1,a=0),n.enable(n.STENCIL_TEST),n.stencilOp(n.REPLACE,n.REPLACE,n.REPLACE),n.stencilFunc(n.ALWAYS,o,4294967295),n.clearStencil(a),e.render(this.scene,this.camera,r,this.clear),e.render(this.scene,this.camera,t,this.clear),n.colorMask(!0,!0,!0,!0),n.depthMask(!0),n.stencilFunc(n.EQUAL,1,4294967295),n.stencilOp(n.KEEP,n.KEEP,n.KEEP)}},i.ClearMaskPass=function(){this.enabled=!0},i.ClearMaskPass.prototype={render:function(e,t,r,i){var n=e.context;n.disable(n.STENCIL_TEST)}},t.a=i.MaskPass},function(e,t,r){\"use strict\";var i=r(0);i.MirrorShader={uniforms:{tDiffuse:{type:\"t\",value:null},side:{type:\"i\",value:1}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"uniform int side;\",\"varying vec2 vUv;\",\"void main() {\",\"vec2 p = vUv;\",\"if (side == 0){\",\"if (p.x > 0.5) p.x = 1.0 - p.x;\",\"}else if (side == 1){\",\"if (p.x < 0.5) p.x = 1.0 - p.x;\",\"}else if (side == 2){\",\"if (p.y < 0.5) p.y = 1.0 - p.y;\",\"}else if (side == 3){\",\"if (p.y > 0.5) p.y = 1.0 - p.y;\",\"} \",\"vec4 color = texture2D(tDiffuse, p);\",\"gl_FragColor = color;\",\"}\"].join(\"\\n\")},t.a=i.MirrorShader},function(e,t,r){\"use strict\";var i=r(0);i.NormalMapShader={uniforms:{heightMap:{type:\"t\",value:null},resolution:{type:\"v2\",value:new i._48(512,512)},scale:{type:\"v2\",value:new i._48(1,1)},height:{type:\"f\",value:.05}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform float height;\",\"uniform vec2 resolution;\",\"uniform sampler2D heightMap;\",\"varying vec2 vUv;\",\"void main() {\",\"float val = texture2D( heightMap, vUv ).x;\",\"float valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\",\"float valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\",\"gl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\",\"}\"].join(\"\\n\")},t.a=i.NormalMapShader},function(e,t,r){\"use strict\";var i=r(0);i.OBJLoader=function(e){this.manager=void 0!==e?e:i.v},i.OBJLoader.prototype={constructor:i.OBJLoader,load:function(e,t,r,n){var o=this;new i.F(o.manager).load(e,function(e){t(o.parse(e))},r,n)},parse:function(e){function t(e){var t=parseInt(e);return 3*(t>=0?t-1:t+p.length/3)}function r(e){var t=parseInt(e);return 3*(t>=0?t-1:t+f.length/3)}function n(e){var t=parseInt(e);return 2*(t>=0?t-1:t+m.length/2)}function o(e,t,r){u.vertices.push(p[e],p[e+1],p[e+2],p[t],p[t+1],p[t+2],p[r],p[r+1],p[r+2])}function a(e,t,r){u.normals.push(f[e],f[e+1],f[e+2],f[t],f[t+1],f[t+2],f[r],f[r+1],f[r+2])}function s(e,t,r){u.uvs.push(m[e],m[e+1],m[t],m[t+1],m[r],m[r+1])}function c(e,i,c,l,u,h,d,p,f,m,v,g){var y,x=t(e),_=t(i),b=t(c);void 0===l?o(x,_,b):(y=t(l),o(x,_,y),o(_,b,y)),void 0!==u&&(x=n(u),_=n(h),b=n(d),void 0===l?s(x,_,b):(y=n(p),s(x,_,y),s(_,b,y))),void 0!==f&&(x=r(f),_=r(m),b=r(v),void 0===l?a(x,_,b):(y=r(g),a(x,_,y),a(_,b,y)))}console.time(\".obj loading time\");var l,u,h,d=[];!1===/^o /gm.test(e)&&(u={vertices:[],normals:[],uvs:[]},h={name:\"\"},l={name:\"\",geometry:u,material:h},d.push(l));for(var p=[],f=[],m=[],v=/v( +[\\d|\\.|\\+|\\-|e|E]+)( +[\\d|\\.|\\+|\\-|e|E]+)( +[\\d|\\.|\\+|\\-|e|E]+)/,g=/vn( +[\\d|\\.|\\+|\\-|e|E]+)( +[\\d|\\.|\\+|\\-|e|E]+)( +[\\d|\\.|\\+|\\-|e|E]+)/,y=/vt( +[\\d|\\.|\\+|\\-|e|E]+)( +[\\d|\\.|\\+|\\-|e|E]+)/,x=/f( +-?\\d+)( +-?\\d+)( +-?\\d+)( +-?\\d+)?/,_=/f( +(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+))?/,b=/f( +(-?\\d+)\\/(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+)\\/(-?\\d+))?/,w=/f( +(-?\\d+)\\/\\/(-?\\d+))( +(-?\\d+)\\/\\/(-?\\d+))( +(-?\\d+)\\/\\/(-?\\d+))( +(-?\\d+)\\/\\/(-?\\d+))?/,M=e.split(\"\\n\"),E=0;E<M.length;E++){var S=M[E];S=S.trim();var T;0!==S.length&&\"#\"!==S.charAt(0)&&(null!==(T=v.exec(S))?p.push(parseFloat(T[1]),parseFloat(T[2]),parseFloat(T[3])):null!==(T=g.exec(S))?f.push(parseFloat(T[1]),parseFloat(T[2]),parseFloat(T[3])):null!==(T=y.exec(S))?m.push(parseFloat(T[1]),parseFloat(T[2])):null!==(T=x.exec(S))?c(T[1],T[2],T[3],T[4]):null!==(T=_.exec(S))?c(T[2],T[5],T[8],T[11],T[3],T[6],T[9],T[12]):null!==(T=b.exec(S))?c(T[2],T[6],T[10],T[14],T[3],T[7],T[11],T[15],T[4],T[8],T[12],T[16]):null!==(T=w.exec(S))?c(T[2],T[5],T[8],T[11],void 0,void 0,void 0,void 0,T[3],T[6],T[9],T[12]):/^o /.test(S)?(u={vertices:[],normals:[],uvs:[]},h={name:\"\"},l={name:S.substring(2).trim(),geometry:u,material:h},d.push(l)):/^g /.test(S)||(/^usemtl /.test(S)?h.name=S.substring(7).trim():/^mtllib /.test(S)||/^s /.test(S)))}var A,L=new i._12;for(E=0,A=d.length;E<A;E++){l=d[E],u=l.geometry;var C=new i.k;C.addAttribute(\"position\",new i.j(new Float32Array(u.vertices),3)),u.normals.length>0&&C.addAttribute(\"normal\",new i.j(new Float32Array(u.normals),3)),u.uvs.length>0&&C.addAttribute(\"uv\",new i.j(new Float32Array(u.uvs),2)),h=new i._6({color:16711680}),h.name=l.material.name;var R=new i._3(C,h);R.name=l.name,L.add(R)}return console.timeEnd(\".obj loading time\"),L}},t.a=i.OBJLoader},function(e,t,r){\"use strict\";var i=r(0);i._34.ocean_sim_vertex={varying:{vUV:{type:\"v2\"}},vertexShader:[\"varying vec2 vUV;\",\"void main (void) {\",\"vUV = position.xy * 0.5 + 0.5;\",\"gl_Position = vec4(position, 1.0 );\",\"}\"].join(\"\\n\")},i._34.ocean_subtransform={uniforms:{u_input:{type:\"t\",value:null},u_transformSize:{type:\"f\",value:512},u_subtransformSize:{type:\"f\",value:250}},varying:{vUV:{type:\"v2\"}},fragmentShader:[\"precision highp float;\",\"const float PI = 3.14159265359;\",\"uniform sampler2D u_input;\",\"uniform float u_transformSize;\",\"uniform float u_subtransformSize;\",\"varying vec2 vUV;\",\"vec2 multiplyComplex (vec2 a, vec2 b) {\",\"return vec2(a[0] * b[0] - a[1] * b[1], a[1] * b[0] + a[0] * b[1]);\",\"}\",\"void main (void) {\",\"#ifdef HORIZONTAL\",\"float index = vUV.x * u_transformSize - 0.5;\",\"#else\",\"float index = vUV.y * u_transformSize - 0.5;\",\"#endif\",\"float evenIndex = floor(index / u_subtransformSize) * (u_subtransformSize * 0.5) + mod(index, u_subtransformSize * 0.5);\",\"#ifdef HORIZONTAL\",\"vec4 even = texture2D(u_input, vec2(evenIndex + 0.5, gl_FragCoord.y) / u_transformSize).rgba;\",\"vec4 odd = texture2D(u_input, vec2(evenIndex + u_transformSize * 0.5 + 0.5, gl_FragCoord.y) / u_transformSize).rgba;\",\"#else\",\"vec4 even = texture2D(u_input, vec2(gl_FragCoord.x, evenIndex + 0.5) / u_transformSize).rgba;\",\"vec4 odd = texture2D(u_input, vec2(gl_FragCoord.x, evenIndex + u_transformSize * 0.5 + 0.5) / u_transformSize).rgba;\",\"#endif\",\"float twiddleArgument = -2.0 * PI * (index / u_subtransformSize);\",\"vec2 twiddle = vec2(cos(twiddleArgument), sin(twiddleArgument));\",\"vec2 outputA = even.xy + multiplyComplex(twiddle, odd.xy);\",\"vec2 outputB = even.zw + multiplyComplex(twiddle, odd.zw);\",\"gl_FragColor = vec4(outputA, outputB);\",\"}\"].join(\"\\n\")},i._34.ocean_initial_spectrum={uniforms:{u_wind:{type:\"v2\",value:new i._48(10,10)},u_resolution:{type:\"f\",value:512},u_size:{type:\"f\",value:250}},fragmentShader:[\"precision highp float;\",\"const float PI = 3.14159265359;\",\"const float G = 9.81;\",\"const float KM = 370.0;\",\"const float CM = 0.23;\",\"uniform vec2 u_wind;\",\"uniform float u_resolution;\",\"uniform float u_size;\",\"float square (float x) {\",\"return x * x;\",\"}\",\"float omega (float k) {\",\"return sqrt(G * k * (1.0 + square(k / KM)));\",\"}\",\"float tanh (float x) {\",\"return (1.0 - exp(-2.0 * x)) / (1.0 + exp(-2.0 * x));\",\"}\",\"void main (void) {\",\"vec2 coordinates = gl_FragCoord.xy - 0.5;\",\"float n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;\",\"float m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;\",\"vec2 K = (2.0 * PI * vec2(n, m)) / u_size;\",\"float k = length(K);\",\"float l_wind = length(u_wind);\",\"float Omega = 0.84;\",\"float kp = G * square(Omega / l_wind);\",\"float c = omega(k) / k;\",\"float cp = omega(kp) / kp;\",\"float Lpm = exp(-1.25 * square(kp / k));\",\"float gamma = 1.7;\",\"float sigma = 0.08 * (1.0 + 4.0 * pow(Omega, -3.0));\",\"float Gamma = exp(-square(sqrt(k / kp) - 1.0) / 2.0 * square(sigma));\",\"float Jp = pow(gamma, Gamma);\",\"float Fp = Lpm * Jp * exp(-Omega / sqrt(10.0) * (sqrt(k / kp) - 1.0));\",\"float alphap = 0.006 * sqrt(Omega);\",\"float Bl = 0.5 * alphap * cp / c * Fp;\",\"float z0 = 0.000037 * square(l_wind) / G * pow(l_wind / cp, 0.9);\",\"float uStar = 0.41 * l_wind / log(10.0 / z0);\",\"float alpham = 0.01 * ((uStar < CM) ? (1.0 + log(uStar / CM)) : (1.0 + 3.0 * log(uStar / CM)));\",\"float Fm = exp(-0.25 * square(k / KM - 1.0));\",\"float Bh = 0.5 * alpham * CM / c * Fm * Lpm;\",\"float a0 = log(2.0) / 4.0;\",\"float am = 0.13 * uStar / CM;\",\"float Delta = tanh(a0 + 4.0 * pow(c / cp, 2.5) + am * pow(CM / c, 2.5));\",\"float cosPhi = dot(normalize(u_wind), normalize(K));\",\"float S = (1.0 / (2.0 * PI)) * pow(k, -4.0) * (Bl + Bh) * (1.0 + Delta * (2.0 * cosPhi * cosPhi - 1.0));\",\"float dk = 2.0 * PI / u_size;\",\"float h = sqrt(S / 2.0) * dk;\",\"if (K.x == 0.0 && K.y == 0.0) {\",\"h = 0.0;\",\"}\",\"gl_FragColor = vec4(h, 0.0, 0.0, 0.0);\",\"}\"].join(\"\\n\")},i._34.ocean_phase={uniforms:{u_phases:{type:\"t\",value:null},u_deltaTime:{type:\"f\",value:null},u_resolution:{type:\"f\",value:null},u_size:{type:\"f\",value:null}},varying:{vUV:{type:\"v2\"}},fragmentShader:[\"precision highp float;\",\"const float PI = 3.14159265359;\",\"const float G = 9.81;\",\"const float KM = 370.0;\",\"varying vec2 vUV;\",\"uniform sampler2D u_phases;\",\"uniform float u_deltaTime;\",\"uniform float u_resolution;\",\"uniform float u_size;\",\"float omega (float k) {\",\"return sqrt(G * k * (1.0 + k * k / KM * KM));\",\"}\",\"void main (void) {\",\"float deltaTime = 1.0 / 60.0;\",\"vec2 coordinates = gl_FragCoord.xy - 0.5;\",\"float n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;\",\"float m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;\",\"vec2 waveVector = (2.0 * PI * vec2(n, m)) / u_size;\",\"float phase = texture2D(u_phases, vUV).r;\",\"float deltaPhase = omega(length(waveVector)) * u_deltaTime;\",\"phase = mod(phase + deltaPhase, 2.0 * PI);\",\"gl_FragColor = vec4(phase, 0.0, 0.0, 0.0);\",\"}\"].join(\"\\n\")},i._34.ocean_spectrum={uniforms:{u_size:{type:\"f\",value:null},u_resolution:{type:\"f\",value:null},u_choppiness:{type:\"f\",value:null},u_phases:{type:\"t\",value:null},u_initialSpectrum:{type:\"t\",value:null}},varying:{vUV:{type:\"v2\"}},fragmentShader:[\"precision highp float;\",\"const float PI = 3.14159265359;\",\"const float G = 9.81;\",\"const float KM = 370.0;\",\"varying vec2 vUV;\",\"uniform float u_size;\",\"uniform float u_resolution;\",\"uniform float u_choppiness;\",\"uniform sampler2D u_phases;\",\"uniform sampler2D u_initialSpectrum;\",\"vec2 multiplyComplex (vec2 a, vec2 b) {\",\"return vec2(a[0] * b[0] - a[1] * b[1], a[1] * b[0] + a[0] * b[1]);\",\"}\",\"vec2 multiplyByI (vec2 z) {\",\"return vec2(-z[1], z[0]);\",\"}\",\"float omega (float k) {\",\"return sqrt(G * k * (1.0 + k * k / KM * KM));\",\"}\",\"void main (void) {\",\"vec2 coordinates = gl_FragCoord.xy - 0.5;\",\"float n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;\",\"float m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;\",\"vec2 waveVector = (2.0 * PI * vec2(n, m)) / u_size;\",\"float phase = texture2D(u_phases, vUV).r;\",\"vec2 phaseVector = vec2(cos(phase), sin(phase));\",\"vec2 h0 = texture2D(u_initialSpectrum, vUV).rg;\",\"vec2 h0Star = texture2D(u_initialSpectrum, vec2(1.0 - vUV + 1.0 / u_resolution)).rg;\",\"h0Star.y *= -1.0;\",\"vec2 h = multiplyComplex(h0, phaseVector) + multiplyComplex(h0Star, vec2(phaseVector.x, -phaseVector.y));\",\"vec2 hX = -multiplyByI(h * (waveVector.x / length(waveVector))) * u_choppiness;\",\"vec2 hZ = -multiplyByI(h * (waveVector.y / length(waveVector))) * u_choppiness;\",\"if (waveVector.x == 0.0 && waveVector.y == 0.0) {\",\"h = vec2(0.0);\",\"hX = vec2(0.0);\",\"hZ = vec2(0.0);\",\"}\",\"gl_FragColor = vec4(hX + multiplyByI(h), hZ);\",\"}\"].join(\"\\n\")},i._34.ocean_normals={uniforms:{u_displacementMap:{type:\"t\",value:null},u_resolution:{type:\"f\",value:null},u_size:{type:\"f\",value:null}},varying:{vUV:{type:\"v2\"}},fragmentShader:[\"precision highp float;\",\"varying vec2 vUV;\",\"uniform sampler2D u_displacementMap;\",\"uniform float u_resolution;\",\"uniform float u_size;\",\"void main (void) {\",\"float texel = 1.0 / u_resolution;\",\"float texelSize = u_size / u_resolution;\",\"vec3 center = texture2D(u_displacementMap, vUV).rgb;\",\"vec3 right = vec3(texelSize, 0.0, 0.0) + texture2D(u_displacementMap, vUV + vec2(texel, 0.0)).rgb - center;\",\"vec3 left = vec3(-texelSize, 0.0, 0.0) + texture2D(u_displacementMap, vUV + vec2(-texel, 0.0)).rgb - center;\",\"vec3 top = vec3(0.0, 0.0, -texelSize) + texture2D(u_displacementMap, vUV + vec2(0.0, -texel)).rgb - center;\",\"vec3 bottom = vec3(0.0, 0.0, texelSize) + texture2D(u_displacementMap, vUV + vec2(0.0, texel)).rgb - center;\",\"vec3 topRight = cross(right, top);\",\"vec3 topLeft = cross(top, left);\",\"vec3 bottomLeft = cross(left, bottom);\",\"vec3 bottomRight = cross(bottom, right);\",\"gl_FragColor = vec4(normalize(topRight + topLeft + bottomLeft + bottomRight), 1.0);\",\"}\"].join(\"\\n\")},i._34.ocean_main={uniforms:{u_displacementMap:{type:\"t\",value:null},u_normalMap:{type:\"t\",value:null},u_geometrySize:{type:\"f\",value:null},u_size:{type:\"f\",value:null},u_projectionMatrix:{type:\"m4\",value:null},u_viewMatrix:{type:\"m4\",value:null},u_cameraPosition:{type:\"v3\",value:null},u_skyColor:{type:\"v3\",value:null},u_oceanColor:{type:\"v3\",value:null},u_sunDirection:{type:\"v3\",value:null},u_exposure:{type:\"f\",value:null}},varying:{vPos:{type:\"v3\"},vUV:{type:\"v2\"}},vertexShader:[\"precision highp float;\",\"varying vec3 vPos;\",\"varying vec2 vUV;\",\"uniform mat4 u_projectionMatrix;\",\"uniform mat4 u_viewMatrix;\",\"uniform float u_size;\",\"uniform float u_geometrySize;\",\"uniform sampler2D u_displacementMap;\",\"void main (void) {\",\"vec3 newPos = position + texture2D(u_displacementMap, uv).rgb * (u_geometrySize / u_size);\",\"vPos = newPos;\",\"vUV = uv;\",\"gl_Position = u_projectionMatrix * u_viewMatrix * vec4(newPos, 1.0);\",\"}\"].join(\"\\n\"),fragmentShader:[\"precision highp float;\",\"varying vec3 vPos;\",\"varying vec2 vUV;\",\"uniform sampler2D u_displacementMap;\",\"uniform sampler2D u_normalMap;\",\"uniform vec3 u_cameraPosition;\",\"uniform vec3 u_oceanColor;\",\"uniform vec3 u_skyColor;\",\"uniform vec3 u_sunDirection;\",\"uniform float u_exposure;\",\"vec3 hdr (vec3 color, float exposure) {\",\"return 1.0 - exp(-color * exposure);\",\"}\",\"void main (void) {\",\"vec3 normal = texture2D(u_normalMap, vUV).rgb;\",\"vec3 view = normalize(u_cameraPosition - vPos);\",\"float fresnel = 0.02 + 0.98 * pow(1.0 - dot(normal, view), 5.0);\",\"vec3 sky = fresnel * u_skyColor;\",\"float diffuse = clamp(dot(normal, normalize(u_sunDirection)), 0.0, 1.0);\",\"vec3 water = (1.0 - fresnel) * u_oceanColor * u_skyColor * diffuse;\",\"vec3 color = sky + water;\",\"gl_FragColor = vec4(hdr(color, u_exposure), 1.0);\",\"}\"].join(\"\\n\")},t.a=i._34},function(e,t,r){\"use strict\";var i=r(0);i.OrbitControls=function(e,t){function r(){return 2*Math.PI/60/60*I.autoRotateSpeed}function n(){return Math.pow(.95,I.zoomSpeed)}function o(e){j.theta-=e}function a(e){j.phi-=e}function s(e){I.object instanceof i._16?V/=e:I.object instanceof i._14?(I.object.zoom=Math.max(I.minZoom,Math.min(I.maxZoom,I.object.zoom*e)),I.object.updateProjectionMatrix(),W=!0):(console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\"),I.enableZoom=!1)}function c(e){I.object instanceof i._16?V*=e:I.object instanceof i._14?(I.object.zoom=Math.max(I.minZoom,Math.min(I.maxZoom,I.object.zoom/e)),I.object.updateProjectionMatrix(),W=!0):(console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\"),I.enableZoom=!1)}function l(e){X.set(e.clientX,e.clientY)}function u(e){Q.set(e.clientX,e.clientY)}function h(e){Z.set(e.clientX,e.clientY)}function d(e){q.set(e.clientX,e.clientY),Y.subVectors(q,X);var t=I.domElement===document?I.domElement.body:I.domElement;o(2*Math.PI*Y.x/t.clientWidth*I.rotateSpeed),a(2*Math.PI*Y.y/t.clientHeight*I.rotateSpeed),X.copy(q),I.update()}function p(e){$.set(e.clientX,e.clientY),ee.subVectors($,Q),ee.y>0?s(n()):ee.y<0&&c(n()),Q.copy($),I.update()}function f(e){J.set(e.clientX,e.clientY),K.subVectors(J,Z),ie(K.x,K.y),Z.copy(J),I.update()}function m(e){}function v(e){var t=0;void 0!==e.wheelDelta?t=e.wheelDelta:void 0!==e.detail&&(t=-e.detail),t>0?c(n()):t<0&&s(n()),I.update()}function g(e){switch(e.keyCode){case I.keys.UP:ie(0,I.keyPanSpeed),I.update();break;case I.keys.BOTTOM:ie(0,-I.keyPanSpeed),I.update();break;case I.keys.LEFT:ie(I.keyPanSpeed,0),I.update();break;case I.keys.RIGHT:ie(-I.keyPanSpeed,0),I.update()}}function y(e){X.set(e.touches[0].pageX,e.touches[0].pageY)}function x(e){var t=e.touches[0].pageX-e.touches[1].pageX,r=e.touches[0].pageY-e.touches[1].pageY,i=Math.sqrt(t*t+r*r);Q.set(0,i)}function _(e){Z.set(e.touches[0].pageX,e.touches[0].pageY)}function b(e){q.set(e.touches[0].pageX,e.touches[0].pageY),Y.subVectors(q,X);var t=I.domElement===document?I.domElement.body:I.domElement;o(2*Math.PI*Y.x/t.clientWidth*I.rotateSpeed),a(2*Math.PI*Y.y/t.clientHeight*I.rotateSpeed),X.copy(q),I.update()}function w(e){var t=e.touches[0].pageX-e.touches[1].pageX,r=e.touches[0].pageY-e.touches[1].pageY,i=Math.sqrt(t*t+r*r);$.set(0,i),ee.subVectors($,Q),ee.y>0?c(n()):ee.y<0&&s(n()),Q.copy($),I.update()}function M(e){J.set(e.touches[0].pageX,e.touches[0].pageY),K.subVectors(J,Z),ie(K.x,K.y),Z.copy(J),I.update()}function E(e){}function S(e){if(!1!==I.enabled){if(e.preventDefault(),e.button===I.mouseButtons.ORBIT){if(!1===I.enableRotate)return;l(e),B=z.ROTATE}else if(e.button===I.mouseButtons.ZOOM){if(!1===I.enableZoom)return;u(e),B=z.DOLLY}else if(e.button===I.mouseButtons.PAN){if(!1===I.enablePan)return;h(e),B=z.PAN}B!==z.NONE&&(document.addEventListener(\"mousemove\",T,!1),document.addEventListener(\"mouseup\",A,!1),document.addEventListener(\"mouseout\",A,!1),I.dispatchEvent(N))}}function T(e){if(!1!==I.enabled)if(e.preventDefault(),B===z.ROTATE){if(!1===I.enableRotate)return;d(e)}else if(B===z.DOLLY){if(!1===I.enableZoom)return;p(e)}else if(B===z.PAN){if(!1===I.enablePan)return;f(e)}}function A(e){!1!==I.enabled&&(m(e),document.removeEventListener(\"mousemove\",T,!1),document.removeEventListener(\"mouseup\",A,!1),document.removeEventListener(\"mouseout\",A,!1),I.dispatchEvent(F),B=z.NONE)}function L(e){!1===I.enabled||!1===I.enableZoom||B!==z.NONE&&B!==z.ROTATE||(e.preventDefault(),e.stopPropagation(),v(e),I.dispatchEvent(N),I.dispatchEvent(F))}function C(e){!1!==I.enabled&&!1!==I.enableKeys&&!1!==I.enablePan&&g(e)}function R(e){if(!1!==I.enabled){switch(e.touches.length){case 1:if(!1===I.enableRotate)return;y(e),B=z.TOUCH_ROTATE;break;case 2:if(!1===I.enableZoom)return;x(e),B=z.TOUCH_DOLLY;break;case 3:if(!1===I.enablePan)return;_(e),B=z.TOUCH_PAN;break;default:B=z.NONE}B!==z.NONE&&I.dispatchEvent(N)}}function P(e){if(!1!==I.enabled)switch(e.preventDefault(),e.stopPropagation(),e.touches.length){case 1:if(!1===I.enableRotate)return;if(B!==z.TOUCH_ROTATE)return;b(e);break;case 2:if(!1===I.enableZoom)return;if(B!==z.TOUCH_DOLLY)return;w(e);break;case 3:if(!1===I.enablePan)return;if(B!==z.TOUCH_PAN)return;M(e);break;default:B=z.NONE}}function D(e){!1!==I.enabled&&(E(e),I.dispatchEvent(F),B=z.NONE)}function U(e){e.preventDefault()}this.object=e,this.domElement=void 0!==t?t:document,this.enabled=!0,this.target=new i._49,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.25,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.enableKeys=!0,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40},this.mouseButtons={ORBIT:i.Y.LEFT,ZOOM:i.Y.MIDDLE,PAN:i.Y.RIGHT},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this.getPolarAngle=function(){return H.phi},this.getAzimuthalAngle=function(){return H.theta},this.reset=function(){I.target.copy(I.target0),I.object.position.copy(I.position0),I.object.zoom=I.zoom0,I.object.updateProjectionMatrix(),I.dispatchEvent(O),I.update(),B=z.NONE},this.update=function(){var t=new i._49,n=(new i._18).setFromUnitVectors(e.up,new i._49(0,1,0)),a=n.clone().inverse(),s=new i._49,c=new i._18;return function(){var e=I.object.position;return t.copy(e).sub(I.target),t.applyQuaternion(n),H.setFromVector3(t),I.autoRotate&&B===z.NONE&&o(r()),H.theta+=j.theta,H.phi+=j.phi,H.theta=Math.max(I.minAzimuthAngle,Math.min(I.maxAzimuthAngle,H.theta)),H.phi=Math.max(I.minPolarAngle,Math.min(I.maxPolarAngle,H.phi)),H.makeSafe(),H.radius*=V,H.radius=Math.max(I.minDistance,Math.min(I.maxDistance,H.radius)),I.target.add(k),t.setFromSpherical(H),t.applyQuaternion(a),e.copy(I.target).add(t),I.object.lookAt(I.target),!0===I.enableDamping?(j.theta*=1-I.dampingFactor,j.phi*=1-I.dampingFactor):j.set(0,0,0),V=1,k.set(0,0,0),!!(W||s.distanceToSquared(I.object.position)>G||8*(1-c.dot(I.object.quaternion))>G)&&(I.dispatchEvent(O),s.copy(I.object.position),c.copy(I.object.quaternion),W=!1,!0)}}(),this.dispose=function(){I.domElement.removeEventListener(\"contextmenu\",U,!1),I.domElement.removeEventListener(\"mousedown\",S,!1),I.domElement.removeEventListener(\"mousewheel\",L,!1),I.domElement.removeEventListener(\"MozMousePixelScroll\",L,!1),I.domElement.removeEventListener(\"touchstart\",R,!1),I.domElement.removeEventListener(\"touchend\",D,!1),I.domElement.removeEventListener(\"touchmove\",P,!1),document.removeEventListener(\"mousemove\",T,!1),document.removeEventListener(\"mouseup\",A,!1),document.removeEventListener(\"mouseout\",A,!1),window.removeEventListener(\"keydown\",C,!1)};var I=this,O={type:\"change\"},N={type:\"start\"},F={type:\"end\"},z={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_DOLLY:4,TOUCH_PAN:5},B=z.NONE,G=1e-6,H=new i._39,j=new i._39,V=1,k=new i._49,W=!1,X=new i._48,q=new i._48,Y=new i._48,Z=new i._48,J=new i._48,K=new i._48,Q=new i._48,$=new i._48,ee=new i._48,te=function(){var e=new i._49;return function(t,r){e.setFromMatrixColumn(r,0),e.multiplyScalar(-t),k.add(e)}}(),re=function(){var e=new i._49;return function(t,r){e.setFromMatrixColumn(r,1),e.multiplyScalar(t),k.add(e)}}(),ie=function(){var e=new i._49;return function(t,r){var n=I.domElement===document?I.domElement.body:I.domElement;if(I.object instanceof i._16){var o=I.object.position;e.copy(o).sub(I.target);var a=e.length();a*=Math.tan(I.object.fov/2*Math.PI/180),te(2*t*a/n.clientHeight,I.object.matrix),re(2*r*a/n.clientHeight,I.object.matrix)}else I.object instanceof i._14?(te(t*(I.object.right-I.object.left)/I.object.zoom/n.clientWidth,I.object.matrix),re(r*(I.object.top-I.object.bottom)/I.object.zoom/n.clientHeight,I.object.matrix)):(console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.\"),I.enablePan=!1)}}();I.domElement.addEventListener(\"contextmenu\",U,!1),I.domElement.addEventListener(\"mousedown\",S,!1),I.domElement.addEventListener(\"mousewheel\",L,!1),I.domElement.addEventListener(\"MozMousePixelScroll\",L,!1),I.domElement.addEventListener(\"touchstart\",R,!1),I.domElement.addEventListener(\"touchend\",D,!1),I.domElement.addEventListener(\"touchmove\",P,!1),window.addEventListener(\"keydown\",C,!1),this.update()},i.OrbitControls.prototype=Object.create(i.C.prototype),i.OrbitControls.prototype.constructor=i.OrbitControls,Object.defineProperties(i.OrbitControls.prototype,{center:{get:function(){return console.warn(\"THREE.OrbitControls: .center has been renamed to .target\"),this.target}},noZoom:{get:function(){return console.warn(\"THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\"),!this.enableZoom},set:function(e){console.warn(\"THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.\"),this.enableZoom=!e}},noRotate:{get:function(){return console.warn(\"THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\"),!this.enableRotate},set:function(e){console.warn(\"THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.\"),this.enableRotate=!e}},noPan:{get:function(){return console.warn(\"THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.\"),!this.enablePan},set:function(e){console.warn(\"THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.\"),this.enablePan=!e}},noKeys:{get:function(){return console.warn(\"THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\"),!this.enableKeys},set:function(e){console.warn(\"THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.\"),this.enableKeys=!e}},staticMoving:{get:function(){return console.warn(\"THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\"),!this.enableDamping},set:function(e){console.warn(\"THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.\"),this.enableDamping=!e}},dynamicDampingFactor:{get:function(){return console.warn(\"THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\"),this.dampingFactor},set:function(e){console.warn(\"THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.\"),this.dampingFactor=e}}}),t.a=i.OrbitControls},function(e,t,r){\"use strict\";var i=r(0);i.ParallaxShader={modes:{none:\"NO_PARALLAX\",basic:\"USE_BASIC_PARALLAX\",steep:\"USE_STEEP_PARALLAX\",occlusion:\"USE_OCLUSION_PARALLAX\",relief:\"USE_RELIEF_PARALLAX\"},uniforms:{bumpMap:{type:\"t\",value:null},map:{type:\"t\",value:null},parallaxScale:{type:\"f\",value:null},parallaxMinLayers:{type:\"f\",value:null},parallaxMaxLayers:{type:\"f\",value:null}},vertexShader:[\"varying vec2 vUv;\",\"varying vec3 vViewPosition;\",\"varying vec3 vNormal;\",\"void main() {\",\"vUv = uv;\",\"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\"vViewPosition = -mvPosition.xyz;\",\"vNormal = normalize( normalMatrix * normal );\",\"gl_Position = projectionMatrix * mvPosition;\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D bumpMap;\",\"uniform sampler2D map;\",\"uniform float parallaxScale;\",\"uniform float parallaxMinLayers;\",\"uniform float parallaxMaxLayers;\",\"varying vec2 vUv;\",\"varying vec3 vViewPosition;\",\"varying vec3 vNormal;\",\"#ifdef USE_BASIC_PARALLAX\",\"vec2 parallaxMap( in vec3 V ) {\",\"float initialHeight = texture2D( bumpMap, vUv ).r;\",\"vec2 texCoordOffset = parallaxScale * V.xy * initialHeight;\",\"return vUv - texCoordOffset;\",\"}\",\"#else\",\"vec2 parallaxMap( in vec3 V ) {\",\"float numLayers = mix( parallaxMaxLayers, parallaxMinLayers, abs( dot( vec3( 0.0, 0.0, 1.0 ), V ) ) );\",\"float layerHeight = 1.0 / numLayers;\",\"float currentLayerHeight = 0.0;\",\"vec2 dtex = parallaxScale * V.xy / V.z / numLayers;\",\"vec2 currentTextureCoords = vUv;\",\"float heightFromTexture = texture2D( bumpMap, currentTextureCoords ).r;\",\"for ( int i = 0; i < 30; i += 1 ) {\",\"if ( heightFromTexture <= currentLayerHeight ) {\",\"break;\",\"}\",\"currentLayerHeight += layerHeight;\",\"currentTextureCoords -= dtex;\",\"heightFromTexture = texture2D( bumpMap, currentTextureCoords ).r;\",\"}\",\"#ifdef USE_STEEP_PARALLAX\",\"return currentTextureCoords;\",\"#elif defined( USE_RELIEF_PARALLAX )\",\"vec2 deltaTexCoord = dtex / 2.0;\",\"float deltaHeight = layerHeight / 2.0;\",\"currentTextureCoords += deltaTexCoord;\",\"currentLayerHeight -= deltaHeight;\",\"const int numSearches = 5;\",\"for ( int i = 0; i < numSearches; i += 1 ) {\",\"deltaTexCoord /= 2.0;\",\"deltaHeight /= 2.0;\",\"heightFromTexture = texture2D( bumpMap, currentTextureCoords ).r;\",\"if( heightFromTexture > currentLayerHeight ) {\",\"currentTextureCoords -= deltaTexCoord;\",\"currentLayerHeight += deltaHeight;\",\"} else {\",\"currentTextureCoords += deltaTexCoord;\",\"currentLayerHeight -= deltaHeight;\",\"}\",\"}\",\"return currentTextureCoords;\",\"#elif defined( USE_OCLUSION_PARALLAX )\",\"vec2 prevTCoords = currentTextureCoords + dtex;\",\"float nextH = heightFromTexture - currentLayerHeight;\",\"float prevH = texture2D( bumpMap, prevTCoords ).r - currentLayerHeight + layerHeight;\",\"float weight = nextH / ( nextH - prevH );\",\"return prevTCoords * weight + currentTextureCoords * ( 1.0 - weight );\",\"#else\",\"return vUv;\",\"#endif\",\"}\",\"#endif\",\"vec2 perturbUv( vec3 surfPosition, vec3 surfNormal, vec3 viewPosition ) {\",\"vec2 texDx = dFdx( vUv );\",\"vec2 texDy = dFdy( vUv );\",\"vec3 vSigmaX = dFdx( surfPosition );\",\"vec3 vSigmaY = dFdy( surfPosition );\",\"vec3 vR1 = cross( vSigmaY, surfNormal );\",\"vec3 vR2 = cross( surfNormal, vSigmaX );\",\"float fDet = dot( vSigmaX, vR1 );\",\"vec2 vProjVscr = ( 1.0 / fDet ) * vec2( dot( vR1, viewPosition ), dot( vR2, viewPosition ) );\",\"vec3 vProjVtex;\",\"vProjVtex.xy = texDx * vProjVscr.x + texDy * vProjVscr.y;\",\"vProjVtex.z = dot( surfNormal, viewPosition );\",\"return parallaxMap( vProjVtex );\",\"}\",\"void main() {\",\"vec2 mapUv = perturbUv( -vViewPosition, normalize( vNormal ), normalize( vViewPosition ) );\",\"gl_FragColor = texture2D( map, mapUv );\",\"}\"].join(\"\\n\")},t.a=i.ParallaxShader},function(e,t,r){\"use strict\";var i=r(0);i.RGBShiftShader={uniforms:{tDiffuse:{type:\"t\",value:null},amount:{type:\"f\",value:.005},angle:{type:\"f\",value:0}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"uniform float amount;\",\"uniform float angle;\",\"varying vec2 vUv;\",\"void main() {\",\"vec2 offset = amount * vec2( cos(angle), sin(angle));\",\"vec4 cr = texture2D(tDiffuse, vUv + offset);\",\"vec4 cga = texture2D(tDiffuse, vUv);\",\"vec4 cb = texture2D(tDiffuse, vUv - offset);\",\"gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\",\"}\"].join(\"\\n\")},t.a=i.RGBShiftShader},function(e,t,r){\"use strict\";var i=r(0);i.RenderPass=function(e,t,r,n,o){this.scene=e,this.camera=t,this.overrideMaterial=r,this.clearColor=n,this.clearAlpha=void 0!==o?o:1,this.oldClearColor=new i.m,this.oldClearAlpha=1,this.enabled=!0,this.clear=!0,this.needsSwap=!1},i.RenderPass.prototype={render:function(e,t,r,i){this.scene.overrideMaterial=this.overrideMaterial,this.clearColor&&(this.oldClearColor.copy(e.getClearColor()),this.oldClearAlpha=e.getClearAlpha(),e.setClearColor(this.clearColor,this.clearAlpha)),e.render(this.scene,this.camera,r,this.clear),this.clearColor&&e.setClearColor(this.oldClearColor,this.oldClearAlpha),this.scene.overrideMaterial=null}},t.a=i.RenderPass},function(e,t,r){\"use strict\";var i=r(0);i.SSAOShader={uniforms:{tDiffuse:{type:\"t\",value:null},tDepth:{type:\"t\",value:null},size:{type:\"v2\",value:new i._48(512,512)},cameraNear:{type:\"f\",value:1},cameraFar:{type:\"f\",value:100},onlyAO:{type:\"i\",value:0},aoClamp:{type:\"f\",value:.5},lumInfluence:{type:\"f\",value:.5}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform float cameraNear;\",\"uniform float cameraFar;\",\"uniform bool onlyAO;\",\"uniform vec2 size;\",\"uniform float aoClamp;\",\"uniform float lumInfluence;\",\"uniform sampler2D tDiffuse;\",\"uniform sampler2D tDepth;\",\"varying vec2 vUv;\",\"#define DL 2.399963229728653\",\"#define EULER 2.718281828459045\",\"const int samples = 8;\",\"const float radius = 5.0;\",\"const bool useNoise = false;\",\"const float noiseAmount = 0.0003;\",\"const float diffArea = 0.4;\",\"const float gDisplace = 0.4;\",\"float unpackDepth( const in vec4 rgba_depth ) {\",\"const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\",\"float depth = dot( rgba_depth, bit_shift );\",\"return depth;\",\"}\",\"vec2 rand( const vec2 coord ) {\",\"vec2 noise;\",\"if ( useNoise ) {\",\"float nx = dot ( coord, vec2( 12.9898, 78.233 ) );\",\"float ny = dot ( coord, vec2( 12.9898, 78.233 ) * 2.0 );\",\"noise = clamp( fract ( 43758.5453 * sin( vec2( nx, ny ) ) ), 0.0, 1.0 );\",\"} else {\",\"float ff = fract( 1.0 - coord.s * ( size.x / 2.0 ) );\",\"float gg = fract( coord.t * ( size.y / 2.0 ) );\",\"noise = vec2( 0.25, 0.75 ) * vec2( ff ) + vec2( 0.75, 0.25 ) * gg;\",\"}\",\"return ( noise * 2.0  - 1.0 ) * noiseAmount;\",\"}\",\"float readDepth( const in vec2 coord ) {\",\"float cameraFarPlusNear = cameraFar + cameraNear;\",\"float cameraFarMinusNear = cameraFar - cameraNear;\",\"float cameraCoef = 2.0 * cameraNear;\",\"return cameraCoef / ( cameraFarPlusNear - unpackDepth( texture2D( tDepth, coord ) ) * cameraFarMinusNear );\",\"}\",\"float compareDepths( const in float depth1, const in float depth2, inout int far ) {\",\"float garea = 2.0;\",\"float diff = ( depth1 - depth2 ) * 100.0;\",\"if ( diff < gDisplace ) {\",\"garea = diffArea;\",\"} else {\",\"far = 1;\",\"}\",\"float dd = diff - gDisplace;\",\"float gauss = pow( EULER, -2.0 * dd * dd / ( garea * garea ) );\",\"return gauss;\",\"}\",\"float calcAO( float depth, float dw, float dh ) {\",\"float dd = radius - depth * radius;\",\"vec2 vv = vec2( dw, dh );\",\"vec2 coord1 = vUv + dd * vv;\",\"vec2 coord2 = vUv - dd * vv;\",\"float temp1 = 0.0;\",\"float temp2 = 0.0;\",\"int far = 0;\",\"temp1 = compareDepths( depth, readDepth( coord1 ), far );\",\"if ( far > 0 ) {\",\"temp2 = compareDepths( readDepth( coord2 ), depth, far );\",\"temp1 += ( 1.0 - temp1 ) * temp2;\",\"}\",\"return temp1;\",\"}\",\"void main() {\",\"vec2 noise = rand( vUv );\",\"float depth = readDepth( vUv );\",\"float tt = clamp( depth, aoClamp, 1.0 );\",\"float w = ( 1.0 / size.x )  / tt + ( noise.x * ( 1.0 - noise.x ) );\",\"float h = ( 1.0 / size.y ) / tt + ( noise.y * ( 1.0 - noise.y ) );\",\"float ao = 0.0;\",\"float dz = 1.0 / float( samples );\",\"float z = 1.0 - dz / 2.0;\",\"float l = 0.0;\",\"for ( int i = 0; i <= samples; i ++ ) {\",\"float r = sqrt( 1.0 - z );\",\"float pw = cos( l ) * r;\",\"float ph = sin( l ) * r;\",\"ao += calcAO( depth, pw * w, ph * h );\",\"z = z - dz;\",\"l = l + DL;\",\"}\",\"ao /= float( samples );\",\"ao = 1.0 - ao;\",\"vec3 color = texture2D( tDiffuse, vUv ).rgb;\",\"vec3 lumcoeff = vec3( 0.299, 0.587, 0.114 );\",\"float lum = dot( color.rgb, lumcoeff );\",\"vec3 luminance = vec3( lum );\",\"vec3 final = vec3( color * mix( vec3( ao ), vec3( 1.0 ), luminance * lumInfluence ) );\",\"if ( onlyAO ) {\",\"final = vec3( mix( vec3( ao ), vec3( 1.0 ), luminance * lumInfluence ) );\",\"}\",\"gl_FragColor = vec4( final, 1.0 );\",\"}\"].join(\"\\n\")},t.a=i.SSAOShader},function(e,t,r){\"use strict\";var i=r(0);i.SVGLoader=function(e){this.manager=void 0!==e?e:i.v},i.SVGLoader.prototype={constructor:i.SVGLoader,load:function(e,t,r,n){var o=this,a=new DOMParser;new i._54(o.manager).load(e,function(e){var r=a.parseFromString(e,\"image/svg+xml\");t(r.documentElement)},r,n)}},t.a=i.SVGLoader},function(e,t,r){\"use strict\";var i=r(0);i.SavePass=function(e){void 0===i.CopyShader&&console.error(\"THREE.SavePass relies on THREE.CopyShader\");var t=i.CopyShader;this.textureID=\"tDiffuse\",this.uniforms=i._46.clone(t.uniforms),this.material=new i._35({uniforms:this.uniforms,vertexShader:t.vertexShader,fragmentShader:t.fragmentShader}),this.renderTarget=e,void 0===this.renderTarget&&(this.renderTargetParameters={minFilter:i.U,magFilter:i.U,format:i._22,stencilBuffer:!1},this.renderTarget=new i._53(window.innerWidth,window.innerHeight,this.renderTargetParameters)),this.enabled=!0,this.needsSwap=!1,this.clear=!1,this.camera=new i._14(-1,1,1,-1,0,1),this.scene=new i._31,this.quad=new i._3(new i._17(2,2),null),this.scene.add(this.quad)},i.SavePass.prototype={render:function(e,t,r,i){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=r),this.quad.material=this.material,e.render(this.scene,this.camera,this.renderTarget,this.clear)}},t.a=i.SavePass},function(e,t,r){\"use strict\";var i=r(0);i.SepiaShader={uniforms:{tDiffuse:{type:\"t\",value:null},amount:{type:\"f\",value:1}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform float amount;\",\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"void main() {\",\"vec4 color = texture2D( tDiffuse, vUv );\",\"vec3 c = color.rgb;\",\"color.r = dot( c, vec3( 1.0 - 0.607 * amount, 0.769 * amount, 0.189 * amount ) );\",\"color.g = dot( c, vec3( 0.349 * amount, 1.0 - 0.314 * amount, 0.168 * amount ) );\",\"color.b = dot( c, vec3( 0.272 * amount, 0.534 * amount, 1.0 - 0.869 * amount ) );\",\"gl_FragColor = vec4( min( vec3( 1.0 ), color.rgb ), color.a );\",\"}\"].join(\"\\n\")},t.a=i.SepiaShader},function(e,t,r){\"use strict\";var i=r(0);i.ShaderPass=function(e,t){this.textureID=void 0!==t?t:\"tDiffuse\",this.uniforms=i._46.clone(e.uniforms),this.material=new i._35({defines:e.defines||{},uniforms:this.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader}),this.renderToScreen=!1,this.enabled=!0,this.needsSwap=!0,this.clear=!1,this.camera=new i._14(-1,1,1,-1,0,1),this.scene=new i._31,this.quad=new i._3(new i._17(2,2),null),this.scene.add(this.quad)},i.ShaderPass.prototype={render:function(e,t,r,i){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=r),this.quad.material=this.material,this.renderToScreen?e.render(this.scene,this.camera):e.render(this.scene,this.camera,t,this.clear)}},t.a=i.ShaderPass},function(e,t,r){\"use strict\";var i=r(0);i.ShaderToon={toon1:{uniforms:{uDirLightPos:{value:new i._49},uDirLightColor:{value:new i.m(15658734)},uAmbientLightColor:{value:new i.m(328965)},uBaseColor:{value:new i.m(16777215)}},vertexShader:[\"varying vec3 vNormal;\",\"varying vec3 vRefract;\",\"void main() {\",\"vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\",\"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\"vec3 worldNormal = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\",\"vNormal = normalize( normalMatrix * normal );\",\"vec3 I = worldPosition.xyz - cameraPosition;\",\"vRefract = refract( normalize( I ), worldNormal, 1.02 );\",\"gl_Position = projectionMatrix * mvPosition;\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform vec3 uBaseColor;\",\"uniform vec3 uDirLightPos;\",\"uniform vec3 uDirLightColor;\",\"uniform vec3 uAmbientLightColor;\",\"varying vec3 vNormal;\",\"varying vec3 vRefract;\",\"void main() {\",\"float directionalLightWeighting = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);\",\"vec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;\",\"float intensity = smoothstep( - 0.5, 1.0, pow( length(lightWeighting), 20.0 ) );\",\"intensity += length(lightWeighting) * 0.2;\",\"float cameraWeighting = dot( normalize( vNormal ), vRefract );\",\"intensity += pow( 1.0 - length( cameraWeighting ), 6.0 );\",\"intensity = intensity * 0.2 + 0.3;\",\"if ( intensity < 0.50 ) {\",\"gl_FragColor = vec4( 2.0 * intensity * uBaseColor, 1.0 );\",\"} else {\",\"gl_FragColor = vec4( 1.0 - 2.0 * ( 1.0 - intensity ) * ( 1.0 - uBaseColor ), 1.0 );\",\"}\",\"}\"].join(\"\\n\")},toon2:{uniforms:{uDirLightPos:{value:new i._49},uDirLightColor:{value:new i.m(15658734)},uAmbientLightColor:{value:new i.m(328965)},uBaseColor:{value:new i.m(15658734)},uLineColor1:{value:new i.m(8421504)},uLineColor2:{value:new i.m(0)},uLineColor3:{value:new i.m(0)},uLineColor4:{value:new i.m(0)}},vertexShader:[\"varying vec3 vNormal;\",\"void main() {\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"vNormal = normalize( normalMatrix * normal );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform vec3 uBaseColor;\",\"uniform vec3 uLineColor1;\",\"uniform vec3 uLineColor2;\",\"uniform vec3 uLineColor3;\",\"uniform vec3 uLineColor4;\",\"uniform vec3 uDirLightPos;\",\"uniform vec3 uDirLightColor;\",\"uniform vec3 uAmbientLightColor;\",\"varying vec3 vNormal;\",\"void main() {\",\"float camera = max( dot( normalize( vNormal ), vec3( 0.0, 0.0, 1.0 ) ), 0.4);\",\"float light = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);\",\"gl_FragColor = vec4( uBaseColor, 1.0 );\",\"if ( length(uAmbientLightColor + uDirLightColor * light) < 1.00 ) {\",\"gl_FragColor *= vec4( uLineColor1, 1.0 );\",\"}\",\"if ( length(uAmbientLightColor + uDirLightColor * camera) < 0.50 ) {\",\"gl_FragColor *= vec4( uLineColor2, 1.0 );\",\"}\",\"}\"].join(\"\\n\")},hatching:{uniforms:{uDirLightPos:{value:new i._49},uDirLightColor:{value:new i.m(15658734)},uAmbientLightColor:{value:new i.m(328965)},uBaseColor:{value:new i.m(16777215)},uLineColor1:{value:new i.m(0)},uLineColor2:{value:new i.m(0)},uLineColor3:{value:new i.m(0)},uLineColor4:{value:new i.m(0)}},vertexShader:[\"varying vec3 vNormal;\",\"void main() {\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"vNormal = normalize( normalMatrix * normal );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform vec3 uBaseColor;\",\"uniform vec3 uLineColor1;\",\"uniform vec3 uLineColor2;\",\"uniform vec3 uLineColor3;\",\"uniform vec3 uLineColor4;\",\"uniform vec3 uDirLightPos;\",\"uniform vec3 uDirLightColor;\",\"uniform vec3 uAmbientLightColor;\",\"varying vec3 vNormal;\",\"void main() {\",\"float directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);\",\"vec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;\",\"gl_FragColor = vec4( uBaseColor, 1.0 );\",\"if ( length(lightWeighting) < 1.00 ) {\",\"if ( mod(gl_FragCoord.x + gl_FragCoord.y, 10.0) == 0.0) {\",\"gl_FragColor = vec4( uLineColor1, 1.0 );\",\"}\",\"}\",\"if ( length(lightWeighting) < 0.75 ) {\",\"if (mod(gl_FragCoord.x - gl_FragCoord.y, 10.0) == 0.0) {\",\"gl_FragColor = vec4( uLineColor2, 1.0 );\",\"}\",\"}\",\"if ( length(lightWeighting) < 0.50 ) {\",\"if (mod(gl_FragCoord.x + gl_FragCoord.y - 5.0, 10.0) == 0.0) {\",\"gl_FragColor = vec4( uLineColor3, 1.0 );\",\"}\",\"}\",\"if ( length(lightWeighting) < 0.3465 ) {\",\"if (mod(gl_FragCoord.x - gl_FragCoord.y - 5.0, 10.0) == 0.0) {\",\"gl_FragColor = vec4( uLineColor4, 1.0 );\",\"}\",\"}\",\"}\"].join(\"\\n\")},dotted:{uniforms:{uDirLightPos:{value:new i._49},uDirLightColor:{value:new i.m(15658734)},uAmbientLightColor:{value:new i.m(328965)},uBaseColor:{value:new i.m(16777215)},uLineColor1:{value:new i.m(0)}},vertexShader:[\"varying vec3 vNormal;\",\"void main() {\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"vNormal = normalize( normalMatrix * normal );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform vec3 uBaseColor;\",\"uniform vec3 uLineColor1;\",\"uniform vec3 uLineColor2;\",\"uniform vec3 uLineColor3;\",\"uniform vec3 uLineColor4;\",\"uniform vec3 uDirLightPos;\",\"uniform vec3 uDirLightColor;\",\"uniform vec3 uAmbientLightColor;\",\"varying vec3 vNormal;\",\"void main() {\",\"float directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);\",\"vec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;\",\"gl_FragColor = vec4( uBaseColor, 1.0 );\",\"if ( length(lightWeighting) < 1.00 ) {\",\"if ( ( mod(gl_FragCoord.x, 4.001) + mod(gl_FragCoord.y, 4.0) ) > 6.00 ) {\",\"gl_FragColor = vec4( uLineColor1, 1.0 );\",\"}\",\"}\",\"if ( length(lightWeighting) < 0.50 ) {\",\"if ( ( mod(gl_FragCoord.x + 2.0, 4.001) + mod(gl_FragCoord.y + 2.0, 4.0) ) > 6.00 ) {\",\"gl_FragColor = vec4( uLineColor1, 1.0 );\",\"}\",\"}\",\"}\"].join(\"\\n\")}},t.a=i.ShaderToon},function(e,t,r){\"use strict\";var i=r(0);i.TechnicolorShader={uniforms:{tDiffuse:{type:\"t\",value:null}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"void main() {\",\"vec4 tex = texture2D( tDiffuse, vec2( vUv.x, vUv.y ) );\",\"vec4 newTex = vec4(tex.r, (tex.g + tex.b) * .5, (tex.g + tex.b) * .5, 1.0);\",\"gl_FragColor = newTex;\",\"}\"].join(\"\\n\")},t.a=i.TechnicolorShader},function(e,t,r){\"use strict\";var i=r(0);i.TexturePass=function(e,t){void 0===i.CopyShader&&console.error(\"THREE.TexturePass relies on THREE.CopyShader\");var r=i.CopyShader;this.uniforms=i._46.clone(r.uniforms),this.uniforms.opacity.value=void 0!==t?t:1,this.uniforms.tDiffuse.value=e,this.material=new i._35({uniforms:this.uniforms,vertexShader:r.vertexShader,fragmentShader:r.fragmentShader}),this.enabled=!0,this.needsSwap=!1,this.camera=new i._14(-1,1,1,-1,0,1),this.scene=new i._31,this.quad=new i._3(new i._17(2,2),null),this.scene.add(this.quad)},i.TexturePass.prototype={render:function(e,t,r,i){this.quad.material=this.material,e.render(this.scene,this.camera,r)}},t.a=i.TexturePass},function(e,t,r){\"use strict\";var i=r(0);i.ToneMapShader={uniforms:{tDiffuse:{type:\"t\",value:null},averageLuminance:{type:\"f\",value:1},luminanceMap:{type:\"t\",value:null},maxLuminance:{type:\"f\",value:16},middleGrey:{type:\"f\",value:.6}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"uniform float middleGrey;\",\"uniform float maxLuminance;\",\"#ifdef ADAPTED_LUMINANCE\",\"uniform sampler2D luminanceMap;\",\"#else\",\"uniform float averageLuminance;\",\"#endif\",\"const vec3 LUM_CONVERT = vec3(0.299, 0.587, 0.114);\",\"vec3 ToneMap( vec3 vColor ) {\",\"#ifdef ADAPTED_LUMINANCE\",\"float fLumAvg = texture2D(luminanceMap, vec2(0.5, 0.5)).r;\",\"#else\",\"float fLumAvg = averageLuminance;\",\"#endif\",\"float fLumPixel = dot(vColor, LUM_CONVERT);\",\"float fLumScaled = (fLumPixel * middleGrey) / fLumAvg;\",\"float fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (maxLuminance * maxLuminance)))) / (1.0 + fLumScaled);\",\"return fLumCompressed * vColor;\",\"}\",\"void main() {\",\"vec4 texel = texture2D( tDiffuse, vUv );\",\"gl_FragColor = vec4( ToneMap( texel.xyz ), texel.w );\",\"}\"].join(\"\\n\")},t.a=i.ToneMapShader},function(e,t,r){\"use strict\";var i=r(0);i.TriangleBlurShader={uniforms:{texture:{type:\"t\",value:null},delta:{type:\"v2\",value:new i._48(1,1)}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"#define ITERATIONS 10.0\",\"uniform sampler2D texture;\",\"uniform vec2 delta;\",\"varying vec2 vUv;\",\"float random( vec3 scale, float seed ) {\",\"return fract( sin( dot( gl_FragCoord.xyz + seed, scale ) ) * 43758.5453 + seed );\",\"}\",\"void main() {\",\"vec4 color = vec4( 0.0 );\",\"float total = 0.0;\",\"float offset = random( vec3( 12.9898, 78.233, 151.7182 ), 0.0 );\",\"for ( float t = -ITERATIONS; t <= ITERATIONS; t ++ ) {\",\"float percent = ( t + offset - 0.5 ) / ITERATIONS;\",\"float weight = 1.0 - abs( percent );\",\"color += texture2D( texture, vUv + delta * percent ) * weight;\",\"total += weight;\",\"}\",\"gl_FragColor = color / total;\",\"}\"].join(\"\\n\")},t.a=i.TriangleBlurShader},function(e,t,r){\"use strict\";var i=r(0);i.UnpackDepthRGBAShader={uniforms:{tDiffuse:{type:\"t\",value:null},opacity:{type:\"f\",value:1}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform float opacity;\",\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"float unpackDepth( const in vec4 rgba_depth ) {\",\"const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\",\"float depth = dot( rgba_depth, bit_shift );\",\"return depth;\",\"}\",\"void main() {\",\"float depth = 1.0 - unpackDepth( texture2D( tDiffuse, vUv ) );\",\"gl_FragColor = opacity * vec4( vec3( depth ), 1.0 );\",\"}\"].join(\"\\n\")},t.a=i.UnpackDepthRGBAShader},function(e,t,r){\"use strict\";var i=r(0);i.VerticalBlurShader={uniforms:{tDiffuse:{type:\"t\",value:null},v:{type:\"f\",value:1/512}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"uniform float v;\",\"varying vec2 vUv;\",\"void main() {\",\"vec4 sum = vec4( 0.0 );\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * v ) ) * 0.051;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * v ) ) * 0.0918;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * v ) ) * 0.12245;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * v ) ) * 0.1531;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * v ) ) * 0.1531;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * v ) ) * 0.12245;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * v ) ) * 0.0918;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * v ) ) * 0.051;\",\"gl_FragColor = sum;\",\"}\"].join(\"\\n\")},t.a=i.VerticalBlurShader},function(e,t,r){\"use strict\";var i=r(0);i.VerticalTiltShiftShader={uniforms:{tDiffuse:{type:\"t\",value:null},v:{type:\"f\",value:1/512},r:{type:\"f\",value:.35}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"uniform float v;\",\"uniform float r;\",\"varying vec2 vUv;\",\"void main() {\",\"vec4 sum = vec4( 0.0 );\",\"float vv = v * abs( r - vUv.y );\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\",\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\",\"gl_FragColor = sum;\",\"}\"].join(\"\\n\")},t.a=i.VerticalTiltShiftShader},function(e,t,r){\"use strict\";var i=r(0);i.VignetteShader={uniforms:{tDiffuse:{type:\"t\",value:null},offset:{type:\"f\",value:1},darkness:{type:\"f\",value:1}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform float offset;\",\"uniform float darkness;\",\"uniform sampler2D tDiffuse;\",\"varying vec2 vUv;\",\"void main() {\",\"vec4 texel = texture2D( tDiffuse, vUv );\",\"vec2 uv = ( vUv - vec2( 0.5 ) ) * vec2( offset );\",\"gl_FragColor = vec4( mix( texel.rgb, vec3( 1.0 - darkness ), dot( uv, uv ) ), texel.a );\",\"}\"].join(\"\\n\")},t.a=i.VignetteShader},function(e,t,r){\"use strict\";var i=r(0);i.SobelOperatorShader={uniforms:{tDiffuse:{value:null},resolution:{value:new i._48}},vertexShader:[\"varying vec2 vUv;\",\"void main() {\",\"vUv = uv;\",\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\"}\"].join(\"\\n\"),fragmentShader:[\"uniform sampler2D tDiffuse;\",\"uniform vec2 resolution;\",\"varying vec2 vUv;\",\"void main() {\",\"vec2 texel = vec2( 1.0 / resolution.x, 1.0 / resolution.y );\",\"const mat3 Gx = mat3( -1, -2, -1, 0, 0, 0, 1, 2, 1 );\",\"const mat3 Gy = mat3( -1, 0, 1, -2, 0, 2, -1, 0, 1 );\",\"float tx0y0 = texture2D( tDiffuse, vUv + texel * vec2( -1, -1 ) ).r;\",\"float tx0y1 = texture2D( tDiffuse, vUv + texel * vec2( -1,  0 ) ).r;\",\"float tx0y2 = texture2D( tDiffuse, vUv + texel * vec2( -1,  1 ) ).r;\",\"float tx1y0 = texture2D( tDiffuse, vUv + texel * vec2(  0, -1 ) ).r;\",\"float tx1y1 = texture2D( tDiffuse, vUv + texel * vec2(  0,  0 ) ).r;\",\"float tx1y2 = texture2D( tDiffuse, vUv + texel * vec2(  0,  1 ) ).r;\",\"float tx2y0 = texture2D( tDiffuse, vUv + texel * vec2(  1, -1 ) ).r;\",\"float tx2y1 = texture2D( tDiffuse, vUv + texel * vec2(  1,  0 ) ).r;\",\"float tx2y2 = texture2D( tDiffuse, vUv + texel * vec2(  1,  1 ) ).r;\",\"float valueGx = Gx[0][0] * tx0y0 + Gx[1][0] * tx1y0 + Gx[2][0] * tx2y0 + \",\"Gx[0][1] * tx0y1 + Gx[1][1] * tx1y1 + Gx[2][1] * tx2y1 + \",\"Gx[0][2] * tx0y2 + Gx[1][2] * tx1y2 + Gx[2][2] * tx2y2; \",\"float valueGy = Gy[0][0] * tx0y0 + Gy[1][0] * tx1y0 + Gy[2][0] * tx2y0 + \",\"Gy[0][1] * tx0y1 + Gy[1][1] * tx1y1 + Gy[2][1] * tx2y1 + \",\"Gy[0][2] * tx0y2 + Gy[1][2] * tx1y2 + Gy[2][2] * tx2y2; \",\"float G = sqrt( ( valueGx * valueGx ) + ( valueGy * valueGy ) );\",\"gl_FragColor = vec4( vec3( G ), 1 );\",\"}\"].join(\"\\n\")},t.a=i.SobelOperatorShader}])});","import { Group, Box3 } from 'three';\nimport BasicLights from './Lights.js';\nimport Car from './Car';\nimport Earth from './Earth';\nimport Garage from './Garage';\nimport Lightbulb from './Lightbulb';\n\nexport default class SeedScene extends Group {\n  constructor() {\n    super();\n\n    this.speed = 0;\n    this.lose = false;\n    this.playing = true;\n\n    window.addEventListener('keydown', this.listenKeys.bind(this));\n\n    this.car = new Car();\n    const earth = new Earth();\n    this.garage = new Garage();\n    const lightbulb = new Lightbulb();\n    const lights = new BasicLights();\n\n    this.add(lights, this.car.mesh, earth.mesh, this.garage.mesh, lightbulb.mesh);\n  }\n\n  update() {\n    this.car.go(this.speed);\n  }\n\n  checkForLose() {\n    const carBox = new Box3().setFromObject(this.car.mesh);\n    const rightWallBox = new Box3().setFromObject(this.garage.rightWall);\n\n    if (carBox.intersectsBox(rightWallBox) || this.car.mesh.position.x > window.innerWidth / 4 + 22) {\n      this.speed = 0;\n      this.lose = true;\n      return true;\n    }\n  }\n\n  checkForWin() {\n    const carBox = new Box3().setFromObject(this.car.mesh);\n    const garageBox = new Box3().setFromObject(this.garage.innerBox);\n\n    if (garageBox.containsBox(carBox)) {\n      return true;\n    }\n  }\n\n  listenKeys(event) {\n    if (!this.playing) return;\n\n    if (event.keyCode === 39) {\n      this.speed += .1;\n\n    } else if (event.keyCode === 37) {\n      this.speed -= .1;\n    }\n  }\n}\n","import { Group, HemisphereLight, DirectionalLight } from 'three';\n\nexport default class BasicLights extends Group {\n  constructor() {\n    super();\n    const innerWidth = window.innerWidth;\n\n    const hemiLight = new HemisphereLight( 0xffffbb, 0x080820, 1.15 );\n\n\n    const light = new DirectionalLight( 0xffffff, .3);\n    light.position.set(-innerWidth / 4 + 110, 40, 0);\n\n    light.shadow.camera.far = 100;\n    light.shadow.camera.top = -10;\n    light.shadow.camera.bottom = -100;\n\n    light.castShadow = true;\n\n    this.add(hemiLight, light);\n  }\n}\n","import {Group, Object3D, BoxGeometry, CylinderGeometry, MeshLambertMaterial, Mesh} from 'three';\n\nexport default class Car extends Group {\n    constructor() {\n        super();\n\n        const innerWidth = window.innerWidth;\n\n        this.mesh = new Object3D();\n        this.mesh.name = 'car';\n        this.body = new Object3D();\n        this.body.name = 'body';\n        this.mesh.position.y = 8;\n        this.mesh.position.x = innerWidth / 4 - 45;\n        this.wheelRadius = 4;\n        this.tilt = 0;\n        this.maxTilt = .1;\n\n\n        // car basis\n        const basisGeo = new BoxGeometry(45, 10, 10);\n        basisGeo.vertices[0].x = 20;\n        basisGeo.vertices[1].x = 20;\n        const basisMat = new MeshLambertMaterial({color: 0x1E90FF});\n        const basis = new Mesh(basisGeo, basisMat);\n        basis.castShadow = true;\n\n        // car head\n        const headGeo = new BoxGeometry(30, 5, 10, 1, 1, 1);\n        headGeo.vertices[0].y = 3.5;\n        headGeo.vertices[1].y = 3.5;\n        headGeo.vertices[3].x = 19;\n        headGeo.vertices[2].x = 19;\n        headGeo.vertices[4].x = -10;\n        headGeo.vertices[5].x = -10;\n        const head = new Mesh(headGeo, basisMat);\n        head.position.y = 7.5;\n        head.position.x = 1;\n        head.castShadow = true;\n\n        // head lamps\n        const headlamps = new Object3D();\n        const leftHeadlampGeo = new BoxGeometry(2, 2, 2);\n        leftHeadlampGeo.vertices[2].x = 0;\n        leftHeadlampGeo.vertices[3].x = 0;\n        const leftHeadlampMat = new MeshLambertMaterial({color: 0xffffff});\n        const leftHeadlamp = new Mesh(leftHeadlampGeo, leftHeadlampMat);\n        leftHeadlamp.castShadow = true;\n        const rightHeadlamp = leftHeadlamp.clone();\n        rightHeadlamp.position.z = 8.1;\n        \n\n        headlamps.add(leftHeadlamp, rightHeadlamp);\n        headlamps.position.set(-22,4.1,-4.1);\n\n        // wheels\n        const wheels = new Object3D();\n        const wheel = new Object3D();\n\n        const tireGeo = new CylinderGeometry(this.wheelRadius, this.wheelRadius, .5, 20, 5);\n        const tireMat = new MeshLambertMaterial({color: 0x000000});\n        const tire = new Mesh(tireGeo, tireMat);\n\n        const diskGeo = new CylinderGeometry(this.wheelRadius - .5, this.wheelRadius - 1, .5, 8, 1);\n        const diskMat = new MeshLambertMaterial({color: 0xffffff});\n        const disk = new Mesh(diskGeo, diskMat);\n        disk.position.y = -.5;\n\n        wheel.add(tire, disk);\n\n        const frWheel = wheel.clone();\n        frWheel.rotateX(Math.PI / 2);\n        frWheel.position.set(0, 0, -5.1);\n\n        const flWheel = wheel.clone();\n        flWheel.rotateX(-Math.PI / 2);\n        flWheel.position.set(0, 0, 5.1);\n\n        const brWheel = wheel.clone();\n        brWheel.rotateX(Math.PI / 2);\n        brWheel.position.set(30, 0, -5.1);\n\n        const blWheel = wheel.clone();\n        blWheel.rotateX(-Math.PI / 2);\n        blWheel.position.set(30, 0, 5.1);\n\n        wheels.add(flWheel, frWheel, brWheel, blWheel);\n        wheels.position.y = -4;\n        wheels.position.x = -15;\n\n        this.body.add(basis, head, headlamps);\n        this.mesh.add(this.body, wheels);\n    }\n\n    go(speed) {\n        if (speed !== 0) {\n            this.tilt = Math.abs(speed / 10) > this.maxTilt ? this.maxTilt * Math.sign(speed) : speed / 10;\n            this.body.rotation.z = - this.tilt;\n            this.mesh.position.x -= speed;\n        \n            this.mesh.children[1].children.forEach(wheel => {\n                const angle = (speed / this.wheelRadius);\n                wheel.rotateY(angle);\n            })\n        }\n    }\n}\n","import {Object3D, Group, Mesh, BoxGeometry, MeshLambertMaterial} from 'three';\n\nexport default class Earth extends Group {\n    constructor() {\n        super();\n\n        const {innerWidth, innerHeight} = window;\n\n        this. mesh = new Object3D();\n        this.mesh.name = 'earth';\n\n        const grassGeo = new BoxGeometry(innerWidth, 5, 30);\n        const grassMat = new MeshLambertMaterial({color: 0x009900});\n        const grass = new Mesh(grassGeo, grassMat);\n        grass.receiveShadow = true;\n        grass.position.y = -2.5;\n\n        const primingGeo = new BoxGeometry(innerWidth, innerHeight, 25);\n        const primingMat = new MeshLambertMaterial({color: 0x8B4513});\n        const priming = new Mesh(primingGeo, primingMat);\n        priming.position.y = - 5 - innerHeight / 2;\n\n        this.mesh.add(grass, priming);\n    }\n}\n","import {Group, Object3D, Mesh, BoxGeometry, MeshLambertMaterial} from  'three';\n\nexport default class Garage extends Group {\n    constructor() {\n        super();\n\n        this.mesh = new Object3D();\n        this.mesh.name = 'garage';\n        this.innerBox = new Object3D();\n        this.mesh.position.x = - innerWidth / 4 + 90;\n\n        const pillarGeo = new BoxGeometry(4, 50, 4);\n        const pillarMat = new MeshLambertMaterial({color: 0x777777});\n        const pillar = new Mesh(pillarGeo, pillarMat);\n        pillar.position.set(48, 25, -13);\n\n        const backWallGeo = new BoxGeometry(50, 50, 4);\n        const backWall = new Mesh(backWallGeo, pillarMat);\n        backWall.position.set(25, 25, 13);\n        \n        const rightWallGeo = new BoxGeometry(4, 50, 25);\n        this.rightWall = new Mesh(rightWallGeo, pillarMat);\n        this.rightWall.position.y = 25;\n\n        const frontWallMat = new MeshLambertMaterial({color: 0xADD8E6, opacity: .3, transparent: true});\n        const frontWall = new Mesh(backWallGeo, frontWallMat);\n        frontWall.position.set(25, 25, -13);\n        \n        const roofGeo = new BoxGeometry(60, 4, 34);\n        const roofMat = new MeshLambertMaterial({color: 0x222222});\n        const roof = new Mesh(roofGeo, roofMat);\n        roof.position.y = 50;\n        roof.position.x = 24;\n\n        this.innerBox.add(pillar, backWall, frontWall, this.rightWall);\n        this.mesh.add(pillar, roof, this.innerBox);\n    }\n}\n","import {Group, Mesh, Object3D, SphereGeometry, CylinderGeometry, MeshBasicMaterial, MeshLambertMaterial} from 'three';\n\nexport default class LightBulb extends Group {\n    constructor() {\n        super();\n\n        const innerWidth = window.innerWidth;\n\n        this.mesh = new Object3D();\n        this.mesh.name = 'lightbulb';\n        this.mesh.position.set(-innerWidth / 4 + 110, 42, 0);\n\n        const bulbGeo = new SphereGeometry(3, 10, 10);\n        const bulbMat = new MeshBasicMaterial({color: 0xFFFF00});\n        const bulb = new Mesh(bulbGeo, bulbMat);\n\n        const wireGeo = new CylinderGeometry(.5, .5, 5, 5);\n        const wireMat = new MeshLambertMaterial({color: 0x000000});\n        const wire = new Mesh(wireGeo, wireMat);\n        wire.position.y = 4;\n\n        this.mesh.add(bulb, wire);\n    }\n}\n"],"sourceRoot":""}